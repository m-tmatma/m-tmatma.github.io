msgid ""
msgstr ""
"Project-Id-Version: \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2007-10-10 14:05+0000\n"
"PO-Revision-Date: 2007-10-20 14:41+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: appa-quickstart.xml:3
#, no-c-format
msgid "Subversion Quick-Start Guide"
msgstr "Subversion クイックスタートガイド"

#. Tag: para
#: appa-quickstart.xml:6
#, no-c-format
msgid "If you're eager to get Subversion up and running (and you enjoy learning by experimentation), this chapter will show you how to create a repository, import code, and then check it back out again as a working copy. Along the way, we give links to the relevant chapters of this book."
msgstr ""

#. Tag: para
#: appa-quickstart.xml:13
#, no-c-format
msgid "If you're new to the entire concept of version control or to the <quote>copy-modify-merge</quote> model used by both CVS and Subversion, then you should read <xref linkend=\"svn.basic\"/> before going any further."
msgstr "バージョン管理モデルや CVS と Subversion の両者で利用される <quote>コピー・修正・マージ</quote>モデルについて全く聞いたことがない のであればまず<xref linkend=\"svn.basic\"/>を読んでから先に進んだほうが よいでしょう。"

#. Tag: title
#: appa-quickstart.xml:25
#, no-c-format
msgid "Installing Subversion"
msgstr "Subversionのインストール"

#. Tag: para
#: appa-quickstart.xml:27
#, no-c-format
msgid "Subversion is built on a portability layer called APR&mdash;the Apache Portable Runtime library. The APR library provides all the interfaces that Subversion needs to function on different operating systems: disk access, network access, memory management, and so on. While Subversion is able to use Apache as one of its network server programs, its dependence on APR <emphasis>does not</emphasis> mean that Apache is a required component. APR is a standalone library useable by any application. It does mean, however, that like Apache, Subversion clients and servers run on any operating system that the Apache httpd server runs on: Windows, Linux, all flavors of BSD, Mac OS X, Netware, and others."
msgstr "Subversion は APR (Apache Portable Runtime ライブラリ) と呼ばれる移植せいのある層上に構築されています。APR は異なるオペレーティングシステム上でSubversionが機能するために必要なすべてのインターフェース(ディスクアクセス、ネットワークアクセス、メモリ管理など)を提供します。いっぽう Subversion はApacheをネットワークサーバープログラムのひとつとして利用できます。APRに依存していることはApache が必須コンポーネントであることを<emphasis>意味しません</emphasis>。APRはアプリケーションから利用可能な単独のライブラリです。しかし、Subversion クライアントとサーバーは Apache httpd サーバーが動作可能などんなオペレーティングシステム(Windows、 Linux、すべてのBSD、Mac OS X、Netwareなど) で動作させることができることを意味します。"

#. Tag: para
#: appa-quickstart.xml:40
#, no-c-format
msgid "The easiest way to get Subversion is to download a binary package built for your operating system. Subversion's website (<ulink url=\"http://subversion.tigris.org\"></ulink>) often has these packages available for download, posted by volunteers. The site usually contains graphical installer packages for users of Microsoft operating systems. If you run a Unix-like operating system, you can use your system's native package distribution system (RPMs, DEBs, the ports tree, etc.) to get Subversion."
msgstr "Subversionを手に入れる一番簡単な方法は自分のオペレーティング システム用のバイナリパッケージをダウンロードすることです。Subversionの ウェブサイト(<ulink url=\"http://subversion.tigris.org\"></ulink>) には、ボランティアによって作られたダウンロード可能なパッケージが たくさんあります。このサイトには普通、Microsoft Windows のための グラフィックインストーラパッケージもあります。Unix系のオペレーティング システムを使っているなら、(RPM, DEB, ports tree などといった、)システム 固有のパッケージ配布システムを使うこともできます。"

#. Tag: para
#: appa-quickstart.xml:50
#, no-c-format
msgid "Alternately, you can build Subversion directly from source code, though it's not always an easy task. (If you're not experienced at building open source software packages, you're probably better off downloading a binary distribution instead!) From the Subversion website, download the latest source-code release. After unpacking it, follow the instructions in the <filename>INSTALL</filename> file to build it. Note that a released source package may not contain everything you need to build a command-line client capable of talking to a remote repository. Starting with Subversion 1.4 and later, the libraries Subversion depends on (apr, apr-util, and neon) are distributed in a separate source package suffixed with <filename>-deps</filename>. These libraries are now common enough that they may already be installed on your system. If not, you'll need to unpack the dependency package into the same directory where you unpacked the main Subversion source. Regardless, it's possible that you may want to fetch other optional dependencies such as Berkeley DB and possibly Apache httpd. If you want to do a complete build, make sure you have all of the packages documented in the <filename>INSTALL</filename> file."
msgstr ""

#. Tag: para
#: appa-quickstart.xml:72
#, no-c-format
msgid "If you're one of those folks that likes to use bleeding-edge software, you can also get the Subversion source code from the Subversion repository in which it lives. Obviously, you'll need to already have a Subversion client on hand to do this. But once you do, you can check out a working copy of the Subversion source repository from <ulink url=\"http://svn.collab.net/repos/svn/trunk/\"></ulink>:"
msgstr "もしあなたが、bleeding-edge ソフトウェアを使うのが好きな人なら、Subversion のリポジトリからソースコードを取得して最新のSubversion を手に入れることができます。もしそうしたい場合、明らかにSubversion クライアントを既に手に入れている必要があります。でもいったんSubversion クライアントを手に入れたら、次のSubversion ソースリポジトリから作業コピーをチェックアウトすることができます。<ulink url=\"http://svn.collab.net/repos/svn/trunk/\"></ulink>:"

#. Tag: para
#: appa-quickstart.xml:79
#, no-c-format
msgid "Note that the URL checked out in the example above ends not with <literal>svn</literal>, but with a subdirectory thereof called <literal>trunk</literal>. See our discussion of Subversion's branching and tagging model for the reasoning behind this."
msgstr "この例でチェックアウトするURLは、<literal>svn</literal>で終わるのでは なく、<literal>trunk</literal>というサブディレクトリになって います。この理由については、Subversionのブランチとタグモデルの議論を 参照してください。"

#. Tag: screen
#: appa-quickstart.xml:86
#, no-c-format
msgid ""
"$ svn checkout http://svn.collab.net/repos/svn/trunk subversion\n"
"A    subversion/HACKING\n"
"A    subversion/INSTALL\n"
"A    subversion/README\n"
"A    subversion/autogen.sh\n"
"A    subversion/build.conf\n"
"&hellip;"
msgstr ""
"$ svn checkout http://svn.collab.net/repos/svn/trunk subversion\n"
"A    subversion/HACKING\n"
"A    subversion/INSTALL\n"
"A    subversion/README\n"
"A    subversion/autogen.sh\n"
"A    subversion/build.conf\n"
"&hellip;"

#. Tag: para
#: appa-quickstart.xml:88
#, no-c-format
msgid "The above command will create a working copy of the latest (unreleased) Subversion source code into a subdirectory named <filename>subversion</filename> in your current working directory. You can adjust that last argument as you see fit. Regardless of what you call the new working copy directory, though, after this operation completes, you will now have the Subversion source code. Of course, you will still need to fetch a few helper libraries (apr, apr-util, etc.)&mdash;see the <filename>INSTALL</filename> file in the top level of the working copy for details."
msgstr "上のコマンドは、最新バージョンの(まだリリースされていない) Subversionのソースコード を、現在の作業ディレクトリに<filename>subversion</filename> という 名前のサブディレクトリを作りチェックアウトします。 明らかに、最後の引数は、個別の環境に応じて調整することができます。 新しい作業コピーディレクトリをどのように呼ぼうと、この操作が完了すれば Subversionのソースコードを取得できています。もちろん、他にもいくつかの 補助的なライブラリが必要になります(apr, apr-util, などなど)&mdash; 詳細は作業コピーの最上位にある<filename>INSTALL</filename>ファイルを見てください。"

#. Tag: title
#: appa-quickstart.xml:106
#, no-c-format
msgid "High-speed Tutorial"
msgstr "高速チュートリアル"

#. Tag: quote
#: appa-quickstart.xml:109
#, no-c-format
msgid "Please make sure your seat backs are in their full, upright position, and that your tray tables are stored. Flight attendants, prepare for take-off&hellip;."
msgstr ""

#. Tag: para
#: appa-quickstart.xml:114
#, no-c-format
msgid "What follows is a quick tutorial that walks you through some basic Subversion configuration and operation. When you finish it, you should have a basic understanding of Subversion's typical usage."
msgstr ""

#. Tag: para
#: appa-quickstart.xml:120
#, no-c-format
msgid "The examples used in this appendix assume that you have <command>svn</command>, the Subversion command-line client, and <command>svnadmin</command>, the administrative tool, ready to go on a Unix-like operating system. (This tutorial also works at the Windows commandline prompt, assuming you make some obvious tweaks.) We also assume you are using Subversion 1.2 or later (run <command>svn --version</command> to check.)"
msgstr "appendix の例では Subversion のコマンドラインクライアントである<command>svn</command>、管理用ツールである <command>svnadmin</command>が利用可能な形で手元にあることを前提とします。 そしてUnixライクのオペレーティングシステム上で作業を続けることを前提とします。(そのチュートリアルはWindows コマンドプロンプトでも動しますが、明らかな調整をすることを仮定します) さらに Subversion 1.2 かそれ以降を利用していることも仮定します (これを確認するには<command>svn --version</command>を実行してください)。"

#. Tag: para
#: appa-quickstart.xml:130
#, no-c-format
msgid "Subversion stores all versioned data in a central repository. To begin, create a new repository:"
msgstr "Subversion はすべてのバージョン化されたデータを中心的なリポジトリに格納します。最初に新しいリポジトリを作りましょう:"

#. Tag: screen
#: appa-quickstart.xml:133
#, no-c-format
msgid ""
"$ svnadmin create /path/to/repos\n"
"$ ls /path/to/repos\n"
"conf/  dav/  db/  format  hooks/  locks/  README.txt"
msgstr ""
"$ svnadmin create /path/to/repos\n"
"$ ls /path/to/repos\n"
"conf/  dav/  db/  format  hooks/  locks/  README.txt"

#. Tag: para
#: appa-quickstart.xml:135
#, no-c-format
msgid "This command creates a new directory <filename>/path/to/repos</filename> which contains a Subversion repository. This new directory contains (among other things) a collection of database files. You won't see your versioned files if you peek inside. For more information about repository creation and maintenance, see <xref linkend=\"svn.reposadmin\"/>."
msgstr "このコマンドはSubversion リポジトリを含む新しいディレクトリ <filename>/path/to/repos</filename>を作ります。 この新しいディレクトリには(他のファイルに混じって)データベースファイルの 集まりを含んでいます。内部を詳細に知る必要がないのであれば このバージョン化されたファイルを見る必要はないでしょう。 リポジトリ生成と保守についてのより詳しい情報は <xref linkend=\"svn.reposadmin\"/>を見てください。"

#. Tag: para
#: appa-quickstart.xml:143
#, no-c-format
msgid "Subversion has no concept of a <quote>project</quote>. The repository is just a virtual versioned filesystem, a large tree that can hold anything you wish. Some administrators prefer to store only one project in a repository, and others prefer to store multiple projects in a repository by placing them into separate directories. The merits of each approach are discussed in <xref linkend=\"svn.reposadmin.projects.chooselayout\"/>. Either way, the repository only manages files and directories, so it's up to humans to interpret particular directories as <quote>projects</quote>. So while you might see references to projects throughout this book, keep in mind that we're only ever talking about some directory (or collection of directories) in the repository."
msgstr "Subversion には<quote>プロジェクト</quote>という概念はありません。 リポジトリは単なる仮想的にバージョン化されたファイルシステム であり、どんなデータも含むことのできる大きなツリー構造です。 管理者によってはひとつのリポジトリにひとつのプロジェクトだけを 入れることを好みますが、他の管理者はディレクトリを分割した形で 複数のプロジェクトを格納することを好みます。両者のメリット、 デメリットについては<xref linkend=\"svn.reposadmin.projects.chooselayout\"/> で議論します。どちらの方法でもリポジトリは単にファイルとディレクトリ を管理するだけなので、特定のディレクトリを<quote>プロジェクト</quote> であると解釈するかどうかは人間にまかされています。それでこの本をつうじて プロジェクトを参照するときには、リポジトリに存在する、いま言ったような形 のいくつかのディレクトリ(あるいはディレクトリの集まり)についてだけ話を することに注意してください。"

#. Tag: para
#: appa-quickstart.xml:157
#, fuzzy, no-c-format
msgid "In this example, we assume that you already have some sort of project (a collection of files and directories) that you wish to import into your newly created Subversion repository. Begin by organizing your data into a single directory called <filename>myproject</filename> (or whatever you wish). For reasons that will be clear later (see <xref linkend=\"svn.branchmerge\"/>), your project's tree structure should contain three top-level directories named <filename>branches</filename>, <filename>tags</filename>, and <filename>trunk</filename>. The <filename>trunk</filename> directory should contain all of your data, while <filename>branches</filename> and <filename>tags</filename> directories are empty:"
msgstr "この例では、新しく作った Subversion リポジトリにインポートを済ませた 何かのプロジェクト(ファイルとディレクトリの集まり)があるものと 仮定しています。このデータ内容は <filename>myproject</filename> という単一のディレクトリに編成されているものとしましょう( もちろん実際には好きな名前にすることができます)。 後で説明する理由により(<xref linkend=\"svn.branchmerge\"/> 参照)、ツリーの構造は<filename>branches</filename>, <filename>tags</filename>, そして <filename>trunk</filename>という 名前の三つの最上位ディレクトリを含む必要があります。 <filename>trunk</filename>ディレクトリはすべてのデータを含んでいる はずですが、<filename>branches</filename>と<filename>tags</filename> ディレクトリは空です:"

#. Tag: screen
#: appa-quickstart.xml:172
#, no-c-format
msgid ""
"/tmp/myproject/branches/\n"
"/tmp/myproject/tags/\n"
"/tmp/myproject/trunk/\n"
"                     foo.c\n"
"                     bar.c\n"
"                     Makefile\n"
"                     &hellip;"
msgstr ""
"/tmp/myproject/branches/\n"
"/tmp/myproject/tags/\n"
"/tmp/myproject/trunk/\n"
"                     foo.c\n"
"                     bar.c\n"
"                     Makefile\n"
"                     &hellip;"

#. Tag: para
#: appa-quickstart.xml:174
#, no-c-format
msgid "The <filename>branches</filename>, <filename>tags</filename>, and <filename>trunk</filename> subdirectories aren't actually required by Subversion. They're merely a popular convention that you'll most likely want to use later on."
msgstr "<filename>branches</filename>, <filename>tags</filename>, <filename>trunk</filename>サブディレクトリは実際には Subversion に 必要なものではありません。後で利用する時におそらくもっとも便利になる ように考えられた、よく利用される命名規約にすぎません。"

#. Tag: para
#: appa-quickstart.xml:179
#, fuzzy, no-c-format
msgid "Once you have your tree of data ready to go, import it into the repository with the <command>svn import</command> command (see <xref linkend=\"svn.tour.importing\"/>):"
msgstr "ツリー中にデータを作ったら<command>svn import</command> コマンドでリポジトリにインポートします(<xref linkend=\"svn.tour.other.import\"/>を見てください):"

#. Tag: screen
#: appa-quickstart.xml:183
#, no-c-format
msgid ""
"$ svn import /tmp/myproject file:///path/to/repos/myproject -m \"initial import\"\n"
"Adding         /tmp/myproject/branches\n"
"Adding         /tmp/myproject/tags\n"
"Adding         /tmp/myproject/trunk\n"
"Adding         /tmp/myproject/trunk/foo.c\n"
"Adding         /tmp/myproject/trunk/bar.c\n"
"Adding         /tmp/myproject/trunk/Makefile\n"
"&hellip;\n"
"Committed revision 1.\n"
"$"
msgstr ""
"$ svn import /tmp/myproject file:///path/to/repos/myproject -m \"initial import\"\n"
"Adding         /tmp/myproject/branches\n"
"Adding         /tmp/myproject/tags\n"
"Adding         /tmp/myproject/trunk\n"
"Adding         /tmp/myproject/trunk/foo.c\n"
"Adding         /tmp/myproject/trunk/bar.c\n"
"Adding         /tmp/myproject/trunk/Makefile\n"
"&hellip;\n"
"Committed revision 1.\n"
"$"

#. Tag: para
#: appa-quickstart.xml:185
#, no-c-format
msgid "Now the repository contains this tree of data. As mentioned earlier, you won't see your files by directly peeking into the repository; they're all stored within a database. But the repository's imaginary filesystem now contains a top-level directory named <filename>myproject</filename>, which in turn contains your data."
msgstr "これでリポジトリにツリーのデータが入りました。 すでに注意したように、リポジトリ中のファイルやディレクトリを詳しく 調べる必要はありません; すべてはデータベース中に格納されているもの だからです。しかしリポジトリの仮想的なファイルシステムを考えると、 いまの場合、最上位にディレクトリ<filename>myproject</filename>が あり、その下にあなたのデータが含まれている形になります。"

#. Tag: para
#: appa-quickstart.xml:192
#, no-c-format
msgid "Note that the original <filename>/tmp/myproject</filename> directory is unchanged; Subversion is unaware of it. (In fact, you can even delete that directory if you wish.) In order to start manipulating repository data, you need to create a new <quote>working copy</quote> of the data, a sort of private workspace. Ask Subversion to <quote>check out</quote> a working copy of the <filename>myproject/trunk</filename> directory in the repository:"
msgstr "もとの <filename>/tmp/myproject</filename>にはなにも変更がないことに注意してく ださい。(実際、必要ならこのディレクトリを消してしまうこともできま す)。リポジトリのデータを操作するためには、このデータのために、一種の 個人用の作業領域となる新しい<quote>作業コピー</quote>を作らなくてはな りません。Subversion に、リポジトリの<filename>myproject/trunk</filename>ディレ クトリ用の作業コピーを<quote>チェックアウト</quote>するように指示して みましょう:"

#. Tag: screen
#: appa-quickstart.xml:201
#, no-c-format
msgid ""
"$ svn checkout file:///path/to/repos/myproject/trunk myproject\n"
"A  myproject/foo.c\n"
"A  myproject/bar.c\n"
"A  myproject/Makefile\n"
"&hellip;\n"
"Checked out revision 1."
msgstr ""
"$ svn checkout file:///path/to/repos/myproject/trunk myproject\n"
"A  myproject/foo.c\n"
"A  myproject/bar.c\n"
"A  myproject/Makefile\n"
"&hellip;\n"
"Checked out revision 1."

#. Tag: para
#: appa-quickstart.xml:203
#, no-c-format
msgid "Now you have a personal copy of part of the repository in a new directory named <filename>myproject</filename>. You can edit the files in your working copy and then commit those changes back into the repository."
msgstr "これで<filename>myproject</filename>という名前の新しい ディレクトリ中にリポジトリのプライベートなコピーを手にしたことに なります。作業コピー中のファイルを編集し、その変更点をリポジトリに 書き戻すためにコミットすることができます。"

#. Tag: para
#: appa-quickstart.xml:210
#, no-c-format
msgid "Enter your working copy and edit a file's contents."
msgstr "作業コピーに行ってファイル内容を修正します。"

#. Tag: para
#: appa-quickstart.xml:214
#, no-c-format
msgid "Run <command>svn diff</command> to see unified diff output of your changes."
msgstr "<command>svn diff</command> を実行して 変更点に対する unified diff 出力を確認します。"

#. Tag: para
#: appa-quickstart.xml:218
#, no-c-format
msgid "Run <command>svn commit</command> to commit the new version of your file to the repository."
msgstr "<command>svn commit</command> を実行して リポジトリに自分のファイルの新しいバージョンをコミットします。"

#. Tag: para
#: appa-quickstart.xml:222
#, no-c-format
msgid "Run <command>svn update</command> to bring your working copy <quote>up-to-date</quote> with the repository."
msgstr "<command>svn update</command> を実行して リポジトリの<quote>最新の</quote>状態を自分の作業コピーに反映します。"

#. Tag: para
#: appa-quickstart.xml:227
#, no-c-format
msgid "For a full tour of all the things you can do with your working copy, read <xref linkend=\"svn.tour\"/>."
msgstr "作業コピーに対してできるすべてのことについての完全な手引き については<xref linkend=\"svn.tour\"/>を読んでください。"

#. Tag: para
#: appa-quickstart.xml:230
#, no-c-format
msgid "At this point, you have the option of making your repository available to others over a network. See <xref linkend=\"svn.serverconfig\"/> to learn about the different sorts of server processes available and how to configure them."
msgstr "この時点で、ネットワーク越しに別の人々にリポジトリを 利用可能にすることもできます。<xref linkend=\"svn.serverconfig\"/>を読んで利用可能ないくつかのサーバプロセス の違いについて把握し、どのように設定すれば良いかを理解してください。"

#. Tag: title
#: appb-svn-for-cvs-users.xml:2
#, no-c-format
msgid "Subversion for CVS Users"
msgstr "CVSユーザのためのSubversion"

#. Tag: para
#: appb-svn-for-cvs-users.xml:4
#, no-c-format
msgid "This appendix is a guide for CVS users new to Subversion. It's essentially a list of differences between the two systems as <quote>viewed from 10,000 feet</quote>. For each section, we provide backreferences to relevant chapters when possible."
msgstr "この補遺はSubversionになじみのないCVSユーザへのガイドです。 この章は基本的に、<quote>10キロくらい離れた</quote>二つのシステム間の違い についての一覧です。それぞれの節で、できるだけ関連した章への 参照を用意しました。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:10
#, no-c-format
msgid "Although the goal of Subversion is to take over the current and future CVS user base, some new features and design changes were required to fix certain <quote>broken</quote> behaviors that CVS had. This means that, as a CVS user, you may need to break habits&mdash;ones that you forgot were odd to begin with."
msgstr "Subversionの目標は現在と未来のCVSユーザを乗っ取ることですが、 CVSで<quote>問題</quote>となっている振る舞いを改良するために いくつかの新しい機能と、設計の変更が必要でした。これは CVSユーザとしての、いままでの習慣を断ち切る必要があるかも知れない ことを意味します&mdash;それは最初からおかしかったのですから。"

#. Tag: title
#: appb-svn-for-cvs-users.xml:22
#, no-c-format
msgid "Revision Numbers Are Different Now"
msgstr "リビジョン番号の意味が変わります"

#. Tag: para
#: appb-svn-for-cvs-users.xml:24
#, no-c-format
msgid "In CVS, revision numbers are per-file. This is because CVS stores its data in RCS files; each file has a corresponding RCS file in the repository, and the repository is roughly laid out according to the structure of your project tree."
msgstr "CVSでは、リビジョン番号はファイルごとについていました。理由は、CVSはRCS ファイルにデータを格納していたからです。それぞれのファイルは RCSファイルをリポジトリに持ち、そのリポジトリは大雑把に言って、プロジェクト ツリーの構造と一致するようなレイアウトでした。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:29
#, no-c-format
msgid "In Subversion, the repository looks like a single filesystem. Each commit results in an entirely new filesystem tree; in essence, the repository is an array of trees. Each of these trees is labeled with a single revision number. When someone talks about <quote>revision 54</quote>, they're talking about a particular tree (and indirectly, the way the filesystem looked after the 54th commit)."
msgstr "Subversionでは、リポジトリは一つのファイルシステムのように見えます。 それぞれのコミットはまったく新しいファイルシステムツリーを作ります。 要約して言うと、リポジトリとは、そのようなツリーが一列にたくさん並んだ もののことです。このようなツリーそれぞれは、一つのリビジョン番号でラベル 付けされています。誰かが<quote>リビジョン 54</quote> と言うとき、彼らは特定 のツリー(そして間接的に、54番目のコミット後のファイルシステムの見え方) について語っています。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:37
#, no-c-format
msgid "Technically, it's not valid to talk about <quote>revision 5 of <filename>foo.c</filename></quote>. Instead, one would say <quote><filename>foo.c</filename> as it appears in revision 5</quote>. Also, be careful when making assumptions about the evolution of a file. In CVS, revisions 5 and 6 of <filename>foo.c</filename> are always different. In Subversion, it's most likely that <filename>foo.c</filename> did <emphasis>not</emphasis> change between revisions 5 and 6."
msgstr "技術的には、<quote><filename>foo.c</filename>のリビジョン 5</quote> という言い方は正しくありません。そうではなく、 <quote>リビジョン 5 に出てくる<filename>foo.c</filename></quote> と言うべきです。同様に、ファイルの変化についての前提に気をつけて ください。CVS では、リビジョン 5 とリビジョン 6 の <filename>foo.c</filename> は常に異なっていました。Subversionでは リビジョン 5 と 6 では、たいていの場合<filename>foo.c</filename> は変更されて<emphasis>いません</emphasis> 。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:47
#, no-c-format
msgid "Similarly, in CVS a tag or branch is an annotation on the file, or on the version information for that individual file, whereas in Subversion a tag or branch is a copy of an entire tree (by convention, into the <filename>/branches</filename> or <filename>/tags</filename> directories that appear at the top level of the repository, beside <filename>/trunk</filename>). In the repository as a whole, many versions of each file may be visible: the latest version on each branch, every tagged version, and of course the latest version on the trunk itself. So, to refine the terms even further, one would often say <quote><filename>foo.c</filename> as it appears in <filename>/branches/REL1</filename> in revision 5.</quote>"
msgstr ""

#. Tag: para
#: appb-svn-for-cvs-users.xml:61
#, no-c-format
msgid "For more details on this topic, see <xref linkend=\"svn.basic.in-action.revs\"/>."
msgstr "これについての詳細は<xref linkend=\"svn.basic.in-action.revs\"/>を見てください。"

#. Tag: title
#: appb-svn-for-cvs-users.xml:70
#, no-c-format
msgid "Directory Versions"
msgstr "ディレクトリのバージョン"

#. Tag: para
#: appb-svn-for-cvs-users.xml:72
#, no-c-format
msgid "Subversion tracks tree structures, not just file contents. It's one of the biggest reasons Subversion was written to replace CVS."
msgstr "Subversion はツリーの構造を追いかけるのであって、それはファイルの内容 だけにはとどまりません。これはCVSを置き換えるために Subversionが書かれた 大きな理由の一つです。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:76
#, no-c-format
msgid "Here's what this means to you, as a former CVS user:"
msgstr "CVSユーザとしてのあなたに、これが何を意味するかをここで挙げておきます:"

#. Tag: para
#: appb-svn-for-cvs-users.xml:80
#, no-c-format
msgid "The <command>svn add</command> and <command>svn delete</command> commands work on directories now, just as they work on files. So do <command>svn copy</command> and <command>svn move</command>. However, these commands do <emphasis>not</emphasis> cause any kind of immediate change in the repository. Instead, the working items are simply <quote>scheduled</quote> for addition or deletion. No repository changes happen until you run <command>svn commit</command>."
msgstr "<command>svn add</command> と <command>svn delete</command> コマンドは ファイルだけではなく、ディレクトリに対しても動作します。 <command>svn copy</command> と<command>svn move</command>もそうです。 しかし、これらのコマンドは、リポジトリに対して直接の変更を加える ことはありません。そのかわりに、作業アイテムは単に、追加または削除 の<quote>予告</quote> を受けるだけです。<command>svn commit</command> が実行されるまで、リポジトリはいっさい変更されません。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:91
#, no-c-format
msgid "Directories aren't dumb containers anymore; they have revision numbers like files. (Or more properly, it's correct to talk about <quote>directory <filename>foo/</filename> in revision 5</quote>.)"
msgstr "ディレクトリはもう、ただの入れ物ではありません。それはファイルと 同じように、リビジョン番号を持っています。(あるいはもっと適切には <quote>リビジョン 5 の中にある、ディレクトリ<filename>foo/</filename> </quote>という言い方が正しいのですが)。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:98
#, no-c-format
msgid "Let's talk more about that last point. Directory versioning is a hard problem; because we want to allow mixed-revision working copies, there are some limitations on how far we can abuse this model."
msgstr "最後の点についてもっと説明します。ディレクトリのバージョン管理は 難しい問題です。それは、混合リビジョンの作業コピーを認めたいので、 このモデルを乱用することに対する制限が必要になります。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:103
#, no-c-format
msgid "From a theoretical point of view, we define <quote>revision 5 of directory <filename>foo</filename></quote> to mean a specific collection of directory-entries and properties. Now suppose we start adding and removing files from <filename>foo</filename>, and then commit. It would be a lie to say that we still have revision 5 of <filename>foo</filename>. However, if we bumped <filename>foo</filename>'s revision number after the commit, that would be a lie too; there may be other changes to <filename>foo</filename> we haven't yet received, because we haven't updated yet."
msgstr "理論的な見地からすると、 <quote> ディレクトリ <filename>foo</filename>の リビジョン 5 </quote> というのは、ディレクトリエントリと属性の、ある特定のあつまりを 意味します。<filename>foo</filename>のファイルを追加したり削除 し、コミットしたとします。リビジョン 5 の<filename>foo</filename> がまだあるといえば嘘になります。しかし、コミット後に <filename>foo</filename>のリビジョン番号を上げたとすれば、 これもやはり嘘になります。まだ更新してはいないので、 <filename>foo</filename> に、まだ受け取っていないほかの人の変更が 加えられたかも知れないからです。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:115
#, no-c-format
msgid "Subversion deals with this problem by quietly tracking committed adds and deletes in the <filename>.svn</filename> area. When you eventually run <command>svn update</command>, all accounts are settled with the repository, and the directory's new revision number is set correctly. <emphasis>Therefore, only after an update is it truly safe to say that you have a <quote>perfect</quote> revision of a directory.</emphasis> Most of the time, your working copy will contain <quote>imperfect</quote> directory revisions."
msgstr "Subversion はこの問題を、<filename>.svn</filename>の領域に コミットされた追加と削除を静かに記録することで取り扱います。 <command>svn update</command>を実行すると、 すべての変更点がリポジトリに反映され ディレクトリの新しいリビジョン番号は正しく設定されます。 <emphasis> そのため、更新後においてだけ、ディレクトリの<quote>完全な</quote> リビジョンを手にしている、と安全に言うことができます。 </emphasis> ほとんどの場合、作業コピーは<quote>不完全な</quote> ディレクトリ リビジョンを含んでいます。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:125
#, no-c-format
msgid "Similarly, a problem arises if you attempt to commit property changes on a directory. Normally, the commit would bump the working directory's local revision number. But again, that would be a lie, because there may be adds or deletes that the directory doesn't yet have, because no update has happened. <emphasis>Therefore, you are not allowed to commit property-changes on a directory unless the directory is up-to-date.</emphasis>"
msgstr "同様にして、もしディレクトリ上の属性変更をコミットしようとした ときに問題が起こります。普通、コミットは作業ディレクトリの ローカルなリビジョン番号を上げます。しかし、やはり、それは 嘘です。というのは、更新がかかっていないことにより、ディレクトリ がまだ受け取っていない追加や削除があるかも知れないからです。 <emphasis> それで、ディレクトリが最新の状態になければ、ディレクトリ上の 属性変更をコミットすることはできません。 </emphasis>"

#. Tag: para
#: appb-svn-for-cvs-users.xml:134
#, no-c-format
msgid "For more discussion about the limitations of directory versioning, see <xref linkend=\"svn.basic.in-action.mixedrevs\"/>."
msgstr "ディレクトリのバージョン管理の制限についての詳細は、 <xref linkend=\"svn.basic.in-action.mixedrevs\"/>を見てください。"

#. Tag: title
#: appb-svn-for-cvs-users.xml:144
#, no-c-format
msgid "More Disconnected Operations"
msgstr "切断状態での豊富な操作"

#. Tag: para
#: appb-svn-for-cvs-users.xml:146
#, no-c-format
msgid "In recent years, disk space has become outrageously cheap and abundant, but network bandwidth has not. Therefore, the Subversion working copy has been optimized around the scarcer resource."
msgstr "最近では、ディスク容量は非常に安く豊富になりましたが、ネットワークの 帯域はそうではありません。そのためSubversionの作業コピーはこの貴重な資源に ついて最適化されてきました。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:151
#, no-c-format
msgid "The <filename>.svn</filename> administrative directory serves the same purpose as the <filename>CVS</filename> directory, except that it also stores read-only, <quote>pristine</quote> copies of your files. This allows you to do many things off-line:"
msgstr "<filename>.svn</filename> 管理ディレクトリは、<filename>CVS</filename> ディレクトリと同じ目的のために用意されていますが、例外は、 ファイルの<quote>修正元コピー</quote>を読み出し専用で保存してある ことです。これを使っていろいろな作業をオフラインでやることができます:"

#. Tag: para
#: appb-svn-for-cvs-users.xml:162
#, no-c-format
msgid "Shows you any local changes you've made (see <xref linkend=\"svn.tour.cycle.examine.status\"/>)"
msgstr "ローカルに起きたすべての変更点を表示します(<xref linkend=\"svn.tour.cycle.examine.status\"/>参照)"

#. Tag: para
#: appb-svn-for-cvs-users.xml:170
#, no-c-format
msgid "Shows you the details of your changes (see <xref linkend=\"svn.tour.cycle.examine.diff\"/>)"
msgstr "変更点の詳細を表示します(<xref linkend=\"svn.tour.cycle.examine.diff\"/>参照)"

#. Tag: para
#: appb-svn-for-cvs-users.xml:178
#, fuzzy, no-c-format
msgid "Removes your local changes (see <xref linkend=\"svn.tour.cycle.revert\"/>)"
msgstr "変更点を取り消します(<xref linkend=\"svn.tour.cycle.examine.revert\"/>参照)"

#. Tag: para
#: appb-svn-for-cvs-users.xml:185
#, no-c-format
msgid "Also, the cached pristine files allow the Subversion client to send differences when committing, which CVS cannot do."
msgstr "さらに、キャッシュされた修正元ファイルを使うと、Subversion クライアントは、コミット時に差分のみを送信することができるよう になります。これはCVSにはできません。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:188
#, no-c-format
msgid "The last subcommand in the list is new; it will not only remove local changes, but it will un-schedule operations such as adds and deletes. It's the preferred way to revert a file; running <command>rm file; svn update</command> will still work, but it blurs the purpose of updating. And, while we're on this subject&hellip;"
msgstr "このリストの最後のサブコマンドは新しいものです。それは単にローカル の修正を削除するだけではなく、追加や削除の予告操作も取り消すことが できます。ファイルの修正取り消しのためのおすすめの方法です。 <command>rm file; svn update</command> を実行しても動作しますが、 更新の意味をあいまいにしてしまいます。そして、われわれはまだこの 問題と格闘しているのですが&hellip;"

#. Tag: title
#: appb-svn-for-cvs-users.xml:203
#, no-c-format
msgid "Distinction Between Status and Update"
msgstr "状態と更新の区別"

#. Tag: para
#: appb-svn-for-cvs-users.xml:205
#, no-c-format
msgid "In Subversion, we've tried to erase a lot of the confusion between the <command>cvs status</command> and <command>cvs update</command> commands."
msgstr "Subversionでは、<command>cvs status</command> と <command>cvs update</command> コマンドの間にあるたくさんの混乱 をなくそうとしてきました。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:209
#, no-c-format
msgid "The <command>cvs status</command> command has two purposes: first, to show the user any local modifications in the working copy, and second, to show the user which files are out-of-date. Unfortunately, because of CVS's hard-to-read status output, many CVS users don't take advantage of this command at all. Instead, they've developed a habit of running <command>cvs update</command> or <command>cvs -n update</command> to quickly see their changes. If users forget to use the <option>-n</option> option, this has the side effect of merging repository changes they may not be ready to deal with."
msgstr "<command>cvs status</command> コマンドは二つの目的があります: まず、作業コピー中のローカルな変更をユーザに示すこと、二番目に どのファイルが最新ではなくなっているかをユーザに示すこと。 不幸にも、CVSの非常に読みにくい状態表示のために、たくさんのCVSユーザは このコマンドをまったく生かしていません。そのかわりに、変更点を見る のに、<command>cvs update</command>、あるいは <command>cvs -n update</command> を実行する癖をつけてしまいました。<option>-n</option>オプションを忘れ ると、まだ扱う準被ｳ器ｺできていないリポジトリ上の変更もマージしてしまいま す。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:221
#, no-c-format
msgid "With Subversion, we've tried to remove this muddle by making the output of <command>svn status</command> easy to read for both humans and parsers. Also, <command>svn update</command> only prints information about files that are updated, <emphasis>not</emphasis> local modifications."
msgstr "Subversion では、<command>svn status</command> の出力を 人間が読むにも、プログラムで扱うにも簡単になるように改良 しました。また、<command>svn update</command>は更新されたファイル についての情報のみを表示し、ローカルの変更は表示 <emphasis>しないように</emphasis> しました。"

#. Tag: title
#: appb-svn-for-cvs-users.xml:228
#, no-c-format
msgid "Status"
msgstr "Status"

#. Tag: para
#: appb-svn-for-cvs-users.xml:230
#, no-c-format
msgid "<command>svn status</command> prints all files that have local modifications. By default, the repository is not contacted. While this subcommand accepts a fair number of options, the following are the most commonly used ones:"
msgstr "<command>svn status</command> はローカルに修正されたすべての ファイル を表示します。デフォルトではリポジトリにアクセスしません。このコマンド はいろいろなオプションをとりますが、以下は最もよく利用されるものです:"

#. Tag: option
#: appb-svn-for-cvs-users.xml:237
#, no-c-format
msgid "<option>-u</option>"
msgstr "<option>-u</option>"

#. Tag: para
#: appb-svn-for-cvs-users.xml:239
#, no-c-format
msgid "Contact the repository to determine, and then display, out-of-dateness information."
msgstr "過去の情報を取得してから表示するためにリポジトリに アクセスします。"

#. Tag: option
#: appb-svn-for-cvs-users.xml:245
#, no-c-format
msgid "<option>-v</option>"
msgstr "<option>-v</option>"

#. Tag: para
#: appb-svn-for-cvs-users.xml:247
#, no-c-format
msgid "Show <emphasis>all</emphasis> entries under version control."
msgstr "バージョン管理下にある<emphasis>すべての</emphasis> 情報を表示します。"

#. Tag: option
#: appb-svn-for-cvs-users.xml:253
#, no-c-format
msgid "<option>-N</option>"
msgstr "<option>-N</option>"

#. Tag: para
#: appb-svn-for-cvs-users.xml:255
#, no-c-format
msgid "Run non-recursively (do not descend into subdirectories)."
msgstr "非再帰的に実行します(サブディレクトリに降りていきません)。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:261
#, no-c-format
msgid "The <command>status</command> command has two output formats. In the default <quote>short</quote> format, local modifications look like this:"
msgstr "<command>status</command>コマンドには二つの出力形式があります。 デフォルトの<quote>短い形式</quote>では、ローカルの変更は以下のように 表示されます:"

#. Tag: screen
#: appb-svn-for-cvs-users.xml:265
#, no-c-format
msgid ""
"$ svn status\n"
"M      foo.c\n"
"M      bar/baz.c"
msgstr ""
"$ svn status\n"
"M      foo.c\n"
"M      bar/baz.c"

#. Tag: para
#: appb-svn-for-cvs-users.xml:267
#, fuzzy, no-c-format
msgid "If you specify the <option>--show-updates</option> (<option>-u</option>) option, a longer output format is used:"
msgstr "<option>--show-updates</option>(<option>-u</option>) スイッチを指定すると もっと長い出力形式が利用されます:"

#. Tag: screen
#: appb-svn-for-cvs-users.xml:271
#, no-c-format
msgid ""
"$ svn status -u\n"
"M            1047   foo.c\n"
"       *     1045   faces.html\n"
"       *            bloo.png\n"
"M            1050   bar/baz.c\n"
"Status against revision:   1066"
msgstr ""
"$ svn status -u\n"
"M            1047   foo.c\n"
"       *     1045   faces.html\n"
"       *            bloo.png\n"
"M            1050   bar/baz.c\n"
"Status against revision:   1066"

#. Tag: para
#: appb-svn-for-cvs-users.xml:273
#, no-c-format
msgid "In this case, two new columns appear. The second column contains an asterisk if the file or directory is out-of-date. The third column shows the working-copy's revision number of the item. In the example above, the asterisk indicates that <filename>faces.html</filename> would be patched if we updated, and that <filename>bloo.png</filename> is a newly added file in the repository. (The absence of any revision number next to <filename>bloo.png</filename> means that it doesn't yet exist in the working copy.)"
msgstr "この場合、二つの新しいコラムが表示されます。二番目のコラムは ファイルやディレクトリが最新でない場合にはアスタリスク('*')が表示 されます。三番目のコラムはアイテムの作業コピーリビジョン番号です。 上の例では、アスタリスクはもし更新しようとすれば <filename>faces.html</filename> はパッチされ、 <filename>bloo.png</filename> はリポジトリに新規追加されるだろう ことを示しています。(<filename>bloo.png</filename>の前にリビジョン番号が 表示されていないのは、作業コピーにはまだ存在していないからです)"

#. Tag: para
#: appb-svn-for-cvs-users.xml:291
#, no-c-format
msgid "At this point, you should take a quick look at the list of all possible status codes in <xref linkend=\"svn.ref.svn.c.status\"/>. Here are a few of the more common status codes you'll see:"
msgstr ""

#. Tag: screen
#: appb-svn-for-cvs-users.xml:296
#, fuzzy, no-c-format
msgid ""
"A    Resource is scheduled for Addition\n"
"D    Resource is scheduled for Deletion\n"
"M    Resource has local Modifications\n"
"C    Resource has Conflicts (changes have not been completely merged\n"
"       between the repository and working copy version)\n"
"X    Resource is eXternal to this working copy (may come from another\n"
"       repository).  See <xref linkend=\"svn.advanced.externals\" />\n"
"?    Resource is not under version control\n"
"!    Resource is missing or incomplete (removed by another tool than\n"
"       Subversion)"
msgstr ""
"A    リソースは追加予告されています\n"
"D    リソースは削除予告されています\n"
"M    リソースはローカルに変更されています\n"
"C    リソースは衝突しています(変更箇所がリポジトリと作業コピーとの\n"
"       間でまだ完全にはマージされていません)\n"
"X    リソースはこの作業コピーから見て外部のものです(他のリポジトリから\n"
"       来たものです。<xref linkend=\"svn.advanced.props.special.externals\" />を参照してください)\n"
"?    リソースはバージョン管理下にはありません。\n"
"!    リソースは失われたか、不完全です(Subversion 以外の別のツールによって削除\n"
"       されました)"

#. Tag: para
#: appb-svn-for-cvs-users.xml:298
#, no-c-format
msgid "For a more detailed discussion of <command>svn status</command>, see <xref linkend=\"svn.tour.cycle.examine.status\"/>."
msgstr "For a more detailed discussion of <command>svn status</command>, see <xref linkend=\"svn.tour.cycle.examine.status\"/>."

#. Tag: title
#: appb-svn-for-cvs-users.xml:304
#, no-c-format
msgid "Update"
msgstr "Update"

#. Tag: para
#: appb-svn-for-cvs-users.xml:306
#, no-c-format
msgid "<command>svn update</command> updates your working copy, and only prints information about files that it updates."
msgstr "<command>svn update</command> updates your working copy, and only prints information about files that it updates."

#. Tag: para
#: appb-svn-for-cvs-users.xml:309
#, no-c-format
msgid "Subversion has combined the CVS <literal>P</literal> and <literal>U</literal> codes into just <literal>U</literal>. When a merge or conflict occurs, Subversion simply prints <literal>G</literal> or <literal>C</literal>, rather than a whole sentence about it."
msgstr "Subversion は CVSの<literal>P</literal> と<literal>U</literal> コードを連結し、単に<literal>U</literal> を表示します。 マージや衝突が起こるときには、Subversionはそれに関するすべての 内容を表示するかわりに単に<literal>G</literal> または <literal>C</literal> を表示します。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:315
#, no-c-format
msgid "For a more detailed discussion of <command>svn update</command>, see <xref linkend=\"svn.tour.cycle.update\"/>."
msgstr "<command>svn status</command>に関する詳細は<xref linkend=\"svn.tour.cycle.examine.status\"/> を参照してください。"

#. Tag: title
#: appb-svn-for-cvs-users.xml:326
#, no-c-format
msgid "Branches and Tags"
msgstr "ブランチとタグ"

#. Tag: para
#: appb-svn-for-cvs-users.xml:328
#, no-c-format
msgid "Subversion doesn't distinguish between filesystem space and <quote>branch</quote> space; branches and tags are ordinary directories within the filesystem. This is probably the single biggest mental hurdle a CVS user will need to climb. Read all about it in <xref linkend=\"svn.branchmerge\"/>."
msgstr "Subversion はファイルシステムの空間と<quote>ブランチ</quote> の空間を 区別しません。ブランチとタグはファイルシステム中の普通のディレクトリ です。これは多分CVSユーザが乗り越えなくてはならない一番大きい心理的な 障害です。 これについては<xref linkend=\"svn.branchmerge\"/>全体を読んでください。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:336
#, no-c-format
msgid "Since Subversion treats branches and tags as ordinary directories, always remember to check out the <literal>trunk</literal> (<literal>http://svn.example.com/repos/calc/trunk/</literal>) of your project, and not the project itself (<literal>http://svn.example.com/repos/calc/</literal>). If you make the mistake of checking out the project itself, you'll wind up with a working copy that contains a copy of your project for every branch and tag you have."
msgstr "Subversion はブランチとタグを通常のディレクトリのように扱うので、 いつもプロジェクトの<literal>trunk</literal> (<literal>http://svn.example.com/repos/calc/trunk/</literal>) をチェックアウトし、プロジェクト自身(<literal>http://svn.example.com/repos/calc/</literal>) をチェックアウトしないように注意してください。プロジェクト自身をチェック アウトすると、作業コピーはすべてのブランチとタグを含むプロジェクト全体 になってしまいます。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:345
#, no-c-format
msgid "That is, providing you don't run out of disk space before your checkout finishes."
msgstr "つまり、チェックアウトが終わる前にディスクを食いつぶしてしまうことに なりかねません。"

#. Tag: title
#: appb-svn-for-cvs-users.xml:357
#, no-c-format
msgid "Metadata Properties"
msgstr "メタデータの属性"

#. Tag: para
#: appb-svn-for-cvs-users.xml:359
#, no-c-format
msgid "A new feature of Subversion is that you can attach arbitrary metadata (or <quote>properties</quote>) to files and directories. Properties are arbitrary name/value pairs associated with files and directories in your working copy."
msgstr "Subversionの新しい機能の一つに、ファイルやディレクトリに任意のメタデータ (あるいは <quote>属性</quote>)を結びつけることができます。属性は任意の 名前/値のペアで作業コピーのファイルやディレクトリに結び付いています。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:365
#, no-c-format
msgid "To set or get a property name, use the <command>svn propset</command> and <command>svn propget</command> subcommands. To list all properties on an object, use <command>svn proplist</command>."
msgstr "属性名を設定したり、取得したりするには、 <command>svn propset</command> と <command>svn propget</command> サブコマンドを使ってください。あるオブジェクト上のすべての属性を一覧表示 するには<command>svn proplist</command>を使ってください。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:370
#, no-c-format
msgid "For more information, see <xref linkend=\"svn.advanced.props\"/>."
msgstr "より詳しくは<xref linkend=\"svn.advanced.props\"/>を参照してください。"

#. Tag: title
#: appb-svn-for-cvs-users.xml:378
#, no-c-format
msgid "Conflict Resolution"
msgstr "衝突の解消"

#. Tag: para
#: appb-svn-for-cvs-users.xml:380
#, no-c-format
msgid "CVS marks conflicts with in-line <quote>conflict markers</quote>, and prints a <literal>C</literal> during an update. Historically, this has caused problems, because CVS isn't doing enough. Many users forget about (or don't see) the <literal>C</literal> after it whizzes by on their terminal. They often forget that the conflict-markers are even present, and then accidentally commit files containing conflict-markers."
msgstr "CVS はファイル中の<quote>衝突マーカ</quote>を使って衝突を知らせ、 更新時には<literal>C</literal> を表示します。歴史的にはこれは 問題を起こしてきました。それはCVSが十分に取り扱わなかったからです。 たくさんのユーザは、端末が警告した後に、<literal>C</literal> に ついて忘れてしまいます(あるいは見もしません)。しばしば衝突マーカが 依然として存在していることを忘れてしまい、衝突マーカを含んだファイルを 間違ってコミットしてしまうことがありました。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:389
#, no-c-format
msgid "Subversion solves this problem by making conflicts more tangible. It remembers that a file is in a state of conflict, and won't allow you to commit your changes until you run <command>svn resolved</command>. See <xref linkend=\"svn.tour.cycle.resolve\"/> for more details."
msgstr "Subversion はこの問題を、衝突マーカをもっと良く見える形で設定する ことによって解決しています。Subversion はファイルが衝突状態にある ことを憶えていて、<command>svn resolved</command>を実行するまで、 あなたの変更点をコミットすることを許しません。 詳細は <xref linkend=\"svn.tour.cycle.resolve\"/> を見てください。"

#. Tag: title
#: appb-svn-for-cvs-users.xml:400
#, no-c-format
msgid "Binary Files and Translation"
msgstr "バイナリファイルと変換"

#. Tag: para
#: appb-svn-for-cvs-users.xml:402
#, no-c-format
msgid "In the most general sense, Subversion handles binary files more gracefully than CVS does. Because CVS uses RCS, it can only store successive full copies of a changing binary file. Subversion, however, expresses differences between files using a binary-differencing algorithm, regardless of whether they contain textual or binary data. That means that all files are stored differentially (compressed) in the repository."
msgstr "一番一般的な意味で、Subversion はバイナリファイルを CVS よりももっと 適切に扱います。CVS は RCS を利用するので、変更されたバイナリファイルの 完全なコピーを、常に格納するしかありませんでした。しかし Subversion はバイナリ差分アルゴリズムを使ってファイル間の相違を 表現します。そのファイルがテキストなのかバイナリなのかによらず そうします。これはすべてのファイルがリポジトリ中に差分の形として( 圧縮されて)格納されるということを意味します。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:410
#, no-c-format
msgid "CVS users have to mark binary files with <option>-kb</option> flags, to prevent data from being garbled (due to keyword expansion and line-ending translations). They sometimes forget to do this."
msgstr "CVS ユーザは、<option>-kb</option> フラグを使ってバイナリファイルを マークする必要がありましたが、それはデータが文字化けすることを 防ぐためです。(キーワード展開や行末変換によってこのようなことが 起こります)。このことはときどき忘れられてしまいます。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:415
#, no-c-format
msgid "Subversion takes the more paranoid route&mdash;first, it never performs any kind of keyword or line-ending translation unless you explicitly ask it do so (see <xref linkend=\"svn.advanced.props.special.keywords\"/> and <xref linkend=\"svn.advanced.props.special.eol-style\"/> for more details). By default, Subversion treats all file data as literal byte strings, and files are always stored in the repository in an untranslated state."
msgstr "Subversion はもっと神経質な方法をとります&mdash;まず、キーワード展開や 行末変換は、明示的にそのような指示を出さなければ実行されません (詳細は<xref linkend=\"svn.advanced.props.special.keywords\"/> と <xref linkend=\"svn.advanced.props.special.eol-style\"/> を見てください)。 デフォルトでは、Subversion はすべてのファイルデータを文字通り 単なるバイトの並びとして扱い、ファイルは常に、無変換の状態で リポジトリに保存されます。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:424
#, no-c-format
msgid "Second, Subversion maintains an internal notion of whether a file is <quote>text</quote> or <quote>binary</quote> data, but this notion is <emphasis>only</emphasis> extant in the working copy. During an <command>svn update</command>, Subversion will perform contextual merges on locally modified text files, but will not attempt to do so for binary files."
msgstr "次に、Subversion はファイルが<quote>テキスト</quote> であるか <quote>バイナリ</quote> であるかの内部的な記録を管理しますが、 この記録は、作業コピー中<emphasis>にしか</emphasis> ありません。 <command>svn update</command>実行中、Subversion は、ローカルに 修正のあったテキストファイルについて文脈マージをやりますが、 バイナリファイルに対してはそうしません。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:431
#, no-c-format
msgid "To determine whether a contextual merge is possible, Subversion examines the <literal>svn:mime-type</literal> property. If the file has no <literal>svn:mime-type</literal> property, or has a mime-type that is textual (e.g. <literal>text/*</literal>), Subversion assumes it is text. Otherwise, Subversion assumes the file is binary. Subversion also helps users by running a binary-detection algorithm in the <command>svn import</command> and <command>svn add</command> commands. These commands will make a good guess and then (possibly) set a binary <literal>svn:mime-type</literal> property on the file being added. (If Subversion guesses wrong, the user can always remove or hand-edit the property.)"
msgstr "文脈マージが可能かどうかを決めるのに、Subversion は <literal>svn:mime-type</literal>属性を調べます。もしファイルが <literal>svn:mime-type</literal>属性を持たないか、テキストを 示すような内容であれば(たとえば、<literal>text/*</literal>)、Subversion はそれを テキストであると判断します。それ以外の場合、ファイルはバイナリ であるとみなされます。Subversion は<command>svn import</command> と<command>svn add</command> 実行時に、バイナリ検出アルゴリズムを 実行することでユーザを助けます。これらのコマンドは、良い推測を 行い、(可能なら)バイナリの<literal>svn:mime-type</literal> 属性 を追加されるファイルに設定します。(もし Subversion の推測が間違って いた場合は、ユーザはいつでも手でその属性を削除することができます)"

#. Tag: title
#: appb-svn-for-cvs-users.xml:452
#, no-c-format
msgid "Versioned Modules"
msgstr "バージョン管理されたモジュール"

#. Tag: para
#: appb-svn-for-cvs-users.xml:454
#, no-c-format
msgid "Unlike CVS, a Subversion working copy is aware that it has checked out a module. That means that if somebody changes the definition of a module (e.g. adds or removes components), then a call to <command>svn update</command> will update the working copy appropriately, adding and removing components."
msgstr "CVSとは違い、Subversionの作業コピーはモジュールとしてチェックアウトされた ことを記録しています。これは誰かがモジュールの定義を(たとえば、部品を 追加したり削除することで)変更してから <command>svn update</command>を呼び出した場合、部品を追加したり削除す ることで、作業コピーを正しく更新することを意味します。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:460
#, no-c-format
msgid "Subversion defines modules as a list of directories within a directory property: see <xref linkend=\"svn.advanced.externals\"/>."
msgstr "Subversion はモジュールをあるディレクトリ属性のあるディレクトリ の集まりとして定義します。<xref linkend=\"svn.advanced.externals\"/>を見てください。"

#. Tag: title
#: appb-svn-for-cvs-users.xml:470
#, no-c-format
msgid "Authentication"
msgstr "認証"

#. Tag: para
#: appb-svn-for-cvs-users.xml:472
#, fuzzy, no-c-format
msgid "With CVS's pserver, you are required to <quote>login</quote> to the server before any read or write operation&mdash;you sometimes even have to login for anonymous operations. With a Subversion repository using Apache <command>httpd</command> or <command>svnserve</command> as the server, you don't provide any authentication credentials at the outset&mdash;if an operation that you perform requires authentication, the server will challenge you for your credentials (whether those credentials are username and password, a client certificate, or even both). So if your repository is world-readable, you will not be required to authenticate at all for read operations."
msgstr "CVS の pserver では読み出し、書き込み操作の前に必ずサーバに<quote>login</quote> しなくてはなりませんでした&mdash;匿名操作のためにログインする場合でもそうでした。 サーバに Apache <command>httpd</command>または <command>svnserve</command> を使った Subversion リポジトリの場合には処理の前に 認証確認をする必要はありません&mdash;認証が必要な処理を実行するときになって 初めてサーバはあなたの認証しようとします(それがユーザ名、パスワードの方式 であっても、クライアント証明書であっても、両方であっても、です)。それで もしリポジトリが不特定多数の人に対して読み出しアクセス権限を与えている場合 は読み出し操作のために認証する必要は一切ありません。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:485
#, fuzzy, no-c-format
msgid "As with CVS, Subversion still caches your credentials on disk (in your <filename>~/.subversion/auth/</filename> directory) unless you tell it not to by using the <option>--no-auth-cache</option> option."
msgstr "CVS と同様、Subversion でも<option>--no-auth-cache</option>スイッチを使って 明示的に禁止しない限り、やはりあなたの認証情報をディスク上に保存します。 (自分の <filename>‾/.subversion/auth/</filename> ディレクトリ配下になります。)"

#. Tag: para
#: appb-svn-for-cvs-users.xml:490
#, fuzzy, no-c-format
msgid "The exception to this behavior, however, is in the case of accessing an <command>svnserve</command> server over an SSH tunnel, using the <literal>svn+ssh://</literal> URL scheme. In that case, the <command>ssh</command> program unconditionally demands authentication just to start the tunnel."
msgstr "しかしこの動作には例外があり、それは<literal>svn+ssh://</literal> URLスキー マを使って SSH トンネル越しに<command>svnserve</command>にアクセ スした場合です。この場合には<command>ssh</command>プログラムはト ンネルを使った通信を開始するにあたって無条件に認証を要求します。"

#. Tag: title
#: appb-svn-for-cvs-users.xml:503
#, no-c-format
msgid "Converting a Repository from CVS to Subversion"
msgstr "CVS から Subversion へのリポジトリ変換"

#. Tag: para
#: appb-svn-for-cvs-users.xml:505
#, no-c-format
msgid "Perhaps the most important way to familiarize CVS users with Subversion is to let them continue to work on their projects using the new system. And while that can be somewhat accomplished using a flat import into a Subversion repository of an exported CVS repository, the more thorough solution involves transferring not just the latest snapshot of their data, but all the history behind it as well, from one system to another. This is an extremely difficult problem to solve that involves deducing changesets in the absence of atomicity, and translating between the systems' completely orthogonal branching policies, among other complications. Still, there are a handful of tools claiming to at least partially support the ability to convert existing CVS repositories into Subversion ones."
msgstr "おそらく CVS ユーザが Subversion に慣れる一番重要な方法は既存の プロジェクトを新しいシステムを使って継続することです。これには 抽出した CVS リポジトリを Subversion リポジトリに単にインポート することでもある程度達成できますが、さらに徹底した方法としては データの最新の状態だけではなく、それ以前の履歴全体を旧システムから 新システムに移すことになります。これは解くのが極端に難しい問題です が、それは不分割の性質を持たない CVS データの変更からチェンジセット を求めること、ブランチについて全く別の考え方を持っている両システム 間でデータ変換すること、その他の複雑な問題があるためです。それでも 少なくとも部分的には既存の CVS リポジトリを Subversion リポジトリ に変換するためのツールがあります。"

#. Tag: para
#: appb-svn-for-cvs-users.xml:519
#, no-c-format
msgid "The most popular (and likely the most mature) conversion tool is cvs2svn (<ulink url=\"http://cvs2svn.tigris.org/\"></ulink>), a Python script originally created by members of Subversion's own development community. This tool is meant to run exactly once: it scans your CVS repository multiple times and attempts to deduce commits, branches, and tags as best it can. When it finishes, the result is a either a Subversion repository or a portable Subversion dumpfile representing your code's history. See the website for detailed instructions and caveats."
msgstr "もっとも人気のある( そしてもっとも成熟した) 変換ツールは cvs2svn (<ulink url=\"http://cvs2svn.tigris.org/\"></ulink>) です。このスクリプトは、Subversion 開発チームのメンバーによって作成された Python スクリプトです。このツールは、たった一度だけ使われます。何度もCVS リポジトリを走査して、スクリプトが最善と考えるコミット、ブランチ、タグを推測しようと試みます。変換が終わると、Subversion リポジトリかポータブルな Subversion ダンプファイルの形式で出力されます。詳細な手順や注意事項はウェブサイトを見てください。"

#. Tag: title
#: appc-webdav.xml:2
#, no-c-format
msgid "WebDAV and Autoversioning"
msgstr "WebDAV と、自動バージョン化"

#. Tag: para
#: appc-webdav.xml:4
#, no-c-format
msgid "WebDAV is an extension to HTTP, and is growing more and more popular as a standard for file-sharing. Today's operating systems are becoming extremely Web-aware, and many now have built-in support for mounting <quote>shares</quote> exported by WebDAV servers."
msgstr "WebDAV はHTTPの拡張で、ファイル共有のための標準として ますます一般的なものになっていっています。今日のオペレーティング システムは極端に Webを意識していて、多くのOSはWebDAVサーバによって 公開された<quote>共有</quote> をマウントするための仕組みを組み込みで サポートしています。"

#. Tag: para
#: appc-webdav.xml:10
#, fuzzy, no-c-format
msgid "If you use Apache as your Subversion network server, then to some extent you are also running a WebDAV server. This appendix gives some background on the nature of this protocol, how Subversion uses it, and how well Subversion interoperates with other software that is WebDAV-aware."
msgstr "もし Apache/mod_dav_svn をSubversionネットワークサーバとして 利用するなら、ある程度 WebDAVサーバも実行しなくてはなりません。 この補遺は、このプロトコルの性質についてのいくつかの背景を与え、 Subversionがどのようにそれを利用し、WebDAVを考慮しているほかのソフト とどのようにうまく協調するかを示します。"

#. Tag: title
#: appc-webdav.xml:21
#, no-c-format
msgid "What is WebDAV?"
msgstr "WebDAVって何?"

#. Tag: para
#: appc-webdav.xml:23
#, fuzzy, no-c-format
msgid "<firstterm>DAV</firstterm> stands for <quote>Distributed Authoring and Versioning</quote>. RFC 2518 defines a set of concepts and accompanying extension methods to HTTP 1.1 that make the web into a more universal read/write medium. The basic idea is that a WebDAV-compliant web server can act like a generic file server; clients can <quote>mount</quote> shared folders over HTTP that behave much like other network filesystems (such as NFS or SMB.)"
msgstr "RFC 2518 はいくつかの概念と、それにともなうHTTP 1.1 の 拡張メソッドを定義しています。それはweb をもっと普遍的な読み書き 可能な仕組みにするものです。基本的なアイディアはWebDAV互換のウェブ サーバは、一般的なファイルサーバのように振る舞うことができるという ことです。クライアントはWebDAVの<quote>共有</quote>をマウントする ことができ、NFSや、SMB共有のように動きます。"

#. Tag: para
#: appc-webdav.xml:32
#, fuzzy, no-c-format
msgid "The tragedy, though, is that despite the acronym, the RFC specification doesn't actually describe any sort of version control. Basic WebDAV clients and servers assume only one version of each file or directory exists, and can be repeatedly overwritten."
msgstr "しかしながら、RFC 2518 は、DAVの文字列中の<quote>V</quote>にもかかわらず、 どんなタイプのバージョン管理のモデルも提供しては<emphasis>いない</emphasis> ということを知っておくのは重要です。基本的な WebDAVクライアントとサーバは ファイルやディレクトリの一つのバージョンのみが存在するのが前提となっていて、 繰り返し上書きすることができます。"

#. Tag: para
#: appc-webdav.xml:38
#, fuzzy, no-c-format
msgid "Because RFC 2518 left out versioning concepts, another committee was left with the responsibility of writing RFC 3253 a few years later. The new RFC adds versioning concepts to WebDAV, placing the <quote>V</quote> back in <quote>DAV</quote> &mdash; hence the term <quote>DeltaV</quote>. WebDAV/DeltaV clients and servers are often called just <quote>DeltaV</quote> programs, since DeltaV implies the existence of basic WebDAV."
msgstr "RFC 2518 はバージョン化の概念がないので、 他の機能グループは RFC 3253 にまかされました。それは、 WebDAVにバージョン化の機能を追加したものです。この部分は<quote>DeltaV</quote> と呼ばれます。WebDAV/DeltaV クライアントとサーバはしばしば単に<quote>DeltaV</quote> クライアントとサーバと呼ばれます。DeltaVは基本的なWebDAVの 存在を含んでいるからです。"

#. Tag: para
#: appc-webdav.xml:47
#, fuzzy, no-c-format
msgid "The original WebDAV standard has been widely successful. Every modern computer operating system has a general WebDAV client built-in (details to follow), and a number of popular standalone applications are also able to speak WebDAV&mdash; Microsoft Office, Dreamweaver, and Photoshop to name a few. On the server end, the Apache webserver has been able to provide WebDAV services since 1998 and is considered the de-facto open-source standard. There are several other commercial WebDAV servers available, including Microsoft's own IIS."
msgstr "当初の WebDAV 標準は幅広く成功をおさめました。現在利用されている コンピュータのオペレーティングシステムは一般的な WebDAV クライアント を組み込みで持っています(詳しくは後述します)、また良く知られたさまざまな スタンドアロンのアプリケーションも WebDAV を話すことができます&mdash; 例をあげれば Microsoft Office, Dreamweave, Photoshop などがあります。 サーバ側では Apache ウェブサーバが 1998 年以降 WebDAV の機能を提供できる ようになり事実上のオープンソース標準と考えられています。他にもさまざまな 商用の WebDAV サーバが利用可能であり、それには Microsoft 自身の IIS も 含まれます。"

#. Tag: para
#: appc-webdav.xml:57
#, fuzzy, no-c-format
msgid "DeltaV, unfortunately, has not been so successful. It's very difficult to find any DeltaV clients or servers. The few that do exist are relatively unknown commercial products, and thus it's very difficult to test interoperability. It's not entirely clear as to why DeltaV has remained stagnant. Some argue that the specification is just too complex, others argue that while WebDAV's features have mass appeal (even the least technical users appreciate network file-sharing), version control features aren't interesting or necessary for most users. Finally, some have argued that DeltaV remains unpopular because there's still no open-source server product which implements it well."
msgstr "しかし不幸にも DeltaV の方はそれほど成功をおさめていません。DeltaV の クライアントやサーバの実装をみつけるのはとても困難なことです。 わずかに存在するものは比較的知られていない商用製品ですし、そのため 相互運用性をテストするのも非常に困難です。人によっては、それは単に 仕様が複雑すぎるからだと言いますし、別の人は WebDAV の機能は大衆受け する(最小限度の技術的な知識しか持っていないユーザでもネットワークの ファイル共有は喜んで利用します)のに対して、多くの人にとってバージョン 制御機能は興味がないか、あるいは不要であるのが理由だと言います。 さらに最後の意見として、DeltaV はそれを実装しているオープンソースの サーバ製品がまだ存在しないから人気がないのだと言うものもあります。"

#. Tag: para
#: appc-webdav.xml:70
#, fuzzy, no-c-format
msgid "When Subversion was still in its design phase, it seemed like a great idea to use Apache as a network server. It already had a module to provide WebDAV services. DeltaV was a relatively new specification. The hope was that the Subversion server module (<command>mod_dav_svn</command>) would eventually evolve into an open-source DeltaV reference implementation. Unfortunately, DeltaV has a very specific versioning model that doesn't quite line up with Subversion's model. Some concepts were mappable, others were not."
msgstr "Subversion がまだ設計段階にあったとき Apache httpd を主要なネットワーク サーバとして利用するというのは素晴らしいアイディアに思えました。 それはすでに WebDAV サービスを提供するモジュールを持っていたからです。 DeltaV は比較的新しい仕様でした。Subversion のサーバモジュール (mod_dav_svn) は最終的にはオープンソースの DeltaV の標準的な実装に 進化できるのではないかという期待がありました。しかし不幸なことに DeltaV は非常に特殊なバージョンモデルであり Subversion のモデルとは それほど親和性が良いとは言えません。概念的には対応させることが可能だと 言う人もいますし、いやダメだという人もいます。"

#. Tag: para
#: appc-webdav.xml:80
#, no-c-format
msgid "What does this mean, then?"
msgstr "それで、どういう意味?"

#. Tag: para
#: appc-webdav.xml:82
#, fuzzy, no-c-format
msgid "First, the Subversion client is not a fully-implemented DeltaV client. It needs certain types of things from the server that DeltaV itself cannot provide, and thus is largely dependent on a number of Subversion-specific HTTP <literal>REPORT</literal> requests that only <command>mod_dav_svn</command> understands."
msgstr "クライアントは DeltaV では提供することのできないようなサーバからある種の情報 を得る必要があり、そのため Subversion 特有の <literal>REPORT</literal> に幅広く依存していて、それはmod_dav_svn にしか理解できないような性質のものである。"

#. Tag: para
#: appc-webdav.xml:89
#, fuzzy, no-c-format
msgid "Second, <command>mod_dav_svn</command> is not a fully-realized DeltaV server. Many portions of the DeltaV specification were irrelevant to Subversion, and thus left unimplemented."
msgstr "DeltaV 仕様の多くの部分は Subversion には無関係であり実装されずに放置されている。"

#. Tag: para
#: appc-webdav.xml:94
#, fuzzy, no-c-format
msgid "There is still some debate in the developer community as to whether or not it's worthwhile to remedy either of these situations. It's fairly unrealistic to change Subversion's design to match DeltaV, so there's probably no way the client can ever learn to get everything it needs from a general DeltaV server. On the other hand, <command>mod_dav_svn</command> <emphasis>could</emphasis> be further developed to implement all of DeltaV, but it's hard to find motivation to do so&mdash;there are almost no DeltaV clients to interoperate with."
msgstr "このような状況にきちんと対応すべきかどうかについては開発者の間でまだ 議論があります。Subversion の設計を DeltaV に合うように変更することは およそ現実的ではないので、おそらくクライアントは一般的な DeltaV サーバ から必要なすべての情報を得ることはできないでしょう。いっぽう mod_dav_svn はすべての DeltaV を実装ためにさらに開発を進める<emphasis>かも</emphasis> 知れませんが、本当にそうしようと言う強い動機は見当たらないのが現状です &mdash; それと協調して動作する DeltaV クライアントがほとんどひとつも存在 していないのですから。"

#. Tag: title
#: appc-webdav.xml:111
#, no-c-format
msgid "Autoversioning"
msgstr "自動バージョン化"

#. Tag: para
#: appc-webdav.xml:113
#, no-c-format
msgid "While the Subversion client is not a full DeltaV client, nor the Subversion server a full DeltaV server, there's still a glimmer of WebDAV interoperability to be happy about: it's called autoversioning."
msgstr "Subversion クライアントはまだ完全な DeltaV クライアントではありませんし Subversion サーバも完全な DeltaV サーバではありませんが、 WebDAV 協調動作できるうれしい機能があります: それは自動バージョン化と 呼ばれるものです。"

#. Tag: para
#: appc-webdav.xml:118
#, fuzzy, no-c-format
msgid "Autoversioning is an optional feature defined in the DeltaV standard. A typical DeltaV server will reject an ignorant WebDAV client attempting to do a <literal>PUT</literal> to a file that's under version control. To change a version-controlled file, the server expects a series of proper versioning requests: something like <literal>MKACTIVITY</literal>, <literal>CHECKOUT</literal>, <literal>PUT</literal>, <literal>CHECKIN</literal>. But if the DeltaV server supports autoversioning, then write-requests from basic WebDAV clients are accepted. The server behaves as if the client <emphasis>had</emphasis> issued the proper series of versioning requests, performing a commit under the hood. In other words, it allows a DeltaV server to interoperate with ordinary WebDAV clients that don't understand versioning."
msgstr "自動バージョン化は DeltaV 標準ではオプションで実装することのできる機能 として定義されているものです。典型的な DeltaV サーバは単純なWebDAV ク ライアントがバージョン管理下にあるファイルに対して <literal>PUT</literal>命令を実行してすることを拒否します。バージョン管 理下にあるファイルを変更するにはサーバに対して適切なバージョン要求が必 要になります: それはたとえば <literal>MKACTIVITY</literal>, <literal>CHECKOUT</literal>, <literal>PUT</literal>, <literal>CHECKIN</literal>のような感じの命令です。しかし DeltaV サーバ が自動バージョン化をサポートすると基本的な WebDAV クライアントからの書き込み 要求も受け付けられるようになります。サーバはクライアントが適切なバージョン要求 のコマンド列を発行した*かのように*振舞い、内部的にコミットを実行します。 言い換えると DeltaV サーバは通常の WebDAV クライアントと協調動作できる ようになります。"

#. Tag: para
#: appc-webdav.xml:133
#, fuzzy, no-c-format
msgid "Because so many operating systems already have integrated WebDAV clients, the use case for this feature can be incredibly appealing to administrators working with non-technical users: imagine an office of ordinary users running Microsoft Windows or Mac OS. Each user <quote>mounts</quote> the Subversion repository, which appears to be an ordinary network folder. They use the shared folder as they always do: open files, edit them, save them. Meanwhile, the server is automatically versioning everything. Any administrator (or knowledgeable user) can still use a Subversion client to search history and retrieve older versions of data."
msgstr "すでに非常にたくさんのオペレーティングシステムが WebDAV クライアント機能 を被ｳ器ｶているのでこの機能は非常に広範囲にわたって利用できることに なります: 通常のユーザが Microsoft Windows や Mac OS を実行しているような オフィスを考えてみてください。それぞれのユーザは Subversion リポジトリを <quote>マウント</quote>し、しかもそれは通常のネットワークフォルダのように 見えます。通常やっているような共有フォルダを使うのと同じ感覚で操作できます: ファイルを開き、編集し、そして保存します。一方サーバは自動的にすべてを バージョン化します。管理者の側では(あるは知識のあるヘビーユーザは)依然として Subversion クライアントを使ってこの履歴を調べたり、古いバージョンのデータ を取得することができるのです。"

#. Tag: para
#: appc-webdav.xml:145
#, fuzzy, no-c-format
msgid "This scenario isn't fiction: it's real and it works, as of Subversion 1.2 and later. To activate autoversioning in <command>mod_dav_svn</command>, use the <literal>SVNAutoversioning</literal> directive within the <filename>httpd.conf</filename> Location block, like so:"
msgstr "この筋書きは架空のものではありません: Subversion 1.2 かそれ以降では 実際に動作するのです。mod_dav_svn で自動バージョン化機能を有効にする には<filename>httpd.conf</filename>の Location ブロック中で <literal>SVNAutoversioning</literal>ディレクティブを使ってください。 こんな感じです:"

#. Tag: screen
#: appc-webdav.xml:152
#, no-c-format
msgid ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNPath /path/to/repository\n"
"  SVNAutoversioning on\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNPath /path/to/repository\n"
"  SVNAutoversioning on\n"
"&lt;/Location&gt;"

#. Tag: para
#: appc-webdav.xml:154
#, no-c-format
msgid "When SVNAutoversioning is active, write requests from WebDAV clients result in automatic commits. A generic log message is auto-generated and attached to each revision."
msgstr "SVNAutoversioning が有効な場合には WebDAV クライアントからの要求は 不分割なコミットとなります。一般的なログメッセージが自動生成され それぞれのリビジョンにつけられます。"

#. Tag: para
#: appc-webdav.xml:158
#, fuzzy, no-c-format
msgid "Before activating this feature, however, understand what you're getting into. WebDAV clients tend to do <emphasis>many</emphasis> write requests, resulting in a huge number of automatically committed revisions. For example, when saving data, many clients will do a <literal>PUT</literal> of a 0-byte file (as a way of reserving a name) followed by another <literal>PUT</literal> with the real file data. The single file-write results in two separate commits. Also consider that many applications auto-save every few minutes, resulting in even more commits."
msgstr "しかしこの機能を有効にする前に本当にやろうとしていることを理解して ください。WebDAV クライアントは <emphasis>たくさんの</emphasis> 書き込み要求を実行しがちであり、これは自動的にコミットされる非常に たくさんのリビジョンが発生することを意味します。たとえば データを保存する場合、たくさんのクライアントがゼロバイトのファイルの <literal>PUT</literal>を実行し、その後に別の <literal>PUT</literal> が実際のデータをともなって実行されるでしょう。単一のファイル書き込み が二つの別々のコミットになってしまいます。さらに多くのアプリケーション では数分に一度の自動保存機能がはたらき、さらに多くのコミットが発生 してしまうでしょう。"

#. Tag: para
#: appc-webdav.xml:169
#, no-c-format
msgid "If you have a post-commit hook program that sends email, you may want to disable email generation either altogether, or on certain sections of the repository; it depends on whether you think the influx of emails will still prove to be valuable notifications or not. Also, a smart post-commit hook program can distinguish between a transaction created via autoversioning and one created through a normal <command>svn commit</command>. The trick is to look for a revision property named <literal>svn:autoversioned</literal>. If present, the commit was made by a generic WebDAV client."
msgstr "たとえばメールを送信するようなpost-commitのフックプログラムがある 場合、email 生成を完全に禁止したいと思うか、リポジトリの特定の部分に 関して禁止したいと思うかも知れません; それは email の流入量が 意味のある通知と考えられるかどうかにかかっています。さらに、賢い post-commitフックプログラムは自動バージョン化機能によって発生した トランザクションと通常の <command>svn commit</command>によって発生したトランザクションとを区別する ことができます。これには <literal>svn:autoversioned</literal>という 名前のリビジョンプロパティーを見るとうまくいきます。もし存在して いればそのコミットは一般的な WebDAV クライアントによるものです。"

#. Tag: para
#: appc-webdav.xml:180
#, no-c-format
msgid "Another feature that may be a useful complement for <literal>SVNAutoversioning</literal> comes from Apache's <literal>mod_mime</literal> module. If a WebDAV client adds a new file to the repository, there's no opportunity for the user to set the the <literal>svn:mime-type</literal> property. This might cause the file to appear as generic icon when viewed within a WebDAV shared folder, not having an association with any application. One remedy is to have a sysadmin (or other Subversion-knowledgeable person) check out a working copy and manually set the <literal>svn:mime-type</literal> property on necessary files. But there's potentially no end to such cleanup tasks. Instead, you can use the <literal>ModMimeUsePathInfo</literal> directive in your Subversion <literal>&lt;Location&gt;</literal> block:"
msgstr ""

#. Tag: screen
#: appc-webdav.xml:196
#, no-c-format
msgid ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNPath /path/to/repository\n"
"  SVNAutoversioning on\n"
"\n"
"  ModMimeUsePathInfo on\n"
"\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNPath /path/to/repository\n"
"  SVNAutoversioning on\n"
"\n"
"  ModMimeUsePathInfo on\n"
"\n"
"&lt;/Location&gt;"

#. Tag: para
#: appc-webdav.xml:198
#, no-c-format
msgid "This directive allows <literal>mod_mime</literal> to attempt automatic deduction of the mime-type on new files that enter the repository via autoversioning. The module looks at the file's named extension and possibly the contents as well; if the file matches some common patterns, then the the file's <literal>svn:mime-type</literal> property will be set automatically."
msgstr ""

#. Tag: title
#: appc-webdav.xml:212
#, no-c-format
msgid "Client Interoperability"
msgstr "クライアントの協調動作"

#. Tag: para
#: appc-webdav.xml:214
#, no-c-format
msgid "All WebDAV clients fall into one of three categories&mdash;standalone applications, file-explorer extensions, or filesystem implementations. These categories broadly define the types of WebDAV functionality available to users. <xref linkend=\"svn.webdav.clients.tbl-1\"/> gives our categorization and a quick description of some common pieces of WebDAV-enabled software. More details about these software offerings, as well as their general category, can be found in the sections that follow."
msgstr "すべての WebDAV クライアントは三つのどれかに分類されます&mdash; スタンドアロン・アプリケーション、ファイルエクスプローラ拡張、そして ファイルシステムの実装です。これらの分類はおおざっぱに言ってユーザに 対して提供できる WebDAV の機能の種類を決めます。 <xref linkend=\"svn.webdav.clients.tbl-1\"/> はその分類と、WebDAV が利用可能な ソフトウェアの共通部品の簡単な説明です。これらのソフトウェアが提供する機能の 詳細と一般的な分類についてはその後の節で見ることができます。"

#. Tag: title
#: appc-webdav.xml:225
#, no-c-format
msgid "Common WebDAV Clients"
msgstr "よく利用される WebDAV クライアント"

#. Tag: entry
#: appc-webdav.xml:229
#, no-c-format
msgid "Software"
msgstr "ソフトウェア"

#. Tag: entry
#: appc-webdav.xml:230
#, no-c-format
msgid "Type"
msgstr ""

#. Tag: entry
#: appc-webdav.xml:231
#, no-c-format
msgid "Windows"
msgstr "Windows"

#. Tag: entry
#: appc-webdav.xml:232
#, fuzzy, no-c-format
msgid "<entry>Mac</entry>"
msgstr "<entry>Mac OS X</entry>"

#. Tag: entry
#: appc-webdav.xml:233
#, no-c-format
msgid "Linux"
msgstr "Linux"

#. Tag: entry
#: appc-webdav.xml:239
#, no-c-format
msgid "Adobe Photoshop"
msgstr "Adobe Photoshop"

#. Tag: entry
#: appc-webdav.xml:240
#: appc-webdav.xml:249
#: appc-webdav.xml:258
#: appc-webdav.xml:266
#: appc-webdav.xml:275
#, fuzzy, no-c-format
msgid "Standalone WebDAV application"
msgstr "<entry>スタンドアロン WebDAV アプリケーション</entry>"

#. Tag: entry
#: appc-webdav.xml:241
#: appc-webdav.xml:251
#: appc-webdav.xml:252
#: appc-webdav.xml:259
#: appc-webdav.xml:260
#: appc-webdav.xml:261
#: appc-webdav.xml:267
#: appc-webdav.xml:276
#: appc-webdav.xml:286
#: appc-webdav.xml:297
#: appc-webdav.xml:306
#: appc-webdav.xml:314
#: appc-webdav.xml:322
#: appc-webdav.xml:331
#: appc-webdav.xml:343
#, fuzzy, no-c-format
msgid "<entry>X</entry>"
msgstr "<entry>いいえ</entry>"

#. Tag: entry
#: appc-webdav.xml:244
#, no-c-format
msgid "Image editing software, allowing direct opening from, and writing to, WebDAV URLs"
msgstr "画像編集ソフトで、WebDAV URL を直接開いたり書き込んだりすることができます。"

#. Tag: entry
#: appc-webdav.xml:248
#, no-c-format
msgid "Cadaver"
msgstr "Cadaver"

#. Tag: entry
#: appc-webdav.xml:253
#, no-c-format
msgid "Command-line WebDAV client supporting file transfer, tree, and locking operations"
msgstr "コマンドライン WebDAV クライアントで、ファイル転送、ツリー、排他操作をサポートしています。"

#. Tag: entry
#: appc-webdav.xml:257
#, no-c-format
msgid "DAV Explorer"
msgstr "DAV Explorer"

#. Tag: entry
#: appc-webdav.xml:262
#, fuzzy, no-c-format
msgid "Java GUI tool for exploring WebDAV shares"
msgstr "WebDAV 共有を閲覧するための GUI ツールです。"

#. Tag: entry
#: appc-webdav.xml:265
#, no-c-format
msgid "Macromedia Dreamweaver"
msgstr "Macromedia Dreamweaver"

#. Tag: entry
#: appc-webdav.xml:270
#, no-c-format
msgid "Web production software able to directly read from and write to WebDAV URLs"
msgstr "WebDAV URL に対して直接の読み書き可能な Web ページ作成ツール。"

#. Tag: entry
#: appc-webdav.xml:274
#, no-c-format
msgid "Microsoft Office"
msgstr "Microsoft Office"

#. Tag: entry
#: appc-webdav.xml:279
#, no-c-format
msgid "Office productivity suite with several components able to directly read from and write to WebDAV URLs"
msgstr "オフィスの生産性を高めるさまざまなコンポーネントからなる製品 で、WebDAV URL に対して直接読み書きすることが可能です。"

#. Tag: entry
#: appc-webdav.xml:284
#, no-c-format
msgid "<entry>Microsoft Web Folders</entry>"
msgstr "<entry>Microsoft Webfolders</entry>"

#. Tag: entry
#: appc-webdav.xml:285
#: appc-webdav.xml:294
#: appc-webdav.xml:303
#, fuzzy, no-c-format
msgid "File-explorer WebDAV extension"
msgstr "<entry>ファイルエクスプローラの WebDAV 拡張</entry>"

#. Tag: entry
#: appc-webdav.xml:289
#, no-c-format
msgid "GUI file explorer program able to perform tree operations on a WebDAV share"
msgstr "WebDAV 共有上のツリー操作を可能にする GUI のファイルエクスプローラ・プラグラムす。"

#. Tag: entry
#: appc-webdav.xml:293
#, no-c-format
msgid "GNOME Nautilus"
msgstr "GNOME Nautilus"

#. Tag: entry
#: appc-webdav.xml:298
#: appc-webdav.xml:307
#, no-c-format
msgid "GUI file explorer able to perform tree operations on a WebDAV share"
msgstr "WebDAV 共有上のツリー操作を可能にする GUI のファイルエクスプローラです。"

#. Tag: entry
#: appc-webdav.xml:302
#, no-c-format
msgid "KDE Konqueror"
msgstr "KDE Konqueror"

#. Tag: entry
#: appc-webdav.xml:311
#, no-c-format
msgid "<entry>Mac OS X</entry>"
msgstr "<entry>Mac OS X</entry>"

#. Tag: entry
#: appc-webdav.xml:312
#: appc-webdav.xml:321
#: appc-webdav.xml:330
#: appc-webdav.xml:340
#, no-c-format
msgid "<entry>WebDAV filesystem implementation</entry>"
msgstr "<entry>WebDAV のファイルシステム実装</entry>"

#. Tag: entry
#: appc-webdav.xml:316
#, fuzzy, no-c-format
msgid "Operating system has built-in support for mounting WebDAV shares."
msgstr "WebDAV 共有をオペレーティングシステムに、ローカルにマウントする機能を組み込みでサポートしています。"

#. Tag: entry
#: appc-webdav.xml:320
#, no-c-format
msgid "Novell NetDrive"
msgstr "Novell NetDrive"

#. Tag: entry
#: appc-webdav.xml:325
#, no-c-format
msgid "Drive-mapping program for assigning Windows drive letters to a mounted remote WebDAV share"
msgstr "Windows のドライブ識別文字をマウントされたリモート WebDAV 共有に 割り当てるための、ドライブマッピング・プログラムです。"

#. Tag: entry
#: appc-webdav.xml:329
#, no-c-format
msgid "SRT WebDrive"
msgstr "SRT WebDrive"

#. Tag: entry
#: appc-webdav.xml:334
#, no-c-format
msgid "File transfer software which, among other things, allows the assignment of Windows drive letters to a mounted remote WebDAV share"
msgstr "機能の一部として、Windows のドライブ識別文字を マウントされたリモート WebDAV 共有に割り当てることも可能な、ファイル転送ソフトウェアです。"

#. Tag: entry
#: appc-webdav.xml:339
#, no-c-format
msgid "davfs2"
msgstr "davfs2"

#. Tag: entry
#: appc-webdav.xml:344
#, no-c-format
msgid "Linux file system driver that allows you to mount a WebDAV share"
msgstr "Linux ファイルシステムドライバで、WebDAV 共有をマウントできます。"

#. Tag: title
#: appc-webdav.xml:354
#, fuzzy, no-c-format
msgid "Standalone WebDAV applications"
msgstr "<entry>スタンドアロン WebDAV アプリケーション</entry>"

#. Tag: para
#: appc-webdav.xml:356
#, fuzzy, no-c-format
msgid "A WebDAV application is a program which speakes WebDAV protocols with a WebDAV server. We'll cover some of the most popular programs with this kind of WebDAV support."
msgstr "WebDAV アプリケーションは WebDAV サーバと通信可能な WebDAV プロトコル の機能を組み込んだプログラムのことです。このような形での WebDAV を サポートしている最も有名なプログラムのいくつかを紹介します。"

#. Tag: title
#: appc-webdav.xml:362
#, no-c-format
msgid "Microsoft Office, Dreamweaver, Photoshop"
msgstr "Microsoft Office, Dreamweaver, Photoshop"

#. Tag: para
#: appc-webdav.xml:364
#, no-c-format
msgid "On Windows, there are several well-known applications that contain integrated WebDAV client functionality, such as Microsoft's Office, <footnote> <para>WebDAV support was removed from Microsoft Access for some reason, but exists in the rest of the Office suite.</para> </footnote> Adobe's Photoshop, and Macromedia's Dreamweaver programs. They're able to directly open and save to URLs, and tend to make heavy use of WebDAV locks when editing a file."
msgstr "Windows 上では Microsoft Office のような、WebDAV のクライアント機能を 統合した有名なアプリケーションがいくつかあります。 <footnote> <para>ある理由で WebDAV のサポートは Microsoft Access からは 削除されましたが、それ以外の Office スイートには存在します。 </para> </footnote> Adobe の Photoshop と Macromedia の Dreamweaver 。 両方とも直接 URL を開いたり保存したりすることができますが ファイルを編集するさい WebDAV の排他制御を頻繁に利用する傾向が あります。"

#. Tag: para
#: appc-webdav.xml:376
#, no-c-format
msgid "Note that while many of these programs also exist for the Mac OS X, they do not appear to support WebDAV directly on that platform. In fact, on Mac OS X, the <guimenu>File-&gt;Open</guimenu> dialog box doesn't allow one to type a path or URL at all. It's likely that the WebDAV features were deliberately left out of Macintosh versions of these programs, since OS X already provides such excellent low-level filesystem support for WebDAV."
msgstr "Mac OS X 上にも同じようなたくさんのプログラムが存在しますが、 それらのプログラム上では直接 WebDAV がサポートされているようには見えません。じっさい Mac OS X 上では、<guimenu>File-&gt;Open</guimenu>ダイアログは パスや URL の入力がまったく許されてはいません。これらのプログラムの Macintosh バージョンでは WebDAV の機能はわざと実装されていない ように見えますが、それは OS X 自身がすでに WebDAV 用のすばらしい 低レベルファイルシステムを提供しているからです。"

#. Tag: title
#: appc-webdav.xml:389
#, no-c-format
msgid "Cadaver, DAV Explorer"
msgstr "Cadaver, DAV Explorer"

#. Tag: para
#: appc-webdav.xml:391
#, fuzzy, no-c-format
msgid "Cadaver is a bare-bones Unix commandline program for browsing and changing WebDAV shares. Like the Subversion client, it uses the neon HTTP library&mdash;not surprisingly, since both neon and cadaver are written by the same author. Cadaver is free software (GPL license) and is available at <ulink url=\"http://www.webdav.org/cadaver/\"></ulink>."
msgstr "Cadaver は生の Unix コマンドラインプログラムで、WebDAV 共有を 閲覧したり変更したりすることのできるものです。Subversion クライアントと同様、 neon HTTP ライブラリが必要になります&mdash; しかしびっくりする必要はありません。 neon と cadaver は同じ作者によって書かれています。Cadaver はフリーソフトウェア (GPL ライセンス)で、<ulink url=\"http://www.webdav.org/cadaver/\"></ulink>から取得できます。"

#. Tag: para
#: appc-webdav.xml:399
#, fuzzy, no-c-format
msgid "Using cadaver is similar to using a commandline FTP program, and thus it's extremely useful for basic WebDAV debugging. It can be used to upload or download files in a pinch, and also to examine properties, and to copy, move, lock or unlock files:"
msgstr "cadaver を使うのは、ちょうどコマンドラインの FTP プログラムを使うような感じ なので、基本的な WebDAV 機能をデバッグするのにとても役立ちます。困った時には ファイルをアップロードしたりダウンロードしたりするのに使うことができますし、 プロパティーを調べたり、ファイルのコピー、移動、ロック、アンロックも やってのけます:"

#. Tag: screen
#: appc-webdav.xml:405
#, no-c-format
msgid ""
"$ cadaver http://host/repos\n"
"dav:/repos/&gt; ls\n"
"Listing collection `/repos/': succeeded.\n"
"Coll: &gt; foobar                                 0  May 10 16:19\n"
"      &gt; playwright.el                       2864  May  4 16:18\n"
"      &gt; proofbypoem.txt                     1461  May  5 15:09\n"
"      &gt; westcoast.jpg                      66737  May  5 15:09\n"
"\n"
"dav:/repos/&gt; put README\n"
"Uploading README to `/repos/README':\n"
"Progress: [=============================&gt;] 100.0% of 357 bytes succeeded.\n"
"\n"
"dav:/repos/&gt; get proofbypoem.txt\n"
"Downloading `/repos/proofbypoem.txt' to proofbypoem.txt:\n"
"Progress: [=============================&gt;] 100.0% of 1461 bytes succeeded."
msgstr ""
"$ cadaver http://host/repos\n"
"dav:/repos/&gt; ls\n"
"Listing collection `/repos/': succeeded.\n"
"Coll: &gt; foobar                                 0  May 10 16:19\n"
"      &gt; playwright.el                       2864  May  4 16:18\n"
"      &gt; proofbypoem.txt                     1461  May  5 15:09\n"
"      &gt; westcoast.jpg                      66737  May  5 15:09\n"
"\n"
"dav:/repos/&gt; put README\n"
"Uploading README to `/repos/README':\n"
"Progress: [=============================&gt;] 100.0% of 357 bytes succeeded.\n"
"\n"
"dav:/repos/&gt; get proofbypoem.txt\n"
"Downloading `/repos/proofbypoem.txt' to proofbypoem.txt:\n"
"Progress: [=============================&gt;] 100.0% of 1461 bytes succeeded."

#. Tag: para
#: appc-webdav.xml:407
#, fuzzy, no-c-format
msgid "DAV Explorer is another standalone WebDAV client, written in Java. It's under a free Apache-like license and is available at <ulink url=\"http://www.ics.uci.edu/~webdav/\"></ulink>. DAV Explorer does everything cadaver does, but has the advantages of being portable and being a more user-friendly GUI application. It's also one of the first clients to support the new WebDAV Access Control Protocol (RFC 3744)."
msgstr "DAV Explorer はもう一つのスタンドアロン WebDAV クライアントであり Java で書かれていますfree Apache-like license のもとで、 <ulink url=\"http://www.ics.uci.edu/‾webdav/\"></ulink>から取得可能です。 DAV Explorer は cadaver でできるすべてのことができますが、より可搬性に すぐれ、ユーザに優しい GUI アプリケーションです。またこれは WebDAV アクセス制御プロトコル(RFC 3744) をサポートした最初のクライアントの 一つでもあります。"

#. Tag: para
#: appc-webdav.xml:415
#, fuzzy, no-c-format
msgid "Of course, DAV Explorer's ACL support is useless in this case, since <command>mod_dav_svn</command> doesn't support it. The fact that both Cadaver and DAV Explorer support some limited DeltaV commands isn't particularly useful either, since they don't allow <literal>MKACTIVITY</literal> requests. But it's not relevant anyway; we're assuming all of these clients are operating against an autoversioning repository."
msgstr "もちろん DAV Explorer の ACL サポートはこの場合やくには立ちません。mod_dav_svn がサポートしていないからです。Cadaver と DAV Explorer がどちらも制限された DeltaV コマンドをサポートしていても、あまり役には立たちません。 <literal>MKACTIVITY</literal>要求が許されていないからです。しかし、とにかく それは関係のないことです; ここで仮定しているのはこれらのクライアントの すべては自動バージョン化されたリポジトリを操作できるということです。"

#. Tag: title
#: appc-webdav.xml:429
#, fuzzy, no-c-format
msgid "File-explorer WebDAV extensions"
msgstr "<entry>ファイルエクスプローラの WebDAV 拡張</entry>"

#. Tag: para
#: appc-webdav.xml:431
#, fuzzy, no-c-format
msgid "Some popular file explorer GUI programs support WebDAV extensions which allow a user to browse a DAV share as if it was just another directory on the local computer, and to perform basic tree editing operations on the items in that share. For example, Windows Explorer is able to browse a WebDAV server as a <quote>network place</quote>. Users can drag files to and from the desktop, or can rename, copy, or delete files in the usual way. But because it's only a feature of the file-explorer, the DAV share isn't visible to ordinary applications. All DAV interaction must happen through the explorer interface."
msgstr "いくつかの有名なファイルエクスプローラ GUI プログラムは WebDAV 拡張を サポートしていて、ユーザに、DAV 共有領域を、単にあたかもローカルコンピュータ 上にある別のディレクトリのように見せたり、その共有領域のアイテムに対する 基本的なツリー編集操作を可能にするものです。 たとえば Windows Explorer では、ひとつの<quote>ネットワークプレース</quote>と して WebDAV サーバを閲覧できます。ユーザはファイルをデスクトップ上で移動 したり、名称変更、コピー、削除などの処理を通常のやりかたで操作できます。 しかしそれはファイルエクスプローラの機能でしかないので、通常のアプリケーション には DAV 共有領域は見えません。すべての DAV 操作は、エクスプローラのインターフェース を通じて実行しなくてはなりません。"

#. Tag: title
#: appc-webdav.xml:445
#, no-c-format
msgid "<title>Microsoft Web Folders</title>"
msgstr "<title>Microsoft Webfolders</title>"

#. Tag: para
#: appc-webdav.xml:447
#, no-c-format
msgid "Microsoft was one of the original backers of the WebDAV specification, and first started shipping a client in Windows 98, known as <quote>Web Folders</quote>. This client was also shipped in Windows NT4 and 2000."
msgstr "Microsoft は WebDAV 仕様の元来の支援者の一つであり、Windows 98 で最初の クライアントを出荷し始めました。これは<quote>Webfolders</quote>と言う 名前で知られています。このクライアントはまた Windows NT4 と 2000 でも 出荷されました。"

#. Tag: para
#: appc-webdav.xml:452
#, no-c-format
msgid "The original Web Folders client was an extension to Explorer, the main GUI program used to browse filesystems. It works well enough. In Windows 98, the feature might need to be explicitly installed if Web Folders aren't already visible inside <quote>My Computer</quote>. In Windows 2000, simply add a new <quote>network place</quote>, enter the URL, and the WebDAV share will pop up for browsing."
msgstr "もともとの Webfolder クライアントはエクスプローラの拡張であり、これは ファイルシステムを閲覧する際の主要な GUI プログラムでした。これはとても うまく動作しています。Windows 98 では <quote>マイコンピュータ</quote> の中に Webfolder がない場合には明示的にインストールする必要がありました。 Windows 2000 では単に新しい <quote>ネットワークプレース</quote>を追加 し、URL を入力すれば WebDAV 共有が閲覧用にポップアップします。"

#. Tag: para
#: appc-webdav.xml:460
#, no-c-format
msgid "With the release of Windows XP, Microsoft started shipping a new implementation of Web Folders, known as the <quote>WebDAV mini-redirector</quote>. The new implementation is a filesystem-level client, allowing WebDAV shares to be mounted as drive letters. Unfortunately, this implementation is incredibly buggy. The client usually tries to convert http URLs (<literal>http://host/repos</literal>) into UNC share notation (<literal>\\\\host\\repos</literal>); it also often tries to use Windows Domain authentication to respond to basic-auth HTTP challenges, sending usernames as <literal>HOST\\username</literal>. These interoperability problems are severe and documented in numerous places around the web, to the frustration of many users. Even Greg Stein, the original author of Apache's WebDAV module, recommends against trying to use XP Web Folders against an Apache server."
msgstr "Windows XP のリリースで、Microsoft は Webfolder の新しい実装を出荷し 始めましたが、これは <quote>WebDAV mini-redirector</quote>という名前で 知られています。新しい実装はファイルシステムレベルのクライアントであり WebDAV 共有をドライブ文字をつけてマウントできるようにしたものです。 残念なことにこの実装はかなりバグがあります。クライアントは通常 http URL (<literal>http://host/repos</literal>) を UNC 共有記法 (<literal>¥¥host¥repos</literal>)に変換しようとします; また Windows ドメイン認証を使ってHTTP 基本認証要求に応答しますが、このとき ユーザ名には <literal>HOST¥username</literal>が利用されます。 このような協調動作の問題は深刻なもので、多くのユーザに対する不満を 解消するための数えきれないくらいのドキュメントがネット上に存在して います。Apache の WebDAV モジュールを最初に設計した Greg Stein で すら Apache サーバに対して XP Webfolder を利用することを推奨 していません。"

#. Tag: para
#: appc-webdav.xml:477
#, no-c-format
msgid "It turns out that the original <quote>Explorer-only</quote> Web Folders implementation isn't dead in XP, it's just buried. It's still possible to find it by using this technique:"
msgstr "最初の <quote>エクスプローラ機能のみの</quote> Webfolder の実装は XP でもなくなってはいませんが、埋もれてしまっています。以下のような 方法を使っていまでも探すことはできます:"

#. Tag: para
#: appc-webdav.xml:485
#, no-c-format
msgid "Go to 'Network Places'."
msgstr "'ネットワークプレース' を選択します。"

#. Tag: para
#: appc-webdav.xml:489
#, no-c-format
msgid "Add a new network place."
msgstr "新しいネットワークプレースを追加します。"

#. Tag: para
#: appc-webdav.xml:493
#, no-c-format
msgid "When prompted, enter the URL of the repository, but <emphasis>include a port number</emphasis> in the URL. For example, <literal>http://host/repos</literal> would be entered as <literal>http://host:80/repos</literal> instead."
msgstr "プロンプトが出たらリポジトリの URL を入力しますが URL には <emphasis>ポート番号</emphasis>を含めます。例えば <literal>http://host/repos</literal>は、かわりに <literal>http://host:80/repos</literal>と指定します。"

#. Tag: para
#: appc-webdav.xml:501
#, no-c-format
msgid "Respond to any authentication prompts."
msgstr "認証要求に正しく答えます。"

#. Tag: para
#: appc-webdav.xml:506
#, fuzzy, no-c-format
msgid "There are a number of other rumored workarounds to the problems, but none of them seem to work on all versions and patchlevels of Windows XP. In our tests, only the previous algorithm seems to work consistently on every system. The general consensus of the WebDAV community is that you should avoid the new Web Folders implementation and use the old one instead, and that if you need a real filesystem-level client for Windows XP, then use a third-party program like WebDrive or NetDrive."
msgstr "この問題の回避策として他にもさまざまなうわさがありますが、Windows XP の すべてのバージョンとパッチレベルでうまく動作するものはなさそうです。 私たちのテストでは今示したアルゴリズムがどのシステムでも常にうまくいく ように思えます。WebDAV コミュニティーの一般的に合意されていることは、 新しい Webfolders の実装のかわりに古いものを使うべきであることと、 Windows XP 上で本当のファイルシステムレベルのクライアントが必要な場合 にはWebDrive や NetDrive のようなサードパーティー製のプログラムを使うこと です。"

#. Tag: para
#: appc-webdav.xml:516
#, no-c-format
msgid "A final tip: if you're attempting to use XP Web Folders, make sure you have the absolute latest version from Microsoft. For example, Microsoft released a bug-fixed version in January 2005, available at <ulink url=\"http://support.microsoft.com/?kbid=892211\"></ulink>. In particular, this release is known to fix a bug whereby browsing a DAV share shows an unexpected infinite recursion."
msgstr ""

#. Tag: title
#: appc-webdav.xml:529
#, no-c-format
msgid "Nautilus, Konqueror"
msgstr "Nautilus, Konqueror"

#. Tag: para
#: appc-webdav.xml:531
#, fuzzy, no-c-format
msgid "Nautilus is the official file manager/browser for the GNOME desktop (<ulink url=\"http://www.gnome.org\"></ulink>), and Konqueror is the manager/browser for the KDE desktop (<ulink url=\"http://www.kde.org\"></ulink>). Both of these applications have an explorer-level WebDAV client built-in, and operate just fine against an autoversioning repository."
msgstr "Nautilus は GNOME デスクトップの公式なファイルマネージャ/ブラウザ で(<ulink url=\"http://www.gnome.org\"></ulink>)、Konqueror は KDE デスクトップの ファイルマネージ/ブラウザです(<ulink url=\"http://www.kde.org\"></ulink>)。どちらの アプリケーションもエクスプローラレベルでの組み込み WebDAV クライアントで、 自動バージョン化されたリポジトリに対してもうまく動作します。"

#. Tag: para
#: appc-webdav.xml:537
#, no-c-format
msgid "In GNOME's Nautilus, from the <guimenu>File menu</guimenu>, select <guimenuitem>Open location</guimenuitem> and enter the URL. The repository should then be displayed like any other filesystem."
msgstr "GNOME の Nautilus の場合、<guimenu>ファイルメニュー</guimenu>で <guimenuitem>Open location</guimenuitem>を 選択し、URL を入力します。これでリポジトリは他のファイルシステムと同じように 見えるはずです。"

#. Tag: para
#: appc-webdav.xml:542
#, fuzzy, no-c-format
msgid "In KDE's Konqueror, you need to use the <literal>webdav://</literal> scheme when entering the URL in the location bar. If you enter an <literal>http://</literal> URL, Konqueror will behave like an ordinary web browser. You'll likely see the generic HTML directory listing produced by <command>mod_dav_svn</command>. By entering <literal>webdav://host/repos</literal> instead of <literal>http://host/repos</literal>, Konqueror becomes a WebDAV client and displays the repository as a filesystem."
msgstr "KDE の Konqueror の場合は、ロケーションバーに URL を入力するさいに <literal>webdav://</literal>スキーマを使う必要があります。<literal>http://</literal> の形の URL を入力すると、Konquerorは通常のウェブブラウザのように動作します。 たぶん mod_dav_svn によって生成される一般的な HTML のディレクトリ一覧が表示される ことでしょう。 <literal>http://host/repos</literal>のかわりに <literal>webdav://host/repos</literal>を入力すると、Konqueror は WebDAV クライアントとなり、ファイルシステムとしてリポジトリを表示するようになります。"

#. Tag: title
#: appc-webdav.xml:558
#, no-c-format
msgid "<title>WebDAV filesystem implementation</title>"
msgstr "<title>WebDAV ファイルシステムの実装</title>"

#. Tag: para
#: appc-webdav.xml:560
#, fuzzy, no-c-format
msgid "The WebDAV filesystem implementation is arguably the best sort of WebDAV client. It's implemented as a low-level filesystem module, typically within the operating system's kernel. This means that the DAV share is mounted like any other network filesystem, similar to mounting an NFS share on Unix, or attaching an SMB share as drive letter in Windows. As a result, this sort of client provides completely transparent read/write WebDAV access to all programs. Applications aren't even aware that WebDAV requests are happening."
msgstr "WebDAV ファイルシステムの実装は おそらく WebDAV クライアントの最もすぐれた ものの一つです。それは低レベルの ファイルシステム、典型的にはオペレーティングシステムのカーネル内部 に実装されます。これが意味することは、DAV 共有は他のネットワークファイル システムと同じように、たとえば Unix なら NFS や、Windows ならドライブ文字を つけた SMB 共有のような形でマウントすることができるということです。 結果として、この手のクライアントはすべてのプログラムに対して完全に 読み書き透過な WebDAV アクセスを提供できることになります。アプリケーションは 実際には WebDAV 要求が発生していることに気づきもしないでしょう。"

#. Tag: title
#: appc-webdav.xml:573
#, no-c-format
msgid "WebDrive, NetDrive"
msgstr "WebDrive, NetDrive"

#. Tag: para
#: appc-webdav.xml:575
#, fuzzy, no-c-format
msgid "Both WebDrive and NetDrive are excellent commercial products which allow a WebDAV share to be attached as drive letters in Windows. We've had nothing but success with these products. At the time of writing, WebDrive can be purchased from South River Technologies (<ulink url=\"http://www.southrivertech.com\"></ulink>). NetDrive ships with Netware, is free of charge, and can be found by searching the web for <quote>netdrive.exe</quote>. Though it is freely available online, users are required to have a Netware license. (If any of that sounds odd to you, you're not alone. See this page on Novell's website: <ulink url=\"http://www.novell.com/coolsolutions/qna/999.html\"></ulink>)"
msgstr "WebDrive も NetDrive も非常にすばらしい商用製品であり、WebDAV 共有を ドライブ文字に対応することができます。これらの製品を使って接続を失敗 させることはどうしてもできませんでした。これを書いている時点で WebDrive はSouth River Technologies (<ulink url=\"http://www.southrivertech.com\"></ulink>) から購入可能です。NetDrive は Netware に付属しており、それ自体は無料です。 <quote>netdrive.exe</quote> のサイトをウェブで検索すると出てきます。 (奇妙な話にだと思うのはあなただけではありません。以下の Novell のウェプサイトを 見てください: <ulink url=\"http://www.novell.com/coolsolutions/qna/999.html\"></ulink>)"

#. Tag: title
#: appc-webdav.xml:590
#, no-c-format
msgid "<title>Mac OS X</title>"
msgstr "<title>Mac OS X</title>"

#. Tag: para
#: appc-webdav.xml:592
#, fuzzy, no-c-format
msgid "Apple's OS X operating system has an integrated filesystem-level WebDAV client. From the Finder, select the <guimenuitem>Connect to Server</guimenuitem> item from the <guimenu>Go menu</guimenu>. Enter a WebDAV URL, and it appears as a disk on the desktop, just like any other mounted volume. You can also mount a WebDAV share from the Darwin terminal by using the <literal>webdav</literal> filesystem type with the <command>mount</command> command:"
msgstr "Apple 社の OS X オペレーティングシステムには ファイルシステムレベルで統合された WebDAV クライアントがあります。 ファインダーの <guimenu>Go menu</guimenu> から <guimenuitem>Connect to Server</guimenuitem> アイテムを選択します。 この状態で WebDAV URL を入力すれば、他のマウントされたボリュームと 同じようにデスクトップ上のディスクとしてアクセスできるようになります<footnote><para>Darwin の端末の場合は、<literal>mount -t webdav URL /mountpoint</literal>を実行しても 同じことです。</para></footnote>。"

#. Tag: screen
#: appc-webdav.xml:601
#, fuzzy, no-c-format
msgid ""
"$ mount -t webdav http://svn.example.com/repos/project /some/mountpoint\n"
"$"
msgstr ""
"$ svn checkout http://host.example.com:7382/repos/project\n"
"&hellip;"

#. Tag: para
#: appc-webdav.xml:603
#, fuzzy, no-c-format
msgid "Note that if your <command>mod_dav_svn</command> is older than version 1.2, OS X will refuse to mount the share as read-write; it will appear as read-only. This is because OS X insists on locking support for read-write shares, and the ability to lock files first appeared in Subversion 1.2."
msgstr "使っている mod_dav_svn がバージョン 1.2 よりも古い場合 OS X はマウント共有部分を読み書きモードでマウントするのを拒否し、 読み込み専用になります。OS X が読み書きモードでの共有を サポートしていますが、ファイルロックの機能は Subversion 1.2 で初めて サポートされたものだからです。"

#. Tag: para
#: appc-webdav.xml:610
#, no-c-format
msgid "One more word of warning: OS X's WebDAV client can sometimes be overly sensitive to HTTP redirects. If OS X is unable to mount the repository at all, you may need to enable the BrowserMatch directive in the Apache server's <filename>httpd.conf</filename>:"
msgstr "もう一点だけ: OS X の WebDAV クライアントは HTTP のリダイレクトに 対して必要以上に神経質に動作することがあります。リポジトリをまったく マウントできない場合には、Apache サーバの <filename>httpd.conf</filename> ファイルの、BrowserMatch ディレクティブを有効にする必要があるかも 知れません:"

#. Tag: screen
#: appc-webdav.xml:616
#, no-c-format
msgid "BrowserMatch \"^WebDAVFS/1.[012]\" redirect-carefully"
msgstr "BrowserMatch \"^WebDAVFS/1.[012]\" redirect-carefully"

#. Tag: title
#: appc-webdav.xml:622
#, no-c-format
msgid "Linux davfs2"
msgstr "Linux davfs2"

#. Tag: para
#: appc-webdav.xml:624
#, no-c-format
msgid "Linux davfs2 is a filesystem module for the Linux kernel, whose development is located at <ulink url=\"http://dav.sourceforge.net/\"></ulink>. Once installed, a WebDAV network share can be mounted with the usual Linux mount command:"
msgstr "Linux davfs2 は Linux カーネル用のファイルシステムモジュールで <ulink url=\"http://dav.sourceforge.net/\"></ulink> で開発されています。 一度インストールしてしまえば WebDAV ネットワーク共有は通常の Linux の mount コマンドによってマウントできます:"

#. Tag: screen
#: appc-webdav.xml:629
#, no-c-format
msgid "$ mount.davfs http://host/repos /mnt/dav"
msgstr "$ mount.davfs http://host/repos /mnt/dav"

#. Tag: title
#: appd-third-party-tools.xml:2
#, no-c-format
msgid "Third Party Tools"
msgstr "サードパーティー製ツール"

#. Tag: para
#: appd-third-party-tools.xml:4
#, no-c-format
msgid "Subversion's modular design (covered in <xref linkend=\"svn.developer.layerlib\"/>) and the availability of language bindings (as described in <xref linkend=\"svn.developer.usingapi.otherlangs\"/>) make it a likely candidate for use as an extension or backend to other pieces of software. For a listing of many third-party tools that are using Subversion functionality under-the-hood, check out the Links page on the Subversion website (<ulink url=\"http://subversion.tigris.org/project_links.html\"></ulink>)."
msgstr "Subversion のモジュール化された設計(<xref linkend=\"svn.developer.layerlib\"/>で議論しました)と可能な言語連係 (<xref linkend=\"svn.developer.usingapi.otherlangs\"/>に記述があります)は他のソフトウェア の拡張やバックエンドとして利用することのできる選択子になります。 Subversion の機能を後ろで使うようなサードパーティー製のツール の一覧は、Subversion ウェブサイト (<ulink url=\"http://subversion.tigris.org/project_links.html\"></ulink>) のリンクページにあります。"

#. Tag: title
#: book.xml:26
#, no-c-format
msgid "Version Control with Subversion"
msgstr "Subversion によるバージョン管理"

#. Tag: subtitle
#: book.xml:30
#, fuzzy, no-c-format
msgid "For Subversion 1.4"
msgstr "For Subversion 1.4"

#. Tag: subtitle
#: book.xml:34
#, fuzzy, no-c-format
msgid "(Compiled from &svn.l10n_revision;&svn.version;)"
msgstr "(Compiled from &svn.l10n_revision;&svn.version;)"

#. Tag: author
#: book.xml:40
#, no-c-format
msgid "<firstname>Ben</firstname> <surname>Collins-Sussman</surname>"
msgstr "<firstname>Ben</firstname> <surname>Collins-Sussman</surname>"

#. Tag: author
#: book.xml:45
#, no-c-format
msgid "<firstname>Brian W.</firstname> <surname>Fitzpatrick</surname>"
msgstr "<firstname>Brian W.</firstname> <surname>Fitzpatrick</surname>"

#. Tag: author
#: book.xml:50
#, no-c-format
msgid "<firstname>C. Michael</firstname> <surname>Pilato</surname>"
msgstr "<firstname>C. Michael</firstname> <surname>Pilato</surname>"

#. Tag: holder
#: book.xml:72
#, no-c-format
msgid "Ben Collins-Sussman"
msgstr "Ben Collins-Sussman"

#. Tag: holder
#: book.xml:73
#, no-c-format
msgid "Brian W. Fitzpatrick"
msgstr "Brian W. Fitzpatrick"

#. Tag: holder
#: book.xml:74
#, no-c-format
msgid "C. Michael Pilato"
msgstr "C. Michael Pilato"

#. Tag: para
#: book.xml:77
#, no-c-format
msgid "This work is licensed under the Creative Commons Attribution License. To view a copy of this license, visit <ulink url=\"http://creativecommons.org/licenses/by/2.0/\"></ulink> or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA."
msgstr ""

#. Tag: title
#: ch00-preface.xml:2
#, no-c-format
msgid "Preface"
msgstr "序"

#. Tag: attribution
#: ch00-preface.xml:5
#, no-c-format
msgid "Greg Hudson"
msgstr "Greg Hudson"

#. Tag: quote
#: ch00-preface.xml:6
#, no-c-format
msgid "It is important not to let the perfect become the enemy of the good, even when you can agree on what perfect is. Doubly so when you can't. As unpleasant as it is to be trapped by past mistakes, you can't make any progress by being afraid of your own shadow during design."
msgstr ""

#. Tag: primary
#: ch00-preface.xml:15
#, no-c-format
msgid "Concurrent Versions System (CVS)"
msgstr "Concurrent Versions System (CVS)"

#. Tag: para
#: ch00-preface.xml:15
#, fuzzy, no-c-format
msgid "In the world of open-source software, the Concurrent Versions System (CVS) was the tool of choice for version control for many years. And rightly so. CVS was open-source software itself, and its non-restrictive modus operandi and support for networked operation allowed dozens of geographically dispersed programmers to share their work. It fit the collaborative nature of the open-source world very well. CVS and its semi-chaotic development model have since become cornerstones of open-source culture."
msgstr "オープンソースの世界では、コンカレントバージョン管理システム(CVS) が長い間よく使われてきました。またそれは正しい選択でした。CVSは フリーソフトですし、その制約のない<foreignphrase>ワークフローモデル </foreignphrase>と、ネットワーク機能のサポート&mdash; それは地理的に さまざまな場所に分散したプログラマに作業内容を共有させるものですが&mdash; は、オープンソースの世界での共同作業のやり方に非常によく合っています。 CVSと、CVSのある程度ルーズな開発手法モデルは、オープンソース文化のかなめになりました。"

#. Tag: para
#: ch00-preface.xml:28
#, fuzzy, no-c-format
msgid "But CVS was not without its flaws, and simply fixing those flaws promised to be an enormous effort. Enter Subversion. Designed to be a successor to CVS, Subversion's originators set out to win the hearts of CVS users in two ways&mdash;by creating an open-source system with a design (and <quote>look and feel</quote>) similar to CVS, and by attempting to avoid most of CVS's noticeable flaws. While the result isn't necessarily the next great evolution in version control design, Subversion <emphasis>is</emphasis> very powerful, very usable, and very flexible. And for the most part, almost all newly-started open-source projects now choose Subversion instead of CVS."
msgstr "しかし、どんなツールでもそうですが、CVSも年をとりました。 Subversionは比較的新しいバージョン管理システムで、CVSの後継となるように 設計されています。設計者は二つの方法で CVSユーザのハートをつかもうとして います。CVSとよく似たデザイン(と、<quote>見栄え</quote>)を持ったオープンソースシステムを 作ることによって、もう一つは、CVSでわかっている欠点のほとんどを 解決しようとすることによって、です。その結果は、バージョン管理システム ソフトの世界に次世代革命をもたらすものではないかも知れませんが、Subversion は<emphasis>確かに</emphasis> とても強力で使いやすく柔軟です。"

#. Tag: para
#: ch00-preface.xml:40
#, fuzzy, no-c-format
msgid "This book is written to document the 1.4 series of the Subversion version control system. We have made every attempt to be thorough in our coverage. However, Subversion has a thriving and energetic development community, so there are already a number of features and improvements planned for future versions of Subversion that may change some of the commands and specific notes in this book."
msgstr "この本は Subversion バージョン管理システムのバージョン1.2系のために 書かれたものです。私たちはできるだけ完全な記述を目指しましたが、Subversion は 活発で精力的な開発コミュニティーを持ち、既に今後計画されているさまざまな機能や 改良点があるため、この本にあるコマンドや特殊な注意事項のいくつかは変更される かも知れません。"

#. Tag: title
#: ch00-preface.xml:54
#, no-c-format
msgid "Audience"
msgstr "対象読者"

#. Tag: para
#: ch00-preface.xml:56
#, fuzzy, no-c-format
msgid "This book is written for computer-literate folk who want to use Subversion to manage their data. While Subversion runs on a number of different operating systems, its primary user interface is command-line based. That command-line tool (<command>svn</command>), and some auxiliary programs, are the focus of this book."
msgstr "この本はデータを管理するのにSubversionを使おうとする コンピュータの知識のある人たちのために書かれています。Subversionはいろいろな オペレーティングシステム上で動きますが、一番力を入れているユーザインターフェースは コマンドラインベースのものです。それでこの本で議論したり利用するのもコマンド ラインツール((<command>svn</command>)が対象になります。一貫性を保つためこの 本での例は読者が Unix 風のオペレーティングシステムを利用し、Unix と Unix の コマンドラインインターフェースに比較的慣れていることを前提にしています。"

#. Tag: para
#: ch00-preface.xml:63
#, fuzzy, no-c-format
msgid "For consistency, the examples in this book assume the reader is using a Unix-like operating system and is relatively comfortable with Unix and command-line interfaces. That said, the <command>svn</command> program also runs on non-Unix platforms like Microsoft Windows. With a few minor exceptions, such as the use of backward slashes (<literal>\\</literal>) instead of forward slashes (<literal>/</literal>) for path separators, the input to and output from this tool when run on Windows are identical to its Unix counterpart."
msgstr "しかし<command>svn</command>はMicrosoft Windowsのような Unix 以外の プラットフォームでも動かすことができます。バックスラッシュ(<literal>¥</literal>) をスラッシュ (<literal>/</literal>)のかわりにパス区切り文字として利用しなくては ならないなどの僅かな違いをのぞけば、Windows 上でこのツールを動作させた時の 入力と出力の内容は Unix のものと同一です。しかし、Windows ユーザは Cygwin Unix エミュレータ環境下でこの本の例を実行すれば、よりよい結果を 得られるかも知れません。"

#. Tag: para
#: ch00-preface.xml:73
#, fuzzy, no-c-format
msgid "Most readers are probably programmers or system administrators who need to track changes to source code. This is the most common use for Subversion, and therefore it is the scenario underlying all of the book's examples. But Subversion can be used to manage changes to any sort of information&mdash;images, music, databases, documentation, and so on. To Subversion, all data is just data."
msgstr "ほとんどの読者はおそらくプログラマか管理者で、ソースコードの 変更内容を追う必要のある人になると思います。それが Subversionの 一番普通の使い方なので、この本の例もそういう状況を前提にしています。 ただ、Subversionはどのようなタイプの情報に対しても変更点を管理するのに 使えます。画像、音楽、データベース、ドキュメント、 などなどにも利用できます。Subversionにとっては、どんな種類のデータも、 単なるデータにすぎません。"

#. Tag: para
#: ch00-preface.xml:81
#, fuzzy, no-c-format
msgid "While this book is written with the assumption that the reader has never used a version control system, we've also tried to make it easy for users of CVS (and other systems) to make a painless leap into Subversion. Special sidebars may mention other version control systems from time to time, and a special appendix summarizes many of the differences between CVS and Subversion."
msgstr "この本は読者がいままでバージョン管理システムを一度も使ったことは ないものとして書かれていますが、CVSの利用者に対しては、Subversion への 移行を楽にするように工夫しました。しばしば補足としてCVSに触れるかも知れませんし、 特に用意した補遺では、CVSとSubversionの大部分の相違点をまとめて あります。"

#. Tag: para
#: ch00-preface.xml:89
#, fuzzy, no-c-format
msgid "Note also that the source code examples used throughout the book are only examples. While they will compile with the proper compiler incantations, they are intended to illustrate a particular scenario, not necessarily serve as examples of good programming style or practices."
msgstr "ソースコードのサンプルは、単なる一例です. 普通のやり方でコンパイルできるとは思いますが、問題点を簡単に示すためのものであり、 良いプログラミングスタイルの例として載せたものではありません。"

#. Tag: title
#: ch00-preface.xml:101
#, no-c-format
msgid "How to Read this Book"
msgstr "この本の読み方"

#. Tag: para
#: ch00-preface.xml:103
#, no-c-format
msgid "Technical books always face a certain dilemma: whether to cater to <firstterm>top-down</firstterm> or <firstterm>bottom-up</firstterm> learners. A top-down learner prefers to read or skim documentation, getting a large overview of how the system works; only then does she actually start using the software. A bottom-learner is a <quote>learn by doing</quote> person, someone who just wants to dive into the software and figure it out as she goes, referring to book sections when necessary. Most books tend to be written for one type of person or the other, and this book is undoubtedly biased towards top-down learners. (And if you're actually reading this section, you're probably already a top-down learner yourself!) However, if you're a bottom-up person, don't despair. While the book may be laid out as a broad survey of Subversion topics, the contents of each section tends to be heavy with specific examples that you can try-by-doing. For the impatient folks who just want to get going, you can jump right to <xref linkend=\"svn.intro\"/>."
msgstr ""

#. Tag: para
#: ch00-preface.xml:122
#, fuzzy, no-c-format
msgid "Regardless of your learning style, this book aims to be useful to people of widely different backgrounds&mdash;from people with no previous experience in version control to experienced system administrators. Depending on your own background, certain chapters may be more or less important to you. The following can be considered a <quote>recommended reading list</quote> for various types of readers:"
msgstr "この本は非常にさまざまな背景を持った人々にとって有用であることを 目的としています&mdash; つまりバージョン管理についてまったく経験のない人から、経験を 積んだシステム管理者までのすべての人たちです。どのような知識を既に持っているか に応じて、特定の章が何らかの意味で重要になるでしょう。以下はさまざまな読者層 ごとの<quote>おすすめの読み方</quote>と考えてください。"

#. Tag: term
#: ch00-preface.xml:133
#, no-c-format
msgid "Experienced System Administrators"
msgstr "経験を積んだシステム管理者"

#. Tag: para
#: ch00-preface.xml:135
#, fuzzy, no-c-format
msgid "The assumption here is that you've probably used version control before before, and are dying to get a Subversion server up and running ASAP. <xref linkend=\"svn.reposadmin\"/> and <xref linkend=\"svn.serverconfig\"/> will show you how to create your first repository and make it available over the network. After that's done, <xref linkend=\"svn.tour\"/> and <xref linkend=\"svn.forcvs\"/> are the fastest routes to learning the Subversion client."
msgstr "あなたはおそらく既に CVS を利用したことがあり、とっとと Subversion を ダウンロードしてサーバを立ち上げたいのでしょう。<xref linkend=\"svn.reposadmin\"/> と <xref linkend=\"svn.serverconfig\"/>を読めばどのよう にして最初のリポジトリを作り、ネットワーク越しに利用できるようになるかが わかるでしょう。それが済んだら<xref linkend=\"svn.tour\"/> と <xref linkend=\"svn.forcvs\"/> をものにするのが CVS 経験者と してのあなたが Subversion クライアントを理解するのに一番早い方法です。"

#. Tag: term
#: ch00-preface.xml:149
#, no-c-format
msgid "New users"
msgstr "初心者"

#. Tag: para
#: ch00-preface.xml:151
#, fuzzy, no-c-format
msgid "Your administrator has probably set up Subversion already, and you need to learn how to use the client. If you've never used a version control system, then <xref linkend=\"svn.basic\"/> is a vital introduction to the ideas behind version control. <xref linkend=\"svn.tour\"/> is a guided tour of the Subversion client."
msgstr "あなたの管理者は多分もうSubversion を設定しているはずで、あなたに 必要なのはどうやって Subversion クライアントを利用するかを理解する ことだけです。CVS を利用した経験がないのなら(あるいはバージョン管理 システムなどといったものを一度も使ったことがないのなら)、 <xref linkend=\"svn.basic\"/> と <xref linkend=\"svn.tour\"/> は粋な とっかかりになります。既に CVS を使ったことがあるので あれば第3章と補遺A から始めるのが最良でしょう。"

#. Tag: term
#: ch00-preface.xml:161
#, no-c-format
msgid "Advanced users"
msgstr "より進んだユーザ"

#. Tag: para
#: ch00-preface.xml:163
#, fuzzy, no-c-format
msgid "Whether you're a user or administrator, eventually your project will grow larger. You're going to want to learn how to do more advanced things with Subversion, such as how to use branches and perform merges (<xref linkend=\"svn.branchmerge\"/>), how to use Subversion's property support (<xref linkend=\"svn.advanced\"/>), how to configure runtime options (<xref linkend=\"svn.customization\"/>), and other things. These chapters aren't critical at first, but be sure to read them once you're comfortable with the basics."
msgstr "ユーザであれ管理者であれ、最終的にはあなたのプロジェクトは大きくなって いくでしょう。そして Subversion のより進んだ機能を理解したくなるはず です。たとえばブランチ化とマージ(<xref linkend=\"svn.branchmerge\"/>)、 メタデータの設定と実行時オプションの設定(<xref linkend=\"svn.advanced\"/>)、 などなどです。このふたつの章は最初はピンとこないかも知れません が、基本的なことを理解した後でぜひ読んでみてください。"

#. Tag: term
#: ch00-preface.xml:177
#, no-c-format
msgid "Developers"
msgstr "開発者"

#. Tag: para
#: ch00-preface.xml:179
#, no-c-format
msgid "Presumably, you're already familiar with Subversion, and now want to either extend it or build new software on top of its many APIs. <xref linkend=\"svn.developer\"/> is just for you."
msgstr "おそらくあなたは既に Subversion になじんでいて、どうやってそれを拡張するか、 あるいは Subversion のたくさんある API を使ってどうやって新しいソフトウェア を作るかに興味があるでしょう。<xref linkend=\"svn.developer\"/>はまさにそんな人に うってつけです。"

#. Tag: para
#: ch00-preface.xml:187
#, no-c-format
msgid "The book ends with reference material&mdash;<xref linkend=\"svn.ref\"/> is a reference guide for all Subversion commands, and the appendices cover a number of useful topics. These are the chapters you're mostly likely to come back to after you've finished the book."
msgstr "この本のしめくくりはリファレンス情報です&mdash;<xref linkend=\"svn.ref\"/>は、 すべてのSubversionコマンドのリファレンスガイドと、いろいろな役に立つトピック に関する補足情報です。この本全体を一度読み終えたあとで戻ってくる のはきっとこの章でしょう。"

#. Tag: title
#: ch00-preface.xml:199
#, no-c-format
msgid "Conventions Used in This Book"
msgstr "この本での約束ごと"

#. Tag: para
#: ch00-preface.xml:201
#, no-c-format
msgid "This section covers the various conventions used in this book."
msgstr "ここではこの本で利用されるさまざまな規約について触れます。"

#. Tag: title
#: ch00-preface.xml:206
#, no-c-format
msgid "Typographic Conventions"
msgstr "印刷上の規約"

#. Tag: command
#: ch00-preface.xml:211
#, no-c-format
msgid "Constant width"
msgstr "固定幅"

#. Tag: para
#: ch00-preface.xml:213
#, no-c-format
msgid "Used for commands, command output, and options"
msgstr "コマンド、コマンド出力、スイッチに使います"

#. Tag: replaceable
#: ch00-preface.xml:218
#, no-c-format
msgid "Constant width italic"
msgstr "イタリックな固定幅"

#. Tag: para
#: ch00-preface.xml:220
#, no-c-format
msgid "Used for replaceable items in code and text"
msgstr "プログラムやテキスト中で置き換え可能なアイテムに対して使います"

#. Tag: filename
#: ch00-preface.xml:225
#, no-c-format
msgid "Italic"
msgstr "イタリック"

#. Tag: para
#: ch00-preface.xml:227
#, no-c-format
msgid "Used for file and directory names"
msgstr "ファイルやディレクトリの名前に使います"

#. Tag: title
#: ch00-preface.xml:237
#, no-c-format
msgid "Icons"
msgstr "アイコン"

#. Tag: para
#: ch00-preface.xml:240
#, no-c-format
msgid "This icon designates a note relating to the surrounding text."
msgstr "このアイコンは周りにあるテキストに関連した注意を 表します。"

#. Tag: para
#: ch00-preface.xml:245
#, no-c-format
msgid "This icon designates a helpful tip relating to the surrounding text."
msgstr "このアイコンは周りにあるテキストに関連したヘルプ 情報を表します。"

#. Tag: para
#: ch00-preface.xml:250
#, no-c-format
msgid "This icon designates a warning relating to the surrounding text."
msgstr "このアイコンは回りにあるテキストに関連した警告を 表します。"

#. Tag: title
#: ch00-preface.xml:261
#, no-c-format
msgid "Organization of This Book"
msgstr "この本の構成"

#. Tag: para
#: ch00-preface.xml:263
#, no-c-format
msgid "The chapters that follow and their contents are listed here:"
msgstr "以下の章とその内容をここで一覧にしておきます:"

#. Tag: para
#: ch00-preface.xml:271
#, no-c-format
msgid "Covers the history of Subversion as well as its features, architecture, and components."
msgstr "Subversionの歴史、その機能、構造、 構成要素を説明します"

#. Tag: para
#: ch00-preface.xml:279
#, no-c-format
msgid "Explains the basics of version control and different versioning models, along with Subversion's repository, working copies, and revisions."
msgstr "バージョン管理の基礎と異なるバージョン管理モデルを、Subversion の リポジトリ、作業コピー、リビジョンとの関連で説明します。"

#. Tag: para
#: ch00-preface.xml:288
#, fuzzy, no-c-format
msgid "Walks you through a day in the life of a Subversion user. It demonstrates how to use a Subversion client to obtain, modify, and commit data."
msgstr "Subversion ユーザとしての日常的な利用方法に沿った説明をします。 Subversion を使ってどのようにデータを取得し、修正し、コミットするか についてのデモンストレーションです。"

#. Tag: para
#: ch00-preface.xml:297
#, no-c-format
msgid "Covers more complex features that regular users will eventually come into contact with, such as versioned metadata, file locking, and peg revisions."
msgstr "もっと複雑な機能、例えばバージョン管理されたメタデータやファイルロック、そしてペグリビジョンを扱います。一般的なユーザーも結局は使用することになるでしょう。"

#. Tag: para
#: ch00-preface.xml:306
#, no-c-format
msgid "Discusses branches, merges, and tagging, including best practices for branching and merging, common use cases, how to undo changes, and how to easily swing from one branch to the next."
msgstr "ブランチ、マージ、そしてタグについて議論しますが、これにはブランチと マージの最良の方法、一般的な利用例、変更をどうやって取り消すか、 そしてあるブランチから別ブランチにどうやって簡単に乗り換えるかなども 含まれます。"

#. Tag: para
#: ch00-preface.xml:316
#, no-c-format
msgid "Describes the basics of the Subversion repository, how to create, configure, and maintain a repository, and the tools you can use to do all of this."
msgstr "Subversion リポジトリの基本について議論します。どうやってリポジトリを 作成し、設定し、管理するかについて、また、そのためにどんなツールを 利用できるかについても議論します。"

#. Tag: para
#: ch00-preface.xml:325
#, no-c-format
msgid "Explains how to configure your Subversion server and different ways to access your repository: <literal>HTTP</literal>, the <literal>svn</literal> protocol, and local disk access. It also covers the details of authentication, authorization and anonymous access."
msgstr "Subversion サーバの設定方法と、リポジトリへのアクセス方法について説明します: <literal>HTTP</literal>、<literal>svn</literal> プロトコル、そしてローカルアクセスです。また認証、認可、匿名アクセス についての詳細にも触れます。"

#. Tag: para
#: ch00-preface.xml:337
#, no-c-format
msgid "Explores the Subversion client configuration files, the handling of internationalized text, and how to make external tools cooperate with Subversion."
msgstr ""

#. Tag: para
#: ch00-preface.xml:346
#, no-c-format
msgid "Describes the internals of Subversion, the Subversion filesystem, and the working copy administrative areas from a programmer's point of view. Demonstrates how to use the public APIs to write a program that uses Subversion, and most importantly, how to contribute to the development of Subversion."
msgstr "Subversion の内部構造、Subversion ファイルシステム、そして作業コピー の管理領域についてプログラマーの視点から説明します。 Subversion を利用するプログラムを書くために公開された API を使う 例をあげ、そして最も大切なことですが、どうやって Subversion の開発に 貢献するかを示します。"

#. Tag: para
#: ch00-preface.xml:358
#, no-c-format
msgid "Explains in great detail every subcommand of <command>svn</command>, <command>svnadmin</command>, and <command>svnlook</command> with plenty of examples for the whole family!"
msgstr "<command>svn</command>、<command>svnadmin</command>、そして<command>svnlook</command> のそれぞれのサブコマンドについてすべてのケースでの豊富な例をまじえながら詳細に 説明します。"

#. Tag: para
#: ch00-preface.xml:368
#, no-c-format
msgid "For the impatient, a whirlwind explanation of how to install Subversion and start using it immediately. You have been warned."
msgstr ""

#. Tag: para
#: ch00-preface.xml:377
#, no-c-format
msgid "Covers the similarities and differences between Subversion and CVS, with numerous suggestions on how to break all the bad habits you picked up from years of using CVS. Included are descriptions of Subversion revision numbers, versioned directories, offline operations, <command>update</command> vs. <command>status</command>, branches, tags, metadata, conflict resolution, and authentication."
msgstr "Subversion と CVS の間の類似点と相違点に触れ、CVS を長年使ってきたことによる 悪い習慣からどうやって抜け出すかについてのさまざまなアドバイスをします。 具体的には Subversion のリビジョン番号、バージョン化されたディレクトリ、 オフラインでの操作、<command>update</command>と<command>status</command> の違い、ブランチ、タグ、メタデータ、衝突の解消、そして認証です。"

#. Tag: para
#: ch00-preface.xml:391
#, no-c-format
msgid "Describes the details of WebDAV and DeltaV, and how you can configure your Subversion repository to be mounted read/write as a DAV share."
msgstr "WebDAVとDeltaVの詳細と、DAV共有を読み書き可能な形にマウントするために どうやってSubversion リポジトリを設定するかを説明します。"

#. Tag: para
#: ch00-preface.xml:400
#, no-c-format
msgid "Discusses tools that support or use Subversion, including alternative client programs, repository browser tools, and so on."
msgstr "Subversion を支援したり利用したりするツールについて議論します。これには 別のクライアントプログラム、リポジトリ参照ツール、などが含まれます。"

#. Tag: title
#: ch00-preface.xml:415
#, no-c-format
msgid "This Book is Free"
msgstr "この本はフリーです"

#. Tag: para
#: ch00-preface.xml:417
#, fuzzy, no-c-format
msgid "This book started out as bits of documentation written by Subversion project developers, which were then coalesced into a single work and rewritten. As such, it has always been under a free license. (See <xref linkend=\"svn.copyright\"/>.) In fact, the book was written in the public eye, originally as a part of Subversion project itself. This means two things:"
msgstr "この本はSubversionプロジェクト開発チームによって書かれたちょっとしたドキュメント から始めたものを、一つにまとめて書き直したものです。そんなわけで、この本は 常にフリーライセンス下にあります(<xref linkend=\"svn.copyright\"/>を参 照してください)。実際、この本は公開された状況のもとで、Subversionの一部として書かれました。 これは二つのことを意味します:"

#. Tag: para
#: ch00-preface.xml:426
#, no-c-format
msgid "You will always find the latest version of this book in the book's own Subversion repository."
msgstr "この本の最新版は、この本専用のSubversionリポジトリにあります。"

#. Tag: para
#: ch00-preface.xml:431
#, fuzzy, no-c-format
msgid "You can make changes to this book and redistribute it however you wish&mdash;it's under a free license. Your only obligation is to maintain proper attribution to the original authors. Of course, rather than distribute your own private version of this book, we'd much rather you send feedback and patches to the Subversion developer community."
msgstr "フリーライセンスの下で、誰でもこの本を好きなように変更し、配布することができます。 もちろんこの本のプライベートバージョンを配布するよりも、Subversion開発チームに パッチの形で送ってもらうほうがずっと助かりますが。 コミュニティへの参加方法については<xref linkend=\"svn.developer.contrib\"/> を参照してください。"

#. Tag: para
#: ch00-preface.xml:441
#, no-c-format
msgid "The online home of this book's development and most of the volunteer-driven translation efforts around it is <ulink url=\"http://svnbook.red-bean.com\"></ulink>. There, you can find links to the latest releases and tagged versions of the book in various formats, as well as instructions for accessing the book's Subversion repository (where lives its DocBook XML source code). Feedback is welcome&mdash;encouraged, even. Please submit all comments, complaints, and patches against the book sources to <email>svnbook-dev@red-bean.com</email>."
msgstr ""

#. Tag: title
#: ch00-preface.xml:457
#, no-c-format
msgid "Acknowledgments"
msgstr "謝辞"

#. Tag: para
#: ch00-preface.xml:459
#, no-c-format
msgid "This book would not be possible (nor very useful) if Subversion did not exist. For that, the authors would like to thank Brian Behlendorf and CollabNet for the vision to fund such a risky and ambitious new Open Source project; Jim Blandy for the original Subversion name and design&mdash;we love you, Jim; Karl Fogel for being such a good friend and a great community leader, in that order."
msgstr "この本は Subversion が存在しなければ不可能でした(し、役に立つものに なることもありませんでした)。そういうわけで、著者はこのようなハイリスク で野心的な新しいオープンソースプロジェクトを支援してくれたBrian Behlendorf とCollabNetにまず感謝します; 次にSubversion の名称とその原型を設計したJim Blandy に対して感謝します&mdash; Jim、みな君を愛しているよ; そして最後に 良き友であると同時に偉大なコミュニティー指導者であるKarl Fogelに感謝します。"

#. Tag: para
#: ch00-preface.xml:465
#, no-c-format
msgid "Oh, and thanks, Karl, for being too overworked to write this book yourself."
msgstr "そして、そうだ Karl、君にはこの本のことで、ずいぶん仕事させてしまったね。"

#. Tag: para
#: ch00-preface.xml:469
#, no-c-format
msgid "Thanks to O'Reilly and our editors, Linda Mui and Tatiana Diaz for their patience and support."
msgstr "O'Reilly と我々の編集者であるLinda Muiと、Tatiana Diaz の忍耐と支援にたいして感謝します。"

#. Tag: para
#: ch00-preface.xml:472
#, fuzzy, no-c-format
msgid "Finally, we thank the countless people who contributed to this book with informal reviews, suggestions, and fixes: While this is undoubtedly not a complete list, this book would be incomplete and incorrect without the help of: David Anderson, Jani Averbach, Ryan Barrett, Francois Beausoleil, Jennifer Bevan, Matt Blais, Zack Brown, Martin Buchholz, Brane Cibej, John R. Daily, Peter Davis, Olivier Davy, Robert P. J. Day, Mo DeJong, Brian Denny, Joe Drew, Nick Duffek, Ben Elliston, Justin Erenkrantz, Shlomi Fish, Julian Foad, Chris Foote, Martin Furter, Dave Gilbert, Eric Gillespie, David Glasser, Matthew Gregan, Art Haas, Eric Hanchrow, Greg Hudson, Alexis Huxley, Jens B. Jorgensen, Tez Kamihira, David Kimdon, Mark Benedetto King, Andreas J. Koenig, Nuutti Kotivuori, Matt Kraai, Scott Lamb, Vincent Lefevre, Morten Ludvigsen, Paul Lussier, Bruce A. Mah, Philip Martin, Feliciano Matias, Patrick Mayweg, Gareth McCaughan, Jon Middleton, Tim Moloney, Christopher Ness, Mats Nilsson, Joe Orton, Amy Lyn Pilato, Kevin Pilch-Bisson, Dmitriy Popkov, Michael Price, Mark Proctor, Steffen Prohaska, Daniel Rall, Jack Repenning, Tobias Ringstrom, Garrett Rooney, Joel Rosdahl, Christian Sauer, Larry Shatzer, Russell Steicke, Sander Striker, Erik Sjoelund, Johan Sundstroem, John Szakmeister, Mason Thomas, Eric Wadsworth, Colin Watson, Alex Waugh, Chad Whitacre, Josef Wolf, Blair Zajac, and the entire Subversion community."
msgstr "最後に、この本に対して非醐ｷｺ�のレビュー、示唆、修正をしてくれた無数の人々に 感謝します: 確かに完全なリストではありませんが、この本は以下の人々の支援なしに は不完全で不正確なものだったでしょう: Jani Averbach, Ryan Barrett, Francois Beausoleil, Jennifer Bevan, Matt Blais, Zack Brown, Martin Buchholz, Brane Cibej, John R. Daily, Peter Davis, Olivier Davy, Robert P. J. Day, Mo DeJong, Brian Denny, Joe Drew, Nick Duffek, Ben Elliston, Justin Erenkrantz, Shlomi Fish, Julian Foad, Chris Foote, Martin Furter, Dave Gilbert, Eric Gillespie, Matthew Gregan, Art Haas, Greg Hudson, Alexis Huxley, Jens B. Jorgensen, Tez Kamihira, David Kimdon, Mark Benedetto King, Andreas J. Koenig, Nuutti Kotivuori, Matt Kraai, Scott Lamb, Vincent Lefevre, Morten Ludvigsen, Paul Lussier, Bruce A. Mah, Philip Martin, Feliciano Matias, Patrick Mayweg, Gareth McCaughan, Jon Middleton, Tim Moloney, Mats Nilsson, Joe Orton, Amy Lyn Pilato, Kevin Pilch-Bisson, Dmitriy Popkov, Michael Price, Mark Proctor, Steffen Prohaska, Daniel Rall, Tobias Ringstrom, Garrett Rooney, Joel Rosdahl, Christian Sauer, Larry Shatzer, Russell Steicke, Sander Striker, Erik Sjoelund, Johan Sundstroem, John Szakmeister, Mason Thomas, Eric Wadsworth, Colin Watson, Alex Waugh, Chad Whitacre, Josef Wolf, Blair Zajac, そして Subversion コミュニティー全体に対して。"

#. Tag: title
#: ch00-preface.xml:499
#, no-c-format
msgid "From Ben Collins-Sussman"
msgstr "Ben Collins-Sussmanより"

#. Tag: para
#: ch00-preface.xml:501
#, no-c-format
msgid "Thanks to my wife Frances, who, for many months, got to hear, <quote>But honey, I'm still working on the book</quote>, rather than the usual, <quote>But honey, I'm still doing email.</quote> I don't know where she gets all that patience! She's my perfect counterbalance."
msgstr "Thanks to my wife Frances, who, for many months, got to hear, <quote>But honey, I'm still working on the book</quote>, rather than the usual, <quote>But honey, I'm still doing email.</quote> I don't know where she gets all that patience! She's my perfect counterbalance."

#. Tag: para
#: ch00-preface.xml:507
#, fuzzy, no-c-format
msgid "Thanks to my extended family and friends for their sincere encouragement, despite having no actual interest in the subject. (You know, the ones who say, <quote>Ooh, you wrote a book?</quote>, and then when you tell them it's a computer book, sort of glaze over.)"
msgstr "Thanks to my extended family for their sincere encouragement, despite having no actual interest in the subject. (You know, the ones who say, <quote>Ooh, you're writing a book?</quote>, and then when you tell them it's a computer book, sort of glaze over.)"

#. Tag: para
#: ch00-preface.xml:513
#, no-c-format
msgid "Thanks to all my close friends, who make me a rich, rich man. Don't look at me that way&mdash;you know who you are."
msgstr "Thanks to all my close friends, who make me a rich, rich man. Don't look at me that way&mdash;you know who you are."

#. Tag: para
#: ch00-preface.xml:516
#, no-c-format
msgid "Thanks to my parents for the perfect low-level formatting, and being unbelievable role models. Thanks to my son for the opportunity to pass that on."
msgstr ""

#. Tag: title
#: ch00-preface.xml:524
#, no-c-format
msgid "From Brian W. Fitzpatrick"
msgstr "Brian W. Fitzpatrickより"

#. Tag: para
#: ch00-preface.xml:528
#, no-c-format
msgid "Huge thanks to my wife Marie for being incredibly understanding, supportive, and most of all, patient. Thank you to my brother Eric who first introduced me to UNIX programming way back when. Thanks to my Mom and Grandmother for all their support, not to mention enduring a Christmas holiday where I came home and promptly buried my head in my laptop to work on the book."
msgstr "Huge thanks to my wife Marie for being incredibly understanding, supportive, and most of all, patient. Thank you to my brother Eric who first introduced me to UNIX programming way back when. Thanks to my Mom and Grandmother for all their support, not to mention enduring a Christmas holiday where I came home and promptly buried my head in my laptop to work on the book."

#. Tag: para
#: ch00-preface.xml:536
#, no-c-format
msgid "To Mike and Ben: It was a pleasure working with you on the book. Heck, it's a pleasure working with you at work!"
msgstr "To Mike and Ben: It was a pleasure working with you on the book. Heck, it's a pleasure working with you at work!"

#. Tag: para
#: ch00-preface.xml:539
#, no-c-format
msgid "To everyone in the Subversion community and the Apache Software Foundation, thanks for having me. Not a day goes by where I don't learn something from at least one of you."
msgstr "To everyone in the Subversion community and the Apache Software Foundation, thanks for having me. Not a day goes by where I don't learn something from at least one of you."

#. Tag: para
#: ch00-preface.xml:544
#, no-c-format
msgid "Lastly, thanks to my Grandfather who always told me that <quote>freedom equals responsibility.</quote> I couldn't agree more."
msgstr "Lastly, thanks to my Grandfather who always told me that <quote>freedom equals responsibility.</quote> I couldn't agree more."

#. Tag: title
#: ch00-preface.xml:552
#, no-c-format
msgid "From C. Michael Pilato"
msgstr "C. Michael Pilatoより"

#. Tag: para
#: ch00-preface.xml:554
#, no-c-format
msgid "Special thanks to Amy, my best friend and wife of nine incredible years, for her love and patient support, for putting up with the late nights, and for graciously enduring the version control processes I've imposed on her. Don't worry, Sweetheart&mdash;you'll be a TortoiseSVN wizard in no time!"
msgstr ""

#. Tag: para
#: ch00-preface.xml:561
#, no-c-format
msgid "Gavin, there probably aren't many words in this book that you can successfully <quote>sound out</quote> at this stage, but when you've finally got a handle on the written form of this crazy language we speak, I hope you're as proud of your Daddy as he is of you."
msgstr ""

#. Tag: para
#: ch00-preface.xml:567
#, no-c-format
msgid "Aidan, Daddy luffoo et ope Aiduh yike contootoo as much as Aiduh yike batetball, base-ball, et bootball."
msgstr ""

#. Tag: para
#: ch00-preface.xml:570
#, no-c-format
msgid "Translation: Daddy loves you and hopes you like computers as much as you like basketball, baseball, and football. (Wasn't that obvious?)"
msgstr ""

#. Tag: para
#: ch00-preface.xml:576
#, no-c-format
msgid "Mom and Dad, thanks for your constant support and enthusiasm. Mom- and Dad-in-law, thanks for all of the same <emphasis>plus</emphasis> your fabulous daughter."
msgstr ""

#. Tag: para
#: ch00-preface.xml:580
#, no-c-format
msgid "Hats off to Shep Kendall, through whom the world of computers was first opened to me; Ben Collins-Sussman, my tour-guide through the open-source world; Karl Fogel&mdash;you <emphasis>are</emphasis> my <filename>.emacs</filename>; Greg Stein, for oozing practical programming know-how; Brian Fitzpatrick&mdash;for sharing this writing experience with me. To the many folks from whom I am constantly picking up new knowledge&mdash;keep dropping it!"
msgstr "Hats off to Shep Kendall, through whom the world of computers was first opened to me; Ben Collins-Sussman, my tour-guide through the open-source world; Karl Fogel&mdash;you <emphasis>are</emphasis> my <filename>.emacs</filename>; Greg Stein, for oozing practical programming know-how; Brian Fitzpatrick&mdash;for sharing this writing experience with me. To the many folks from whom I am constantly picking up new knowledge&mdash;keep dropping it!"

#. Tag: para
#: ch00-preface.xml:589
#, fuzzy, no-c-format
msgid "Finally, to the One who perfectly demonstrates creative excellence&mdash;thank You."
msgstr "Finally, to the One who perfectly demonstrates creative excellence&mdash;thank you."

#. Tag: title
#: ch00-preface.xml:601
#, no-c-format
msgid "What is Subversion?"
msgstr "Subversionって何?"

#. Tag: para
#: ch00-preface.xml:603
#, fuzzy, no-c-format
msgid "Subversion is a free/open-source version control system. That is, Subversion manages files and directories, and the changes made to them, over time. This allows you to recover older versions of your data, or examine the history of how your data changed. In this regard, many people think of a version control system as a sort of <quote>time machine</quote>."
msgstr "Subversion は、フリーなオープンソースのバージョン管理システムで、 時間とともに変化するファイルやディレクトリを管理します。 ファイルの階層構造全体は、<firstterm>リポジトリ</firstterm>と呼ばれる 中心的な場所に置かれます。リポジトリは通常のファイルサーバとよく似ていますが メンバーがファイルやディレクトリにしたすべての変更を記録しています。 このため、メンバーは古いバージョンのデータを戻したり、変更履歴を確認したり することができます。この意味で、バージョン管理システムを、 <quote>タイムマシン</quote>の一種と考える人も います。"

#. Tag: para
#: ch00-preface.xml:610
#, fuzzy, no-c-format
msgid "Subversion can operate across networks, which allows it to be used by people on different computers. At some level, the ability for various people to modify and manage the same set of data from their respective locations fosters collaboration. Progress can occur more quickly without a single conduit through which all modifications must occur. And because the work is versioned, you need not fear that quality is the trade-off for losing that conduit&mdash;if some incorrect change is made to the data, just undo that change."
msgstr "Subversion はリポジトリにネットワーク越しにアクセスするので、別々の コンピュータで作業する人々によって利用することができます。ある範囲で それぞれの場所からの同じデータの集まりをさまざまな人が修正し管理する 仕組みは共同作業を支援することができます。すべての変更を一つの流れに そって行うわけではないので作業効率をより高めることができます。 さらに作業はバージョン化されているので、作業品質が流れを中断 するかどうかの兼ね合いであるかどうかを心配する必要はありません&mdash; データに対して間違った変更をしてしまった場合には単にそれを取り消せばよい のです。"

#. Tag: para
#: ch00-preface.xml:620
#, no-c-format
msgid "Some version control systems are also software configuration management (SCM) systems. These systems are specifically tailored to manage trees of source code, and have many features that are specific to software development&mdash;such as natively understanding programming languages, or supplying tools for building software. Subversion, however, is not one of these systems. It is a general system that can be used to manage <emphasis>any</emphasis> collection of files. For you, those files might be source code&mdash;for others, anything from grocery shopping lists to digital video mixdowns and beyond."
msgstr "バージョン管理システムのいくつかは、ソフトウェア構成管理システム(SCM) でもあります。そういうシステムは、ソースコードのツリーを管理するために 特別便利に作られています&mdash;たとえばプログラム言語をじかに理解する ことができたり、ソフトウェアを構成するのに必要なツールが付属していたり といった具合です。しかし Subversion はそのような種類のシステムでは ありません。 Subversionは<emphasis>どのような</emphasis> タイプのファイルの集合も管理できる一般的なシステムです。あなたにとって それはプログラムのソースコードかも知れません&mdash;しかし別の人にとっては 食料品の買い物リストから、デジタルビデオの編集、そしてもっと他のもの ですらあるでしょう。"

#. Tag: title
#: ch00-preface.xml:635
#, no-c-format
msgid "Subversion's History"
msgstr "Subversionの歴史"

#. Tag: primary
#: ch00-preface.xml:639
#, no-c-format
msgid "Subversion"
msgstr "Subversion"

#. Tag: secondary
#: ch00-preface.xml:640
#, fuzzy, no-c-format
msgid "history of"
msgstr "history"

#. Tag: para
#: ch00-preface.xml:641
#, fuzzy, no-c-format
msgid "In early 2000, CollabNet, Inc. (<ulink url=\"http://www.collab.net\"></ulink>) began seeking developers to write a replacement for CVS. CollabNet offers a collaboration software suite called CollabNet Enterprise Edition (CEE) of which one component is version control. Although CEE used CVS as its initial version control system, CVS's limitations were obvious from the beginning, and CollabNet knew it would eventually have to find something better. Unfortunately, CVS had become the de facto standard in the open source world largely because there <emphasis>wasn't</emphasis> anything better, at least not under a free license. So CollabNet determined to write a new version control system from scratch, retaining the basic ideas of CVS, but without the bugs and misfeatures."
msgstr "2000年の初め、CollabNet, Inc. (<ulink url=\"http://www.collab.net\"></ulink>)は CVS の置き換えを 書く開発者を探し始めていました。CollabNet は CollabNet Enterprise Edition (CEE) <footnote> <para>より小さなグループ作業を狙ったCollabNet Team Edition (CTE)という 製品もあります。 </para> </footnote> という 共同作業用のソフトウェアを提供しています。それはバージョン管理システムをその 一部として含んでいました。CEE は最初のバージョン管理システムと して CVS を利用していましたが、CVS の持っている制限は最初から明らかで あり、CollabNet は最終的にもっと良いものを見つけなくてはならないと悟り ました。不幸にも CVS はオープンソースの世界において <foreignphrase>事実上の標準</foreignphrase>となって いましたが、それは単に、少なくともフリーライセンスの下ではそれより良いも のが何も<emphasis>なかった</emphasis>というのが理由の大部分でした。 そこで CollabNet は一から新しいバージョン管理システムを開発することを決め ました。ただし、CVS の基本的な考え方は保持したまま、バグやまずい実装を 含まないようにする形で、です。"

#. Tag: para
#: ch00-preface.xml:657
#, fuzzy, no-c-format
msgid "In February 2000, they contacted Karl Fogel, the author of <citetitle>Open Source Development with CVS</citetitle> (Coriolis, 1999), and asked if he'd like to work on this new project. Coincidentally, at the time Karl was already discussing a design for a new version control system with his friend Jim Blandy. In 1995, the two had started Cyclic Software, a company providing CVS support contracts, and although they later sold the business, they still used CVS every day at their jobs. Their frustration with CVS had led Jim to think carefully about better ways to manage versioned data, and he'd already come up with not only the name <quote>Subversion</quote>, but also with the basic design of the Subversion data store. When CollabNet called, Karl immediately agreed to work on the project, and Jim got his employer, Red Hat Software, to essentially donate him to the project for an indefinite period of time. CollabNet hired Karl and Ben Collins-Sussman, and detailed design work began in May. With the help of some well-placed prods from Brian Behlendorf and Jason Robbins of CollabNet, and Greg Stein (at the time an independent developer active in the WebDAV/DeltaV specification process), Subversion quickly attracted a community of active developers. It turned out that many people had had the same frustrating experiences with CVS, and welcomed the chance to finally do something about it."
msgstr "2000年の 2 月、彼らは<citetitle>Open Source Development with CVS</citetitle> (Coriolis, 1999)の著者である Karl Fogel に連絡をとり、この新しい プロジェクトに参加する気はないかどうかたずねました。ちょうど同じころ Karl は既に新しいバージョン管理システムの設計について友人の Jim Blandy と 議論していました。1995 年に二人は CVS のサポート契約を提供する会社、 Cyclic Software を設立し、後にそのビジネスを売却しはしましたが、やはり 自分たちの日常の作業に CVS を利用していました。CVS に関する不満がもと で Jim はバージョン化されたデータの管理について、より良い方法を注意深く 考えることになり、<quote>Subversion</quote> という名前だけではなく、Subversion リポジトリ の基本的な設計についても既に思いついていました。CollabNet が Karl を 呼ぶと彼はすぐにそのプロジェクトで働くことに同意し、また Jim は 雇用主である Red Hat Software が、不定期の期間にわたって彼を事実上 そのプロジェクトに無償で送り込ませることに成醐ｻ駈ｵました。CollabNet は Karl と Ben Collins-Sussman を雇い、5月から詳細設計が始まりました。 CollabNet の Brian Behlendorf と Jason Robbins、そして Greg Stein (当時はWebDAV/DeltaVの仕様決めを独立した開発者として行っていました が) からのタイミングの良い刺激に助けられ、Subversion は急速に活発な 開発者コミュニティの注意を引きました。多くの人々は CVS について不満を 持っていたことがわかり、最終的に自分たちがその企画に対して何らか貢献 できることを歓迎しました。"

#. Tag: para
#: ch00-preface.xml:682
#, no-c-format
msgid "The original design team settled on some simple goals. They didn't want to break new ground in version control methodology, they just wanted to fix CVS. They decided that Subversion would match CVS's features, and preserve the same development model, but not duplicate CVS's most obvious flaws. And although it did not need to be a drop-in replacement for CVS, it should be similar enough that any CVS user could make the switch with little effort."
msgstr "最初の設計チームはいくつかのシンプルな目標を決めました。それはバージョン 管理手法の新しい地平を切り開くようなことを目的とはせず、単に CVS の 不具合を修正するものであるとされました。Subversion は CVS の機能に合致し、 同じ開発モデルを踏襲するが、CVS のほとんどの明らかな不具合については 繰り返さないと決められました。そしてそれは CVS を単純な置き換えである必要 はないにせよ、CVS ユーザがわずかな労力によって移行できる程度には十分 似ているべきであるとされました。"

#. Tag: para
#: ch00-preface.xml:691
#, no-c-format
msgid "After fourteen months of coding, Subversion became <quote>self-hosting</quote> on August 31, 2001. That is, Subversion developers stopped using CVS to manage Subversion's own source code, and started using Subversion instead."
msgstr "14ヶ月のコーディングの後、Subversion は 2001/8/31 に <quote>自分で自分自身のソースコード管理</quote>が できるようになりました。Subversion開発者は、Subversionの自身のソースコード 管理にCVSを使うのをやめてSubversion自身を使えるようになったということです。"

#. Tag: para
#: ch00-preface.xml:696
#, no-c-format
msgid "While CollabNet started the project, and still funds a large chunk of the work (it pays the salaries of a few full-time Subversion developers), Subversion is run like most open-source projects, governed by a loose, transparent set of rules that encourage meritocracy. CollabNet's copyright license is fully compliant with the Debian Free Software Guidelines. In other words, anyone is free to download, modify, and redistribute Subversion as he pleases; no permission from CollabNet or anyone else is required."
msgstr "CollabNet がこのプロジェクトを始め、いまだに作業の大部分に出資している わけです(Subversion のフルタイム開発者の給料を払っています)が、Subverion は大部分のオープンソースプロジェクトのように実力主義を促進するような緩やかで オープンないくつかの規則によって成り立っています。CollabNet のコピーライト ライセンスは Debian Free Software Guidelines に完全に合致したものです。 言い換えると、 誰でも自由にSubversionをダウンロードし、修正し、再配布できるということです。 CollabNet や他の誰かの許可を得る必要はありません。"

#. Tag: title
#: ch00-preface.xml:711
#, no-c-format
msgid "Subversion's Features"
msgstr "Subversionの機能"

#. Tag: para
#: ch00-preface.xml:713
#, fuzzy, no-c-format
msgid "When discussing the features that Subversion brings to the version control table, it is often helpful to speak of them in terms of how they improve upon CVS's design. If you're not familiar with CVS, you may not understand all of these features. And if you're not familiar with version control at all, your eyes may glaze over unless you first read <xref linkend=\"svn.basic\"/>, in which we provide a gentle introduction to version control."
msgstr "Subversion がバージョン管理の問題に提供しようとする機能についての議論 は CVS のデザインをどのように改良したかという観点から話しをすることが しばしば有用です。CVS になじみがないのであればこれらのすべての機能を 理解する必要はありません。そしてバージョン管理についてまったく知らない のであれば、眠くなるだけかも知れません。まず最初に<xref linkend=\"svn.basic\"/>を読んでください。バージョン管理システム一般 についての親切な手引きを用意してあります。"

#. Tag: para
#: ch00-preface.xml:722
#, no-c-format
msgid "Subversion provides:"
msgstr "Subversion は以下の機能を提供します:"

#. Tag: term
#: ch00-preface.xml:726
#, no-c-format
msgid "Directory versioning"
msgstr "ディレクトリのバージョン化"

#. Tag: para
#: ch00-preface.xml:728
#, no-c-format
msgid "CVS only tracks the history of individual files, but Subversion implements a <quote>virtual</quote> versioned filesystem that tracks changes to whole directory trees over time. Files <emphasis>and</emphasis> directories are versioned."
msgstr "CVS は個々のファイルの履歴を追うことができるだけですが、 Subversion は時間とともにディレクトリツリー全体の変化も追うことのできる、 <quote>仮想的な</quote>バージョン化ファイルシステムを実装しています。 ファイル<emphasis>と、さらに</emphasis> ディレクトリもバージョン付け します。"

#. Tag: term
#: ch00-preface.xml:737
#, no-c-format
msgid "True version history"
msgstr "真のバージョン履歴機能"

#. Tag: para
#: ch00-preface.xml:739
#, no-c-format
msgid "Since CVS is limited to file versioning, operations such as copies and renames&mdash;which might happen to files, but which are really changes to the contents of some containing directory&mdash;aren't supported in CVS. Additionally, in CVS you cannot replace a versioned file with some new thing of the same name without the new item inheriting the history of the old&mdash;perhaps completely unrelated&mdash;file. With Subversion, you can add, delete, copy, and rename both files and directories. And every newly added file begins with a fresh, clean history all its own."
msgstr "CVS はファイルのバージョン化に機能が制限されているので、コピー や名称変更&mdash; これはファイルだけではなくディレクトリの内容も 変更する可能性があります&mdash; は CVS ではサポートされていません。 さらに CVS では古い履歴を継承しなければ同じ名前の全く新しい ファイル&mdash; おそらく全く無関係のファイル&mdash;によってすでに バージョン化されているファイルを置き換えることはできません。 Subversion ではファイルとディレクトリの両者に対して追加、削除、 コピー、名称変更をすることができます。そして新規追加されるすべての ファイルは、そこから新しく始まるきれいな履歴を持つことになります。"

#. Tag: term
#: ch00-preface.xml:754
#, no-c-format
msgid "Atomic commits"
msgstr "不分割(Atomic)なコミット"

#. Tag: para
#: ch00-preface.xml:756
#, no-c-format
msgid "A collection of modifications either goes into the repository completely, or not at all. This allows developers to construct and commit changes as logical chunks, and prevents problems that can occur when only a portion of a set of changes is successfully sent to the repository."
msgstr "変更点の集まりは、それ全体がリポジトリに完全に反映されるか、 まったく反映されないかのどちらかです。これにより開発者は 論理的にひとまとまりの変更を作りコミットすることができ、 一部だけがリポジトリに反映されてしまうような問題を回避する ことができます。"

#. Tag: term
#: ch00-preface.xml:766
#, no-c-format
msgid "Versioned metadata"
msgstr "バージョン化されたメタデータ"

#. Tag: para
#: ch00-preface.xml:768
#, no-c-format
msgid "Each file and directory has a set of properties&mdash;keys and their values&mdash;associated with it. You can create and store any arbitrary key/value pairs you wish. Properties are versioned over time, just like file contents."
msgstr "ファイルとディレクトリはそれぞれ関連した属性&mdash; キーと 値の組のことです&mdash; を持つことができます。任意の キー/値の組を生成し保存することができます。属性もファイルの内容と 同じようにバージョン化されます。"

#. Tag: term
#: ch00-preface.xml:777
#, no-c-format
msgid "Choice of network layers"
msgstr "ネットワーク層の選択"

#. Tag: para
#: ch00-preface.xml:779
#, no-c-format
msgid "Subversion has an abstracted notion of repository access, making it easy for people to implement new network mechanisms. Subversion can plug into the Apache HTTP Server as an extension module. This gives Subversion a big advantage in stability and interoperability, and instant access to existing features provided by that server&mdash;authentication, authorization, wire compression, and so on. A more lightweight, standalone Subversion server process is also available. This server speaks a custom protocol which can be easily tunneled over SSH."
msgstr "Subversion はリポジトリアクセス用の抽象レイアがあり、新しい ネットワークプログラムを簡単に実装できるようになっています。 Subversion は HTTP サーバの拡張モジュールとして組み込むことも できます。こうすると Subversion は信頼性や相互連携性において 非常に有利になりサーバが提供している既存の機能をすぐに利用 できるようになります&mdash;認証、認可、データ圧縮、などです。 より簡易なスタンドアロンの Subversion プロセスも利用できます。 このサーバは独自のプロトコルによって SSH を利用したトンネル 通信を簡単に実行できます。"

#. Tag: term
#: ch00-preface.xml:794
#, no-c-format
msgid "Consistent data handling"
msgstr "データ処理の一貫性"

#. Tag: para
#: ch00-preface.xml:796
#, no-c-format
msgid "Subversion expresses file differences using a binary differencing algorithm, which works identically on both text (human-readable) and binary (human-unreadable) files. Both types of files are stored equally compressed in the repository, and differences are transmitted in both directions across the network."
msgstr "Subversion は、バイナリ差分アルゴリズムを使ってファイルの差分を 表現します。これはテキスト(読むことのできるデータ)にも、バイナリ( 簡単に読むことのできないデータ)に対しても同じ方法で働きます。 どちらのタイプのデータもリポジトリ中に同じ形式で圧縮されて格納され、 差分はネットワーク上どちらの方向にも転送されます。"

#. Tag: term
#: ch00-preface.xml:806
#, no-c-format
msgid "Efficient branching and tagging"
msgstr "効率的なブランチ、タグの作成"

#. Tag: para
#: ch00-preface.xml:808
#, no-c-format
msgid "The cost of branching and tagging need not be proportional to the project size. Subversion creates branches and tags by simply copying the project, using a mechanism similar to a hard-link. Thus these operations take only a very small, constant amount of time."
msgstr "ブランチとタグを作成するコストはプロジェクトのサイズに比例するわけでは ありません。Subversionはハードリンクとして知られている方法とよく似た方法を使って、 単にプロジェクトをコピーすることでブランチとタグを作ります。そのため ブランチ、タグの作成は非常に短い、一定の時間しかかかりません。"

#. Tag: term
#: ch00-preface.xml:818
#, no-c-format
msgid "Hackability"
msgstr "拡張しやすさ"

#. Tag: para
#: ch00-preface.xml:820
#, no-c-format
msgid "Subversion has no historical baggage; it is implemented as a collection of shared C libraries with well-defined APIs. This makes Subversion extremely maintainable and usable by other applications and languages."
msgstr "Subversionは歴史的な遺物ではありません。よく設計された APIでできたCの共有ライブラリの集まりとして実装されています。 このことはSubversionの保守をとてもやりやすいものにしますし、 他のアプリケーションや 言語から利用しやすいものにします。"

#. Tag: title
#: ch00-preface.xml:835
#: ch00-preface.xml:842
#, no-c-format
msgid "Subversion's Architecture"
msgstr "Subversion の構成"

#. Tag: para
#: ch00-preface.xml:837
#, fuzzy, no-c-format
msgid "illustrates a <quote>mile-high</quote> view of Subversion's design."
msgstr "は Subversion の<quote>概略</quote>と でも呼べるようなものです。"

#. Tag: para
#: ch00-preface.xml:846
#, no-c-format
msgid "On one end is a Subversion repository that holds all of your versioned data. On the other end is your Subversion client program, which manages local reflections of portions of that versioned data (called <quote>working copies</quote>). Between these extremes are multiple routes through various Repository Access (RA) layers. Some of these routes go across computer networks and through network servers which then access the repository. Others bypass the network altogether and access the repository directly."
msgstr "一方の端はバージョン化されたすべてのデータがある Subversionリポジトリ です。もう一方はクライアントプログラムで、バージョン化されたデータの ローカルマシン上のコピー(これを<quote>作業コピー</quote>と言います)を 管理します。この二つの間にさまざまなリポジトリアクセス(RA)層を通じた 通信路があります。そのいくつかはコンピュータネットワークをまたいで リポジトリにアクセスするためのネットワークサーバ越しに通信します。 他のものはネットワークを利用せず直接リポジトリにアクセスします。"

#. Tag: title
#: ch00-preface.xml:861
#, no-c-format
msgid "Subversion's Components"
msgstr "Subversionの構成要素"

#. Tag: para
#: ch00-preface.xml:863
#, no-c-format
msgid "Subversion, once installed, has a number of different pieces. The following is a quick overview of what you get. Don't be alarmed if the brief descriptions leave you scratching your head&mdash;there are <emphasis>plenty</emphasis> more pages in this book devoted to alleviating that confusion."
msgstr "Subversion はさまざま部品からできています。以下はその簡単な概要です。 ここでの簡単な説明で混乱してもあわてないでください; &mdash;混乱を 減らすために<emphasis>非常に多くの</emphasis>ページがこの後に用意して ありますので。"

#. Tag: term
#: ch00-preface.xml:871
#, no-c-format
msgid "<term>svn</term>"
msgstr "<term>svn</term>"

#. Tag: para
#: ch00-preface.xml:873
#, no-c-format
msgid "The command-line client program."
msgstr "コマンドラインのクライアントプログラムです。"

#. Tag: term
#: ch00-preface.xml:878
#, no-c-format
msgid "svnversion"
msgstr "svnversion"

#. Tag: para
#: ch00-preface.xml:880
#, no-c-format
msgid "A program for reporting the state (in terms of revisions of the items present) of a working copy."
msgstr "作業コピーの(アイテムが存在するリビジョンに関係した)状態についての報告をするプログラムです。"

#. Tag: para
#: ch00-preface.xml:888
#, fuzzy, no-c-format
msgid "A tool for directly inspecting a Subversion repository."
msgstr "Subversionのリポジトリを調べるためのツールです。"

#. Tag: para
#: ch00-preface.xml:895
#, no-c-format
msgid "A tool for creating, tweaking or repairing a Subversion repository."
msgstr "Subversionのリポジトリを調整したり修復するためのプログラムで主 システム管理者によって使われます。"

#. Tag: para
#: ch00-preface.xml:903
#, no-c-format
msgid "A program for filtering Subversion repository dump streams."
msgstr "Subversion リポジトリのダンプファイル形式のデータに対するフィルタプログラムです。"

#. Tag: para
#: ch00-preface.xml:911
#, no-c-format
msgid "A plug-in module for the Apache HTTP Server, used to make your repository available to others over a network."
msgstr "Apache HTTP サーバ用のプラグインモジュールです。リポジトリをネットワーク上の別のユーザが利用できるようにするものです。"

#. Tag: para
#: ch00-preface.xml:920
#, no-c-format
msgid "A custom standalone server program, runnable as a daemon process or invokable by SSH; another way to make your repository available to others over a network."
msgstr "デーモンとして、またはSSHから起動されるスタンドアロンのサーバプログラムです。ネットワーク越しにリポジトリを使えるようにする別の方法です。"

#. Tag: para
#: ch00-preface.xml:929
#, no-c-format
msgid "A program for incrementally mirroring one repository to another over a network."
msgstr ""

#. Tag: para
#: ch00-preface.xml:936
#, no-c-format
msgid "Assuming you have Subversion installed correctly, you should be ready to start. The next two chapters will walk you through the use of <command>svn</command>, Subversion's command-line client program."
msgstr "Subversionが正しくインストールされていれば、これで利用できるようになっているはずです。次の二つの章では、コマンドラインクライアントプログラム、 <command>svn</command>の使い方を説明します。"

#. Tag: title
#: ch01-fundamental-concepts.xml:2
#, no-c-format
msgid "Fundamental Concepts"
msgstr "根本的な概念"

#. Tag: para
#: ch01-fundamental-concepts.xml:4
#, no-c-format
msgid "This chapter is a short, casual introduction to Subversion. If you're new to version control, this chapter is definitely for you. We begin with a discussion of general version control concepts, work our way into the specific ideas behind Subversion, and show some simple examples of Subversion in use."
msgstr "この章ではSubversionの概要を説明します。 バージョン管理システムの利用が初めての人は、必ずこの章を読んでください。 一般的なバージョン管理の概念から始めて、Subversionの背後にあるアイディア を説明し、Subversionの使い方の簡単な例をお見せします。"

#. Tag: para
#: ch01-fundamental-concepts.xml:11
#, no-c-format
msgid "Even though the examples in this chapter show people sharing collections of program source code, keep in mind that Subversion can manage any sort of file collection&mdash;it's not limited to helping computer programmers."
msgstr "この章の例では複数のプログラムソースコードの共有を扱いますが、Subversion はどのようなファイルの集まりも管理できることに注意してください&mdash; コンピュータプログラマだけを助けるものではないのです。"

#. Tag: title
#: ch01-fundamental-concepts.xml:21
#, no-c-format
msgid "The Repository"
msgstr "リポジトリ"

#. Tag: para
#: ch01-fundamental-concepts.xml:23
#, no-c-format
msgid "Subversion is a centralized system for sharing information. At its core is a repository, which is a central store of data. The repository stores information in the form of a <firstterm>filesystem tree</firstterm>&mdash;a typical hierarchy of files and directories. Any number of <firstterm>clients</firstterm> connect to the repository, and then read or write to these files. By writing data, a client makes the information available to others; by reading data, the client receives information from others. <xref linkend=\"svn.basic.repository.dia-1\"/> illustrates this."
msgstr "Subversion は共有情報の一元管理システムです。最も重要なのは リポジトリと呼ばれる、データの格納庫 です。リポジトリは情報を<firstterm>ファイルシステムツリー</firstterm> &mdash;一般的なファイルとディレクトリの階層構造&mdash;の形で格納します。 任意の数の<firstterm>クライアント</firstterm>がリポジトリにアクセスし このようなファイルの読み書きをします。データを書き込むことでクライアントは 他の人たちがその情報を使えるようにします。データを読み出すことでクライアントは 他の人たちの情報を受け取ります。<xref linkend=\"svn.basic.repository.dia-1\"/>はこれ を表したものです。"

#. Tag: title
#: ch01-fundamental-concepts.xml:35
#, no-c-format
msgid "A typical client/server system"
msgstr "典型的なクライアント/サーバシステム"

#. Tag: para
#: ch01-fundamental-concepts.xml:39
#, no-c-format
msgid "So why is this interesting? So far, this sounds like the definition of a typical file server. And indeed, the repository <emphasis>is</emphasis> a kind of file server, but it's not your usual breed. What makes the Subversion repository special is that <emphasis>it remembers every change</emphasis> ever written to it: every change to every file, and even changes to the directory tree itself, such as the addition, deletion, and rearrangement of files and directories."
msgstr "どうしてこんなことが興味深いのか? ここまでのところでは、典型的なファイルサーバの 定義にすぎないように思います。そして実際、リポジトリはファイルサーバの <emphasis>一種</emphasis>です。が、普通言うようなものとは少し 違います。Subversionのリポジトリの特徴はそれまで書き込まれた <emphasis>すべての修正をすべて憶えている</emphasis>ところ です。すべてのファイル変更についても、また、ディレクトリツリーの自身の変更に ついてもそうです。このような変更は、ファイルやディレクトリの追加、削除、 再配置、などによって起こります。"

#. Tag: para
#: ch01-fundamental-concepts.xml:48
#, fuzzy, no-c-format
msgid "When a client reads data from the repository, it normally sees only the latest version of the filesystem tree. But the client also has the ability to view <emphasis>previous</emphasis> states of the filesystem. For example, a client can ask historical questions like, <quote>What did this directory contain last Wednesday?</quote> or <quote>Who was the last person to change this file, and what changes did he make?</quote> These are the sorts of questions that are at the heart of any <firstterm>version control system</firstterm>: systems that are designed to track changes to data over time."
msgstr "クライアントがリポジトリからデータを読み出すときには、普通はファイルシステム ツリーの最後のバージョンだけが見えます。が、ファイルシステムの <emphasis>以前の</emphasis>状態も閲覧することができます。 たとえばクライアントは、 <quote>先週の水曜日にこのディレクトリにはどのファイルがあったの?</quote>、とか <quote>最後にこのファイルを変更したのは誰で、その人は何を変更したの?</quote> といった履歴に関する質問をすることができます。 この手の質問はすべての<firstterm>バージョン管理システム</firstterm> のキモになるような質問です。つまりバージョン管理システムとは時間と共に 修正されるデータを記録したり、修正内容を追跡したりするようにデザイン されています。"

#. Tag: title
#: ch01-fundamental-concepts.xml:65
#, no-c-format
msgid "Versioning Models"
msgstr "バージョン管理モデル"

#. Tag: para
#: ch01-fundamental-concepts.xml:67
#, no-c-format
msgid "The core mission of a version control system is to enable collaborative editing and sharing of data. But different systems use different strategies to achieve this. It's important to understand these different strategies for a couple of reasons. First, it will help you compare and contrast existing version control systems, in case you encounter other systems similar to Subversion. Beyond that, it will also help you make more effective use of Subversion, since Subversion itself supports a couple of different ways of working."
msgstr "バージョン管理システムの主要な任務は、協調的な編集とデータの共有を可能にすることです。しかし異なるシステムでは、これを実現するために異なる戦略をとっています。2つの理由からこれらの異なる戦略を理解することが重要です。第一に、Subversion ににている他のバージョン管理に出会った場合に、既存のバージョン管理システムと比較し、対照するのに役立ちます。さらに、Subversion をもっと効率的に利用することに役立ちます。なぜなら、Subversion 自身も2つの異なった作業方法に対応しているからです。"

#. Tag: title
#: ch01-fundamental-concepts.xml:79
#, no-c-format
msgid "The Problem of File-Sharing"
msgstr "ファイル共有の問題"

#. Tag: para
#: ch01-fundamental-concepts.xml:81
#, no-c-format
msgid "All version control systems have to solve the same fundamental problem: how will the system allow users to share information, but prevent them from accidentally stepping on each other's feet? It's all too easy for users to accidentally overwrite each other's changes in the repository."
msgstr "あらゆるバージョン管理システムはどれも基本的な一つの問題を解かなくてはなりません: どうやってユーザに情報を共有させつつ、お互いの変更点が重ならないようにするか、です。 リポジトリ上の別の人の変更を間違って上書きしてしまうことは簡単に 起こりえます。"

#. Tag: para
#: ch01-fundamental-concepts.xml:88
#, no-c-format
msgid "Consider the scenario shown in <xref linkend=\"svn.basic.vsn-models.problem-sharing.dia-1\"/>. Suppose we have two co-workers, Harry and Sally. They each decide to edit the same repository file at the same time. If Harry saves his changes to the repository first, then it's possible that (a few moments later) Sally could accidentally overwrite them with her own new version of the file. While Harry's version of the file won't be lost forever (because the system remembers every change), any changes Harry made <emphasis>won't</emphasis> be present in Sally's newer version of the file, because she never saw Harry's changes to begin with. Harry's work is still effectively lost&mdash;or at least missing from the latest version of the file&mdash;and probably by accident. This is definitely a situation we want to avoid!"
msgstr "に示したこんな状況を考えてみてください: 二人の同僚、Harry と Sally がいます。 二人は同時に同じリポジトリ内のファイルを編集することにしました。 もし Harry が先に彼の変更をリポジトリに書き込めば、多分、(その少し あとで) Sally は間違って彼女の新しいバージョンでそれを上書きしてしまう でしょう。Harry のバージョンは永久に失われることはありません(と、いうのは バージョン管理システムはすべての変更を記録しているため)が、 Harry がやった修正は、どれも Sally の新しいバージョンには <emphasis>現れることがありません</emphasis>。編集時には 彼女は Harry の変更を見ることはできないからです。Harry の作業は、 実質的には失われてしまい、&mdash;あるいは少なくとも最新のバージョンからは 失われてしまい、&mdash; しかもおそらくそれは二人が意図したことではないで しょう。これこそわれわれが避けなくてはならない状況です。"

#. Tag: title
#: ch01-fundamental-concepts.xml:105
#, no-c-format
msgid "The problem to avoid"
msgstr "避けなくてはならない問題"

#. Tag: title
#: ch01-fundamental-concepts.xml:113
#, no-c-format
msgid "The Lock-Modify-Unlock Solution"
msgstr "ロック・修正・ロック解除の解法"

#. Tag: para
#: ch01-fundamental-concepts.xml:115
#, no-c-format
msgid "Many version control systems use a <firstterm>lock-modify-unlock</firstterm> model to address the problem of many authors clobbering each other's work. In this model, the repository allows only one person to change a file at a time. This exclusivity policy is managed using locks. Harry must <quote>lock</quote> a file before he can begin making changes to it. If Harry has locked a file, then Sally cannot also lock it, and therefore cannot make any changes to that file. All she can do is read the file, and wait for Harry to finish his changes and release his lock. After Harry unlocks the file, Sally can take her turn by locking and editing the file. <xref linkend=\"svn.basic.vsn-models.lock-unlock.dia-1\"/> demonstrates this simple solution."
msgstr "多くのバージョン管理システムでは、 <firstterm>ロック・修正・ロック解除</firstterm>のモデルを使ってこの問題 を扱います。そのようなシステムでは リポジトリ中のファイルを変更できるのは一度に一人だけです。 最初 Harry はファイルに変更を加える前に、<quote>ロック</quote>しなくては なりません。ファイルのロックは、図書館から本を借りるのにいろんな意味で よく似ています。もし Harry がファイルをロックすると、Sally は同じ ファイルに変更することができなくなります。ロックしようとすれば、 リポジトリはその要求を拒否します。彼女ができるのはそのファイルを 読むことと、Harryが仕事を終えてロック解除してくれるのを待つことだけ です。Harry がロックを解除したあと、彼の番は終わり、今度はSallyが ロックして編集することができる番になります。<xref linkend=\"svn.basic.vsn-models.lock-unlock.dia-1\"/>はこの単純な解法の例です。"

#. Tag: title
#: ch01-fundamental-concepts.xml:131
#, no-c-format
msgid "The lock-modify-unlock solution"
msgstr "ロック・修正・ロック解除の解法"

#. Tag: para
#: ch01-fundamental-concepts.xml:135
#, no-c-format
msgid "The problem with the lock-modify-unlock model is that it's a bit restrictive, and often becomes a roadblock for users:"
msgstr "ロック・修正・ロック解除のモデルの問題は、ファイル管理が少し厳しすぎる ことで、しばしば、ユーザとって作業の障害になります:"

#. Tag: para
#: ch01-fundamental-concepts.xml:141
#, no-c-format
msgid "<emphasis>Locking may cause administrative problems.</emphasis> Sometimes Harry will lock a file and then forget about it. Meanwhile, because Sally is still waiting to edit the file, her hands are tied. And then Harry goes on vacation. Now Sally has to get an administrator to release Harry's lock. The situation ends up causing a lot of unnecessary delay and wasted time."
msgstr "<emphasis>ロックすることは管理上の問題を起こすかも知れません。</emphasis> ときどきHarryはファイルをロックしたあとでそのことを忘れてしまいます。 いっぽう Sally はずっと自分の番を待っているので、その間何もすることが できません。そしてHarryはそのままバカンスに行ってしまい、Sallyとしては 管理者に対してHarryのロックを解除してもらうように頼まなくてはならなく なります。この状況は不要な遅れと、時間の無駄を起こします。"

#. Tag: para
#: ch01-fundamental-concepts.xml:153
#, no-c-format
msgid "<emphasis>Locking may cause unnecessary serialization.</emphasis> What if Harry is editing the beginning of a text file, and Sally simply wants to edit the end of the same file? These changes don't overlap at all. They could easily edit the file simultaneously, and no great harm would come, assuming the changes were properly merged together. There's no need for them to take turns in this situation."
msgstr "<emphasis>ロックは不要な直列化を起こすかも知れません。</emphasis> Harryはそのテキストファイルの先頭の部分を修正して、Sally は同じファイルの 最後の部分を修正したいだけだとしたら? 二人の修正はまったく重なって いません。適当な形でマージされることさえ保証できれば、二人は同じファイル を同時に編集することができ、それが大きな問題にはならないでしょう。"

#. Tag: para
#: ch01-fundamental-concepts.xml:166
#, fuzzy, no-c-format
msgid "<emphasis>Locking may create a false sense of security.</emphasis> Suppose Harry locks and edits file A, while Sally simultaneously locks and edits file B. But what if A and B depend on one another, and the changes made to each are semantically incompatible? Suddenly A and B don't work together anymore. The locking system was powerless to prevent the problem&mdash;yet it somehow provided a false sense of security. It's easy for Harry and Sally to imagine that by locking files, each is beginning a safe, insulated task, and thus not bother discussing their incompatible changes early on. Locking often becomes a substitute for real communication."
msgstr "<emphasis>ロックは間違った意味の安心感を与えてしまう場合 があります。</emphasis> HarryがファイルAをロックしてから編集し、一方Sallyは同時にファイルBを ロックしてから編集しているとします。しかしここでAとBとは意味的に 依存しあっていて、それぞれに対する独立した変更は両立しないとしましょう。 突然 A と B はもう一緒に動作しなくなります。ロックを使ったシステムは このような状況には無力です。&mdash; これはある意味で、間違った意味の 安心感を与えてしまっています。HarryやSallyが、ファイルをロックする ことでそれぞれ安全な状態に入り、自分の作業は他人から分離されていると 錯覚することは簡単に起こりえます。このことが、最初に述べたような 実は両立しない変更についての議論を妨げてしまうかも知れません。"

#. Tag: title
#: ch01-fundamental-concepts.xml:187
#, no-c-format
msgid "The Copy-Modify-Merge Solution"
msgstr "コピー・修正・マージの解法"

#. Tag: para
#: ch01-fundamental-concepts.xml:189
#, fuzzy, no-c-format
msgid "Subversion, CVS, and many other version control systems use a <firstterm>copy-modify-merge</firstterm> model as an alternative to locking. In this model, each user's client contacts the project repository and creates a personal <firstterm>working copy</firstterm>&mdash;a local reflection of the repository's files and directories. Users then work simultaneously and independently, modifying their private copies. Finally, the private copies are merged together into a new, final version. The version control system often assists with the merging, but ultimately a human being is responsible for making it happen correctly."
msgstr "Subversion, CVS, その他のバージョン管理システムはロックに変わる アイディアとして<firstterm>コピー・修正・マージ</firstterm>モデルを 使います。このモデルではユーザごとのクライアントプログラムはプロジェクト リポジトリにアクセスして自分だけの<firstterm>作業コピー</firstterm>を 作ります&mdash;それはリポジトリにあるファイルやディレクトリをローカルに コピーしてきたものです。それからユーザは ひとりひとりが平行して作業をし、自分の作業コピーを修正します。 最後に自分のコピーは最終的な新しいバージョンにマージされます。 このバージョン管理システムは大部分のマージを手伝いますが 最終的には正しいマージかどうかについては人が責任を持ちます。 ユーザは平行して作業し、変更を同じファイル、ただしそれぞれの作業コピー である&quot;A&quot;に対して行います。"

#. Tag: para
#: ch01-fundamental-concepts.xml:201
#, no-c-format
msgid "Here's an example. Say that Harry and Sally each create working copies of the same project, copied from the repository. They work concurrently, and make changes to the same file A within their copies. Sally saves her changes to the repository first. When Harry attempts to save his changes later, the repository informs him that his file A is <firstterm>out-of-date</firstterm>. In other words, that file A in the repository has somehow changed since he last copied it. So Harry asks his client to <firstterm>merge</firstterm> any new changes from the repository into his working copy of file A. Chances are that Sally's changes don't overlap with his own; so once he has both sets of changes integrated, he saves his working copy back to the repository. <xref linkend=\"svn.basic.vsn-models.copy-merge.dia-1\"/> and <xref linkend=\"svn.basic.vsn-models.copy-merge.dia-2\"/> show this process."
msgstr "例をあげます。 Harry とSally が同じプロジェクトに対するそれぞれの作業コピーをリポジトリ の内容をコピーして作ったとします。 彼らは平行して作業し、変更をまずは自分の作業コピーの同じファイルAに対して 行います。Sally は自分の変更を先にリポジトリに保存します。 Harry が変更をあとで保存したいと思ったとき、リポジトリは、彼に対して Aは既に<firstterm>最新ではない</firstterm>ことを伝えます。 言い換えると、リポジトリにあるファイルAは彼がそれをコピーした後で 別の人によって修正されていることを伝えます。そこで Harry は、Subversion のクライアントプログラムに、自分の作業コピーAに対して、リポジトリにある 新しい変更点を<firstterm>マージ</firstterm>するように要求します。 Sally の変更が彼のもので上書きされることはありえません。ひとたび彼が 両方の変更を統合してしまえば、自分の作業コピーをリポジトリに書き戻す ことができます。<xref linkend=\"svn.basic.vsn-models.copy-merge.dia-1\"/>と <xref linkend=\"svn.basic.vsn-models.copy-merge.dia-2\"/> はこの処理を示しています。"

#. Tag: title
#: ch01-fundamental-concepts.xml:219
#, no-c-format
msgid "The copy-modify-merge solution"
msgstr "コピー・修正・マージの解法"

#. Tag: title
#: ch01-fundamental-concepts.xml:224
#, no-c-format
msgid "The copy-modify-merge solution (continued)"
msgstr "コピー・修正・マージの解法(続き)"

#. Tag: para
#: ch01-fundamental-concepts.xml:228
#, no-c-format
msgid "But what if Sally's changes <emphasis>do</emphasis> overlap with Harry's changes? What then? This situation is called a <firstterm>conflict</firstterm>, and it's usually not much of a problem. When Harry asks his client to merge the latest repository changes into his working copy, his copy of file A is somehow flagged as being in a state of conflict: he'll be able to see both sets of conflicting changes, and manually choose between them. Note that software can't automatically resolve conflicts; only humans are capable of understanding and making the necessary intelligent choices. Once Harry has manually resolved the overlapping changes&mdash;perhaps after a discussion with Sally&mdash;he can safely save the merged file back to the repository."
msgstr "しかし、Sallyの変更点がHarryのと<emphasis>重なって</emphasis> いたら? そのときはどうなるのでしょう? この状況は<firstterm>衝突</firstterm>と 呼ばれ、普通はあまり大きな問題にはなりません。 Harry がSubversionクライアントプログラムにリポジトリの最新の変更を 自分の作業コピーにマージするように要求したとき、彼のAファイルの作業 コピーは、衝突の状態としてマークされます。彼は両方の変更の衝突した 部分を見ることができ、どちらを選ぶかを選択します。ソフトウェア自体が 自動的に衝突を解決することはできないのに注意してください; 人間だけが 理解し、正しく選択する力を持っています。Harry がいったん重なっている 部分の修正を手で解消したら&mdash;たぶんSallyと衝突について話し合った あと&mdash;マージされたファイルをリポジトリに安全に書き戻すことが できます。"

#. Tag: para
#: ch01-fundamental-concepts.xml:242
#, fuzzy, no-c-format
msgid "The copy-modify-merge model may sound a bit chaotic, but in practice, it runs extremely smoothly. Users can work in parallel, never waiting for one another. When they work on the same files, it turns out that most of their concurrent changes don't overlap at all; conflicts are infrequent. And the amount of time it takes to resolve conflicts is usually far less than the time lost by a locking system."
msgstr "コピー・修正・マージのモデルは少々混沌としているように 思うかも知れませんが、実際にはとてもスムーズに行きます。 ユーザは平行して作業することができ、相手の修正を待つことはありません。 同じファイルに対して変更するときでも、ほとんどの変更は、まったく重ならない ことがわかります。そして、衝突を解消するのにかかる時間は、ロックする システムで失われる時間よりもずっと短いのです。"

#. Tag: para
#: ch01-fundamental-concepts.xml:250
#, fuzzy, no-c-format
msgid "In the end, it all comes down to one critical factor: user communication. When users communicate poorly, both syntactic and semantic conflicts increase. No system can force users to communicate perfectly, and no system can detect semantic conflicts. So there's no point in being lulled into a false sense of security that a locking system will somehow prevent conflicts; in practice, locking seems to inhibit productivity more than anything else."
msgstr "最終的に、これは一つの重要な要因に行き着きます: ユーザ間の コミュニケーションです。ユーザがお互いにあまり意見のやり取りをしなければ、 両方の構文上の、また意味の上の衝突は増えます。どんなシステムも ユーザに完全な意思の疎通を強制することはできないので、意味上の衝突を 検出することはできません。そういうわけで、ロックするシステムが衝突を 回避することができるという間違った保証に安心する理由はありません。 実際には、ロックは生産性を落とす以外のなにものでもないように見えます。"

#. Tag: title
#: ch01-fundamental-concepts.xml:260
#, no-c-format
msgid "When Locking is Necessary"
msgstr "ロックが必要な場合"

#. Tag: para
#: ch01-fundamental-concepts.xml:262
#, no-c-format
msgid "While the lock-modify-unlock model is considered generally harmful to collaboration, there are still times when locking is appropriate."
msgstr "ロック・修正・ロック解除のモデルは一般的には複数で協力して作業する場合には 有害だと考えられていますが、場合によってはロックが有効なこともあります。"

#. Tag: para
#: ch01-fundamental-concepts.xml:266
#, no-c-format
msgid "The copy-modify-merge model is based on the assumption that files are contextually mergeable: that is, that the majority of the files in the repository are line-based text files (such as program source code). But for files with binary formats, such as artwork or sound, it's often impossible to merge conflicting changes. In these situations, it really is necessary to users to take strict turns when changing the file. Without serialized access, somebody ends up wasting time on changes that are ultimately discarded."
msgstr "コピー・修正・マージモデルはファイルが文脈を考慮した上でマージ可能である という前提に基づいています: つまり、リポジトリ中の大部分のファイルが 行単位のテキストファイルである場合を想定しています(プログラムのソース コードなどがその典型です)。しかしバイナリ形式のファイル、たとえば画像や 音声などの場合、衝突した部分の変更点をマージすることは不可能なのが 普通です。そのような場合に必要なのは、ユーザはファイルを変更する上で、 厳密に自分の順番を確保したいということです。順序性を保った形でのアクセス がなければ、最終的には捨ててしまうことになるある人の修正によって時間が 無駄になってしまいます。"

#. Tag: para
#: ch01-fundamental-concepts.xml:277
#, fuzzy, no-c-format
msgid "While Subversion is still primarily a copy-modify-merge system, it still recognizes the need to lock an occasional file and thus provide mechanisms for this. This feature is discussed later in this book, in <xref linkend=\"svn.advanced.locking\"/>."
msgstr "CVS と Subversion は原則としてはコピー・修正・マージのシステムですが 両者とも場合によってはファイルにロックする必要があることを認め その仕組みを用意しています。 <xref linkend=\"svn.advanced.locking\"/> を見てください。"

#. Tag: title
#: ch01-fundamental-concepts.xml:295
#, no-c-format
msgid "Subversion in Action"
msgstr "実行中のSubversion"

#. Tag: para
#: ch01-fundamental-concepts.xml:297
#, no-c-format
msgid "It's time to move from the abstract to the concrete. In this section, we'll show real examples of Subversion being used."
msgstr "そろそろ抽象論から具体的な議論に移るときがきました。この章で はSubversion が利用される実際の例をお見せします。"

#. Tag: title
#: ch01-fundamental-concepts.xml:303
#, no-c-format
msgid "Subversion Repository URLs"
msgstr "Subversion リポジトリの URL"

#. Tag: para
#: ch01-fundamental-concepts.xml:305
#, fuzzy, no-c-format
msgid "Throughout this book, Subversion uses URLs to identify versioned files and directories in Subversion repositories. For the most part, these URLs use the standard syntax, allowing for server names and port numbers to be specified as part of the URL:"
msgstr "この本全体を通じて、Subversion は Subversion リポジトリのバージョン管 理されている資源を特定するために URL を使います。ほとんどの場所ではこ のようなURL は標準的な構文が利用され、サーバ名とポート番号をその URL の一部として指定することができるようになっています:"

#. Tag: screen
#: ch01-fundamental-concepts.xml:311
#, no-c-format
msgid ""
"$ svn checkout http://svn.example.com:9834/repos\n"
"&hellip;"
msgstr ""
"$ svn checkout http://svn.example.com:9834/repos\n"
"&hellip;"

#. Tag: para
#: ch01-fundamental-concepts.xml:313
#, fuzzy, no-c-format
msgid "But there are some nuances in Subversion's handling of URLs that are notable. For example, URLs containing the <literal>file://</literal> access method (used for local repositories) must, in accordance with convention, have either a server name of <literal>localhost</literal> or no server name at all:"
msgstr "しかし Subversion の URL には、注意しなくてはならないような被ｼ夬ｽな記述 の仕方もあります。たとえば <literal>file:</literal> によるアクセス法を 含むような URL の場合、規約により <literal>localhost</literal> という 名前のサーバ名を指定するか、あるいはまったくサーバ名を指定しないかのど ちらかを選択しなくてはなりません:"

#. Tag: screen
#: ch01-fundamental-concepts.xml:320
#, no-c-format
msgid ""
"$ svn checkout file:///path/to/repos\n"
"&hellip;\n"
"$ svn checkout file://localhost/path/to/repos\n"
"&hellip;"
msgstr ""
"$ svn checkout file:///path/to/repos\n"
"&hellip;\n"
"$ svn checkout file://localhost/path/to/repos\n"
"&hellip;"

#. Tag: para
#: ch01-fundamental-concepts.xml:322
#, fuzzy, no-c-format
msgid "Also, users of the <literal>file://</literal> scheme on Windows platforms will need to use an unofficially <quote>standard</quote> syntax for accessing repositories that are on the same machine, but on a different drive than the client's current working drive. Either of the two following URL path syntaxes will work where <literal>X</literal> is the drive on which the repository resides:"
msgstr "また Windows プラットフォームで <literal>file:</literal> 構文を使うユー ザは同じマシン上にあるが、クライアントのカレントドライブとは別のドライ ブにあるリポジトリにアクセスするためには醐ｷｺ�的なものとはされていません が <quote>標準的な</quote>構文を使う必要があります。以下の URL 構文の どちらか一方を使うとうまくアクセスできます。ここで <literal>X</literal>はリポジトリのあるドライブです。"

#. Tag: screen
#: ch01-fundamental-concepts.xml:331
#, no-c-format
msgid ""
"C:\\&gt; svn checkout file:///X:/path/to/repos\n"
"&hellip;\n"
"C:\\&gt; svn checkout \"file:///X|/path/to/repos\"\n"
"&hellip;"
msgstr ""
"C:¥&gt; svn checkout file:///X:/path/to/repos\n"
"&hellip;\n"
"C:¥&gt; svn checkout \"file:///X|/path/to/repos\"\n"
"&hellip;"

#. Tag: para
#: ch01-fundamental-concepts.xml:333
#, fuzzy, no-c-format
msgid "In the second syntax, you need to quote the URL so that the vertical bar character is not interpreted as a pipe. Also, note that a URL uses forward slashes even though the native (non-URL) form of a path on Windows uses backslashes."
msgstr "二番目の構文では URL を引用符でくくることで縦棒の文字がパイプの意味に 解釈されないようにする必要があります。また URL は Windows の標準ではバッ クスラッシュを使うパスの区切りの文字に通常のスラッシュ文字を使うことに も注意してください。"

#. Tag: para
#: ch01-fundamental-concepts.xml:339
#, fuzzy, no-c-format
msgid "Subversion's <literal>file://</literal> URLs cannot be used in a regular web browser the way typical <literal>file://</literal> URLs can. When you attempt to view a <literal>file://</literal> URL in a regular web browser, it reads and displays the contents of the file at that location by examining the filesystem directly. However, Subversion's resources exist in a virtual filesystem (see <xref linkend=\"svn.developer.layerlib.repos\"/>), and your browser will not understand how to interact with that filesystem."
msgstr "さらに、Subversionの<literal>file:</literal>URLは普通webブラウザが <literal>file:</literal>URLがやる方法では利用できないことに注意して ください。通常のwebブラウザで <literal>file:</literal>URLを閲覧しようと いうとき、ファイルシステムを直接調べることでその場所にあるファイルの 内容を読み出して表示します。しかし、Subversionのリソースは仮想ファイル システム中にあり、(<xref linkend=\"svn.developer.layerlib.repos\"/>参照)あなたのブラウザは そのファイルシステムをどうやって読めば良いか理解できないでしょう。"

#. Tag: para
#: ch01-fundamental-concepts.xml:351
#, no-c-format
msgid "Finally, it should be noted that the Subversion client will automatically encode URLs as necessary, just like a web browser does. For example, if a URL contains a space or upper-ASCII character:"
msgstr "最後に、Subversion クライアントは必要に応じてちょうど Web ブラウザがや るような具合に自動的に URL をエンコードすることにも注意してください。 たとえば、 URL が空白あるいは上位の ASCII 文字が含まれている場合:"

#. Tag: screen
#: ch01-fundamental-concepts.xml:356
#, no-c-format
msgid "$ svn checkout \"http://host/path with space/project/españa\""
msgstr "$ svn checkout \"http://host/path with space/project/espa単a\""

#. Tag: para
#: ch01-fundamental-concepts.xml:358
#, no-c-format
msgid "&hellip;then Subversion will escape the unsafe characters and behave as if you had typed:"
msgstr "&hellip; Subversion は安全に表示できる文字に変換して、あなた自身がそのように 入力したかのように動作します:"

#. Tag: screen
#: ch01-fundamental-concepts.xml:361
#, no-c-format
msgid "$ svn checkout http://host/path%20with%20space/project/espa%C3%B1a"
msgstr "$ svn checkout http://host/path%20with%20space/project/espa%C3%B1a"

#. Tag: para
#: ch01-fundamental-concepts.xml:363
#, no-c-format
msgid "If the URL contains spaces, be sure to place it within quote marks, so that your shell treats the whole thing as a single argument to the <command>svn</command> program."
msgstr "URL が空白を含む場合、引用符の中にあることを確認してください。これでシェ ルは <command>svn</command>プログラムに対してその文字列全体が単一の引 数であるものとして扱うことができるようになります。"

#. Tag: title
#: ch01-fundamental-concepts.xml:371
#, no-c-format
msgid "Working Copies"
msgstr "作業コピー"

#. Tag: para
#: ch01-fundamental-concepts.xml:373
#, no-c-format
msgid "You've already read about working copies; now we'll demonstrate how the Subversion client creates and uses them."
msgstr "既に作業コピーについて読んできたことと思いますので、Subversionのクライアント プログラムが作業コピーを作ったり使ったりする様子を見てみます。"

#. Tag: para
#: ch01-fundamental-concepts.xml:377
#, no-c-format
msgid "A Subversion working copy is an ordinary directory tree on your local system, containing a collection of files. You can edit these files however you wish, and if they're source code files, you can compile your program from them in the usual way. Your working copy is your own private work area: Subversion will never incorporate other people's changes, nor make your own changes available to others, until you explicitly tell it to do so. You can even have multiple working copies of the same project."
msgstr "Subversion 作業コピーは、自分のローカルシステム上の普通の ディレクトリツリーで、その中には複数のファイルがあります。あなたは 望むファイルを編集することができ、ソースコードファイルなら、それを 普通にコンパイルすることができます。作業コピーは自分だけの作業領域 です: Subversion はほかの人の変更を持ち込んだりしませんし、明示的に そうしてくれと言うまで、自分の変更を他の人に見せたりすることも ありません。同じプロジェクト用に一人で複数の作業コピーを持つことさえできます。"

#. Tag: para
#: ch01-fundamental-concepts.xml:387
#, no-c-format
msgid "After you've made some changes to the files in your working copy and verified that they work properly, Subversion provides you with commands to <quote>publish</quote> your changes to the other people working with you on your project (by writing to the repository). If other people publish their own changes, Subversion provides you with commands to merge those changes into your working directory (by reading from the repository)."
msgstr "作業コピーのファイルに変更を加え、それがうまく動作することを 確認したあとで、Subversion はその変更を同じプロジェクトであなたと一緒に 作業しているほかの人に<quote>公開</quote>するためのコマンドを(リポジトリに 書き込むことで)用意します。もし他の人が自分自身の変更を公開したとき にはSubversionはその変更を自分の作業コピーにマージするコマンドを用意します。 (リポジトリの内容を読み出すことで。)"

#. Tag: para
#: ch01-fundamental-concepts.xml:396
#, no-c-format
msgid "A working copy also contains some extra files, created and maintained by Subversion, to help it carry out these commands. In particular, each directory in your working copy contains a subdirectory named <filename>.svn</filename>, also known as the working copy <firstterm>administrative directory</firstterm>. The files in each administrative directory help Subversion recognize which files contain unpublished changes, and which files are out-of-date with respect to others' work."
msgstr "作業コピーには、Subversionによって管理される、いくつかの特殊な ファイルもあり、その助けによって(読み出し、書き込みなどの)コマンドを 実行します。特に作業コピー中のディレクトリには<filename>.svn</filename> という名前の、<firstterm>管理ディレクトリ</firstterm>として知られる サブディレクトリがあります。管理ディレクトリのそれぞれのファイルは Subversionがどのファイルにまだ公開していない変更があるか、どのファイルが 他の人の作業によって最新でなくなっているか理解するのを助けるものです。"

#. Tag: para
#: ch01-fundamental-concepts.xml:406
#, no-c-format
msgid "A typical Subversion repository often holds the files (or source code) for several projects; usually, each project is a subdirectory in the repository's filesystem tree. In this arrangement, a user's working copy will usually correspond to a particular subtree of the repository."
msgstr "典型的な Subversion リポジトリは複数のプロジェクトのファイル (またはソースコード)をつかんでいます。普通、それぞれのプロジェクトは リポジトリのファイルシステムツリー中のサブディレクトリになっています。 この構成によって、ユーザの作業コピーは普通、リポジトリの特定の 部分木に対応しています。"

#. Tag: para
#: ch01-fundamental-concepts.xml:412
#, no-c-format
msgid "For example, suppose you have a repository that contains two software projects, <literal>paint</literal> and <literal>calc</literal>. Each project lives in its own top-level subdirectory, as shown in <xref linkend=\"svn.basic.in-action.wc.dia-1\"/>."
msgstr "たとえば二つのソフトウェアプロジェクト、<literal>paint</literal>と <literal>calc</literal>を含むリポジトリが あるとします。それぞれのプロジェクトはそれぞれの最上位サブディレクトリ にあります。<xref linkend=\"svn.basic.in-action.wc.dia-1\"/>のような状況です。"

#. Tag: title
#: ch01-fundamental-concepts.xml:419
#, no-c-format
msgid "The repository's filesystem"
msgstr "リポジトリのファイルシステム"

#. Tag: para
#: ch01-fundamental-concepts.xml:423
#, no-c-format
msgid "To get a working copy, you must <firstterm>check out</firstterm> some subtree of the repository. (The term <quote>check out</quote> may sound like it has something to do with locking or reserving resources, but it doesn't; it simply creates a private copy of the project for you.) For example, if you check out <filename>/calc</filename>, you will get a working copy like this:"
msgstr "作業コピーを持ってくるため、リポジトリ中のどれかのサブツリーを <firstterm>チェックアウト</firstterm>しなくてはなりません。 (<quote>check out</quote> という言葉は何かをロックしたり保護したり するような響きがありますがそうではありません; それは単に自分のための プロジェクトのコピーを作るだけです。) たとえば<filename>/calc</filename>をチェックアウトするとこんな 感じで作業コピーを手に入れることができます:"

#. Tag: screen
#: ch01-fundamental-concepts.xml:431
#, no-c-format
msgid ""
"$ svn checkout http://svn.example.com/repos/calc\n"
"A    calc/Makefile\n"
"A    calc/integer.c\n"
"A    calc/button.c\n"
"Checked out revision 56.\n"
"\n"
"$ ls -A calc\n"
"Makefile  integer.c  button.c  .svn/"
msgstr ""
"$ svn checkout http://svn.example.com/repos/calc\n"
"A    calc/Makefile\n"
"A    calc/integer.c\n"
"A    calc/button.c\n"
"Checked out revision 56.\n"
"\n"
"$ ls -A calc\n"
"Makefile  integer.c  button.c  .svn/"

#. Tag: para
#: ch01-fundamental-concepts.xml:433
#, fuzzy, no-c-format
msgid "The list of letter A's in the left margin indicates that Subversion is adding a number of items to your working copy. You now have a personal copy of the repository's <filename>/calc</filename> directory, with one additional entry&mdash;<filename>.svn</filename>&mdash;which holds the extra information needed by Subversion, as mentioned earlier."
msgstr "Aの文字で始まる一覧はSubversionがあなたの作業コピーにいくつかの ファイルを追加したことを示しています。これでリポジトリにある <filename>/calc</filename>ディレクトリの作業コピーを 持ってくることができました。最初に言ったように、この取得時に は、もう一つ、<filename>.svn</filename>が 作成されますが、これがSubversionに必要な追加情報を格納する ための場所になります。"

#. Tag: para
#: ch01-fundamental-concepts.xml:441
#, fuzzy, no-c-format
msgid "Suppose you make changes to <filename>button.c</filename>. Since the <filename>.svn</filename> directory remembers the file's original modification date and contents, Subversion can tell that you've changed the file. However, Subversion does not make your changes public until you explicitly tell it to. The act of publishing your changes is more commonly known as <firstterm>committing</firstterm> (or <firstterm>checking in</firstterm>) changes to the repository."
msgstr "<filename>button.c</filename>に変更を加えることを考えてみます。 <filename>.svn</filename>ディレクトリがファイルの修正時刻と もともとの内容を記憶しているので、Subversionはあなたがファイルを 変更したかどうかを見分けることができます。しかしSubversionは明示的に そうしてくれと言われるまでその変更を公にはしません。 自分の変更を公開する操作のことを変更点の<firstterm>コミット</firstterm> (あるいは <firstterm>チェックイン</firstterm>)と言います。"

#. Tag: para
#: ch01-fundamental-concepts.xml:450
#, fuzzy, no-c-format
msgid "To publish your changes to others, you can use Subversion's <command>commit</command> command."
msgstr "変更点を他の人に公開するにはSubversionの<command>commit</command> コマンドを使います:"

#. Tag: screen
#: ch01-fundamental-concepts.xml:453
#, fuzzy, no-c-format
msgid ""
"$ svn commit button.c -m \"Fixed a typo in button.c.\"\n"
"Sending        button.c\n"
"Transmitting file data .\n"
"Committed revision 57."
msgstr ""
"$ svn commit button.c\n"
"Sending        button.c\n"
"Transmitting file data .\n"
"Committed revision 57."

#. Tag: para
#: ch01-fundamental-concepts.xml:455
#, fuzzy, no-c-format
msgid "Now your changes to <filename>button.c</filename> have been committed to the repository, with a note describing your change (namely, that you fixed a typo). If another user checks out a working copy of <filename>/calc</filename>, they will see your changes in the latest version of the file."
msgstr "これで<filename>button.c</filename>への変更はリポジトリに コミットされました。もし別のユーザが<filename>/calc</filename> の作業コピーを作るのにチェックアウトすれば、最新バージョン中に あなたの変更点を見ることになるでしょう。"

#. Tag: para
#: ch01-fundamental-concepts.xml:462
#, no-c-format
msgid "Suppose you have a collaborator, Sally, who checked out a working copy of <filename>/calc</filename> at the same time you did. When you commit your change to <filename>button.c</filename>, Sally's working copy is left unchanged; Subversion only modifies working copies at the user's request."
msgstr "一緒に作業している Sally が、あなたがチェックアウトしたのと同じ時刻に <filename>/calc</filename> の作業コピーを自分用にチェックアウト したとしましょう。あなたが<filename>button.c</filename>への自分の 変更をコミットしても、Sallyの作業コピーは変更されない状態のままです。 Subversionはユーザの要求によって初めて作業コピーの内容を変更します。"

#. Tag: para
#: ch01-fundamental-concepts.xml:469
#, no-c-format
msgid "To bring her project up to date, Sally can ask Subversion to <firstterm>update</firstterm> her working copy, by using the Subversion <command>update</command> command. This will incorporate your changes into her working copy, as well as any others that have been committed since she checked it out."
msgstr "作業内容をプロジェクトの最新の状態にするには、SallyはSubversionに 自分の作業コピーを<firstterm>更新</firstterm> するように依頼しなくては なりません。これには<command>update</command> コマンドを使います。 これはあなたの変更を彼女の作業コピーにマージしますし、彼女がチェック アウトしたあとで他の人がコミットしたすべての部分についてもマージします。"

#. Tag: screen
#: ch01-fundamental-concepts.xml:476
#, no-c-format
msgid ""
"$ pwd\n"
"/home/sally/calc\n"
"\n"
"$ ls -A \n"
".svn/ Makefile integer.c button.c\n"
"\n"
"$ svn update\n"
"U    button.c\n"
"Updated to revision 57."
msgstr ""
"$ pwd\n"
"/home/sally/calc\n"
"\n"
"$ ls -A \n"
".svn/ Makefile integer.c button.c\n"
"\n"
"$ svn update\n"
"U    button.c\n"
"Updated to revision 57."

#. Tag: para
#: ch01-fundamental-concepts.xml:478
#, no-c-format
msgid "The output from the <command>svn update</command> command indicates that Subversion updated the contents of <filename>button.c</filename>. Note that Sally didn't need to specify which files to update; Subversion uses the information in the <filename>.svn</filename> directory, and further information in the repository, to decide which files need to be brought up to date."
msgstr "<command>svn update</command>コマンドからの出力は Subversionが<filename>button.c</filename>の内容を 更新したことを示しています。Sally はどのファイルを更新 するかを指定する必要がないのに注意してください。Subversion は <filename>.svn</filename>ディレクトリの情報と リポジトリの情報を使って、どのファイルを更新しなくてはならないか を決定します。"

#. Tag: title
#: ch01-fundamental-concepts.xml:487
#, no-c-format
msgid "Repository URLs"
msgstr "リポジトリのURL"

#. Tag: para
#: ch01-fundamental-concepts.xml:489
#, fuzzy, no-c-format
msgid "Subversion repositories can be accessed through many different methods&mdash;on local disk, or through various network protocols, depending on how your administrator has set things up for you. A repository location, however, is always a URL. <xref linkend=\"svn.basic.in-action.wc.tbl-1\"/> describes how different URL schemes map to the available access methods."
msgstr "Subversion のリポジトリにはいろいろな方法でアクセスすることができます &mdash;それはローカルディスクにあるかも知れませんし、さまざまなネット ワークプロトコルを通じてかも知れません。しかしどのような場合でも、リポ ジトリの場所は、常にURLによって表現されます。 <xref linkend=\"svn.basic.in-action.wc.tbl-1\"/> はどのようにして異なる URL が適切なアクセ ス方法に結び付けられるかを示しています。"

#. Tag: title
#: ch01-fundamental-concepts.xml:499
#, no-c-format
msgid "Repository Access URLs"
msgstr "リポジトリにアクセスするためのURL"

#. Tag: entry
#: ch01-fundamental-concepts.xml:503
#, no-c-format
msgid "Schema"
msgstr "Schema"

#. Tag: entry
#: ch01-fundamental-concepts.xml:504
#, no-c-format
msgid "Access Method"
msgstr "アクセス方法"

#. Tag: literal
#: ch01-fundamental-concepts.xml:509
#, no-c-format
msgid "file:///"
msgstr "file:///"

#. Tag: entry
#: ch01-fundamental-concepts.xml:510
#, no-c-format
msgid "direct repository access (on local disk)"
msgstr "リポジトリへの直接アクセス (ローカルディスク上)"

#. Tag: literal
#: ch01-fundamental-concepts.xml:513
#, no-c-format
msgid "http://"
msgstr "http://"

#. Tag: entry
#: ch01-fundamental-concepts.xml:514
#, no-c-format
msgid "access via WebDAV protocol to Subversion-aware Apache server"
msgstr "Subversionを考慮したApacheサーバへのWebDAVプロトコル経由でのアクセス"

#. Tag: literal
#: ch01-fundamental-concepts.xml:518
#, no-c-format
msgid "https://"
msgstr "https://"

#. Tag: entry
#: ch01-fundamental-concepts.xml:519
#, no-c-format
msgid "same as <literal>http://</literal>, but with SSL encryption."
msgstr "<literal>http://</literal>と同じだが、SSLによる暗号化"

#. Tag: literal
#: ch01-fundamental-concepts.xml:523
#, no-c-format
msgid "svn://"
msgstr "svn://"

#. Tag: entry
#: ch01-fundamental-concepts.xml:524
#, no-c-format
msgid "access via custom protocol to an <literal>svnserve</literal> server"
msgstr "<literal>svnserve</literal> サーバに対する独自TCP/IPプロトコル経由での アクセス"

#. Tag: literal
#: ch01-fundamental-concepts.xml:528
#, no-c-format
msgid "svn+ssh://"
msgstr "svn+ssh://"

#. Tag: entry
#: ch01-fundamental-concepts.xml:529
#, no-c-format
msgid "same as <literal>svn://</literal>, but through an SSH tunnel."
msgstr "<literal>svn://</literal>と同じですが、SSH トンネルを利用します。"

#. Tag: para
#: ch01-fundamental-concepts.xml:536
#, fuzzy, no-c-format
msgid "For more information on how Subversion parses URLs, see <xref linkend=\"svn.advanced.reposurls\"/>. For more information on the different types of network servers available for Subversion, see <xref linkend=\"svn.serverconfig\"/>."
msgstr "Subversion が URL をどのように構文解析するかについてのより詳しい情報は <xref linkend=\"svn.advanced.reposurls\"/>を見てください。"

#. Tag: title
#: ch01-fundamental-concepts.xml:549
#, no-c-format
msgid "Revisions"
msgstr "リビジョン"

#. Tag: para
#: ch01-fundamental-concepts.xml:551
#, fuzzy, no-c-format
msgid "An <command>svn commit</command> operation publishes changes to any number of files and directories as a single atomic transaction. In your working copy, you can change files' contents; create, delete, rename and copy files and directories; then commit a complete set of changes as an atomic transaction."
msgstr "<command>svn commit</command>操作は一つのトランザクション として任意の数のファイル、ディレクトリに対する変更点を公開する ことができます。作業コピー中で、ファイルの内容を変えたり、新しい ファイルを作ったり、削除したり、名前を変えたり、ファイルや ディレクトリをコピーしたあと、それらの変更点の全体を完全なひと かたまりのものとしてコミットすることができます。"

#. Tag: para
#: ch01-fundamental-concepts.xml:558
#, fuzzy, no-c-format
msgid "By <quote>atomic transaction</quote>, we mean simply this: either all of the changes happen in the repository, or none of them happen. Subversion tries to retain this atomicity in the face of program crashes, system crashes, network problems, and other users' actions."
msgstr "リポジトリでは、それぞれのコミットは、一つの分割できないひと かたまりのトランザクションとして扱います。すべてのコミットに よる変更は、完全に実行されるか、まったく実行されないかの どちらかです。Subversionは、この不分割の性質を、プログラム 障害、システム障害、ネットワーク障害、その他の操作があった 場合でも保とうとします。"

#. Tag: para
#: ch01-fundamental-concepts.xml:564
#, no-c-format
msgid "Each time the repository accepts a commit, this creates a new state of the filesystem tree, called a <firstterm>revision</firstterm>. Each revision is assigned a unique natural number, one greater than the number of the previous revision. The initial revision of a freshly created repository is numbered zero, and consists of nothing but an empty root directory."
msgstr "リポジトリがコミットを受け付けるときは常に <firstterm>リビジョン</firstterm>と呼ばれるファイルシステム ツリーの新しい状態を作ります。それぞれのリビジョンには 一意な自然数が割り当てられます。前のバージョンよりも 後のバージョンのほうが数が大きくなります。 リポジトリ新規作成時の最初のバージョンはゼロで、ルートディレクトリ 以外には何も含まれていません。"

#. Tag: para
#: ch01-fundamental-concepts.xml:572
#, no-c-format
msgid "illustrates a nice way to visualize the repository. Imagine an array of revision numbers, starting at 0, stretching from left to right. Each revision number has a filesystem tree hanging below it, and each tree is a <quote>snapshot</quote> of the way the repository looked after a commit."
msgstr "はリポジトリを視覚化するうまい方法 を示しています。0から始まるリビジョン番号が、左から右に追加されていく 状況を想像してください。それぞれのリビジョン番号には対応した ファイルシステム木があり、それぞれの木はコミット 後のリポジトリの状態を示す<quote>スナップショット</quote> です。"

#. Tag: title
#: ch01-fundamental-concepts.xml:580
#, no-c-format
msgid "The repository"
msgstr "リポジトリ"

#. Tag: title
#: ch01-fundamental-concepts.xml:585
#, no-c-format
msgid "Global Revision Numbers"
msgstr "グローバルリビジョン番号"

#. Tag: para
#: ch01-fundamental-concepts.xml:587
#, fuzzy, no-c-format
msgid "Unlike most version control systems, Subversion's revision numbers apply to <emphasis>entire trees</emphasis>, not individual files. Each revision number selects an entire tree, a particular state of the repository after some committed change. Another way to think about it is that revision N represents the state of the repository filesystem after the Nth commit. When Subversion users talk about <quote>revision 5 of <filename>foo.c</filename></quote>, they really mean <quote><filename>foo.c</filename> as it appears in revision 5.</quote> Notice that in general, revisions N and M of a file do <emphasis>not</emphasis> necessarily differ! Many other version control systems use per-file revision numbers, so this concept may seem unusual at first. (Former CVS users might want to see <xref linkend=\"svn.forcvs\"/> for more details.)"
msgstr "他の多くのバージョン管理システムとは違って、Subversionのリビジョン番号は <emphasis>木全体</emphasis>に対して付けられるもので、 個々のファイルに付けられるものではありません。それぞれのリビジョン番号は 木全体を指定し、あるコミットによる変更後のリポジトリの特定の状態を示す ものです。これを想像するための別の方法はリビジョンNは、N番目のコミット 後のリポジトリファイルシステムの状態をあらわしていると考えることです。 Subversionユーザが、<quote><filename>foo.c</filename>のリビジョン</quote> と言うときそれが実際に意味するものは、<quote>リビジョン5に現れる <filename>foo.c</filename></quote>です。 一般的に、あるファイルのリビジョンNとMは、異なっている必要は <emphasis>ありません</emphasis>! CVSはファイルごとのリビジョン番号を使うので、この違いを詳しく知りたい人は <xref linkend=\"svn.forcvs\"/>を見てください。"

#. Tag: para
#: ch01-fundamental-concepts.xml:605
#, no-c-format
msgid "It's important to note that working copies do not always correspond to any single revision in the repository; they may contain files from several different revisions. For example, suppose you check out a working copy from a repository whose most recent revision is 4:"
msgstr "作業コピーは常にリポジトリのどれか一つのリビジョン対応しているとは 限らないことに注意してください。複数の異なるリビジョンのファイル を含んでいるかも知れません。たとえば、最新リビジョン番号が4である リポジトリから作業コピーをチェックアウトしたとします:"

#. Tag: screen
#: ch01-fundamental-concepts.xml:611
#, no-c-format
msgid ""
"calc/Makefile:4\n"
"     integer.c:4\n"
"     button.c:4"
msgstr ""
"calc/Makefile:4\n"
"     integer.c:4\n"
"     button.c:4"

#. Tag: para
#: ch01-fundamental-concepts.xml:613
#, no-c-format
msgid "At the moment, this working directory corresponds exactly to revision 4 in the repository. However, suppose you make a change to <filename>button.c</filename>, and commit that change. Assuming no other commits have taken place, your commit will create revision 5 of the repository, and your working copy will now look like this:"
msgstr "この時点では、作業コピーはリポジトリのリビジョン4と完全に一致しています。 しかし、ここで <filename>button.c</filename>に変更を加え その変更をコミットしたとします。他にコミットした人がいない場合、 今回のコミットはリポジトリのバージョンを5にあげ、作業コピーの内容は 以下のようになります:"

#. Tag: screen
#: ch01-fundamental-concepts.xml:620
#, no-c-format
msgid ""
"calc/Makefile:4\n"
"     integer.c:4\n"
"     button.c:5"
msgstr ""
"calc/Makefile:4\n"
"     integer.c:4\n"
"     button.c:5"

#. Tag: para
#: ch01-fundamental-concepts.xml:622
#, no-c-format
msgid "Suppose that, at this point, Sally commits a change to <filename>integer.c</filename>, creating revision 6. If you use <command>svn update</command> to bring your working copy up to date, then it will look like this:"
msgstr "この時点でSallyが<filename>integer.c</filename>に対する修正を コミットし、リビジョンを6にあげたとします。ここでもし、<command>svn update</command> コマンドであなたの作業コピーを更新すると、次のようになるでしょう:"

#. Tag: screen
#: ch01-fundamental-concepts.xml:627
#, no-c-format
msgid ""
"calc/Makefile:6\n"
"     integer.c:6\n"
"     button.c:6"
msgstr ""
"calc/Makefile:6\n"
"     integer.c:6\n"
"     button.c:6"

#. Tag: para
#: ch01-fundamental-concepts.xml:629
#, no-c-format
msgid "Sally's change to <filename>integer.c</filename> will appear in your working copy, and your change will still be present in <filename>button.c</filename>. In this example, the text of <filename>Makefile</filename> is identical in revisions 4, 5, and 6, but Subversion will mark your working copy of <filename>Makefile</filename> with revision 6 to indicate that it is still current. So, after you do a clean update at the top of your working copy, it will generally correspond to exactly one revision in the repository."
msgstr "Sallyの<filename>integer.c</filename>への変更は あなたの作業コピーに現れますが、<filename>button.c</filename> に対するあなたの変更はそのままです。この例では、 <filename>Makefile</filename>のテキストは、リビジョン4,5,6で まったく同一のものですが、Subversionはあなたの作業コピー中の <filename>Makefile</filename>のリビジョンを6として、 それが最新であることを表現します。それで自分の作業コピーに きれいなアップデートをかけたときには、一般に作業コピーは リポジトリのある特定のバージョンと完全に一致します。"

#. Tag: title
#: ch01-fundamental-concepts.xml:644
#, no-c-format
msgid "How Working Copies Track the Repository"
msgstr "作業コピーはどのようにリポジトリを追いかけるか"

#. Tag: para
#: ch01-fundamental-concepts.xml:646
#, no-c-format
msgid "For each file in a working directory, Subversion records two essential pieces of information in the <filename>.svn/</filename> administrative area:"
msgstr "作業コピー中のそれぞれのファイルについて、Subversionは 二つの本質的な情報を<filename>.svn/</filename>管理領域に 記録します:"

#. Tag: para
#: ch01-fundamental-concepts.xml:653
#, no-c-format
msgid "what revision your working file is based on (this is called the file's <firstterm>working revision</firstterm>), and"
msgstr "あなたの作業ファイルは、どのリビジョンに基づいているか (これはファイルの<firstterm>作業リビジョン</firstterm>と呼ばれます)、 そして"

#. Tag: para
#: ch01-fundamental-concepts.xml:659
#, no-c-format
msgid "a timestamp recording when the local copy was last updated by the repository."
msgstr "リポジトリとの対話によって作業コピーが最後に更新された時刻"

#. Tag: para
#: ch01-fundamental-concepts.xml:664
#, no-c-format
msgid "Given this information, by talking to the repository, Subversion can tell which of the following four states a working file is in:"
msgstr "これらの情報とリポジトリとの対話によって、Subversionは作業ファイルの それぞれが、以下の四つの状態のどれにあるかを見分けることができます:"

#. Tag: term
#: ch01-fundamental-concepts.xml:670
#, no-c-format
msgid "Unchanged, and current"
msgstr "変更なし、かつ最新"

#. Tag: para
#: ch01-fundamental-concepts.xml:673
#, no-c-format
msgid "The file is unchanged in the working directory, and no changes to that file have been committed to the repository since its working revision. An <command>svn commit</command> of the file will do nothing, and an <command>svn update</command> of the file will do nothing."
msgstr "作業コピーのファイルは変更されていないし、その作業リビジョン 以降に起きたリポジトリに対するコミットでもそのファイルに対する変更が ない状態。 そのファイルに対する<command>svn commit</command>は何も実行しませんし、 <command>svn update</command>も何もしません。"

#. Tag: term
#: ch01-fundamental-concepts.xml:683
#, no-c-format
msgid "Locally changed, and current"
msgstr "ローカルで変更あり、かつ最新"

#. Tag: para
#: ch01-fundamental-concepts.xml:686
#, fuzzy, no-c-format
msgid "The file has been changed in the working directory, and no changes to that file have been committed to the repository since you last updated. There are local changes that have not been committed to the repository, thus an <command>svn commit</command> of the file will succeed in publishing your changes, and an <command>svn update</command> of the file will do nothing."
msgstr "作業コピー中のファイルは変更されましたが、そのベースリビジョン以降の リポジトリへのコミットで、そのファイルに対する変更が何もなかった 場合。作業コピーにはまだリポジトリにコミットしていない変更がある ので、そのファイルに対する<command>svn commit</command>は、 あなたの変更点をそのまま公開することで成醐ｻ駈ｵます。<command>svn update</command> は何も実行しません。"

#. Tag: term
#: ch01-fundamental-concepts.xml:697
#, no-c-format
msgid "Unchanged, and out-of-date"
msgstr "変更なし、かつ、最新ではない"

#. Tag: para
#: ch01-fundamental-concepts.xml:700
#, fuzzy, no-c-format
msgid "The file has not been changed in the working directory, but it has been changed in the repository. The file should eventually be updated, to make it current with the latest public revision. An <command>svn commit</command> of the file will do nothing, and an <command>svn update</command> of the file will fold the latest changes into your working copy."
msgstr "ファイルは作業コピー中では変更されていませんが、リポジトリには 変更がありました。このファイルは、公開リビジョンによって最新とするために どこかで更新する必要があります。そのファイルに対する<command>svn commit</command> コマンドは何もしません。そのファイルに対する<command>svn update</command>は あなたの作業コピーに最新の修正点をマージします。"

#. Tag: term
#: ch01-fundamental-concepts.xml:711
#, no-c-format
msgid "Locally changed, and out-of-date"
msgstr "ローカルで変更あり、かつ最新ではない"

#. Tag: para
#: ch01-fundamental-concepts.xml:714
#, no-c-format
msgid "The file has been changed both in the working directory, and in the repository. An <command>svn commit</command> of the file will fail with an <quote>out-of-date</quote> error. The file should be updated first; an <command>svn update</command> command will attempt to merge the public changes with the local changes. If Subversion can't complete the merge in a plausible way automatically, it leaves it to the user to resolve the conflict."
msgstr "ファイルは作業コピーでも、リポジトリでも変更されています。 ファイルに対する<command>svn commit</command>は<quote>out-of-date</quote> エラーになります。そのファイルはまず更新しなくてはなりません。 ファイルに対する<command>svn update</command>は公開されている変更点 を作業コピーの変更にマージしようとします。これが自動的にできないような 状況の場合、Subversionはユーザに衝突の解消をさせるためそのままにして おきます。"

#. Tag: para
#: ch01-fundamental-concepts.xml:728
#, no-c-format
msgid "This may sound like a lot to keep track of, but the <command>svn status</command> command will show you the state of any item in your working copy. For more information on that command, see <xref linkend=\"svn.tour.cycle.examine.status\"/>."
msgstr "これにはいろいろな情報の変化を追う必要があるように思いますが、 <command>svn status</command> コマンドを使えば、あなたの作業コピーの どのファイルの状態も表示できます。このコマンドについてのより詳しい情報は <xref linkend=\"svn.tour.cycle.examine.status\"/> を見てください。"

#. Tag: title
#: ch01-fundamental-concepts.xml:738
#, no-c-format
msgid "Mixed Revision Working Copies"
msgstr "混合リビジョン状態の作業コピー"

#. Tag: para
#: ch01-fundamental-concepts.xml:740
#, no-c-format
msgid "As a general principle, Subversion tries to be as flexible as possible. One special kind of flexibility is the ability to have a working copy containing files and directories with a mix of different working revision numbers. Unfortunately, this flexibility tends to confuse a number of new users. If the earlier example showing mixed revisions perplexed you, here's a primer on both why the feature exists and how to make use of it."
msgstr "原則として、Subversionはできる限り柔軟であろうとします。 この特別な例として、作業コピーに、いろいろな異なる作業リビジョン番号を もったファイルとディレクトリを共存させることが できます。前の例での混合リビジョンに戸惑っている人のために、 なぜこのような機能が必要で、どのように利用したらよいかを以下に示します。"

#. Tag: title
#: ch01-fundamental-concepts.xml:751
#, no-c-format
msgid "Updates and Commits are Separate"
msgstr "更新とコミットは別の処理です"

#. Tag: para
#: ch01-fundamental-concepts.xml:753
#, no-c-format
msgid "One of the fundamental rules of Subversion is that a <quote>push</quote> action does not cause a <quote>pull</quote>, nor the other way around. Just because you're ready to submit new changes to the repository doesn't mean you're ready to receive changes from other people. And if you have new changes still in progress, then <command>svn update</command> should gracefully merge repository changes into your own, rather than forcing you to publish them."
msgstr "Subversion での基本的な原則の一つは、<quote>作業コピーへの取得(push)</quote>の動作 が<quote>リポジトリへの反映(pull)</quote>動作を自動的に引き起こすことは ないし、逆もないということです。これは、あなたがリポジトリへの新しい変更点を 送信する用意ができているということが、他の人たちの変更点を受け取る用意が できていることを意味していることはないという、当たり前の理由によります。 そして自分がまだ引き続き新しい修正を加えている場合、 <command>svn update</command> は自分自身の作業コピー中にリポジトリの内容をうまく反映してくれるはずで、 このさい、あなたの側の変更点を強制的に他の人々に公開する必要はありません。"

#. Tag: para
#: ch01-fundamental-concepts.xml:763
#, no-c-format
msgid "The main side-effect of this rule is that it means a working copy has to do extra bookkeeping to track mixed revisions, and be tolerant of the mixture as well. It's made more complicated by the fact that directories themselves are versioned."
msgstr "この規則はまた副次的に、作業コピーには混合リビジョンの状態を記録する ための特殊な仕組みが必要になり、またその状態に対して寛容でなければならない ことを意味しています。これはディレクトリ自身もバージョン管理できる ためさらに複雑な話になります。"

#. Tag: para
#: ch01-fundamental-concepts.xml:769
#, no-c-format
msgid "For example, suppose you have a working copy entirely at revision 10. You edit the file <filename>foo.html</filename> and then perform an <command>svn commit</command>, which creates revision 15 in the repository. After the commit succeeds, many new users would expect the working copy to be entirely at revision 15, but that's not the case! Any number of changes might have happened in the repository between revisions 10 and 15. The client knows nothing of those changes in the repository, since you haven't yet run <command>svn update</command>, and <command>svn commit</command> doesn't pull down new changes. If, on the other hand, <command>svn commit</command> <emphasis>were</emphasis> to automatically download the newest changes, then it would be possible to set the entire working copy to revision 15&mdash;but then we'd be breaking the fundamental rule of <quote>push</quote> and <quote>pull</quote> remaining separate actions. Therefore the only safe thing the Subversion client can do is mark the one file&mdash;<filename>foo.html</filename>&mdash;as being at revision 15. The rest of the working copy remains at revision 10. Only by running <command>svn update</command> can the latest changes be downloaded, and the whole working copy be marked as revision 15."
msgstr "たとえば、作業コピーが完全にリビジョン 10 にあるとします。<filename>foo.html</filename> を編集して<command>svn commit</command>を実行した結果、リポジトリにリビジョン 15 ができたとします。このコミットが成醐ｻ駈ｵた直後では、多くの不慣れなユーザは 作業コピーは完全にリビジョン 15 にあるだろうと期待するかも知れませんがそうでは ないのです!。リビジョン10 とりビジョン15 までの間にリポジトリに対していろいろな変更が 起こったかも知れないのです。クライアント側ではリポジトリに起きたこの変更については 何も知りません。まだ <command>svn update</command> を実行していませんし、 <command>svn commit</command> は新しい変更点をリポジトリから取得したりはしないからです。 一方、もしかりに<command>svn commit</command>が自動的に最新の変更点をダウンロード <emphasis>するとすれば</emphasis>、作業コピー全体を完全にリビジョン 15 に設定することも可能 でしょう&mdash;しかしこれでは<quote>push</quote>と<quote>pull</quote> が独立した処理であるという基本的な原則を侵すことになります。 このため Subversion クライアントができる唯一の安全な方法は、ある特定の ファイル&mdash;<filename>foo.html</filename>&mdash;がリビジョン 15 にある という印をつけることだけです。作業コピーの残りのファイルはリビジョン 10 の ままなのです。<command>svn update</command>を実行することだけが、最新の変更点 をダウンロードする方法であり、これで作業コピー全体にリビジョン 15 の印がつきます。"

#. Tag: title
#: ch01-fundamental-concepts.xml:798
#, no-c-format
msgid "Mixed revisions are normal"
msgstr "混合リビジョンは正常な状態です"

#. Tag: para
#: ch01-fundamental-concepts.xml:800
#, no-c-format
msgid "The fact is, <emphasis>every time</emphasis> you run <command>svn commit</command>, your working copy ends up with some mixture of revisions. The things you just committed are marked as having larger working revisions than everything else. After several commits (with no updates in-between) your working copy will contain a whole mixture of revisions. Even if you're the only person using the repository, you will still see this phenomenon. To examine your mixture of working revisions, use the <command>svn status --verbose</command> command (see <xref linkend=\"svn.tour.cycle.examine.status\"/> for more information.)"
msgstr "事実として、<command>svn commit</command>を実行するときは <emphasis>常に</emphasis>、あなたの作業コピーはあるいくつかのリビジョンの 混合状態となります。コミット対象となったファイルだけは、それ以外のファイル よりも新しい作業リビジョンになります。何度かのコミットの後で( その間に update を含めなければ)、作業コピーはいくつかのリビジョンの 混合状態になります。あなたがリポジトリを利用している唯一のユーザであったと してもやはりこの現象に出会うでしょう。作業リビジョンの混合状況を見る には<command>svn status --verbose</command>コマンドを利用して ください(さらに詳しい情報については <xref linkend=\"svn.tour.cycle.examine.status\"/>を見てください)。"

#. Tag: para
#: ch01-fundamental-concepts.xml:813
#, no-c-format
msgid "Often, new users are completely unaware that their working copy contains mixed revisions. This can be confusing, because many client commands are sensitive to the working revision of the item they're examining. For example, the <command>svn log</command> command is used to display the history of changes to a file or directory (see <xref linkend=\"svn.tour.history.log\"/>). When the user invokes this command on a working copy object, they expect to see the entire history of the object. But if the object's working revision is quite old (often because <command>svn update</command> hasn't been run in a long time), then the history of the <emphasis>older</emphasis> version of the object is shown."
msgstr "不慣れなユーザは自分の作業コピーが混合リビジョンになっていることには まったく気づかないことがよくあります。多くのクライアントコマンドは 処理対象となるアイテムの作業コピー上でのリビジョンが問題になるので 混乱することになります。例えば<command>svn log</command>コマンドは ファイルあるいはディレクトリの変更履歴を表示するために利用されます (<xref linkend=\"svn.tour.history.log\"/>参照)。ユーザがこのコマンド を作業コピー上野オブジェクトに対して実行するとき、そのオブジェクト の完全な履歴を見れるものだと考えるでしょう。しかしそのオブジェクトの 作業コピー上のりビジョンが非常に古いものであった場合(これは <command>svn update</command>が長い期間にわたって実行されなかったような 場合におこります)、そのオブジェクトの <emphasis>より古い</emphasis> バージョン履歴が表示されるでしょう。"

#. Tag: title
#: ch01-fundamental-concepts.xml:831
#, no-c-format
msgid "Mixed revisions are useful"
msgstr "混合リビジョンは役にたつものです"

#. Tag: para
#: ch01-fundamental-concepts.xml:833
#, fuzzy, no-c-format
msgid "If your project is sufficiently complex, you'll discover that it's sometimes nice to forcibly <firstterm>backdate</firstterm> (or, update to a revision older than the one you already have) portions of your working copy to an earlier revision; you'll learn how to do that in <xref linkend=\"svn.tour\"/>. Perhaps you'd like to test an earlier version of a sub-module contained in a subdirectory, or perhaps you'd like to figure out when a bug first came into existence in a specific file. This is the <quote>time machine</quote> aspect of a version control system&mdash;the feature which allows you to move any portion of your working copy forward and backward in history."
msgstr "プロジェクトが非常に複雑になった場合、作業コピー中の一部のファイル を強制的に<quote>古い日付</quote>をもった以前のリビジョンに戻すことが 有用であることに気づくでしょう; どうやるかについては 3 章で説明します。 たぶん、あるサブディレクトリにあるサブモジュールの以前のバージョンを テストしたいか、特定のファイルに存在するバグが最初に紛れ込んだ リビジョンを知りたいとかいった場合でしょう。これはバージョン管理 システムの <quote>タイムマシン</quote>としての性質の一つです&mdash; つまり、作業コピーの任意の部分を履歴の中のより新しい状態や古い状態に 移動することができるのです。"

#. Tag: title
#: ch01-fundamental-concepts.xml:850
#, no-c-format
msgid "Mixed revisions have limitations"
msgstr "混合リビジョンには制約があります"

#. Tag: para
#: ch01-fundamental-concepts.xml:852
#, no-c-format
msgid "However you make use of mixed revisions in your working copy, there are limitations to this flexibility."
msgstr "作業コピー中を混合リビジョン状態に置くことはできますが、 この柔軟性には制約があります。"

#. Tag: para
#: ch01-fundamental-concepts.xml:855
#, no-c-format
msgid "First, you cannot commit the deletion of a file or directory which isn't fully up-to-date. If a newer version of the item exists in the repository, your attempt to delete will be rejected, to prevent you from accidentally destroying changes you've not yet seen."
msgstr "まず、完全に最新状態ではないファイルやディレクトリの削除を コミットすることができません。より新しいバージョンのアイテムが リポジトリに存在する場合、この試みは拒否されます。まだあなたが 見ていない変更点を間違って消してしまうことを防ぐためです。"

#. Tag: para
#: ch01-fundamental-concepts.xml:861
#, fuzzy, no-c-format
msgid "Second, you cannot commit a metadata change to a directory unless it's fully up-to-date. You'll learn about attaching <quote>properties</quote> to items in <xref linkend=\"svn.advanced\"/>. A directory's working revision defines a specific set of entries and properties, and thus committing a property change to an out-of-date directory may destroy properties you've not yet seen."
msgstr "次に、完全に最新状態ではないディレクトリに対するメタデータの変更 はコミットできません。アイテムに対する <quote>属性</quote>の 付与は 6 章で扱います。ディレクトリの作業リビジョンは特定の エントリと属性の組を定義し、最新のディレクトリへの属性の 変更点のコミットは、やはりまだ見ていない変更点を間違って消して しまうかも知れないからです。"

#. Tag: para
#: ch01-fundamental-concepts.xml:881
#, no-c-format
msgid "We've covered a number of fundamental Subversion concepts in this chapter:"
msgstr "この章では、さまざまなSubversionの基本的な概念を扱いました:"

#. Tag: para
#: ch01-fundamental-concepts.xml:886
#, no-c-format
msgid "We've introduced the notions of the central repository, the client working copy, and the array of repository revision trees."
msgstr "中心となるリポジトリ、クライアント作業コピー、リポジトリリビジョンツリーの 並び、といった概念を導入しました。"

#. Tag: para
#: ch01-fundamental-concepts.xml:892
#, no-c-format
msgid "We've seen some simple examples of how two collaborators can use Subversion to publish and receive changes from one another, using the <quote>copy-modify-merge</quote> model."
msgstr "どのように二人の共同作業者がSubversionを利用してお互いの修正点を公開したり 受け取ったりするかの簡単な例を見てきました。これには、<quote>コピー・修正・マージ</quote> のモデルを利用するのでした。"

#. Tag: para
#: ch01-fundamental-concepts.xml:899
#, no-c-format
msgid "We've talked a bit about the way Subversion tracks and manages information in a working copy."
msgstr "Subversionが作業コピー内の情報をたどったり管理したりする方法について 少し触れました。"

#. Tag: para
#: ch01-fundamental-concepts.xml:905
#, fuzzy, no-c-format
msgid "At this point, you should have a good idea of how Subversion works in the most general sense. Armed with this knowledge, you should now be ready to move into the next chapter, which is a detailed tour of Subversion's commands and features."
msgstr "ここでは、最も一般的な意味で、Subversionがどのように動作するかについての 良い考え方が身に着いたはずです。この知識をもとに、次の章に進むことが できます。ここは、Subversionのコマンドと機能についての詳しいツアーに なっています。"

#. Tag: title
#: ch02-basic-usage.xml:2
#, no-c-format
msgid "Basic Usage"
msgstr "基本的な使い方"

#. Tag: para
#: ch02-basic-usage.xml:4
#, fuzzy, no-c-format
msgid "Now we will go into the details of using Subversion. By the time you reach the end of this chapter, you will be able to perform all the tasks you need to use Subversion in a normal day's work. You'll start with getting your files into Subversion, followed by an initial checkout of your code. We'll then walk you through making changes and examining those changes. You'll also see how to bring changes made by others into your working copy, examine them, and work through any conflicts that might arise."
msgstr "さて、Subversionを使った詳細を見ていくことにしましょう。この章を 終えるころには、Subversionを使った日常的にしなくてはならない操作のほとんど すべてをやることができるようになっているでしょう。 ソースコードの最初のチェックアウトから始まって、修正し、その修正内容を 調べます。他の人の修正をどうやって自分の作業コピーにマージし、それが どのようなものかを調べ、起きるかも知れない衝突をどのように扱えば 良いかもわかるでしょう。"

#. Tag: para
#: ch02-basic-usage.xml:14
#, no-c-format
msgid "Note that this chapter is not meant to be an exhaustive list of all Subversion's commands&mdash;rather, it's a conversational introduction to the most common Subversion tasks you'll encounter. This chapter assumes that you've read and understood <xref linkend=\"svn.basic\"/> and are familiar with the general model of Subversion. For a complete reference of all commands, see <xref linkend=\"svn.ref\"/>."
msgstr "この章は、Subversionコマンドの全体を列挙するのではないのに注意してください。 &mdash;そうではなく、普段一番よく利用するSubversionの操作についての対話的な手引き にしてあります。この章は、 <xref linkend=\"svn.basic\"/> を読み、理解していることと、Subversionの一般的モデルをよく知っていることを前提 としています。コマンドの完全なリファレンスは、 <xref linkend=\"svn.ref\"/> を見てください。"

#. Tag: para
#: ch02-basic-usage.xml:29
#, fuzzy, no-c-format
msgid "Before reading on, here is the most important command you'll ever need when using Subversion: <command>svn help</command>. The Subversion command-line client is self-documenting&mdash;at any time, a quick <command>svn help <replaceable>SUBCOMMAND</replaceable></command> will describe the syntax, options, and behavior of the subcommand."
msgstr "読み進める前に、Subversionを使うときに必要な一番重要なコマンドを載せて おきます: <command>svn help</command> Subversionコマンドラインクライアントは、自分自身の中にドキュメントを 持っています。&mdash;いつでも <command>svn help &lt;サブコマンド&gt;</command>とやれば 構文、オプションスイッチ、その <command>サブコマンド</command>の振る舞いを見ることができます。"

#. Tag: screen
#: ch02-basic-usage.xml:36
#, no-c-format
msgid ""
"$ svn help import\n"
"import: Commit an unversioned file or tree into the repository.\n"
"usage: import [PATH] URL\n"
"\n"
"  Recursively commit a copy of PATH to URL.\n"
"  If PATH is omitted '.' is assumed.\n"
"  Parent directories are created as necessary in the repository.\n"
"  If PATH is a directory, the contents of the directory are added\n"
"  directly under URL.\n"
"\n"
"Valid options:\n"
"  -q [--quiet]             : print as little as possible\n"
"  -N [--non-recursive]     : operate on single directory only\n"
"&hellip;"
msgstr ""

#. Tag: title
#: ch02-basic-usage.xml:43
#, fuzzy, no-c-format
msgid "Getting Data into your Repository"
msgstr "リポジトリの移行"

#. Tag: para
#: ch02-basic-usage.xml:45
#, no-c-format
msgid "There are two ways to get new files into your Subversion repository: <command>svn import</command> and <command>svn add</command>. We'll discuss <command>svn import</command> here and <command>svn add</command> later in this chapter when we review a typical day with Subversion."
msgstr ""

#. Tag: para
#: ch02-basic-usage.xml:55
#, no-c-format
msgid "The <command>svn import</command> command is a quick way to copy an unversioned tree of files into a repository, creating intermediate directories as necessary. <command>svn import</command> doesn't require a working copy, and your files are immediately committed to the repository. This is typically used when you have an existing tree of files that you want to begin tracking in your Subversion repository. For example:"
msgstr ""

#. Tag: screen
#: ch02-basic-usage.xml:63
#, no-c-format
msgid ""
"$ svnadmin create /usr/local/svn/newrepos\n"
"$ svn import mytree file:///usr/local/svn/newrepos/some/project \\\n"
"             -m \"Initial import\"\n"
"Adding         mytree/foo.c\n"
"Adding         mytree/bar.c\n"
"Adding         mytree/subdir\n"
"Adding         mytree/subdir/quux.h\n"
"\n"
"Committed revision 1."
msgstr ""
"$ svnadmin create /usr/local/svn/newrepos\n"
"$ svn import mytree file:///usr/local/svn/newrepos/some/project ¥\n"
"             -m \"Initial import\"\n"
"Adding         mytree/foo.c\n"
"Adding         mytree/bar.c\n"
"Adding         mytree/subdir\n"
"Adding         mytree/subdir/quux.h\n"
"\n"
"Committed revision 1."

#. Tag: para
#: ch02-basic-usage.xml:65
#, no-c-format
msgid "The previous example copied the contents of directory <filename>mytree</filename> under the directory <filename>some/project</filename> in the repository:"
msgstr "上の例はディレクトリ<filename>mytree</filename> の内容を リポジトリ中の<filename>some/project</filename> ディレクトリの下に コピーしています:"

#. Tag: screen
#: ch02-basic-usage.xml:69
#, no-c-format
msgid ""
"$ svn list file:///usr/local/svn/newrepos/some/project\n"
"bar.c\n"
"foo.c\n"
"subdir/"
msgstr ""
"$ svn list file:///usr/local/svn/newrepos/some/project\n"
"bar.c\n"
"foo.c\n"
"subdir/"

#. Tag: para
#: ch02-basic-usage.xml:71
#, no-c-format
msgid "Note that after the import is finished, the original tree is <emphasis>not</emphasis> converted into a working copy. To start working, you still need to <command>svn checkout</command> a fresh working copy of the tree."
msgstr "インポートが終わった後で、もとのツリーが作業コピーに変換さ れたわけではないのに注意してください。作業を始めるには、さらにこのツリー のための最初の作業コピーを<command>svn checkout</command>する 必要があります。"

#. Tag: title
#: ch02-basic-usage.xml:80
#, fuzzy, no-c-format
msgid "Recommended repository layout"
msgstr "リポジトリのレイアウト"

#. Tag: para
#: ch02-basic-usage.xml:82
#, fuzzy, no-c-format
msgid "While Subversion's flexibility allows you to layout your repository in any way that you choose, we recommend that you create a <filename>trunk</filename> directory to hold the <quote>main line</quote> of development, a <filename>branches</filename> directory to contain branch copies, and a <filename>tags</filename> directory to contain tag copies, for example:"
msgstr "リポジトリの編成にはある程度、標準化された、おすすめの方法が あります。ほとんどの人々は<filename>trunk</filename>ディレクトリ に開発の<quote>主系</quote>、ブランチのコピーがある<filename>branches</filename> ディレクトリ、そしてタグのコピーがある<filename>tags</filename>ディレクトリ を入れます。リポジトリがただ一つのプロジェクトを含む場合には しばしば、この三つのディレクトリをリポジトリ最上位に作ります:"

#. Tag: screen
#: ch02-basic-usage.xml:90
#, fuzzy, no-c-format
msgid ""
"$ svn list file:///usr/local/svn/repos\n"
"/trunk\n"
"/branches\n"
"/tags"
msgstr ""
"$ svn list file:///usr/local/svn/newrepos/some/project\n"
"bar.c\n"
"foo.c\n"
"subdir/"

#. Tag: para
#: ch02-basic-usage.xml:92
#, fuzzy, no-c-format
msgid "You'll learn more about tags and branches in <xref linkend=\"svn.branchmerge\"/>. For details and how to set up multiple projects, see <xref linkend=\"svn.branchmerge.maint.layout\"/> and <xref linkend=\"svn.reposadmin.projects.chooselayout\"/> to read more about <quote>project roots</quote>."
msgstr "リポジトリが複数プロジェクトを含む場合は、プロジェクトごとに レイアウトをインデックス化します (<quote>プロジェクトルート</quote>についての詳細は <xref linkend=\"svn.reposadmin.projects.chooselayout\"/> を読んでください):"

#. Tag: title
#: ch02-basic-usage.xml:107
#, no-c-format
msgid "Initial Checkout"
msgstr "最初のチェックアウト"

#. Tag: para
#: ch02-basic-usage.xml:109
#, fuzzy, no-c-format
msgid "Most of the time, you will start using a Subversion repository by doing a <firstterm>checkout</firstterm> of your project. Checking out a repository creates a <quote>working copy</quote> of it on your local machine. This copy contains the <literal>HEAD</literal> (latest revision) of the Subversion repository that you specify on the command line:"
msgstr "たいていの場合、Subversionはリポジトリからプロジェクトを <firstterm>チェックアウト</firstterm> することで始まります。 リポジトリをチェックアウトすると あなたのマシンにはリポジトリの作業コピーができます。 このコピーはコマンドラインで指定したSubversionリポジトリの <literal>HEAD</literal> (最新のリビジョン) になります:"

#. Tag: screen
#: ch02-basic-usage.xml:117
#, fuzzy, no-c-format
msgid ""
"$ svn checkout http://svn.collab.net/repos/svn/trunk\n"
"A    trunk/Makefile.in\n"
"A    trunk/ac-helpers\n"
"A    trunk/ac-helpers/install.sh\n"
"A    trunk/ac-helpers/install-sh\n"
"A    trunk/build.conf\n"
"&hellip;\n"
"Checked out revision 8810."
msgstr ""
"$ svn checkout http://svn.collab.net/repos/svn/trunk\n"
"A  trunk/subversion.dsw\n"
"A  trunk/svn_check.dsp\n"
"A  trunk/COMITTERS\n"
"A  trunk/configure.in\n"
"A  trunk/IDEAS\n"
"&hellip;\n"
"Checked out revision 2499."

#. Tag: sect1
#: ch02-basic-usage.xml:117
#, fuzzy, no-c-format
msgid ""
"<sidebar> <title>What's in a Name?</title> <para>Subversion tries hard not to limit the type of data you can place under version control. The contents of files and property values are stored and transmitted as binary data, and <xref linkend=\"svn.advanced.props.special.mime-type\"/> tells you how to give Subversion a hint that <quote>textual</quote> operations don't make sense for a particular file. There are a few places, however, where Subversion places restrictions on information it stores.</para> <para>Subversion internally handles certain bits of data&mdash;for example, property names, path names, and log messages&mdash;as UTF-8 encoded Unicode. This is not to say that all your interactions with Subversion must involve UTF-8, though. As a general rule, Subversion clients will gracefully and transparently handle conversions between UTF-8 and the encoding system in use on your computer, if such a conversion can meaningfully be done (which is the case for most common encodings in use today).</para> <para>In addition, path names are used as XML attribute values in WebDAV exchanges, as well in as some of Subversion's housekeeping files. This means that path names can only contain legal XML (1.0) characters. Subversion also prohibits TAB, CR, and LF characters in path names to prevent paths from being broken up in diffs, or in the output of commands like <xref linkend=\"svn.ref.svn.c.log\"/> or <xref linkend=\"svn.ref.svn.c.status\"/>.</para> <para>While it may seem like a lot to remember, in practice these limitations are rarely a problem. As long as your locale settings are compatible with UTF-8, and you don't use control characters in path names, you should have no trouble communicating with Subversion. The command-line client adds an extra bit of help&mdash;it will automatically escape illegal path characters as needed in URLs you type to create <quote>legally correct</quote> versions for internal use.</para> </sidebar> <para>Although the above example checks out the trunk directory, you can just as easily check out any deep subdirectory of a repository by specifying the subdirectory in the checkout URL:</para> <screen>\n"
"$ svn checkout \\\n"
"      http://svn.collab.net/repos/svn/trunk/subversion/tests/cmdline/\n"
"A    cmdline/revert_tests.py\n"
"A    cmdline/diff_tests.py\n"
"A    cmdline/autoprop_tests.py\n"
"A    cmdline/xmltests\n"
"A    cmdline/xmltests/svn-test.sh\n"
"&hellip;\n"
"Checked out revision 8810.\n"
"</screen> <para>Since Subversion uses a <quote>copy-modify-merge</quote> model instead of <quote>lock-modify-unlock</quote> (see <xref linkend=\"svn.basic.vsn-models\"/>), you can start right in making changes to the files and directories in your working copy. Your working copy is just like any other collection of files and directories on your system. You can edit and change them, move them around, you can even delete the entire working copy and forget about it.</para> <warning> <para>While your working copy is <quote>just like any other collection of files and directories on your system</quote>, you can edit files at will, but you must tell Subversion about <emphasis>everything else</emphasis> that you do. For example, if you want to copy or move an item in a working copy, you should use <command>svn copy</command> or <command>svn move</command> instead of the copy and move commands provided by your operating system. We'll talk more about them later in this chapter.</para> </warning> <para>Unless you're ready to commit the addition of a new file or directory, or changes to existing ones, there's no need to further notify the Subversion server that you've done anything.</para> <sidebar> <title>What's with the <filename>.svn</filename> directory?</title> <para>Every directory in a working copy contains an administrative area, a subdirectory named <filename>.svn</filename>. Usually, directory listing commands won't show this subdirectory, but it is nevertheless an important directory. Whatever you do, don't delete or change anything in the administrative area! Subversion depends on it to manage your working copy.</para> <para>If you accidentally remove the <filename>.svn</filename> subdirectory, the easiest way to fix the problem is to remove the entire containing directory (a normal system deletion, not <command>svn delete</command>), then run <command>svn update</command> from a parent directory. The Subversion client will re-download the directory you've deleted, with a new <filename>.svn</filename> area as well.</para> </sidebar>"
msgstr ""
"<sidebar> <title>利用可能な名前は?</title> <para>Subversion はバージョン管理するデータ型に できる限り制約を置かないように動作します。ファイルの内容と 属性値はバイナリデータとして保存されたり転送され、 <xref linkend=\"svn.advanced.props.special.mime-type\"/> は どのファイルが <quote>テキスト的な</quote> 処理を受け付けないかについての情報を Subversion に与えます。 しかし Subversion が保存情報に対して制約を置かなくてはならない 場合もいくつかあります。 </para> <para>Subversion は内部的には UTF-8 エンコードされた Unicode としてテキストを処理するので、属性値、パス名、ログメッセージ、などの ような本来<quote>テキスト的な</quote> 性質を持ったアイテムは、 正しい UTF-8 文字だけを含むことができます。また <literal>svn:mime-type</literal> 属性の利用についても最低限度の決まりがあります &mdash; ファイルの内容が UTF-8 互換でなければ、バイナリファイルの設定をすべきです。そうしないと Subversion は UTF-8 を使った差分のマージを実行しようとするので、おそらく ファイルにはゴミが残ってしまうでしょう。 </para> <para>さらにパス名は Subversion のいくつかの管理ファイル中だけではなく WebDAV データ交換での XML 属性値としても使われます。これはパス名は 正しい XML (1.0) 文字だけを含まなければならないことを意味します。 Subversion はまた、ファイル名に TAB, CR, LF 文字を使うことも禁止していますが、 これによって diff コマンドや、<xref linkend=\"svn.ref.svn.c.log\"/> や <xref linkend=\"svn.ref.svn.c.status\"/> などのコマンド出力中で問題が起こらなく なります。 </para> <para>こう聞くと何かたくさんのことを覚えておく必要があるかの ようですが、実際にはこのような制約が問題となることはほとんどありません。 ロケールの設定が UTF-8 と互換になっていて、パス名で制御文字を使わなければ Subversion を利用する上で何の問題も起こらないはずです。 コマンドライン・クライアントの場合にはもう少し便利です&mdash;内部的な 利用での<quote>構文的に正しい</quote>バージョンを作るために入力した パス名を、URL 中で必要となる形式に自動的にエスケープしてくれます。 </para> <para>Subversion の利用に経験を積んだユーザは リポジトリ中のディレクトリ配置について、もっとも便利な決まりを見つけて います。そのような規約は、上で説明したような構文的に厳密な要求ではありませんが 通常のよくおこなう処理を楽にしてくれるものです。 この本全体を通じてあらわれる URL の<literal>/trunk</literal> の部分は そのような規約のひとつです: これについては関連情報とともに <xref linkend=\"svn.branchmerge\"/>でより詳しく説明します。</para> </sidebar> <para> 上の例はtrunkディレクトリのチェックアウトでしたが、チェックアウトの URL中にサブディレクトリを指定することでどのような深い階層にある サブディレクトリも簡単にチェックアウトできます: </para> <screen>\n"
"$ svn checkout http://svn.collab.net/repos/svn/trunk/doc/book/tools\n"
"A  tools/readme-dblite.html\n"
"A  tools/fo-stylesheet.xsl\n"
"A  tools/svnbook.el\n"
"A  tools/dtd\n"
"A  tools/dtd/dblite.dtd\n"
"&hellip;\n"
"Checked out revision 2499.\n"
"</screen> <para> Subversionは <quote>ロック・修正・ロック解除</quote> のかわりに <quote>コピー・修正・マージ</quote> モデルを使うので (<xref linkend=\"svn.basic\"/>)、すでに作業コピーのファイルやディレクトリ に対して変更する準被ｳ器ｺできています。作業コピーはあなたのシステムに ある他のファイルやディレクトリのようなものです。編集したり変更を 加えたり移動することもできますし、作業コピー全体を削除してから、その ことを忘れてしまうこともできます。 </para> <note> <para>作業コピーは<quote>システム中のほかのファイルやディレクトリ の集まり</quote>となんら変わることはありませんが、作業コピー中のファイル やディレクトリを編成しなおした場合には常にSubversionにそのことを知らせ なくてはなりません。もし作業コピー中のファイル、ディレクトリをコピーまたは 移動したい場合には、オペレーティングシステムで用意されているコピーや 移動コマンドを使うかわりに<command>svn copy</command>や<command>svn move </command>を使ってください。この章の後のほうでこれについてもっと詳しく 説明します。</para> </note> <para> 新しいファイルやディレクトリを作ったり、既に存在するものを 変更したりした結果をコミットする用意が できるまで、何をやろうと Subversionサーバに追加報告する必要はまったく ありません。 </para> <sidebar> <title><filename>.svn</filename> ディレクトリって何?</title> <para> 作業コピー中のどのディレクトリにも <filename>.svn</filename>という名前の管理領域があります。 普通のディレクトリ一覧表示コマンドはこのディレクトリを表示しませんが、 にもかかわらずこれは非常に重要なディレクトリです。 どんなことをするときでも、管理領域を消したり変更したりしないでください! Subversionは作業コピーを管理するのにこのディレクトリを使います。 </para> </sidebar>"

#. Tag: para
#: ch02-basic-usage.xml:216
#, no-c-format
msgid "While you can certainly check out a working copy with the URL of the repository as the only argument, you can also specify a directory after your repository URL. This places your working copy in the new directory that you name. For example:"
msgstr "リポジトリのURLを唯一の引数として作業コピーをチェックアウトする こともできますが、リポジトリURLの後に、ディレクトリを指定することも できます。この場合、指定した新規のディレクトリ中に作業コピーを作ろうとします。 たとえば:"

#. Tag: screen
#: ch02-basic-usage.xml:221
#, fuzzy, no-c-format
msgid ""
"$  svn checkout http://svn.collab.net/repos/svn/trunk subv\n"
"A    subv/Makefile.in\n"
"A    subv/ac-helpers\n"
"A    subv/ac-helpers/install.sh\n"
"A    subv/ac-helpers/install-sh\n"
"A    subv/build.conf\n"
"&hellip;\n"
"Checked out revision 8810."
msgstr ""
"$ svn checkout http://svn.collab.net/repos/svn/trunk subv\n"
"A  subv/subversion.dsw\n"
"A  subv/svn_check.dsp\n"
"A  subv/COMITTERS\n"
"A  subv/configure.in\n"
"A  subv/IDEAS\n"
"&hellip;\n"
"Checked out revision 2499."

#. Tag: para
#: ch02-basic-usage.xml:223
#, fuzzy, no-c-format
msgid "That will place your working copy in a directory named <literal>subv</literal> instead of a directory named <literal>trunk</literal> as we did previously. The directory <literal>subv</literal> will be created if it doesn't already exist."
msgstr "これは、既にやったような <literal>trunk</literal> という名前のディレクトリのかわりに <literal>subv</literal> という名前のディレクトリに、作業コピーを作ります。"

#. Tag: title
#: ch02-basic-usage.xml:231
#, fuzzy, no-c-format
msgid "Disabling Password Caching"
msgstr "パス名にもとづいたチェックの禁止"

#. Tag: para
#: ch02-basic-usage.xml:233
#, no-c-format
msgid "When you perform a Subversion operation that requires you to authenticate, by default Subversion caches your authentication credentials on disk. This is done for convenience, so that you don't have to continually re-enter your password for future operations. If you're concerned about caching your Subversion passwords,<footnote><para>Of course, you're not terribly worried&mdash;first because you know that you can't <emphasis>really</emphasis> delete anything from Subversion and, secondly, because your Subversion password isn't the same as any of the other three million passwords you have, right? Right?</para></footnote> you can disable caching either permanently or on a case-by-case basis."
msgstr ""

#. Tag: para
#: ch02-basic-usage.xml:247
#, no-c-format
msgid "To disable password caching for a particular one-time command, pass the <option>--no-auth-cache</option> option on the commandline. To permanently disable caching, you can add the line <literal>store-passwords = no</literal> to your local machine's Subversion configuration file. See <xref linkend=\"svn.serverconfig.netmodel.credcache\"/> for details."
msgstr ""

#. Tag: title
#: ch02-basic-usage.xml:258
#, fuzzy, no-c-format
msgid "Authenticating as a Different User"
msgstr "<entry>認証オプション</entry>"

#. Tag: para
#: ch02-basic-usage.xml:260
#, no-c-format
msgid "Since Subversion caches auth credentials by default (both username and password), it conveniently remembers who you were acting as the last time you modified you working copy. But sometimes that's not helpful&mdash;particularly if you're working in a shared working copy, like a system configuration directory or a webserver document root. In this case, just pass the <option>--username</option> option on the commandline and Subversion will attempt to authenticate as that user, prompting you for a password if necessary."
msgstr ""

#. Tag: title
#: ch02-basic-usage.xml:278
#, no-c-format
msgid "Basic Work Cycle"
msgstr "基本的な作業サイクル"

#. Tag: para
#: ch02-basic-usage.xml:280
#, no-c-format
msgid "Subversion has numerous features, options, bells and whistles, but on a day-to-day basis, odds are that you will only use a few of them. In this section we'll run through the most common things that you might find yourself doing with Subversion in the course of a day's work."
msgstr "Subversionはたくさんの機能、オプション、おまけが付いていますが、 日々の作業では、おそらくその中のいくつかを使うだけでしょう。 この章では一番よく起こることを説明します。"

#. Tag: para
#: ch02-basic-usage.xml:286
#, no-c-format
msgid "The typical work cycle looks like this:"
msgstr "典型的な作業サイクルは次のようなものです:"

#. Tag: para
#: ch02-basic-usage.xml:290
#, no-c-format
msgid "Update your working copy"
msgstr "作業コピーの更新"

#. Tag: para
#: ch02-basic-usage.xml:300
#, no-c-format
msgid "Make changes"
msgstr "変更"

#. Tag: para
#: ch02-basic-usage.xml:318
#, no-c-format
msgid "Examine your changes"
msgstr "自分の変更点の確認"

#. Tag: para
#: ch02-basic-usage.xml:330
#, no-c-format
msgid "Possibly undo some changes"
msgstr ""

#. Tag: para
#: ch02-basic-usage.xml:340
#, fuzzy, no-c-format
msgid "Resolve Conflicts (Merge Others' Changes)"
msgstr "衝突の解消(他の人の変更点のマージ)"

#. Tag: para
#: ch02-basic-usage.xml:352
#, no-c-format
msgid "Commit your changes"
msgstr "自分の変更のコミット"

#. Tag: title
#: ch02-basic-usage.xml:363
#, no-c-format
msgid "Update Your Working Copy"
msgstr "作業コピーの更新"

#. Tag: para
#: ch02-basic-usage.xml:365
#, no-c-format
msgid "When working on a project with a team, you'll want to update your working copy to receive any changes made since your last update by other developers on the project. Use <command>svn update</command> to bring your working copy into sync with the latest revision in the repository."
msgstr "チームを作って作業してるプロジェクトでは、自分の作業コピーを <firstterm>更新</firstterm>してプロジェクトの他のメンバーが自分の 更新処理後に加えた変更点をすべて受け取りたくなるでしょう。 <command>svn update</command>を使って自分の作業コピーを リポジトリの最新バージョンにあわせてください。"

#. Tag: screen
#: ch02-basic-usage.xml:371
#, no-c-format
msgid ""
"$ svn update\n"
"U  foo.c\n"
"U  bar.c\n"
"Updated to revision 2."
msgstr ""
"$ svn update\n"
"U  foo.c\n"
"U  bar.c\n"
"Updated to revision 2."

#. Tag: para
#: ch02-basic-usage.xml:373
#, no-c-format
msgid "In this case, someone else checked in modifications to both <filename>foo.c</filename> and <filename>bar.c</filename> since the last time you updated, and Subversion has updated your working copy to include those changes."
msgstr "この場合、あなたが最後に更新してから、誰か別の人が <filename>foo.c</filename> と <filename>bar.c</filename> の両方に加えた変更をコミットし、Subversionはこの変更をあなたの 作業コピーに加えるために更新しました。"

#. Tag: para
#: ch02-basic-usage.xml:378
#, fuzzy, no-c-format
msgid "When the server sends changes to your working copy via <command>svn update</command>, a letter code is displayed next to each item to let you know what actions Subversion performed to bring your working copy up-to-date. To find out what these letters mean, see <xref linkend=\"svn.ref.svn.c.update\"/>."
msgstr "<command>svn update</command> の出力をもう少し詳しく見てみましょう。 サーバが変更点を作業コピーに送るとき、文字コードがそれぞれのファイル の横に表示されて、あなたの作業コピーを最新にするために、どのような 動作を起こしたかを知らせます:"

#. Tag: title
#: ch02-basic-usage.xml:389
#, no-c-format
msgid "Make Changes to Your Working Copy"
msgstr "作業コピーに変更を加えること"

#. Tag: para
#: ch02-basic-usage.xml:391
#, fuzzy, no-c-format
msgid "Now you can get to work and make changes in your working copy. It's usually most convenient to decide on a discrete change (or set of changes) to make, such as writing a new feature, fixing a bug, etc. The Subversion commands that you will use here are <command>svn add</command>, <command>svn delete</command>, <command>svn copy</command>, <command>svn move</command>, and <command>svn mkdir</command>. However, if you are merely editing files that are already in Subversion, you may not need to use any of these commands until you commit."
msgstr "さて、これで自分の作業コピーに変更を加えることができます。 以下のような、比較的特殊な変更をすることもできます。新しい機能 を書いたり、バグをフィックスしたり、などです。このような場合に 使うSubversionコマンドは、 <command>svn add</command>, <command>svn delete</command>, <command>svn copy</command>, <command>svn move</command>などです。しかし、既にSubversion 管理下にあるファイルを単に編集するだけなら、コミットするまでに そのようなコマンドを使う必要はありません:"

#. Tag: para
#: ch02-basic-usage.xml:402
#, no-c-format
msgid "There are two kinds of changes you can make to your working copy: file changes and tree changes. You don't need to tell Subversion that you intend to change a file; just make your changes using your text editor, word processor, graphics program, or whatever tool you would normally use. Subversion automatically detects which files have been changed, and in addition handles binary files just as easily as it handles text files&mdash;and just as efficiently too. For tree changes, you can ask Subversion to <quote>mark</quote> files and directories for scheduled removal, addition, copying, or moving. These changes may take place immediately in your working copy, but no additions or removals will happen in the repository until you commit them."
msgstr ""

#. Tag: para
#: ch02-basic-usage.xml:416
#, fuzzy, no-c-format
msgid "Here is an overview of the five Subversion subcommands that you'll use most often to make tree changes."
msgstr "ここでは、Subversionでツリーの変更として一番よく利用される 四つのサブコマンドを概観しておきます (あとで、<command>svn import</command> と <command>svn mkdir</command> も見ていきます)。"

#. Tag: sect2
#: ch02-basic-usage.xml:417
#, no-c-format
msgid "<sidebar> <title>Versioning symbolic links</title> <para>On non-Windows platforms, Subversion is able to version files of the special type <firstterm>symbolic link</firstterm> (or, <quote>symlink</quote>). A symlink is a file which acts as a sort of transparent reference to some other object in the filesystem, allowing programs to read and write to those objects indirectly by way of performing operations on the symlink itself.</para> <para>When a symlink is committed into a Subversion repository, Subversion remembers that the file was in fact a symlink, as well as the object to which the symlink <quote>points</quote>. When that symlink is checked out to another working copy on a non-Windows system, Subversion reconstructs a real filesystem-level symbolic link from the versioned symlink. But that doesn't in any way limit the usability of working copies on systems such as Windows which do not support symlinks. On such systems, Subversion simply creates a regular text file whose contents are the path to which to the original symlink pointed. While that file can't be used as a symlink on a Windows system, it also won't prevent Windows users from performing their other Subversion-related activities.</para> </sidebar> <variablelist> <varlistentry> <term><command>svn add foo</command></term> <listitem> <para>Schedule file, directory, or symbolic link <filename>foo</filename> to be added to the repository. When you next commit, <filename>foo</filename> will become a child of its parent directory. Note that if <filename>foo</filename> is a directory, everything underneath <filename>foo</filename> will be scheduled for addition. If you only want to add <filename>foo</filename> itself, pass the <option>--non-recursive (-N)</option> option.</para> </listitem> </varlistentry> <varlistentry> <term><command>svn delete foo</command></term> <listitem> <para>Schedule file, directory, or symbolic link <filename>foo</filename> to be deleted from the repository. If <filename>foo</filename> is a file or link, it is immediately deleted from your working copy. If <filename>foo</filename> is a directory, it is not deleted, but Subversion schedules it for deletion. When you commit your changes, <filename>foo</filename> will be entirely removed from your working copy and the repository. <footnote><para>Of course, nothing is ever totally deleted from the repository&mdash;just from the <literal>HEAD</literal> of the repository. You can get back anything you delete by checking out (or updating your working copy to) a revision earlier than the one in which you deleted it. Also see <xref linkend=\"svn.branchmerge.commonuses.resurrect\"/>. </para></footnote></para> </listitem> </varlistentry> <varlistentry> <term><command>svn copy foo bar</command></term> <listitem> <para>Create a new item <filename>bar</filename> as a duplicate of <filename>foo</filename> and automatically schedule <filename>bar</filename> for addition. When <filename>bar</filename> is added to the repository on the next commit, its copy history is recorded (as having originally come from <filename>foo</filename>). <command>svn copy</command> does not create intermediate directories.</para> </listitem> </varlistentry> <varlistentry> <term><command>svn move foo bar</command></term> <listitem> <para>This command is exactly the same as running <command>svn copy foo bar; svn delete foo</command>. That is, <filename>bar</filename> is scheduled for addition as a copy of <filename>foo</filename>, and <filename>foo</filename> is scheduled for removal. <command>svn move</command> does not create intermediate directories.</para> </listitem> </varlistentry> <varlistentry> <term><command>svn mkdir blort</command></term> <listitem> <para>This command is exactly the same as running <command>mkdir blort; svn add blort</command>. That is, a new directory named <filename>blort</filename> is created and scheduled for addition.</para> </listitem> </varlistentry> </variablelist> <sidebar> <title>Changing the Repository Without a Working Copy</title> <para>There <emphasis>are</emphasis> some use cases that immediately commit tree changes to the repository. This only happens when a subcommand is operating directly on a URL, rather than on a working-copy path. In particular, specific uses of <command>svn mkdir</command>, <command>svn copy</command>, <command>svn move</command>, and <command>svn delete</command> can work with URLs (And don't forget that <command>svn import</command> always makes changes to a URL).</para> <para>URL operations behave in this manner because commands that operate on a working copy can use the working copy as a sort of <quote>staging area</quote> to set up your changes before committing them to the repository. Commands that operate on URLs don't have this luxury, so when you operate directly on a URL, any of the above actions represent an immediate commit.</para> </sidebar>"
msgstr ""

#. Tag: title
#: ch02-basic-usage.xml:552
#, no-c-format
msgid "Examine Your Changes"
msgstr "自分の変更点の調査"

#. Tag: para
#: ch02-basic-usage.xml:554
#, fuzzy, no-c-format
msgid "Once you've finished making changes, you need to commit them to the repository, but before you do so, it's usually a good idea to take a look at exactly what you've changed. By examining your changes before you commit, you can make a more accurate log message. You may also discover that you've inadvertently changed a file, and this gives you a chance to revert those changes before committing. Additionally, this is a good opportunity to review and scrutinize changes before publishing them. You can see an overview of the changes you've made by using <command>svn status</command>, and dig into the details of those changes by using <command>svn diff</command>."
msgstr "変更が完了したら、リポジトリにコミットする必要がありますが、普通 そうする前に、正確には自分が何を変更したのかを見ておくのは良い考え です。コミットの前に変更点を確認することで、より正確なログメッセージ を付けることができます。また、不十分な修正をしただけであることを 発見するかも知れませんし、コミットする前にその変更を破棄したりする 機会にもなります。さらに、公開する前に変更点を再検討したり詳しく調査 する機会にもなります。 <command>svn status</command>, <command>svn diff</command>, <command>svn revert</command> を使って正確にはどんな変更をしたかを 見ることができます。最初の二つのコマンドで、作業コピー中のどのファイル を変更したかを調べ、三番目のコマンドでそのうちのいくつか(あるいは全部) の変更を取り消すかも知れません。"

#. Tag: title
#: ch02-basic-usage.xml:568
#, no-c-format
msgid "Look Ma! No Network!"
msgstr "ママ見て、ネットワークが使えないの!"

#. Tag: para
#: ch02-basic-usage.xml:570
#, fuzzy, no-c-format
msgid "The commands <command>svn status</command>, <command>svn diff</command>, and <command>svn revert</command> can be used without any network access even if your repository <emphasis>is</emphasis> across the network. This makes it easy to manage your changes-in-progress when you are somewhere without a network connection, such as travelling on an airplane, riding a commuter train or hacking on the beach."
msgstr "いままで見てきた三つのコマンド(<command>svn status</command>, <command>svn diff</command>, <command>svn revert</command>) は、ネットワークに対するアクセスなしに実行できます。これで 飛行機旅行中であるとか、通勤電車に乗っているときとか、 ビーチでハックするときのようにネットワークに接続されていない場所 でも修正作業を簡単に続けることができます。"

#. Tag: para
#: ch02-basic-usage.xml:577
#, no-c-format
msgid "And also that you don't have a WAN card. Thought you got us, huh?"
msgstr ""

#. Tag: para
#: ch02-basic-usage.xml:581
#, fuzzy, no-c-format
msgid "Subversion does this by keeping private caches of pristine versions of each versioned file inside of the <filename>.svn</filename> administrative areas. This allows Subversion to report&mdash;and revert&mdash;local modifications to those files <emphasis>without network access</emphasis>. This cache (called the <quote>text-base</quote>) also allows Subversion to send the user's local modifications during a commit to the server as a compressed <firstterm>delta</firstterm> (or <quote>difference</quote>) against the pristine version. Having this cache is a tremendous benefit&mdash;even if you have a fast net connection, it's much faster to send only a file's changes rather than the whole file to the server."
msgstr "Subversion はこれをやるのに、<filename>.svn</filename> 管理 領域に修正元のリビジョンファイルのプライベートキャッシュを 保存します。これで Subversion は<emphasis>ネットワークにアクセス せずに</emphasis>ファイルに関する報告や修正の取り消しをやる ことができます。このキャッシュ(<quote>text-base</quote>と呼ばれます)は また、ローカル修正をサーバにコミットする際に、修正元バージョン との圧縮された<firstterm>差分</firstterm>(あるいは<quote>違い</quote>) だけを送れるようにします。このキャッシュを 持っていることは非常に大きな利益になります&mdash;早いネットワーク 接続環境にしたとしても、ファイル全体を転送するよりも修正点だけを 送るほうがずっと早いでしょう。ちっょと考えるとそんな重要なこと には思えないかも知れませんが、400MBのファイルに対する一行の変更を コミットしようとして、ファイル全体をサーバに転送しなくては ならないことを考えてみてください。"

#. Tag: para
#: ch02-basic-usage.xml:598
#, fuzzy, no-c-format
msgid "Subversion has been optimized to help you with this task, and is able to do many things without communicating with the repository. In particular, your working copy contains a hidden cached <quote>pristine</quote> copy of each version controlled file within the <filename>.svn</filename> area. Because of this, Subversion can quickly show you how your working files have changed, or even allow you to undo your changes without contacting the repository."
msgstr "Subversionはこの作業をやるために効率よく作られていて、多くの操作に ついてはリポジトリと通信することなしに実行できます。特に、 作業コピーには、<filename>.svn</filename> という隠れたディレクトリが あり、ここに作業コピーの<quote>元なるリビジョン</quote> のコピーが あります。これをうまく使って Subversionは、あなたの作業ファイルのどれが 変更されたかをすばやく知ることができますし、リポジトリと通信すること なしに、変更を取り消すことすらできます。"

#. Tag: title
#: ch02-basic-usage.xml:609
#, fuzzy, no-c-format
msgid "See an overview of your changes"
msgstr "自分の変更点の確認"

#. Tag: para
#: ch02-basic-usage.xml:611
#, fuzzy, no-c-format
msgid "To get an overview of your changes, you'll use the <command>svn status</command> command. You'll probably use <command>svn status</command> more than any other Subversion command."
msgstr "多分、どのSubversionコマンドよりも<command>svn status</command> コマンドはよく利用されるはずです。"

#. Tag: title
#: ch02-basic-usage.xml:617
#, no-c-format
msgid "CVS Users: Hold That Update!"
msgstr "CVS ユーザに告ぐ: 更新するのは、ちょっと待った!"

#. Tag: para
#: ch02-basic-usage.xml:619
#, no-c-format
msgid "You're probably used to using <command>cvs update</command> to see what changes you've made to your working copy. <command>svn status</command> will give you all the information you need regarding what has changed in your working copy&mdash;without accessing the repository or potentially incorporating new changes published by other users."
msgstr "作業コピーにどのような変更を行ったかを確認するために、多分、 <command>cvs update</command>を使っていることでしょう。 <command>svn status</command> は、作業コピーに対して行われた 変更について、すべての必要な情報を提供してくれます &mdash; しかも、リポジトリに アクセスしませんし、他の人の行った変更が取り込まれる可能性もありません。"

#. Tag: para
#: ch02-basic-usage.xml:627
#, fuzzy, no-c-format
msgid "In Subversion, <command>update</command> does just that&mdash;it updates your working copy with any changes committed to the repository since the last time you've updated your working copy. You may have to break the habit of using the <command>update</command> command to see what local modifications you've made."
msgstr "Subversion では、<command>update</command> は以下の処理を行うだけです &mdash; 最後の更新後にリポジトリにコミットされたすべての変更を、 作業コピーに反映すること、です。ローカルコピーに対して行った変更を 確認するために <command>update</command> を使う癖を直さなくてはいけません。"

#. Tag: para
#: ch02-basic-usage.xml:636
#, fuzzy, no-c-format
msgid "If you run <command>svn status</command> at the top of your working copy with no arguments, it will detect all file and tree changes you've made. Below are a few examples of the most common status codes that <command>svn status</command> can return. (Note that the text following <literal>#</literal> is not actually printed by <command>svn status</command>.)"
msgstr "自分の作業コピー最上位階層で引数なしに<command>svn status</command> を実行すると、自分がツリーにしたすべての修正が検出できます。 以下の例は<command>svn status</command> が返すことのできる 異なる状態コードです。 (以下で、<literal>#</literal> の後に書いてあるテキストは <command>svn status</command>からのものではないのに注意してください。)"

#. Tag: screen
#: ch02-basic-usage.xml:644
#, no-c-format
msgid ""
"A       stuff/loot/bloo.h   # file is scheduled for addition\n"
"C       stuff/loot/lump.c   # file has textual conflicts from an update\n"
"D       stuff/fish.c        # file is scheduled for deletion\n"
"M       bar.c               # the content in bar.c has local modifications"
msgstr ""
"A       stuff/loot/bloo.h   # ファイルは追加予定\n"
"C       stuff/loot/lump.c   # ファイルは更新によって競合している\n"
"D       stuff/fish.c        # ファイルは削除予定\n"
"M       bar.c               # bar.c は作業コピーで変更されている"

#. Tag: para
#: ch02-basic-usage.xml:646
#, fuzzy, no-c-format
msgid "In this output format <command>svn status</command> prints six columns of characters, followed by several whitespace characters, followed by a file or directory name. The first column tells the status of a file or directory and/or its contents. The codes we listed are:"
msgstr "この出力形式の中で、<command>svn status</command>は 五つの文字を表示していて、その後にいくつかの空白が続き、 ファイルまたはディレクトリ名称がそのあとに続いています。 最初のコラム (左から一文字目の部分) は、ファイルまたはディレクトリの 状態をあらわしています。ここで表示されているコードは:"

#. Tag: computeroutput
#: ch02-basic-usage.xml:655
#, no-c-format
msgid "A item"
msgstr "A item"

#. Tag: para
#: ch02-basic-usage.xml:657
#, no-c-format
msgid "The file, directory, or symbolic link <filename>item</filename> has been scheduled for addition into the repository."
msgstr "通常ファイル、ディレクトリ、シンボリックリンクのいずれかである <filename>item</filename> はリポジトリに追加予告されています。"

#. Tag: computeroutput
#: ch02-basic-usage.xml:664
#, no-c-format
msgid "C item"
msgstr "C item"

#. Tag: para
#: ch02-basic-usage.xml:666
#, no-c-format
msgid "The file <filename>item</filename> is in a state of conflict. That is, changes received from the server during an update overlap with local changes that you have in your working copy. You must resolve this conflict before committing your changes to the repository."
msgstr "ファイル<filename>item</filename> は衝突の状態にあります。つまり、自分の作業コピーにあるローカルな変更が 更新時にサーバから受け取った変更部分と重なっています。リポジトリに 自分の変更点をコミットする前にこの衝突を解決しなくてはなりません。"

#. Tag: computeroutput
#: ch02-basic-usage.xml:676
#, no-c-format
msgid "D item"
msgstr "D item"

#. Tag: para
#: ch02-basic-usage.xml:678
#, no-c-format
msgid "The file, directory, or symbolic link <filename>item</filename> has been scheduled for deletion from the repository."
msgstr "通常ファイル、ディレクトリ、シンボリックリンクのいずれかである <filename>item</filename> は リポジトリからの削除予告をされています。"

#. Tag: computeroutput
#: ch02-basic-usage.xml:685
#, no-c-format
msgid "M item"
msgstr "M item"

#. Tag: para
#: ch02-basic-usage.xml:687
#, no-c-format
msgid "The contents of the file <filename>item</filename> have been modified."
msgstr "ファイル<filename>item</filename>の内容は 修正されています。"

#. Tag: para
#: ch02-basic-usage.xml:694
#, fuzzy, no-c-format
msgid "If you pass a specific path to <command>svn status</command>, you get information about that item alone:"
msgstr "<command>svn status</command>にパスを指定すると、そのアイテムに 関する情報のみを表示します:"

#. Tag: screen
#: ch02-basic-usage.xml:698
#, no-c-format
msgid ""
"$ svn status stuff/fish.c\n"
"D      stuff/fish.c"
msgstr ""
"$ svn status stuff/fish.c\n"
"D      stuff/fish.c"

#. Tag: para
#: ch02-basic-usage.xml:700
#, fuzzy, no-c-format
msgid "<command>svn status</command> also has a <option>--verbose (-v)</option> option, which will show you the status of <emphasis>every</emphasis> item in your working copy, even if it has not been changed:"
msgstr "<command>svn status</command> も <option>--verbose</option> (<option>-v</option>) スイッチを とりますが、その場合作業コピー中の<emphasis>すべての</emphasis>アイテム に対して、たとえ変更がなくてもステータスを表示するという意味になります:"

#. Tag: screen
#: ch02-basic-usage.xml:705
#, fuzzy, no-c-format
msgid ""
"$ svn status -v\n"
"M               44        23    sally     README\n"
"                44        30    sally     INSTALL\n"
"M               44        20    harry     bar.c\n"
"                44        18    ira       stuff\n"
"                44        35    harry     stuff/trout.c\n"
"D               44        19    ira       stuff/fish.c\n"
"                44        21    sally     stuff/things\n"
"A                0         ?     ?        stuff/things/bloo.h\n"
"                44        36    harry     stuff/things/gloo.c"
msgstr ""
"$ svn status --verbose\n"
"M               44        23    sally     README\n"
"                44        30    sally     INSTALL\n"
"M               44        20    harry     bar.c\n"
"                44        18    ira       stuff\n"
"                44        35    harry     stuff/trout.c\n"
"D               44        19    ira       stuff/fish.c\n"
"                44        21    sally     stuff/things\n"
"A                0         ?     ?        stuff/things/bloo.h\n"
"                44        36    harry     stuff/things/gloo.c"

#. Tag: para
#: ch02-basic-usage.xml:707
#, fuzzy, no-c-format
msgid "This is the <quote>long form</quote> output of <command>svn status</command>. The letters in the first column mean the same as before, but the second column shows the working-revision of the item. The third and fourth columns show the revision in which the item last changed, and who changed it."
msgstr "これは <command>svn status</command>の<quote>長い表示形式</quote> の出力です。再処理コラムは同じですが、二番目はアイテムの作業リビジョン になります。三番目と四番目はそれぞれアイテムが最後に変更されたリビジョン と、誰がそれをしたかの表示です。"

#. Tag: para
#: ch02-basic-usage.xml:714
#, fuzzy, no-c-format
msgid "None of the prior invocations to <command>svn status</command> contact the repository&mdash;instead, they compare the metadata in the <filename>.svn</filename> directory with the working copy. Finally, there is the <option>--show-updates (-u)</option> option, which contacts the repository and adds information about things that are out-of-date:"
msgstr "いままで出てきた<command>svn status</command> の実行は いずれもリポジトリと通信をしません。それは単に作業コピー中の <filename>.svn</filename> ディレクトリのメタデータを比較する ことによって、ローカルマシン上だけで動作します。 最後に、<option>--show-updates</option>(<option>-u</option>) スイッチがありますが、これはリポジトリと通信して、古くなった ファイルなどの情報を追加表示します:"

#. Tag: screen
#: ch02-basic-usage.xml:722
#, fuzzy, no-c-format
msgid ""
"$ svn status -u -v\n"
"M      *        44        23    sally     README\n"
"M               44        20    harry     bar.c\n"
"       *        44        35    harry     stuff/trout.c\n"
"D               44        19    ira       stuff/fish.c\n"
"A                0         ?     ?        stuff/things/bloo.h\n"
"Status against revision:   46"
msgstr ""
"$ svn status --show-updates --verbose\n"
"M      *        44        23    sally     README\n"
"M               44        20    harry     bar.c\n"
"       *        44        35    harry     stuff/trout.c\n"
"D               44        19    ira       stuff/fish.c\n"
"A                0         ?     ?        stuff/things/bloo.h\n"
"Status against revision:   46"

#. Tag: para
#: ch02-basic-usage.xml:724
#, no-c-format
msgid "Notice the two asterisks: if you were to run <command>svn update</command> at this point, you would receive changes to <filename>README</filename> and <filename>trout.c</filename>. This tells you some very useful information&mdash;you'll need to update and get the server changes on <filename>README</filename> before you commit, or the repository will reject your commit for being out-of-date. (More on this subject later.)"
msgstr "二つのアスタリスク ('*') に注意してください:この状態で <command>svn update</command> を実行すると <filename>README</filename>と<filename>trout.c</filename> の変更点を受け取ることになります。 これは非常に役に立つ情報です&mdash;コミットする前には更新して <filename>README</filename> に関するサーバ上の変更点を取得 しなくてはなりません。さもなければ、最新でないという理由で コミットは失敗するでしょう(詳しくは後で述べます)。"

#. Tag: para
#: ch02-basic-usage.xml:733
#, no-c-format
msgid "<command>svn status</command> can display much more information about the files and directories in your working copy than we've shown here&mdash;for an exhaustive description of svn status and its output, see <xref linkend=\"svn.ref.svn.c.status\"/>."
msgstr ""

#. Tag: title
#: ch02-basic-usage.xml:743
#, no-c-format
msgid "Examine the details of your local modifications"
msgstr ""

#. Tag: para
#: ch02-basic-usage.xml:745
#, fuzzy, no-c-format
msgid "Another way to examine your changes is with the <command>svn diff</command> command. You can find out <emphasis>exactly</emphasis> how you've modified things by running <command>svn diff</command> with no arguments, which prints out file changes in <firstterm>unified diff format</firstterm>:"
msgstr "自分の変更点を調べる別の方法は、<command>svn diff</command> コマンドを使うことです。<command>svn diff</command> を引数 なしに実行することで、自分がどんな変更をしたかを <emphasis>正確に</emphasis> 知ることができます。このときの 出力形式はunified diff 形式です:"

#. Tag: screen
#: ch02-basic-usage.xml:752
#, fuzzy, no-c-format
msgid ""
"$ svn diff\n"
"Index: bar.c\n"
"===================================================================\n"
"--- bar.c        (revision 3)\n"
"+++ bar.c        (working copy)\n"
"@@ -1,7 +1,12 @@\n"
"+#include &lt;sys/types.h&gt;\n"
"+#include &lt;sys/stat.h&gt;\n"
"+#include &lt;unistd.h&gt;\n"
"+\n"
"+#include &lt;stdio.h&gt;\n"
"\n"
" int main(void) {\n"
"-  printf(\"Sixty-four slices of American Cheese...\\n"
"\");\n"
"+  printf(\"Sixty-five slices of American Cheese...\\n"
"\");\n"
" return 0;\n"
" }\n"
"\n"
"Index: README\n"
"===================================================================\n"
"--- README        (revision 3)\n"
"+++ README        (working copy)\n"
"@@ -193,3 +193,4 @@\n"
"+Note to self:  pick up laundry.\n"
"\n"
"Index: stuff/fish.c\n"
"===================================================================\n"
"--- stuff/fish.c        (revision 1)\n"
"+++ stuff/fish.c        (working copy)\n"
"-Welcome to the file known as 'fish'.\n"
"-Information on fish will be here soon.\n"
"\n"
"Index: stuff/things/bloo.h\n"
"===================================================================\n"
"--- stuff/things/bloo.h        (revision 8)\n"
"+++ stuff/things/bloo.h        (working copy)\n"
"+Here is a new file to describe\n"
"+things about bloo."
msgstr ""
"$ svn diff\n"
"Index: bar.c\n"
"===================================================================\n"
"--- bar.c       (revision 3)\n"
"+++ bar.c        (working copy)\n"
"@@ -1,7 +1,12 @@\n"
"+#include &lt;sys/types.h&gt;\n"
"+#include &lt;sys/stat.h&gt;\n"
"+#include &lt;unistd.h&gt;\n"
"+\n"
"+#include &lt;stdio.h&gt;\n"
"\n"
" int main(void) {\n"
"-  printf(\"Sixty-four slices of American Cheese...¥n\");\n"
"+  printf(\"Sixty-five slices of American Cheese...¥n\");\n"
" return 0;\n"
" }\n"
"\n"
"Index: README\n"
"===================================================================\n"
"--- README      (revision 3)\n"
"+++ README        (working copy)\n"
"@@ -193,3 +193,4 @@ \n"
"+Note to self:  pick up laundry.\n"
"\n"
"Index: stuff/fish.c\n"
"===================================================================\n"
"--- stuff/fish.c     (revision 1)\n"
"+++ stuff/fish.c     (working copy)\n"
"-Welcome to the file known as 'fish'.\n"
"-Information on fish will be here soon.\n"
"\n"
"Index: stuff/things/bloo.h\n"
"===================================================================\n"
"--- stuff/things/bloo.h      (revision 8)\n"
"+++ stuff/things/bloo.h      (working copy)\n"
"+Here is a new file to describe\n"
"+things about bloo."

#. Tag: para
#: ch02-basic-usage.xml:754
#, no-c-format
msgid "The <command>svn diff</command> command produces this output by comparing your working files against the cached <quote>pristine</quote> copies within the <filename>.svn</filename> area. Files scheduled for addition are displayed as all added-text, and files scheduled for deletion are displayed as all deleted text."
msgstr "<command>svn diff</command> コマンドは<filename>.svn</filename> 領域 にある、<quote>修正元リビジョン</quote> のコピーに対して作業コピー 中のファイルを比較した結果を出力します。 追加予告ファイルはすべて追加されたテキストとして表示され 削除予告されているファイルはすべて削除されたファイルとして表示 されます。"

#. Tag: para
#: ch02-basic-usage.xml:762
#, fuzzy, no-c-format
msgid "Output is displayed in unified diff format. That is, removed lines are prefaced with <literal>-</literal> and added lines are prefaced with <literal>+</literal>. <command>svn diff</command> also prints filename and offset information useful to the <command>patch</command> program, so you can generate <quote>patches</quote> by redirecting the diff output to a file:"
msgstr "出力は、<firstterm>unified diff 形式</firstterm>で表示されます。 つまり、削除された行は先頭に <literal>-</literal> が付き、追加された 行は先頭に <literal>+</literal>がつきます。<command>svn diff</command> はさらに<command>patch</command> に便利なようにファイル名称とオフセット 情報を表示します。このためdiffの出力をファイルにリダイレクトすることで <quote>パッチ</quote> を生成することができます:"

#. Tag: screen
#: ch02-basic-usage.xml:771
#, no-c-format
msgid "$ svn diff &gt; patchfile"
msgstr "$ svn diff &gt; patchfile"

#. Tag: para
#: ch02-basic-usage.xml:773
#, no-c-format
msgid "You could, for example, email the patch file to another developer for review or testing prior to commit."
msgstr "たとえば、パッチファイルを別の開発者に送り、コミット前に再検討や テストをすることができます。"

#. Tag: para
#: ch02-basic-usage.xml:776
#, fuzzy, no-c-format
msgid "Subversion uses its internal diff engine, which produces unified diff format, by default. If you want diff output in a different format, specify an external diff program using <option>--diff-cmd</option> and pass any flags you'd like to it using the <option>--extensions (-x)</option> option. For example, to see local differences in file <filename>foo.c</filename> in context output format while ignoring case differences, you might run <command>svn diff --diff-cmd /usr/bin/diff --extensions '-i' foo.c</command>."
msgstr "Subversion は内部 diff エンジンを利用し、デフォルトでは unified diff 形式を生成します。もし別の形式の diff 出力がほしい場合には、 <option>--diff-cmd</option>で外部diffプログラムを指定し、 <option>--extensions</option>スイッチを使ってフラグを渡して ください。たとえばファイル<filename>foo.c</filename>のローカルな 変更点を context 出力形式で見たいが、空白の変更は無視したい場合、 <command>svn diff --diff-cmd /usr/bin/diff --extensions '-bc' foo.c</command> のように実行することができます。"

#. Tag: title
#: ch02-basic-usage.xml:794
#, fuzzy, no-c-format
msgid "Undoing Working Changes"
msgstr "変更の取り消し"

#. Tag: para
#: ch02-basic-usage.xml:797
#, no-c-format
msgid "Suppose while viewing the output of <command>svn diff</command> you determine that all the changes you made to a particular file are mistakes. Maybe you shouldn't have changed the file at all, or perhaps it would be easier to make different changes starting from scratch."
msgstr ""

#. Tag: para
#: ch02-basic-usage.xml:803
#, fuzzy, no-c-format
msgid "This is a perfect opportunity to use <command>svn revert</command>:"
msgstr "これは、<command>svn revert</command>を使うことの できるとても良い機会です。"

#. Tag: screen
#: ch02-basic-usage.xml:806
#, no-c-format
msgid ""
"$ svn revert README\n"
"Reverted 'README'"
msgstr ""
"$ svn revert README\n"
"Reverted 'README'"

#. Tag: para
#: ch02-basic-usage.xml:808
#, no-c-format
msgid "Subversion reverts the file to its pre-modified state by overwriting it with the cached <quote>pristine</quote> copy from the <filename>.svn</filename> area. But also note that <command>svn revert</command> can undo <emphasis>any</emphasis> scheduled operations&mdash;for example, you might decide that you don't want to add a new file after all:"
msgstr "Subversion はそのファイルを<filename>.svn</filename> 領域に ある<quote>修正元リビジョン</quote>のコピーを上書きすることに よって、修正以前の状態に戻します。 しかし、<command>svn revert</command> は<emphasis>どのような</emphasis> 予告操作も取り消すことができるのに注意してください&mdash;たとえば 最終的に新しいファイルを追加することをやめることができます:"

#. Tag: screen
#: ch02-basic-usage.xml:816
#, no-c-format
msgid ""
"$ svn status foo\n"
"?      foo\n"
"\n"
"$ svn add foo\n"
"A         foo\n"
"\n"
"$ svn revert foo\n"
"Reverted 'foo'\n"
"\n"
"$ svn status foo\n"
"?      foo"
msgstr ""
"$ svn status foo\n"
"?      foo\n"
"\n"
"$ svn add foo\n"
"A         foo\n"
"\n"
"$ svn revert foo\n"
"Reverted 'foo'\n"
"\n"
"$ svn status foo\n"
"?      foo"

#. Tag: para
#: ch02-basic-usage.xml:819
#, no-c-format
msgid "<command>svn revert</command> <replaceable>ITEM</replaceable> has exactly the same effect as deleting <replaceable>ITEM</replaceable> from your working copy and then running <command>svn update -r BASE</command> <replaceable>ITEM</replaceable>. However, if you're reverting a file, <command>svn revert</command> has one very noticeable difference&mdash;it doesn't have to communicate with the repository to restore your file."
msgstr "<command>svn revert</command> <replaceable>ITEM</replaceable> は、作業コピーから <replaceable>ITEM</replaceable>を削除し、それから<command>svn update -r BASE</command> <replaceable>ITEM</replaceable>を実行したのとまったく同じ効果があります。 しかし、もしファイルをもとに戻そうとしているのなら、 <command>svn revert</command>には一つ重要な違いがあります&mdash;それはファイル を元に戻すにあたってリポジトリと通信する必要がないのです。"

#. Tag: para
#: ch02-basic-usage.xml:830
#, no-c-format
msgid "Or perhaps you mistakenly removed a file from version control:"
msgstr "あるいは間違ってバージョン管理からファイルを消して しまったのかも知れません:"

#. Tag: screen
#: ch02-basic-usage.xml:833
#, fuzzy, no-c-format
msgid ""
"$ svn status README\n"
"       README\n"
"\n"
"$ svn delete README\n"
"D         README\n"
"\n"
"$ svn revert README\n"
"Reverted 'README'\n"
"\n"
"$ svn status README\n"
"       README"
msgstr ""
"$ svn status README \n"
"       README\n"
"\n"
"$ svn delete README \n"
"D         README\n"
"\n"
"$ svn revert README\n"
"Reverted 'README'\n"
"\n"
"$ svn status README\n"
"       README"

#. Tag: title
#: ch02-basic-usage.xml:839
#, no-c-format
msgid "Resolve Conflicts (Merging Others' Changes)"
msgstr "衝突の解消(他の人の変更点のマージ)"

#. Tag: para
#: ch02-basic-usage.xml:841
#, no-c-format
msgid "We've already seen how <command>svn status -u</command> can predict conflicts. Suppose you run <command>svn update</command> and some interesting things occur:"
msgstr "いままでで、<command>svn status -u</command>がどうやって衝突を 予告できたかを知っています。<command>svn update</command> を実行して、面白いことが起こったとします:"

#. Tag: screen
#: ch02-basic-usage.xml:845
#, no-c-format
msgid ""
"$ svn update\n"
"U  INSTALL\n"
"G  README\n"
"C  bar.c\n"
"Updated to revision 46."
msgstr ""
"$ svn update\n"
"U  INSTALL\n"
"G  README\n"
"C  bar.c\n"
"Updated to revision 46."

#. Tag: para
#: ch02-basic-usage.xml:847
#, no-c-format
msgid "The <computeroutput>U</computeroutput> and <computeroutput>G</computeroutput> codes are no cause for concern; those files cleanly absorbed changes from the repository. The files marked with <computeroutput>U</computeroutput> contained no local changes but were <computeroutput>U</computeroutput>pdated with changes from the repository. The <computeroutput>G</computeroutput> stands for mer<computeroutput>G</computeroutput>ed, which means that the file had local changes to begin with, but the changes coming from the repository didn't overlap with the local changes."
msgstr "<computeroutput>U</computeroutput> と <computeroutput>G</computeroutput> のコードは考える ことはありません。この二つはリポジトリからの変更を きれいに吸収することができました。 <computeroutput>U</computeroutput> でマークされたファイルは ローカルでは何の変更もありませんでしたが、リポジトリからの 修正分で更新(<computeroutput>U</computeroutput>pdated)されました。 <computeroutput>G</computeroutput>はマージ( mer<computeroutput>G</computeroutput>ed)されたことを意味して いますが、これは、ファイルはローカルで変更されていたが、 リポジトリからの変更部分とまったく重ならなかったことを意味 しています。"

#. Tag: para
#: ch02-basic-usage.xml:859
#, fuzzy, no-c-format
msgid "But the <computeroutput>C</computeroutput> stands for <computeroutput>c</computeroutput>onflict. This means that the changes from the server overlapped with your own, and now you have to manually choose between them."
msgstr "しかし <computeroutput>C</computeroutput> は衝突を あらわしています。これはサーバからの変更場所があなた自身の ものと重なっていることを意味していて、あなたは手で どちらかを選択しなくてはなりません。"

#. Tag: para
#: ch02-basic-usage.xml:864
#, no-c-format
msgid "Whenever a conflict occurs, three things typically occur to assist you in noticing and resolving that conflict:"
msgstr "衝突が起こると、普通はその衝突を知らせて解決することができるように 三つのことが起こります:"

#. Tag: para
#: ch02-basic-usage.xml:870
#, no-c-format
msgid "Subversion prints a <computeroutput>C</computeroutput> during the update, and remembers that the file is in a state of conflict."
msgstr "そのファイルがマージ可能なタイプのときには Subversion は更新処理中に<computeroutput>C</computeroutput> を 表示して、そのファイルが<quote>衝突している</quote>ことを知らせます。 (行番号に基づいた文脈マージ可能なファイルかどうかは <literal>svn:mime-type</literal>属性によって決まります。 詳しくは<xref linkend=\"svn.advanced.props.special.mime-type\"/>を見てください。)"

#. Tag: para
#: ch02-basic-usage.xml:876
#, fuzzy, no-c-format
msgid "If Subversion considers the file to be mergeable, it places <firstterm>conflict markers</firstterm>&mdash;special strings of text which delimit the <quote>sides</quote> of the conflict&mdash;into the file to visibly demonstrate the overlapping areas. (Subversion uses the <literal>svn:mime-type</literal> property to decide if a file is capable of contextual, line-based merging. See <xref linkend=\"svn.advanced.props.special.mime-type\"/> to learn more.)"
msgstr "Subversion は<firstterm>衝突マーカ</firstterm> &mdash;衝突を 起こした<quote>両方</quote>の内容を区切る特別なテキスト文字列 のことです&mdash;を重なっている場所に置き、衝突内容を見てわかるように します。"

#. Tag: para
#: ch02-basic-usage.xml:888
#, fuzzy, no-c-format
msgid "For every conflicted file, Subversion places three extra unversioned files in your working copy:"
msgstr "衝突しているファイルのそれぞれについて、Subversionは最大で三つの バージョン管理対象にはならない特殊なファイルを作業コピーに置きます:"

#. Tag: filename
#: ch02-basic-usage.xml:894
#, no-c-format
msgid "filename.mine"
msgstr "filename.mine"

#. Tag: para
#: ch02-basic-usage.xml:896
#, fuzzy, no-c-format
msgid "This is your file as it existed in your working copy before you updated your working copy&mdash;that is, without conflict markers. This file has only your latest changes in it. (If Subversion considers the file to be unmergeable, then the <filename>.mine</filename> file isn't created, since it would be identical to the working file.)"
msgstr "これは作業コピーを更新する前に作業コピー中にあったファイル です&mdash;つまり、衝突マーカを含んでいません。このファイルは 自分のやった最後の変更が含まれているだけのものです。(Subversion がこのファイルがマージ可能なものではないとみなした場合には <filename>.mine</filename>ファイルは作成されませんが、それは 作業ファイルと同一の内容になってしまうだろうからです。)"

#. Tag: filename
#: ch02-basic-usage.xml:907
#, no-c-format
msgid "filename.rOLDREV"
msgstr "filename.rOLDREV"

#. Tag: para
#: ch02-basic-usage.xml:909
#, no-c-format
msgid "This is the file that was the <literal>BASE</literal> revision before you updated your working copy. That is, the file that you checked out before you made your latest edits."
msgstr "これは、作業コピーを更新する前の<literal>BASE</literal>リビジョンにあったファイル の内容です。つまり、そのファイルは最後にした編集の直前にした チェックアウト時点でのファイルです。"

#. Tag: filename
#: ch02-basic-usage.xml:918
#, no-c-format
msgid "filename.rNEWREV"
msgstr "filename.rNEWREV"

#. Tag: para
#: ch02-basic-usage.xml:920
#, no-c-format
msgid "This is the file that your Subversion client just received from the server when you updated your working copy. This file corresponds to the <literal>HEAD</literal> revision of the repository."
msgstr "これは Subversionクライアントプログラムが作業コピーを更新したときに サーバから受け取ったファイルです。これは、リポジトリの<literal>HEAD</literal> リビジョンに対応しています。"

#. Tag: para
#: ch02-basic-usage.xml:930
#, no-c-format
msgid "Here <literal>OLDREV</literal> is the revision number of the file in your <filename>.svn</filename> directory and <literal>NEWREV</literal> is the revision number of the repository <literal>HEAD</literal>."
msgstr "ここで <literal>OLDREV</literal> は <filename>.svn</filename> ディレクトリにあるファイルのリビジョン番号で、<literal>NEWREV</literal>は <literal>HEAD</literal> リポジトリのリビジョン番号です。"

#. Tag: para
#: ch02-basic-usage.xml:938
#, no-c-format
msgid "For example, Sally makes changes to the file <filename>sandwich.txt</filename> in the repository. Harry has just changed the file in his working copy and checked it in. Sally updates her working copy before checking in and she gets a conflict:"
msgstr "たとえば Sally がリポジトリにある<filename>sandwich.txt</filename> に変更を加えるとします。たった今、Harryは自分の作業コピーのそのファイルを変更 してコミットしました。Sally は自分が加えた変更をコミットする前に 作業コピーを更新しますが、そのとき衝突の報告を受けます:"

#. Tag: screen
#: ch02-basic-usage.xml:944
#, no-c-format
msgid ""
"$ svn update\n"
"C  sandwich.txt\n"
"Updated to revision 2.\n"
"$ ls -1\n"
"sandwich.txt\n"
"sandwich.txt.mine\n"
"sandwich.txt.r1\n"
"sandwich.txt.r2"
msgstr ""
"$ svn update\n"
"C  sandwich.txt\n"
"Updated to revision 2.\n"
"$ ls -1\n"
"sandwich.txt                       \n"
"sandwich.txt.mine\n"
"sandwich.txt.r1\n"
"sandwich.txt.r2"

#. Tag: para
#: ch02-basic-usage.xml:946
#, no-c-format
msgid "At this point, Subversion will <emphasis>not</emphasis> allow you to commit the file <filename>sandwich.txt</filename> until the three temporary files are removed."
msgstr "このときSubversionは三つの一時ファイルが削除されるまで <filename>sandwich.txt</filename>のコミットを許可 <emphasis>しません</emphasis>。"

#. Tag: screen
#: ch02-basic-usage.xml:950
#, fuzzy, no-c-format
msgid ""
"$ svn commit -m \"Add a few more things\"\n"
"svn: Commit failed (details follow):\n"
"svn: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict"
msgstr ""
"$ svn commit --message \"Add a few more things\"\n"
"svn: commit failed (details follow):\n"
"svn: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict"

#. Tag: para
#: ch02-basic-usage.xml:952
#, no-c-format
msgid "If you get a conflict, you need to do one of three things:"
msgstr "もし衝突があった場合は、三つのうちのどれかを する必要があります:"

#. Tag: para
#: ch02-basic-usage.xml:958
#, no-c-format
msgid "Merge the conflicted text <quote>by hand</quote> (by examining and editing the conflict markers within the file)."
msgstr "<quote>手で</quote> 衝突テキストをマージします。( ファイル中の衝突マーカを調べ編集することによって)。"

#. Tag: para
#: ch02-basic-usage.xml:964
#, no-c-format
msgid "Copy one of the temporary files on top of your working file."
msgstr "作業ファイルに、一時ファイルのどれかを上書きします。"

#. Tag: para
#: ch02-basic-usage.xml:969
#, no-c-format
msgid "Run <command>svn revert &lt;filename&gt;</command> to throw away all of your local changes."
msgstr "<command>svn revert &lt;filename&gt;</command>を 実行して、ローカルでしたすべての変更を捨てます。"

#. Tag: para
#: ch02-basic-usage.xml:975
#, no-c-format
msgid "Once you've resolved the conflict, you need to let Subversion know by running <command>svn resolved</command>. This removes the three temporary files and Subversion no longer considers the file to be in a state of conflict."
msgstr "ひとたび衝突を解消したら、<command>svn resolved</command>を実行 してSubversionにそのことを伝えます。これは三つの一時ファイルを 削除して、Subversionはもうそのファイルが衝突の状態にあるとは 考えなくなります。"

#. Tag: para
#: ch02-basic-usage.xml:979
#, no-c-format
msgid "You can always remove the temporary files yourself, but would you really want to do that when Subversion can do it for you? We didn't think so."
msgstr "一時的なファイルは常に自分で削除することができます が、Subversionがせっかくコマンドを用意しているのに本当にそうしたい のでしょうか? そうは思えませんが。"

#. Tag: screen
#: ch02-basic-usage.xml:984
#, no-c-format
msgid ""
"$ svn resolved sandwich.txt\n"
"Resolved conflicted state of 'sandwich.txt'"
msgstr ""
"$ svn resolved sandwich.txt\n"
"Resolved conflicted state of 'sandwich.txt'"

#. Tag: title
#: ch02-basic-usage.xml:988
#, no-c-format
msgid "Merging Conflicts by Hand"
msgstr "衝突を手でマージすること"

#. Tag: para
#: ch02-basic-usage.xml:990
#, no-c-format
msgid "Merging conflicts by hand can be quite intimidating the first time you attempt it, but with a little practice, it can become as easy as falling off a bike."
msgstr "手で衝突をマージするのは最初とても嫌なものですが、 少し練習すればバイクから降りるのと同じくらい簡単に できるようになります。"

#. Tag: para
#: ch02-basic-usage.xml:994
#, fuzzy, no-c-format
msgid "Here's an example. Due to a miscommunication, you and Sally, your collaborator, both edit the file <filename>sandwich.txt</filename> at the same time. Sally commits her changes, and when you go to update your working copy, you get a conflict and you're going to have to edit <filename>sandwich.txt</filename> to resolve the conflicts. First, let's take a look at the file:"
msgstr "例をあげます。コミュニケーション不足により、あなたとあなたの同僚 である Sally の両方が<filename>sandwich.txt</filename>というファイルを同時に 編集したとします。Sallyは自分の変更をコミットし、それからあなた が作業コピーを更新しようとすると、衝突を受け取ります。それで <filename>sandwich.txt</filename> を編集しなくてはなりません。 最初にファイルを見てみます:"

#. Tag: screen
#: ch02-basic-usage.xml:1002
#, no-c-format
msgid ""
"$ cat sandwich.txt\n"
"Top piece of bread\n"
"Mayonnaise\n"
"Lettuce\n"
"Tomato\n"
"Provolone\n"
"&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine\n"
"Salami\n"
"Mortadella\n"
"Prosciutto\n"
"=======\n"
"Sauerkraut\n"
"Grilled Chicken\n"
"&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2\n"
"Creole Mustard\n"
"Bottom piece of bread"
msgstr ""
"$ cat sandwich.txt\n"
"Top piece of bread\n"
"Mayonnaise\n"
"Lettuce\n"
"Tomato\n"
"Provolone\n"
"&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine\n"
"Salami\n"
"Mortadella\n"
"Prosciutto\n"
"=======\n"
"Sauerkraut\n"
"Grilled Chicken\n"
"&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2\n"
"Creole Mustard\n"
"Bottom piece of bread"

#. Tag: para
#: ch02-basic-usage.xml:1004
#, no-c-format
msgid "The strings of less-than signs, equal signs, and greater-than signs are conflict markers, and are not part of the actual data in conflict. You generally want to ensure that those are removed from the file before your next commit. The text between the first two sets of markers is composed of the changes you made in the conflicting area:"
msgstr "小なり記号の文字列、イコールサイン、そして 大なり記号の文字列を衝突マーカと呼びますが、これは実際の 衝突を起こしたデータの一部ではありません。一般的には次のコミットの 前に取り除く必要があります。最初の二つのマーカの間のテキストは衝突領域に あなた自身がした変更です:"

#. Tag: screen
#: ch02-basic-usage.xml:1012
#, no-c-format
msgid ""
"&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine\n"
"Salami\n"
"Mortadella\n"
"Prosciutto\n"
"======="
msgstr ""
"&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine\n"
"Salami\n"
"Mortadella\n"
"Prosciutto\n"
"======="

#. Tag: para
#: ch02-basic-usage.xml:1014
#, no-c-format
msgid "The text between the second and third sets of conflict markers is the text from Sally's commit:"
msgstr "二番目と三番目の衝突マーカの間のテキストは、 Sallyのコミットからのテキストです:"

#. Tag: screen
#: ch02-basic-usage.xml:1017
#, no-c-format
msgid ""
"=======\n"
"Sauerkraut\n"
"Grilled Chicken\n"
"&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2"
msgstr ""
"=======\n"
"Sauerkraut\n"
"Grilled Chicken\n"
"&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2"

#. Tag: para
#: ch02-basic-usage.xml:1019
#, no-c-format
msgid "Usually you won't want to just delete the conflict markers and Sally's changes&mdash;she's going to be awfully surprised when the sandwich arrives and it's not what she wanted. So this is where you pick up the phone or walk across the office and explain to Sally that you can't get sauerkraut from an Italian deli.<footnote><para>And if you ask them for it, they may very well ride you out of town on a rail.</para></footnote> Once you've agreed on the changes you will check in, edit your file and remove the conflict markers."
msgstr "通常、衝突マーカとSally の変更部分を単に削除するわけには いきません&mdash;そのようなことをするとSallyはsandwichを 受け取ったときにびっくりしますし、それは彼女が望んでいる ものではないでしょう。あなたは電話をかけるか、オフィスを またいで、Sallyに、二人の変更が衝突していることを説明 します。 <footnote><para> そして、あなたが頼めば、彼らは電車で町の外まであなたを つれていってくれるかも知れませんよ。 </para></footnote> ひとたびコミットする変更内容について合意がとれたら、 ファイルを編集し衝突マーカを削除します。"

#. Tag: screen
#: ch02-basic-usage.xml:1030
#, no-c-format
msgid ""
"Top piece of bread\n"
"Mayonnaise\n"
"Lettuce\n"
"Tomato\n"
"Provolone\n"
"Salami\n"
"Mortadella\n"
"Prosciutto\n"
"Creole Mustard\n"
"Bottom piece of bread"
msgstr ""
"Top piece of bread\n"
"Mayonnaise\n"
"Lettuce\n"
"Tomato\n"
"Provolone\n"
"Salami\n"
"Mortadella\n"
"Prosciutto\n"
"Creole Mustard\n"
"Bottom piece of bread"

#. Tag: para
#: ch02-basic-usage.xml:1032
#, no-c-format
msgid "Now run <command>svn resolved</command>, and you're ready to commit your changes:"
msgstr "これで、<command>svn resolved</command> を実行し 自分の変更をコミットする用意ができました:"

#. Tag: screen
#: ch02-basic-usage.xml:1035
#, no-c-format
msgid ""
"$ svn resolved sandwich.txt\n"
"$ svn commit -m \"Go ahead and use my sandwich, discarding Sally's edits.\""
msgstr ""
"$ svn resolved sandwich.txt\n"
"$ svn commit -m \"Go ahead and use my sandwich, discarding Sally's edits.\""

#. Tag: para
#: ch02-basic-usage.xml:1037
#, fuzzy, no-c-format
msgid "Note that <command>svn resolved</command>, unlike most of the other commands we deal with in this chapter, requires an argument. In any case, you want to be careful and only run <command>svn resolved</command> when you're certain that you've fixed the conflict in your file&mdash;once the temporary files are removed, Subversion will let you commit the file even if it still contains conflict markers."
msgstr "これで自分の変更をコミットする用意ができました。 <command>svn resolved</command>はこの章であつかう ほかのほとんどのコマンドとは違って、引数を必要とします。 どのような場合でも十分注意して、ファイル中の衝突を 解消したことが確かな場合だけ<command>svn resolved</command> を実行してください&mdash;一時ファイルが削除されてしまうと、 Subversion はファイルが衝突マーカを含んでいたとしてもコミット します。"

#. Tag: para
#: ch02-basic-usage.xml:1045
#, fuzzy, no-c-format
msgid "If you ever get confused while editing the conflicted file, you can always consult the three files that Subversion creates for you in your working copy&mdash;including your file as it was before you updated. You can even use a third-party interactive merging tool to examine those three files."
msgstr "衝突ファイルを編集中に混乱したら、Subversionがあなたのために作った、 作業コピーにある三つの一時ファイルを見てどうするかを考えることができます &mdash;その中には更新前にあなたが修正したバージョンのファイルもありま す。この三つのファイルを確認するためにサードパーティー製の対話的な マージツールを使うこともできます。"

#. Tag: title
#: ch02-basic-usage.xml:1056
#, no-c-format
msgid "Copying a File Onto Your Working File"
msgstr "作業ファイルの上にファイルをコピーすること"

#. Tag: para
#: ch02-basic-usage.xml:1058
#, no-c-format
msgid "If you get a conflict and decide that you want to throw out your changes, you can merely copy one of the temporary files created by Subversion over the file in your working copy:"
msgstr "衝突が起こり、自分のした変更を捨てようとするときにはSubversionが作った 一時ファイルのどれかを単に作業コピー上に上書きすることができます:"

#. Tag: screen
#: ch02-basic-usage.xml:1063
#, no-c-format
msgid ""
"$ svn update\n"
"C  sandwich.txt\n"
"Updated to revision 2.\n"
"$ ls sandwich.*\n"
"sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1\n"
"$ cp sandwich.txt.r2 sandwich.txt\n"
"$ svn resolved sandwich.txt"
msgstr ""
"$ svn update\n"
"C  sandwich.txt\n"
"Updated to revision 2.\n"
"$ ls sandwich.*\n"
"sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1\n"
"$ cp sandwich.txt.r2 sandwich.txt\n"
"$ svn resolved sandwich.txt"

#. Tag: title
#: ch02-basic-usage.xml:1069
#, no-c-format
msgid "Punting: Using <command>svn revert</command>"
msgstr "Punting: <command>svn revert</command>の利用"

#. Tag: para
#: ch02-basic-usage.xml:1071
#, no-c-format
msgid "If you get a conflict, and upon examination decide that you want to throw out your changes and start your edits again, just revert your changes:"
msgstr "衝突が起こり、調査の結果、自分の変更を捨てて編集をやり直す場合は 単に変更を revert することができます:"

#. Tag: screen
#: ch02-basic-usage.xml:1075
#, no-c-format
msgid ""
"$ svn revert sandwich.txt\n"
"Reverted 'sandwich.txt'\n"
"$ ls sandwich.*\n"
"sandwich.txt"
msgstr ""
"$ svn revert sandwich.txt\n"
"Reverted 'sandwich.txt'\n"
"$ ls sandwich.*\n"
"sandwich.txt"

#. Tag: para
#: ch02-basic-usage.xml:1077
#, no-c-format
msgid "Note that when you revert a conflicted file, you don't have to run <command>svn resolved</command>."
msgstr "衝突ファイルを元に戻すときは<command>svn resolved</command>を 実行する必要はないことに注意してください。"

#. Tag: title
#: ch02-basic-usage.xml:1086
#, no-c-format
msgid "Commit Your Changes"
msgstr "変更点のコミット"

#. Tag: para
#: ch02-basic-usage.xml:1088
#, no-c-format
msgid "Finally! Your edits are finished, you've merged all changes from the server, and you're ready to commit your changes to the repository."
msgstr "やっとここまできました。編集は終了し、サーバからの変更を すべてマージしました。これで自分の変更をリポジトリにコミット する準被ｳ器ｺできました。"

#. Tag: para
#: ch02-basic-usage.xml:1092
#, no-c-format
msgid "The <command>svn commit</command> command sends all of your changes to the repository. When you commit a change, you need to supply a <firstterm>log message</firstterm>, describing your change. Your log message will be attached to the new revision you create. If your log message is brief, you may wish to supply it on the command line using the <option>--message</option> (or <option>-m</option>) option:"
msgstr "<command>svn commit</command> コマンドは自分の変更点の すべてをリポジトリに送ります。変更をコミットするときには 変更点を説明する<firstterm>ログメッセージ</firstterm>を 与えてやる必要があります。ログメッセージは自分が作った 新しいリビジョンに付けられます。ログメッセージが簡単な 場合は<option>--message</option> (あるいは<option>-m</option>) オプションを使ってコマンドライン上で指定することができます:"

#. Tag: screen
#: ch02-basic-usage.xml:1101
#, fuzzy, no-c-format
msgid ""
"$ svn commit -m \"Corrected number of cheese slices.\"\n"
"Sending        sandwich.txt\n"
"Transmitting file data .\n"
"Committed revision 3."
msgstr ""
"$ svn commit --message \"Corrected number of cheese slices.\"\n"
"Sending        sandwich.txt\n"
"Transmitting file data .\n"
"Committed revision 3."

#. Tag: para
#: ch02-basic-usage.xml:1103
#, fuzzy, no-c-format
msgid "However, if you've been composing your log message as you work, you may want to tell Subversion to get the message from a file by passing the filename with the <option>--file (-F)</option> option:"
msgstr "しかし、既にログメッセージを作ってある場合は、 <option>--file</option> スイッチでファイル名称を指定することで、Subversionに そのファイルの内容を使うように指示できます:"

#. Tag: screen
#: ch02-basic-usage.xml:1108
#, fuzzy, no-c-format
msgid ""
"$ svn commit -F logmsg\n"
"Sending        sandwich.txt\n"
"Transmitting file data .\n"
"Committed revision 4."
msgstr ""
"$ svn commit --file logmsg \n"
"Sending        sandwich.txt\n"
"Transmitting file data .\n"
"Comitted revision 4."

#. Tag: para
#: ch02-basic-usage.xml:1110
#, fuzzy, no-c-format
msgid "If you fail to specify either the <option>--message</option> or <option>--file</option> option, then Subversion will automatically launch your favorite editor (see the <literal>editor-cmd</literal> section in <xref linkend=\"svn.advanced.confarea.opts.config\"/>) for composing a log message."
msgstr "<option>--message</option>も<option>--file</option> も 指定しなかった場合は、Subversionは自動的にエディタを 起動し、(<xref linkend=\"svn.advanced.confarea.opts.config\"/>の <literal>editor-cmd</literal>セクションを見てください) ログメッセージを作成しようとします。"

#. Tag: para
#: ch02-basic-usage.xml:1119
#, fuzzy, no-c-format
msgid "If you're in your editor writing a commit message and decide that you want to cancel your commit, you can just quit your editor without saving changes. If you've already saved your commit message, simply delete the text, save again, then abort."
msgstr "もしコミットメッセージをエディタを起動して書いて いて、そのコミットを中止したいと思った場合には、単に保存せずに そのエディタを抜けてください。既にコミットメッセージを保存して しまった場合であれば、テキストを削除してもう一度保存してください。"

#. Tag: screen
#: ch02-basic-usage.xml:1125
#, no-c-format
msgid ""
"$ svn commit\n"
"Waiting for Emacs...Done\n"
"\n"
"Log message unchanged or not specified\n"
"a)bort, c)ontinue, e)dit\n"
"a\n"
"$"
msgstr ""
"$ svn commit\n"
"Waiting for Emacs...Done\n"
"\n"
"Log message unchanged or not specified\n"
"a)bort, c)ontinue, e)dit\n"
"a\n"
"$"

#. Tag: para
#: ch02-basic-usage.xml:1128
#, no-c-format
msgid "The repository doesn't know or care if your changes make any sense as a whole; it only checks to make sure that nobody else has changed any of the same files that you did when you weren't looking. If somebody <emphasis>has</emphasis> done that, the entire commit will fail with a message informing you that one or more of your files is out-of-date:"
msgstr "リポジトリは、変更点の内容に意味があるかどうかはまったく 気にしません。Subversionはあなたが見ていないところで、同じファイルに 他の人が修正していないことだけを確認します。もし他の人がそのような 変更を <emphasis>していたら</emphasis> 、コミットはあなたの変更 したファイルのどれかが最新ではないというメッセージを出して失敗します:"

#. Tag: screen
#: ch02-basic-usage.xml:1135
#, fuzzy, no-c-format
msgid ""
"$ svn commit -m \"Add another rule\"\n"
"Sending        rules.txt\n"
"svn: Commit failed (details follow):\n"
"svn: Your file or directory 'sandwich.txt' is probably out-of-date\n"
"&hellip;"
msgstr ""
"$ svn commit --message \"Add another rule\"\n"
"Sending        rules.txt\n"
"svn: commit failed (details follow):\n"
"svn: Out of date: 'rules.txt' in transaction 'g'"

#. Tag: para
#: ch02-basic-usage.xml:1137
#, no-c-format
msgid "(The exact wording of this error message depends on the network protocol and server you're using, but the idea is the same in all cases.)"
msgstr ""

#. Tag: para
#: ch02-basic-usage.xml:1141
#, no-c-format
msgid "At this point, you need to run <command>svn update</command>, deal with any merges or conflicts that result, and attempt your commit again."
msgstr "このような場合は、<command>svn update</command>を実行し その結果のマージや衝突を解消し、もう一度コミットしてください。"

#. Tag: para
#: ch02-basic-usage.xml:1145
#, fuzzy, no-c-format
msgid "That covers the basic work cycle for using Subversion. There are many other features in Subversion that you can use to manage your repository and working copy, but most of your day-to-day use of Subversion will involve only the commands that we've discussed so far in this chapter. We will, however, cover a few more commands that you'll use fairly often."
msgstr "これでSubversionを使う基本的な作業サイクルを説明しました。 Subversionにはこのほかにもたくさんのリポジトリや作業コピーを管理するための 機能がありますが、この章でいままで説明してきたコマンドだけを使っても、 非常に多くのことができます。"

#. Tag: title
#: ch02-basic-usage.xml:1161
#, no-c-format
msgid "Examining History"
msgstr "履歴の確認"

#. Tag: para
#: ch02-basic-usage.xml:1163
#, no-c-format
msgid "Your Subversion repository is like a time machine. It keeps a record of every change ever committed, and allows you to explore this history by examining previous versions of files and directories as well as the metadata that accompanies them. With a single Subversion command, you can check out the repository (or restore an existing working copy) exactly as it was at any date or revision number in the past. However, sometimes you just want to <emphasis>peer into</emphasis> the past instead of <emphasis>going into</emphasis> the past."
msgstr "リポジトリはタイムマシンのようなところが あります。いままでコミットされたすべての変更を記録し、 ファイルやディレクトリ、それに付随したメタデータの以前のバージョン を見ることによって履歴を調べることができます。一つのSubversion コマンドを使って、過去の任意の日付やリビジョン番号時のリポジトリ の状態をチェックアウト(あるいは既にある作業コピーの復元)すること ができます。しかし、<emphasis>過去に戻る</emphasis> のではなく、 単に<emphasis>過去がどうだったかをちょっと覗いて</emphasis> みたい こともよくあります。"

#. Tag: para
#: ch02-basic-usage.xml:1173
#, no-c-format
msgid "There are several commands that can provide you with historical data from the repository:"
msgstr "リポジトリからの履歴データをあつかうためのコマンドがいくつか あります:"

#. Tag: para
#: ch02-basic-usage.xml:1181
#, no-c-format
msgid "Shows you broad information: log messages with date and author information attached to revisions, and which paths changed in each revision."
msgstr "全般的な情報を表示します: リビジョンに付随した日付、修正者つきの ログメッセージとそれぞれのリビジョンでどのパスが変更されたかを表示します。"

#. Tag: para
#: ch02-basic-usage.xml:1190
#, no-c-format
msgid "Shows line-level details of a particular change."
msgstr "特定の変更の詳細を行単位で表示する"

#. Tag: para
#: ch02-basic-usage.xml:1197
#, no-c-format
msgid "Retrieves a file as it existed in a particular revision number and display it on your screen."
msgstr "特定のリビジョン番号時点でのファイルを抽出し 画面に表示します。"

#. Tag: para
#: ch02-basic-usage.xml:1205
#, no-c-format
msgid "Displays the files in a directory for any given revision."
msgstr "任意の指定したリビジョンのファイルやディレクトリを一覧 表示します。"

#. Tag: title
#: ch02-basic-usage.xml:1215
#, no-c-format
msgid "Generating a list of historical changes"
msgstr "変更履歴のリストを生成"

#. Tag: para
#: ch02-basic-usage.xml:1217
#, no-c-format
msgid "To find information about the history of a file or directory, use the <command>svn log</command> command. <command>svn log</command> will provide you with a record of who made changes to a file or directory, at what revision it changed, the time and date of that revision, and, if it was provided, the log message that accompanied the commit."
msgstr "ファイルやディレクトリの履歴に関する情報を見たいときは <command>svn log</command>コマンドを使ってください。 <command>svn log</command> は、あるファイルやディレクトリを 誰が変更したかの記録を表示し、どのリビジョンでそれが変更され たか、そのリビジョンの時刻と日付、さらにもし存在すれば、 コミットに付随したログメッセージを表示します。"

#. Tag: screen
#: ch02-basic-usage.xml:1225
#, no-c-format
msgid ""
"$ svn log\n"
"------------------------------------------------------------------------\n"
"r3 | sally | Mon, 15 Jul 2002 18:03:46 -0500 | 1 line\n"
"\n"
"Added include lines and corrected # of cheese slices.\n"
"------------------------------------------------------------------------\n"
"r2 | harry | Mon, 15 Jul 2002 17:47:57 -0500 | 1 line\n"
"\n"
"Added main() methods.\n"
"------------------------------------------------------------------------\n"
"r1 | sally | Mon, 15 Jul 2002 17:40:08 -0500 | 1 line\n"
"\n"
"Initial import\n"
"------------------------------------------------------------------------"
msgstr ""
"$ svn log\n"
"------------------------------------------------------------------------\n"
"r3 | sally | Mon, 15 Jul 2002 18:03:46 -0500 | 1 line\n"
"\n"
"Added include lines and corrected # of cheese slices.\n"
"------------------------------------------------------------------------\n"
"r2 | harry | Mon, 15 Jul 2002 17:47:57 -0500 | 1 line\n"
"\n"
"Added main() methods.\n"
"------------------------------------------------------------------------\n"
"r1 | sally | Mon, 15 Jul 2002 17:40:08 -0500 | 1 lines\n"
"\n"
"Initial import\n"
"------------------------------------------------------------------------"

#. Tag: para
#: ch02-basic-usage.xml:1227
#, no-c-format
msgid "Note that the log messages are printed in <emphasis>reverse chronological order</emphasis> by default. If you wish to see a different range of revisions in a particular order, or just a single revision, pass the <option>--revision (-r)</option> option:"
msgstr "ログメッセージはデフォルトでは <emphasis>時間と逆の順序で</emphasis> 表示されることに注意して ください。別の順序で、あるリビジョン範囲を見たい場合や、一つの リビジョンを見たいときには、<option>--revision</option> (<option>-r</option>)スイッチを渡します:"

#. Tag: screen
#: ch02-basic-usage.xml:1233
#, fuzzy, no-c-format
msgid ""
"$ svn log -r 5:19    # shows logs 5 through 19 in chronological order\n"
"\n"
"$ svn log -r 19:5    # shows logs 5 through 19 in reverse order\n"
"\n"
"$ svn log -r 8       # shows log for revision 8"
msgstr ""
"$ svn log --revision 5:19    # shows logs 5 through 19 in chronological order\n"
"\n"
"$ svn log -r 19:5            # shows logs 5 through 19 in reverse order\n"
"\n"
"$ svn log -r 8               # shows log for revision 8"

#. Tag: para
#: ch02-basic-usage.xml:1235
#, no-c-format
msgid "You can also examine the log history of a single file or directory. For example:"
msgstr "一つのファイルやディレクトリのログ履歴を見ることもできます。 たとえば:"

#. Tag: screen
#: ch02-basic-usage.xml:1238
#, no-c-format
msgid ""
"$ svn log foo.c\n"
"&hellip;\n"
"$ svn log http://foo.com/svn/trunk/code/foo.c\n"
"&hellip;"
msgstr ""
"$ svn log foo.c\n"
"&hellip;\n"
"$ svn log http://foo.com/svn/trunk/code/foo.c\n"
"&hellip;"

#. Tag: para
#: ch02-basic-usage.xml:1240
#, no-c-format
msgid "These will display log messages <emphasis>only</emphasis> for those revisions in which the working file (or URL) changed."
msgstr "これは作業ファイルが(またはURLが)変更されたリビジョン <emphasis>だけを</emphasis>表示します。"

#. Tag: para
#: ch02-basic-usage.xml:1244
#, no-c-format
msgid "If you want even more information about a file or directory, <command>svn log</command> also takes a <option>--verbose (-v)</option> option. Because Subversion allows you to move and copy files and directories, it is important to be able to track path changes in the filesystem, so in verbose mode, <command>svn log</command> will include a list of changed paths in a revision in its output:"
msgstr "もしファイルやディレクトリについてもっと詳細な情報がほしいときには、<command>svn log</command> は <option>--verbose</option> (<option>-v</option>) スイッチを とることもできます。Subversionはファイルやディレクトリの 移動やコピーもできるので、ファイルシステム中のパスの 変化を追えることは重要です。冗長モードでは、 <command>svn log</command> は出力リビジョンの中に 変更されたパス情報の一覧も含めます:"

#. Tag: screen
#: ch02-basic-usage.xml:1252
#, no-c-format
msgid ""
"$ svn log -r 8 -v\n"
"------------------------------------------------------------------------\n"
"r8 | sally | 2002-07-14 08:15:29 -0500 | 1 line\n"
"Changed paths:\n"
"M /trunk/code/foo.c\n"
"M /trunk/code/bar.h\n"
"A /trunk/code/doc/README\n"
"\n"
"Frozzled the sub-space winch.\n"
"\n"
"------------------------------------------------------------------------"
msgstr ""
"$ svn log -r 8 -v\n"
"------------------------------------------------------------------------\n"
"r8 | sally | 2002-07-14 08:15:29 -0500 | 1 line\n"
"Changed paths:\n"
"M /trunk/code/foo.c\n"
"M /trunk/code/bar.h\n"
"A /trunk/code/doc/README\n"
"\n"
"Frozzled the sub-space winch.\n"
"\n"
"------------------------------------------------------------------------"

#. Tag: para
#: ch02-basic-usage.xml:1254
#, no-c-format
msgid "<command>svn log</command> also takes a <option>--quiet</option> (<option>-q</option>) option, which suppresses the body of the log message. When combined with <option>--verbose</option>, it gives just the names of the changed files."
msgstr "<command>svn log</command> は <option>--quiet</option> (<option>-q</option>) スイッチも指定でき、これはログメッセージの本文を 表示しません。<option>--verbose</option>と組み合わせて指定すると 変更したファイルの名前だけを表示します。"

#. Tag: title
#: ch02-basic-usage.xml:1261
#, no-c-format
msgid "Why Does <command>svn log</command> Give Me an Empty Response?"
msgstr "なぜ、<command>svn log</command> の出力が何も ないの?"

#. Tag: para
#: ch02-basic-usage.xml:1264
#, no-c-format
msgid "After working with Subversion for a bit, most users will come across something like this:"
msgstr "Subversionを使い始めてすぐのとき、たいていのユーザは 以下のようなことに出くわすでしょう:"

#. Tag: screen
#: ch02-basic-usage.xml:1267
#, no-c-format
msgid ""
"$ svn log -r 2\n"
"------------------------------------------------------------------------\n"
"$"
msgstr ""
"$ svn log -r 2\n"
"------------------------------------------------------------------------\n"
"$"

#. Tag: para
#: ch02-basic-usage.xml:1269
#, no-c-format
msgid "At first glance, this seems like an error. But recall that while revisions are repository-wide, <command>svn log</command> operates on a path in the repository. If you supply no path, Subversion uses the current working directory as the default target. As a result, if you're operating in a subdirectory of your working copy and attempt to see the log of a revision in which neither that directory nor any of its children was changed, Subversion will show you an empty log. If you want to see what changed in that revision, try pointing <command>svn log</command> directly at the top-most URL of your repository, as in <command>svn log -r 2 http://svn.collab.net/repos/svn</command>."
msgstr "一見エラーのように見えますが、リビジョンがリポジトリ全体に対する ものであるのに対して<command>svn log</command>はリポジトリ中のパスに対して 働くものであるのに注意してください。パスを指定しなければ Subversion は デフォルトの対象として現在の作業ディレクトリを使います。結果として 自分の作業コピーのサブディレクトリで実行し、そのディレクトリにもその 子供のディレクトリ中でも変更がなかったリビジョンに対してのログを見ようと すると、Subversion は空のログを表示するでしょう。そのリビジョンでの変更点 を見たいのならリポジトリの最上位の URL を直接指定して<command>svn log</command> を実行しましょう。こんな感じです。<command>svn log -r 2 http://svn.collab.net/repos/svn</command>。"

#. Tag: title
#: ch02-basic-usage.xml:1288
#, fuzzy, no-c-format
msgid "Examining the details of historical changes"
msgstr "ローカルの変更内容の確認"

#. Tag: para
#: ch02-basic-usage.xml:1290
#, no-c-format
msgid "We've already seen <command>svn diff</command> before&mdash;it displays file differences in unified diff format; it was used to show the local modifications made to our working copy before committing to the repository."
msgstr "<command>svn diff</command>は既に見てきました&mdash; unified diff形式でファイルの差分を表示するのでした。 リポジトリにコミットする前に作業コピーにされたローカル 修正点を表示するのに使えます。"

#. Tag: para
#: ch02-basic-usage.xml:1295
#, no-c-format
msgid "In fact, it turns out that there are <emphasis>three</emphasis> distinct uses of <command>svn diff</command>:"
msgstr "実際には<command>svn diff</command>には異なる <emphasis>三種類</emphasis> の使い方があります:"

#. Tag: para
#: ch02-basic-usage.xml:1302
#, no-c-format
msgid "Examining local changes"
msgstr "ローカルの変更内容の確認"

#. Tag: para
#: ch02-basic-usage.xml:1306
#, no-c-format
msgid "Comparing your working copy to the repository"
msgstr "作業コピーとリポジトリの比較"

#. Tag: para
#: ch02-basic-usage.xml:1310
#, no-c-format
msgid "Comparing repository to repository"
msgstr "リポジトリとリポジトリの比較"

#. Tag: title
#: ch02-basic-usage.xml:1317
#, no-c-format
msgid "Examining Local Changes"
msgstr "ローカルの変更内容の確認"

#. Tag: para
#: ch02-basic-usage.xml:1319
#, fuzzy, no-c-format
msgid "As we've seen, invoking <command>svn diff</command> with no options will compare your working files to the cached <quote>pristine</quote> copies in the <filename>.svn</filename> area:"
msgstr "見てきたように、スイッチなしで<command>svn diff</command> を 実行すると、作業コピーの内容と、<filename>.svn</filename> 領域にキャッシュされている<quote>修正元リビジョン</quote> のコピー とを比較します:"

#. Tag: screen
#: ch02-basic-usage.xml:1324
#, no-c-format
msgid ""
"$ svn diff\n"
"Index: rules.txt\n"
"===================================================================\n"
"--- rules.txt        (revision 3)\n"
"+++ rules.txt        (working copy)\n"
"@@ -1,4 +1,5 @@\n"
" Be kind to others\n"
" Freedom = Responsibility\n"
" Everything in moderation\n"
"-Chew with your mouth open\n"
"+Chew with your mouth closed\n"
"+Listen when others are speaking\n"
"$"
msgstr ""
"$ svn diff\n"
"Index: rules.txt\n"
"===================================================================\n"
"--- rules.txt        (revision 3)\n"
"+++ rules.txt        (working copy)\n"
"@@ -1,4 +1,5 @@\n"
" Be kind to others\n"
" Freedom = Responsibility\n"
" Everything in moderation\n"
"-Chew with your mouth open\n"
"+Chew with your mouth closed\n"
"+Listen when others are speaking\n"
"$"

#. Tag: title
#: ch02-basic-usage.xml:1330
#, no-c-format
msgid "Comparing Working Copy to Repository"
msgstr "作業コピーとリポジトリの比較"

#. Tag: para
#: ch02-basic-usage.xml:1332
#, no-c-format
msgid "If a single <option>--revision</option> (<option>-r</option>) number is passed, then your working copy is compared to the specified revision in the repository."
msgstr "<option>--revision</option>(<option>-r</option>) を一つ 指定すると、作業コピーはリポジトリの特定のリビジョンと比較 されます。"

#. Tag: screen
#: ch02-basic-usage.xml:1337
#, fuzzy, no-c-format
msgid ""
"$ svn diff -r 3 rules.txt\n"
"Index: rules.txt\n"
"===================================================================\n"
"--- rules.txt        (revision 3)\n"
"+++ rules.txt        (working copy)\n"
"@@ -1,4 +1,5 @@\n"
" Be kind to others\n"
" Freedom = Responsibility\n"
" Everything in moderation\n"
"-Chew with your mouth open\n"
"+Chew with your mouth closed\n"
"+Listen when others are speaking\n"
"$"
msgstr ""
"$ svn diff --revision 3 rules.txt \n"
"Index: rules.txt\n"
"===================================================================\n"
"--- rules.txt        (revision 3)\n"
"+++ rules.txt        (working copy)\n"
"@@ -1,4 +1,5 @@\n"
" Be kind to others\n"
" Freedom = Responsibility\n"
" Everything in moderation\n"
"-Chew with your mouth open\n"
"+Chew with your mouth closed\n"
"+Listen when others are speaking\n"
"$"

#. Tag: title
#: ch02-basic-usage.xml:1343
#, no-c-format
msgid "Comparing Repository to Repository"
msgstr "リポジトリとリポジトリの比較"

#. Tag: para
#: ch02-basic-usage.xml:1345
#, fuzzy, no-c-format
msgid "If two revision numbers, separated by a colon, are passed via <option>--revision (-r)</option>, then the two revisions are directly compared."
msgstr "<option>--revision</option>(<option>-r</option>)の引数と してリビジョン番号を二つ、コロンで区切って指定すると 二つのリビジョンが直接比較されます。"

#. Tag: screen
#: ch02-basic-usage.xml:1349
#, fuzzy, no-c-format
msgid ""
"$ svn diff -r 2:3 rules.txt\n"
"Index: rules.txt\n"
"===================================================================\n"
"--- rules.txt        (revision 2)\n"
"+++ rules.txt        (revision 3)\n"
"@@ -1,4 +1,4 @@\n"
" Be kind to others\n"
"-Freedom = Chocolate Ice Cream\n"
"+Freedom = Responsibility\n"
" Everything in moderation\n"
" Chew with your mouth open\n"
"$"
msgstr ""
"$ svn diff --revision 2:3 rules.txt \n"
"Index: rules.txt\n"
"===================================================================\n"
"--- rules.txt        (revision 2)\n"
"+++ rules.txt        (revision 3)\n"
"@@ -1,4 +1,4 @@\n"
" Be kind to others\n"
"-Freedom = Chocolate Ice Cream\n"
"+Freedom = Responsibility\n"
" Everything in moderation\n"
" Chew with your mouth open \n"
"$"

#. Tag: para
#: ch02-basic-usage.xml:1351
#, no-c-format
msgid "A more convenient way of comparing a revision to the previous revision is to use the <option>--change (-c)</option>:"
msgstr ""

#. Tag: screen
#: ch02-basic-usage.xml:1355
#, fuzzy, no-c-format
msgid ""
"$ svn diff -c 3 rules.txt\n"
"Index: rules.txt\n"
"===================================================================\n"
"--- rules.txt        (revision 2)\n"
"+++ rules.txt        (revision 3)\n"
"@@ -1,4 +1,4 @@\n"
" Be kind to others\n"
"-Freedom = Chocolate Ice Cream\n"
"+Freedom = Responsibility\n"
" Everything in moderation\n"
" Chew with your mouth open\n"
"$"
msgstr ""
"$ svn diff --revision 2:3 rules.txt \n"
"Index: rules.txt\n"
"===================================================================\n"
"--- rules.txt        (revision 2)\n"
"+++ rules.txt        (revision 3)\n"
"@@ -1,4 +1,4 @@\n"
" Be kind to others\n"
"-Freedom = Chocolate Ice Cream\n"
"+Freedom = Responsibility\n"
" Everything in moderation\n"
" Chew with your mouth open \n"
"$"

#. Tag: para
#: ch02-basic-usage.xml:1357
#, no-c-format
msgid "Lastly, you can compare repository revisions even when you don't have a working copy on your local machine, just by including the appropriate URL on the command line:"
msgstr ""

#. Tag: screen
#: ch02-basic-usage.xml:1361
#, no-c-format
msgid ""
"$ svn diff -c 5 http://svn.example.com/repos/example/trunk/text/rules.txt\n"
"&hellip;\n"
"$"
msgstr ""
"$ svn diff -c 5 http://svn.example.com/repos/example/trunk/text/rules.txt\n"
"&hellip;\n"
"$"

#. Tag: title
#: ch02-basic-usage.xml:1369
#, fuzzy, no-c-format
msgid "Browsing the repository"
msgstr "リポジトリ層の利用"

#. Tag: para
#: ch02-basic-usage.xml:1371
#, no-c-format
msgid "Using <command>svn cat</command> and <command>svn list</command>, you can view various revisions of files and directories without changing the working revision of your working copy. In fact, you don't even need a working copy to use either one."
msgstr ""

#. Tag: para
#: ch02-basic-usage.xml:1382
#, no-c-format
msgid "If you want to examine an earlier version of a file and not necessarily the differences between two files, you can use <command>svn cat</command>:"
msgstr "もし、以前のバージョンのファイルを見たいが、二つのファイル間の違い を見る必要はないような場合には、 <command>svn cat</command>が使えます:"

#. Tag: screen
#: ch02-basic-usage.xml:1386
#, fuzzy, no-c-format
msgid ""
"$ svn cat -r 2 rules.txt\n"
"Be kind to others\n"
"Freedom = Chocolate Ice Cream\n"
"Everything in moderation\n"
"Chew with your mouth open\n"
"$"
msgstr ""
"$ svn cat --revision 2 rules.txt \n"
"Be kind to others\n"
"Freedom = Chocolate Ice Cream\n"
"Everything in moderation\n"
"Chew with your mouth open\n"
"$"

#. Tag: para
#: ch02-basic-usage.xml:1388
#, no-c-format
msgid "You can also redirect the output directly into a file:"
msgstr "直接ファイルに出力することもできます:"

#. Tag: screen
#: ch02-basic-usage.xml:1391
#, fuzzy, no-c-format
msgid ""
"$ svn cat -r 2 rules.txt &gt; rules.txt.v2\n"
"$"
msgstr ""
"$ svn cat --revision 2 rules.txt &gt; rules.txt.v2\n"
"$"

#. Tag: para
#: ch02-basic-usage.xml:1399
#, no-c-format
msgid "The <command>svn list</command> command shows you what files are in a repository directory without actually downloading the files to your local machine:"
msgstr "<command>svn list</command> コマンドはローカルマシンに 実際にファイルをダウンロードすることなしに、リポジトリ にどんなディレクトリがあるかを表示します:"

#. Tag: screen
#: ch02-basic-usage.xml:1403
#, no-c-format
msgid ""
"$ svn list http://svn.collab.net/repos/svn\n"
"README\n"
"branches/\n"
"clients/\n"
"tags/\n"
"trunk/"
msgstr ""
"$ svn list http://svn.collab.net/repos/svn\n"
"README\n"
"branches/\n"
"clients/\n"
"tags/\n"
"trunk/"

#. Tag: para
#: ch02-basic-usage.xml:1405
#, fuzzy, no-c-format
msgid "If you want a more detailed listing, pass the <option>--verbose (-v)</option> flag to get output like this:"
msgstr "もっと詳しい表示がほしいときには <option>--verbose</option> (<option>-v</option>) フラグを 指定します。出力は以下のようになります:"

#. Tag: screen
#: ch02-basic-usage.xml:1409
#, fuzzy, no-c-format
msgid ""
"$ svn list -v http://svn.collab.net/repos/svn\n"
"  20620 harry            1084 Jul 13  2006 README\n"
"  23339 harry                 Feb 04 01:40 branches/\n"
"  21282 sally                 Aug 27 09:41 developer-resources/\n"
"  23198 harry                 Jan 23 17:17 tags/\n"
"  23351 sally                 Feb 05 13:26 trunk/"
msgstr ""
"$ svn list --verbose http://svn.collab.net/repos/svn\n"
"  2755 harry          1331 Jul 28 02:07 README\n"
"  2773 sally               Jul 29 15:07 branches/\n"
"  2769 sally               Jul 29 12:07 clients/\n"
"  2698 harry               Jul 24 18:07 tags/\n"
"  2785 sally               Jul 29 19:07 trunk/"

#. Tag: para
#: ch02-basic-usage.xml:1411
#, no-c-format
msgid "The columns tell you the revision at which the file or directory was last modified, the user who modified it, the size if it is a file, the date it was last modified, and the item's name."
msgstr "それぞれの項目の意味は、左から順に、ファイルまたはディレクトリが最後に 更新されたリビジョン、修正した人、ファイルであればそのサイズ、日付、そして そのアイテムの名前になります。"

#. Tag: para
#: ch02-basic-usage.xml:1417
#, no-c-format
msgid "The <command>svn list</command> with no arguments defaults to the <emphasis>repository URL</emphasis> of the current working directory, <emphasis>not</emphasis> the local working copy directory. After all, if you wanted a listing of your local directory, you could use just plain <command>ls</command> (or any reasonable non-Unixy equivalent)."
msgstr ""

#. Tag: title
#: ch02-basic-usage.xml:1432
#, fuzzy, no-c-format
msgid "Fetching older repository snapshots"
msgstr "リポジトリレイアウトの開始"

#. Tag: para
#: ch02-basic-usage.xml:1434
#, fuzzy, no-c-format
msgid "In addition to all of the above commands, you can use <command>svn update</command> and <command>svn checkout</command> with the <option>--revision</option> option to take an entire working copy <quote>back in time</quote> <footnote><para>See? We told you that Subversion was a time machine.</para></footnote>:"
msgstr "いままで述べてきたすべてのコマンドに加えて <command>svn update</command> と <command>svn checkout</command> を、<option>--revision</option> 付きで実行することも できます。これは作業コピー全体を<quote>過去のある時点</quote> に戻します。 <footnote><para>おわかりでしょうか? これが Subversionが タイムマシンだと言った意味です。 </para></footnote>:"

#. Tag: screen
#: ch02-basic-usage.xml:1441
#, fuzzy, no-c-format
msgid ""
"$ svn checkout -r 1729 # Checks out a new working copy at r1729\n"
"&hellip;\n"
"$ svn update -r 1729 # Updates an existing working copy to r1729\n"
"&hellip;"
msgstr ""
"$ svn checkout --revision 1729 # Checks out a new working copy at r1729\n"
"&hellip;\n"
"$ svn update --revision 1729 # Updates an existing working copy to r1729\n"
"&hellip;"

#. Tag: para
#: ch02-basic-usage.xml:1444
#, no-c-format
msgid "Many Subversion newcomers attempt to use the above <command>svn update</command> example to <quote>undo</quote> committed changes, but this won't work as you can't commit changes that you obtain from backdating a working copy if the changed files have newer revisions. See <xref linkend=\"svn.branchmerge.commonuses.resurrect\"/> for a description of how to <quote>undo</quote> a commit."
msgstr ""

#. Tag: para
#: ch02-basic-usage.xml:1453
#, no-c-format
msgid "Lastly, if you're building a release and wish to bundle up your files from Subversion but don't want those pesky <filename>.svn</filename> directories in the way, then you can use <command>svn export</command> to create a local copy of all or part of your repository sans <filename>.svn</filename> directories. As with <command>svn update</command> and <command>svn checkout</command>, you can also pass the <option>--revision</option> option to <command>svn export</command>:"
msgstr ""

#. Tag: screen
#: ch02-basic-usage.xml:1464
#, no-c-format
msgid ""
"$ svn export http://svn.example.com/svn/repos1 # Exports latest revision\n"
"&hellip;\n"
"$ svn export http://svn.example.com/svn/repos1 -r 1729\n"
"# Exports revision r1729\n"
"&hellip;"
msgstr ""

#. Tag: title
#: ch02-basic-usage.xml:1475
#, no-c-format
msgid "Sometimes You Just Need to Clean Up"
msgstr ""

#. Tag: para
#: ch02-basic-usage.xml:1477
#, fuzzy, no-c-format
msgid "When Subversion modifies your working copy (or any information within <filename>.svn</filename>), it tries to do so as safely as possible. Before changing the working copy, Subversion writes its intentions to a log file. Next it executes the commands in the log file to apply the requested change, holding a lock on the relevant part of the working copy while it works&mdash;to prevent other Subversion clients from accessing the working copy in mid-change. Finally, Subversion removes the log file. Architecturally, this is similar to a journaled filesystem. If a Subversion operation is interrupted (if the process is killed, or if the machine crashes, for example), the log files remain on disk. By re-executing the log files, Subversion can complete the previously started operation, and your working copy can get itself back into a consistent state."
msgstr "Subversionが作業コピー(や<filename>.svn</filename>に ある情報)を修正するときには、できるだけ安全にやろうと します。 作業コピーの内容を変更する前にSubversionはまず変更手順をログファイル に書きます。次に実際に変更を適用するためにログファイルの中の コマンドを実行していきます。最後にSubversionはログファイルを削除します。 プログラムの構成という意味では、これはジャーナル化ファイルシステムと よく似ています。 Subversionの操作が中断されると(プロセスが異常終了 したり、マシンがクラッシュしたり、といった場合)ログファイルは ディスクに残ります。ログファイルを再実行することでSubversionは 以前に開始された操作を完結することができ、作業コピーを正常で 一貫した状態に戻すことができます。"

#. Tag: para
#: ch02-basic-usage.xml:1493
#, no-c-format
msgid "And this is exactly what <command>svn cleanup</command> does: it searches your working copy and runs any leftover logs, removing working copy locks in the process. If Subversion ever tells you that some part of your working copy is <quote>locked</quote>, then this is the command that you should run. Also, <command>svn status</command> will display an <literal>L</literal> next to locked items:"
msgstr "<command>svn cleanup</command>がやるのは、まさにこのことです。 作業コピーを探して、残ったログを実行し、プロセスのロックを 取り除きます。Subversionに作業コピーのどこかが<quote>ロック</quote> されていると言われたときには、このコマンドを実行してください。 同様に<command>svn status</command> はロックされているアイテム の隣に <literal>L</literal> を表示してそのことを示します:"

#. Tag: screen
#: ch02-basic-usage.xml:1501
#, fuzzy, no-c-format
msgid ""
"$ svn status\n"
"  L    somedir\n"
"M      somedir/foo.c\n"
"\n"
"$ svn cleanup\n"
"$ svn status\n"
"M      somedir/foo.c"
msgstr ""
"$ svn status\n"
"  L    somedir\n"
"M      somedir/foo.c \n"
"\n"
"$ svn cleanup\n"
"$ svn status\n"
"M      somedir/foo.c"

#. Tag: para
#: ch02-basic-usage.xml:1503
#, no-c-format
msgid "Don't confuse these working copy locks with the ordinary locks that Subversion users create when using the <quote>lock-modify-unlock</quote> model of concurrent version control; see <xref linkend=\"svn.advanced.locking.meanings\"/> for clarification."
msgstr "Don't confuse these working copy locks with the ordinary locks that Subversion users create when using the <quote>lock-modify-unlock</quote> model of concurrent version control; see <xref linkend=\"svn.advanced.locking.meanings\"/> for clarification."

#. Tag: para
#: ch02-basic-usage.xml:1518
#, no-c-format
msgid "Now we've covered most of the Subversion client commands. Notable exceptions are those dealing with branching and merging (see <xref linkend=\"svn.branchmerge\"/>) and properties (see <xref linkend=\"svn.advanced.props\"/>). However, you may want to take a moment to skim through <xref linkend=\"svn.ref\"/> to get an idea of all the many different commands that Subversion has&mdash;and how you can use them to make your work easier."
msgstr "これで、Subversionクライアントのコマンドの大部分について 説明しました。触れなかったもののうちで重要なのはブランチと マージ (<xref linkend=\"svn.branchmerge\"/>参照) 、そして属性です (<xref linkend=\"svn.advanced.props\"/>参照)。 Subversionが持っているたくさんのコマンドの感じをつかむには <xref linkend=\"svn.ref\"/> をざっと見るのもいいかも知れません &mdash;自分の仕事がどれだけ楽になるか、わかるでしょう。"

#. Tag: title
#: ch03-advanced-topics.xml:2
#, no-c-format
msgid "Advanced Topics"
msgstr "より進んだ話題"

#. Tag: para
#: ch03-advanced-topics.xml:4
#, fuzzy, no-c-format
msgid "If you've been reading this book chapter by chapter, from start to finish, you should by now have acquired enough knowledge to use the Subversion client to perform the most common version control operations. You understand how to check out a working copy from a Subversion repository. You are comfortable with submitting and receiving changes using the <command>svn commit</command> and <command>svn update</command> functions. You've probably even developed a reflex which causes you to run the <command>svn status</command> command almost unconsciously. For all intents and purposes, you are ready to use Subversion in a typical environment."
msgstr "もし、この本を章ごとに、最初から最後まで読んでいるのなら、 もうあなたは、ほとんどのバージョン管理操作を実行するために Subversionクライアントを使うための十分な知識を持っているはずです。 どのようにして、Subversionリポジトリから作業コピーをチェックアウト するかを理解しているはずです。<command>svn commit</command> や <command>svn update</command>を使った変更点の送受信になじんでいる はずです。そして多分、ほとんど無意識に<command>svn status</command> を実行してしまうような反射神経さえ身についているかも知れません。 どんな意図や目的に対しても、典型的な環境でSubversionを使う用意が できているはずです。"

#. Tag: para
#: ch03-advanced-topics.xml:16
#, fuzzy, no-c-format
msgid "But the Subversion feature set doesn't stop at <quote>common version control operations</quote>. It has other bits of functionality besides just communicating file and directory changes to and from a central repository."
msgstr "しかし、Subversionの機能セットは、<quote>普通のバージョン管理操作</quote> で終わるわけではありません。"

#. Tag: para
#: ch03-advanced-topics.xml:21
#, fuzzy, no-c-format
msgid "This chapter highlights some of Subversion's features that, while important, aren't part of the typical user's daily routine. It assumes that you are familiar with Subversion's basic file and directory versioning capabilities. If you aren't, you'll want to first read <xref linkend=\"svn.basic\"/> and <xref linkend=\"svn.tour\"/>. Once you've mastered those basics and consumed this chapter, you'll be a Subversion power-user!"
msgstr "この章を読む前に、Subversionで基本的なファイルとディレクトリに関する バージョン管理の能力についてなじんでいるべきです。もしまだそれについて は読んでいないか、復習が必要なら、<xref linkend=\"svn.basic\"/> と <xref linkend=\"svn.tour\"/> を読むことをお勧めします。 一度基本をマスターしてからこの章を消化すれば、あなたはもうSubversion のパワーユーザです。"

#. Tag: title
#: ch03-advanced-topics.xml:34
#, fuzzy, no-c-format
msgid "Revision Specifiers"
msgstr "リビジョン番号"

#. Tag: para
#: ch03-advanced-topics.xml:36
#, no-c-format
msgid "As you saw in <xref linkend=\"svn.basic.in-action.revs\"/>, revision numbers in Subversion are pretty straightforward&mdash;integers that keep getting larger as you commit more changes to your versioned data. Still, it doesn't take long before you can no longer remember exactly what happened in each and every revision. Fortunately, the typical Subversion workflow doesn't often demand that you supply arbitrary revisions to the Subversion operations you perform. For operations that <emphasis>do</emphasis> require a revision specifier, you generally supply a revision number that you saw in a commit email, in the output of some other Subversion operation, or in some other context that would give meaning to that particular number."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:50
#, no-c-format
msgid "But occasionally, you need to pinpoint a moment in time for which you don't already have a revision number memorized or handy. So besides the integer revision numbers, <command>svn</command> allows as input some additional forms of revision specifiers&mdash;<firstterm>revision keywords</firstterm>, and revision dates."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:58
#, no-c-format
msgid "The various forms of Subversion revision specifiers can be mixed and matched when used to specify revision ranges. For example, you can use <option>-r <replaceable>REV1</replaceable>:<replaceable>REV2</replaceable></option> where <replaceable>REV1</replaceable> is a revision keyword and <replaceable>REV2</replaceable> is a revision number, or where <replaceable>REV1</replaceable> is a date and <replaceable>REV2</replaceable> is a revision keyword, and so on. The individual revision specifiers are independently evaluated, so you can put whatever you want on the opposite sides of that colon."
msgstr ""

#. Tag: title
#: ch03-advanced-topics.xml:73
#, no-c-format
msgid "Revision Keywords"
msgstr "リビジョンキーワード"

#. Tag: primary
#: ch03-advanced-topics.xml:76
#: ch03-advanced-topics.xml:158
#, fuzzy, no-c-format
msgid "revisions"
msgstr "リビジョン"

#. Tag: secondary
#: ch03-advanced-topics.xml:77
#, fuzzy, no-c-format
msgid "revision keywords"
msgstr "リビジョンキーワード"

#. Tag: primary
#: ch03-advanced-topics.xml:80
#, no-c-format
msgid "<primary>HEAD</primary>"
msgstr "<primary>HEAD</primary>"

#. Tag: primary
#: ch03-advanced-topics.xml:83
#, no-c-format
msgid "<primary>BASE</primary>"
msgstr "<primary>BASE</primary>"

#. Tag: primary
#: ch03-advanced-topics.xml:86
#, no-c-format
msgid "<primary>COMMITTED</primary>"
msgstr "<primary>COMMITTED</primary>"

#. Tag: primary
#: ch03-advanced-topics.xml:89
#, no-c-format
msgid "<primary>PREV</primary>"
msgstr "<primary>PREV</primary>"

#. Tag: para
#: ch03-advanced-topics.xml:92
#, fuzzy, no-c-format
msgid "The Subversion client understands a number of revision keywords. These keywords can be used instead of integer arguments to the <option>--revision (-r)</option> switch, and are resolved into specific revision numbers by Subversion:"
msgstr "Subversionクライアントはさまざまな <firstterm>リビジョンキーワード</firstterm>を理解できます。 このようなキーワードは <option>--revision</option>スイッチの整数引数のかわりに 使うことができ、Subversionによって、特定のリビジョン番号に変換されます。:"

#. Tag: term
#: ch03-advanced-topics.xml:101
#, no-c-format
msgid "<term>HEAD</term>"
msgstr "<term>HEAD</term>"

#. Tag: para
#: ch03-advanced-topics.xml:103
#, no-c-format
msgid "The latest (or <quote>youngest</quote>) revision in the repository."
msgstr "リポジトリにある最新のリビジョンです。"

#. Tag: term
#: ch03-advanced-topics.xml:109
#, no-c-format
msgid "<term>BASE</term>"
msgstr "<term>BASE</term>"

#. Tag: para
#: ch03-advanced-topics.xml:111
#, no-c-format
msgid "The revision number of an item in a working copy. If the item has been locally modified, the <quote>BASE version</quote> refers to the way the item appears without those local modifications."
msgstr "作業コピーにあるファイル、ディレクトリの、<quote>修正元</quote>リビジョン です。"

#. Tag: term
#: ch03-advanced-topics.xml:119
#, no-c-format
msgid "<term>COMMITTED</term>"
msgstr "<term>COMMITTED</term>"

#. Tag: para
#: ch03-advanced-topics.xml:121
#, no-c-format
msgid "The most recent revision prior to, or equal to, <literal>BASE</literal>, in which an item changed."
msgstr "ファイル、ディレクトリが変更された<literal>BASE</literal>以前の(または <literal>BASE</literal>リビジョンを含む)最後のリビジョンです。"

#. Tag: term
#: ch03-advanced-topics.xml:127
#, no-c-format
msgid "<term>PREV</term>"
msgstr "<term>PREV</term>"

#. Tag: para
#: ch03-advanced-topics.xml:129
#, fuzzy, no-c-format
msgid "The revision immediately <emphasis>before</emphasis> the last revision in which an item changed. Technically, this boils down to <literal>COMMITTED</literal>-1."
msgstr "変更があった最後のリビジョンの <emphasis>直前</emphasis> のリビジョンです。 (<literal>COMITTED</literal> - 1 番ということになります)。"

#. Tag: para
#: ch03-advanced-topics.xml:138
#, no-c-format
msgid "As can be derived from their descriptions, the <literal>PREV</literal>, <literal>BASE</literal>, and <literal>COMMITTED</literal> revision keywords are used only when referring to a working copy path&mdash;they don't apply to repository URLs. <literal>HEAD</literal>, on the other hand, can be used in conjunction with both of these path types."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:146
#, no-c-format
msgid "Here are some examples of revision keywords in action:"
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:149
#, fuzzy, no-c-format
msgid ""
"$ svn diff -r PREV:COMMITTED foo.c\n"
"# shows the last change committed to foo.c\n"
"\n"
"$ svn log -r HEAD\n"
"# shows log message for the latest repository commit\n"
"\n"
"$ svn diff -r HEAD\n"
"# compares your working copy (with all of its local changes) to the\n"
"# latest version of that tree in the repository\n"
"\n"
"$ svn diff -r BASE:HEAD foo.c\n"
"# compares the unmodified version of foo.c with the latest version of\n"
"# foo.c in the repository\n"
"\n"
"$ svn log -r BASE:HEAD\n"
"# shows all commit logs for the current versioned directory since you\n"
"# last updated\n"
"\n"
"$ svn update -r PREV foo.c\n"
"# rewinds the last change on foo.c, decreasing foo.c's working revision\n"
"\n"
"$ svn diff -r BASE:14 foo.c\n"
"# compares the unmodified version of foo.c with the way foo.c looked\n"
"# in revision 14"
msgstr ""
"$ svn diff --revision PREV:COMITTED foo.c\n"
"# foo.c にコミットした最後の変更を表示\n"
"\n"
"$ svn log --revision HEAD\n"
"# 最後のリポジトリへのコミットで付けたログメッセージを表示\n"
"\n"
"$ svn diff --revision HEAD\n"
"# 作業コピー内ファイルを、リポジトリの最新バージョンと比較\n"
"\n"
"$ svn diff --revision BASE:HEAD foo.c\n"
"# 作業コピーの<quote>修正元</quote> foo.c を\n"
"# リポジトリの最新バージョンと比較\n"
"\n"
"$ svn log --revision BASE:HEAD\n"
"# 最後に更新した後のすべてのコミットログを表示\n"
"\n"
"$ svn update --revision PREV foo.c\n"
"# foo.c の最後の変更をもとに戻す\n"
"# (foo.c の作業リビジョン番号は減少する)"

#. Tag: title
#: ch03-advanced-topics.xml:155
#, no-c-format
msgid "Revision Dates"
msgstr "リビジョン日付"

#. Tag: secondary
#: ch03-advanced-topics.xml:159
#, no-c-format
msgid "specified as dates"
msgstr "日付で指定する"

#. Tag: para
#: ch03-advanced-topics.xml:162
#, no-c-format
msgid "Revision numbers reveal nothing about the world outside the version control system, but sometimes you need to correlate a moment in real time with a moment in version history. To facilitate this, the <option>--revision (-r)</option> option can also accept as input date specifiers wrapped in curly braces (<literal>{</literal> and <literal>}</literal>). Subversion accepts the standard ISO-8601 date and time formats, plus a few others. Here are some examples. (Remember to use quotes around any date that contains spaces.)"
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:173
#, fuzzy, no-c-format
msgid ""
"$ svn checkout -r {2006-02-17}\n"
"$ svn checkout -r {15:30}\n"
"$ svn checkout -r {15:30:00.200000}\n"
"$ svn checkout -r {\"2006-02-17 15:30\"}\n"
"$ svn checkout -r {\"2006-02-17 15:30 +0230\"}\n"
"$ svn checkout -r {2006-02-17T15:30}\n"
"$ svn checkout -r {2006-02-17T15:30Z}\n"
"$ svn checkout -r {2006-02-17T15:30-04:00}\n"
"$ svn checkout -r {20060217T1530}\n"
"$ svn checkout -r {20060217T1530Z}\n"
"$ svn checkout -r {20060217T1530-0500}\n"
"&hellip;"
msgstr ""
"$ svn checkout --revision {2002-02-17}\n"
"$ svn checkout --revision {15:30}\n"
"$ svn checkout --revision {15:30:00.200000}\n"
"$ svn checkout --revision {\"2002-02-17 15:30\"}\n"
"$ svn checkout --revision {\"2002-02-17 15:30 +0230\"}\n"
"$ svn checkout --revision {2002-02-17T15:30}\n"
"$ svn checkout --revision {2002-02-17T15:30Z}\n"
"$ svn checkout --revision {2002-02-17T15:30-04:00}\n"
"$ svn checkout --revision {20020217T1530}\n"
"$ svn checkout --revision {20020217T1530Z}\n"
"$ svn checkout --revision {20020217T1530-0500}\n"
"&hellip;"

#. Tag: para
#: ch03-advanced-topics.xml:175
#, fuzzy, no-c-format
msgid "When you specify a date, Subversion resolves that date to the most recent revision of the repository as of that date, and then continues to operate against that resolved revision number:"
msgstr "リビジョンとして日付を指定するときはSubversionはその日付に 一番近いリビジョンを見つけようとします:"

#. Tag: screen
#: ch03-advanced-topics.xml:180
#, fuzzy, no-c-format
msgid ""
"$ svn log -r {2006-11-28}\n"
"------------------------------------------------------------------------\n"
"r12 | ira | 2006-11-27 12:31:51 -0600 (Mon, 27 Nov 2006) | 6 lines\n"
"&hellip;"
msgstr ""
"$ svn log --revision {2002-11-28}\n"
"------------------------------------------------------------------------\n"
"r12 | ira | 2002-11-27 12:31:51 -0600 (Wed, 27 Nov 2002) | 6 lines\n"
"&hellip;"

#. Tag: title
#: ch03-advanced-topics.xml:183
#, no-c-format
msgid "Is Subversion a Day Early?"
msgstr "Subversion の日付は早くないですか?"

#. Tag: para
#: ch03-advanced-topics.xml:185
#, fuzzy, no-c-format
msgid "If you specify a single date as a revision without specifying a time of day (for example <literal>2006-11-27</literal>), you may think that Subversion should give you the last revision that took place on the 27th of November. Instead, you'll get back a revision from the 26th, or even earlier. Remember that Subversion will find the <emphasis>most recent revision of the repository</emphasis> as of the date you give. If you give a date without a timestamp, like <literal>2006-11-27</literal>, Subversion assumes a time of 00:00:00, so looking for the most recent revision won't return anything on the day of the 27th."
msgstr "リビジョンとして一つの日付を選択し、時刻までは指定しなかった 場合(たとえば<literal>2002-11-27</literal>), Subversionは11月27日に追加された最後のリビジョンをあつかうべきだと 思うかも知れません。しかし、そうではなく、26日か、それより前の リビジョンを得ることになるでしょう。Subversionは 指定された日付以前で <emphasis>リポジトリ中の最新のリビジョン </emphasis>を見つけようとすることに注意してください。 <literal>2002-11-27</literal>のような タイムスタンプなしの日付を指定すると、 Subversion は、時刻として 00:00:00が指定されたと仮定し、 このため 27日のコミットについては何も返さないことに なってしまいます。"

#. Tag: para
#: ch03-advanced-topics.xml:198
#, fuzzy, no-c-format
msgid "If you want to include the 27th in your search, you can either specify the 27th with the time (<literal>{\"2006-11-27 23:59\"}</literal>), or just specify the next day (<literal>{2006-11-28}</literal>)."
msgstr "検索に27日を含めたければ27日の時刻を指定するか、 (<literal>{\"2002-11-27 23:59\"}</literal>) 単に次の日を指定する(<literal>2002-11-28</literal>) 必要があります。"

#. Tag: para
#: ch03-advanced-topics.xml:205
#, no-c-format
msgid "You can also use a range of dates. Subversion will find all revisions between both dates, inclusive:"
msgstr "日付範囲を使うこともできます。 Subversionは両方の日付の間にあるすべてのリビジョンを検索対象と します。両端の日付は検索に含みます:"

#. Tag: screen
#: ch03-advanced-topics.xml:208
#, no-c-format
msgid ""
"$ svn log -r {2006-11-20}:{2006-11-29}\n"
"&hellip;"
msgstr ""
"$ svn log -r {2006-11-20}:{2006-11-29}\n"
"&hellip;"

#. Tag: para
#: ch03-advanced-topics.xml:211
#, no-c-format
msgid "Since the timestamp of a revision is stored as an unversioned, modifiable property of the revision (see <xref linkend=\"svn.advanced.props\"/>, revision timestamps can be changed to represent complete falsifications of true chronology, or even removed altogether. Subversion's ability to correctly convert revision dates into real revision numbers depends on revision datestamps maintaining a sequential ordering&mdash;the younger the revision, the younger its timestamp. If this ordering isn't maintained, you will likely find that trying to use dates to specify revision ranges in your repository doesn't always return the data you might have expected."
msgstr ""

#. Tag: title
#: ch03-advanced-topics.xml:233
#, no-c-format
msgid "Properties"
msgstr "属性"

#. Tag: primary
#: ch03-advanced-topics.xml:235
#, fuzzy, no-c-format
msgid "properties"
msgstr "属性"

#. Tag: para
#: ch03-advanced-topics.xml:238
#, fuzzy, no-c-format
msgid "We've already covered in detail how Subversion stores and retrieves various versions of files and directories in its repository. Whole chapters have been devoted to this most fundamental piece of functionality provided by the tool. And if the versioning support stopped there, Subversion would still be complete from a version control perspective."
msgstr "既に、Subversionがどのようにしてリポジトリ中にあるファルイやディレクトリの いろいろなバージョンを格納し、抽出するかを詳しく見てきました。 すべての章はSubversionというツールによって提供されているこの一番基本的な機能に ささげられてきました。そして、もしバージョン管理のサポートがそれで終わりだと しても、Subversionはバージョン管理の観点からは完全なものであったろうと思います。 しかし話にはまだ先があります。"

#. Tag: para
#: ch03-advanced-topics.xml:245
#, no-c-format
msgid "But it doesn't stop there."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:247
#, fuzzy, no-c-format
msgid "In addition to versioning your directories and files, Subversion provides interfaces for adding, modifying, and removing versioned metadata on each of your versioned directories and files. We refer to this metadata as <firstterm>properties</firstterm>, and they can be thought of as two-column tables that map property names to arbitrary values attached to each item in your working copy. Generally speaking, the names and values of the properties can be whatever you want them to be, with the constraint that the names must be human-readable text. And the best part about these properties is that they, too, are versioned, just like the textual contents of your files. You can modify, commit, and revert property changes as easily as you can file content changes. And the sending and receiving of property changes occurs as part of your typical commit and update operations&mdash;you don't have to change your basic processes to accommodate them."
msgstr "ディレクトリとファイルのバージョン管理に加えて、Subversionは バージョン化されたファイル、ディレクトリに付随したバージョン化された メタデータの追加、修正、削除のためのインターフェースを用意しています。 このようなメタデータを<firstterm>属性</firstterm>と呼びます。属性は 作業コピー中のアイテムごとに、名前と名前に結びついた任意の値の組から なる二つの列を持つテーブルとして考えることができます。 一般的に、名前が人間が読むことのできるテキストでなくてはならないことを 除けば、名前と属性値は自由に選ぶことができます。そして属性に関する 一番重要なことは、属性もまた、ファイルの内容と同様にバージョン管理できる ということです。テキストの変更点をコミットするのと同じくらい簡単に 属性の変更を、修正したりコミットしたり、取り消したりすることができます。 そして、作業コピーを更新するときに、他の人がした属性変更についても 受け取ることができます。"

#. Tag: para
#: ch03-advanced-topics.xml:265
#, no-c-format
msgid "Subversion has reserved the set of properties whose names begin with <literal>svn:</literal> as its own. While there are only a handful of such properties in use today, you should avoid creating custom properties for your own needs whose names begin with this prefix. Otherwise, you run the risk that a future release of Subversion will grow support for a feature or behavior driven by a property of the same name but with perhaps an entirely different interpretation."
msgstr "Subversion は、<literal>svn:</literal> で始まる名前の属性を自分自身で利用するために予約しています。現在利用されている予約属性はほんの一握りですが、あなた自身のために、このプレフィクスで始まるカスタム属性を作成するのはさけたほうがいいです。さもなければ将来のバージョンで新機能のサポートのために Subversion が同じ名前の属性を全く異なって意味で使用するようになるかもしれないというリスクを負ってしまいます。"

#. Tag: para
#: ch03-advanced-topics.xml:275
#, fuzzy, no-c-format
msgid "Properties show up elsewhere in Subversion, too. Just as files and directories may have arbitrary property names and values attached to them, each revision as a whole may have arbitrary properties attached to it. The same constraints apply&mdash;human-readable names and anything-you-want binary values. The main difference is that revision properties are not versioned. In other words, if you change the value of, or delete, a revision property, there's no way within the scope of Subversion's functionality to recover the previous value."
msgstr "属性はSubversionのほかの場所にも出てきます。ファイルやディレクトリが それに結びついた任意の属性名と属性値を持つのと同じように、ある リビジョンは、それ自体として、任意の属性を持つことができます。 同じ制約が当てはまります&mdash;属性名は人間に読めるテキストで、 属性値はバイナリ値を含む任意値で&mdash;ただし、リビジョンの属性は バージョン化されません。バージョン化されない属性については <xref linkend=\"svn.reposadmin.basics.revprops\"/> を見てください。"

#. Tag: para
#: ch03-advanced-topics.xml:285
#, no-c-format
msgid "Subversion has no particular policy regarding the use of properties. It asks only that you not use property names that begin with the prefix <literal>svn:</literal>. That's the namespace that it sets aside for its own use. And Subversion does, in fact, use properties, both the versioned and unversioned variety. Certain versioned properties have special meaning or effects when found on files and directories, or house a particular bit of information about the revisions on which they are found. Certain revision properties are automatically attached to revisions by Subversion's commit process, and carry information about the revision. Most of these properties are mentioned elsewhere in this or other chapters as part of the more general topics to which they are related. For an exhaustive list of Subversion's pre-defined properties, see <xref linkend=\"svn.ref.properties\"/>."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:301
#, fuzzy, no-c-format
msgid "In this section, we will examine the utility&mdash;both to users of Subversion, and to Subversion itself&mdash;of property support. You'll learn about the property-related <command>svn</command> subcommands, and how property modifications affect your normal Subversion workflow."
msgstr "この節では、属性をサポートするユーティリティーについて説明します&mdash; &mdash;Subversionのユーザと、Subversionそのものに対しての説明になります。 属性に関連した<command>svn</command> サブコマンドを理解し、属性の変更が 通常のSubversionのワークフローにどう影響するかを学びます。Subversionの 属性はあなたのバージョン管理の経験を広げるものであることが、きっと わかるでしょう。"

#. Tag: title
#: ch03-advanced-topics.xml:309
#, no-c-format
msgid "Why Properties?"
msgstr "なぜ属性なんてものが?"

#. Tag: para
#: ch03-advanced-topics.xml:311
#, no-c-format
msgid "Just as Subversion uses properties to store extra information about the files, directories, and revisions that it contains, you might also find properties to be of similar use. You might find it useful to have a place close to your versioned data to hang custom metadata about that data."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:318
#, no-c-format
msgid "Say you wish to design a website that houses many digital photos, and displays them with captions and a datestamp. Now, your set of photos is constantly changing, so you'd like to have as much of this site automated as possible. These photos can be quite large, so as is common with sites of this nature, you want to provide smaller thumbnail images to your site visitors."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:326
#, fuzzy, no-c-format
msgid "Now, you can get this functionality using traditional files. That is, you can have your <filename>image123.jpg</filename> and an <filename>image123-thumbnail.jpg</filename> side-by-side in a directory. Or if you want to keep the filenames the same, you might have your thumbnails in a different directory, like <filename>thumbnails/image123.jpg</filename>. You can also store your captions and datestamps in a similar fashion, again separated from the original image file. But the problem here is that your collection of files grows in multiples with each new photo added to the site."
msgstr "あなたは、たくさんのデジタル写真を見せるためのウェブサイトを設計していて、 タイトルと日付を付けて表示したいとします。ここで、写真の内容は常に 変化するので、このサイトの管理をできる限り自動化したいと思っています。 それぞれの写真は非常に大きいので、このような場合の常套手段として あなたはサイトをおとずれた人に小さなサムネイルの画像を用意したいとします。 これを普通のファイルでやることもできます。つまり、ディレクトリに <filename>image123.jpg</filename> と <filename>image123-thumbnail.jpg</filename> の両方を置けば良いのです。あるいは両方のファイル名称を一緒にして、 別ディレクトリにおいてもいいですね。 <filename>thumbnails/image123.jpg</filename>のような感じです。 タイトルと日付についても同様の方法をとることができ、これもまた、もとの 画像ファイルとは別のものになります。すぐ、ファイルのツリーはごちゃごちゃ になり、新しい写真がサイトに追加されるたびに、サイトのデータは何倍にも 膨れ上がります。"

#. Tag: para
#: ch03-advanced-topics.xml:338
#, fuzzy, no-c-format
msgid "Now consider the same website deployed in a way that makes use of Subversion's file properties. Imagine having a single image file, <filename>image123.jpg</filename>, and then properties set on that file named <literal>caption</literal>, <literal>datestamp</literal>, and even <literal>thumbnail</literal>. Now your working copy directory looks much more manageable&mdash;in fact, it looks to the casual browser like there are nothing but image files in it. But your automation scripts know better. They know that they can use <command>svn</command> (or better yet, they can use the Subversion language bindings&mdash;see <xref linkend=\"svn.developer.usingapi\"/>) to dig out the extra information that your site needs to display without having to read an index file or play path manipulation games."
msgstr "Subversionのファイル属性を使った同じ設定を考えてみましょう。 ある画像ファイル<filename>image123.jpg</filename>と、そのファイル の属性として設定する<literal>caption</literal>、 <literal>datestamp</literal>, そして <literal>thumbnail</literal>があるところを想像して ください。こうすれは、作業コピーのディレクトリはもっと管理しやすく なります&mdash;実際これで画像ファイル以外の何もないように 見えます。しかし、あなたの自動スクリプトはもっと多くのことを 知っています。それは<command>svn</command> (あるいはさらに、 Subversion言語連携を使うこともできます&mdash;<xref linkend=\"svn.developer.usingapi.otherlangs\"/> 参照) を使って拡張情報を追加しますが、それはあなたのサイトが、 インデックスファイルを読んだり、 複雑なファイルパス操作の仕組みをいじることなしに、表示する必要がある ものです。"

#. Tag: para
#: ch03-advanced-topics.xml:354
#, no-c-format
msgid "Custom revision properties are also frequently used. One common such use is a property whose value contains an issue tracker ID with which the revision is associated, perhaps because the change made in that revision fixes a bug filed in the tracker issue with that ID. Other uses include hanging more friendly names on the revision&mdash;it might be hard to remember that revision 1935 was a fully tested revision. But if there's, say, a <literal>test-results</literal> property on that revision with a value <literal>all passing</literal>, that's meaningful information to have."
msgstr ""

#. Tag: title
#: ch03-advanced-topics.xml:366
#, no-c-format
msgid "Searchability (or, Why <emphasis>Not</emphasis> Properties)"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:369
#, no-c-format
msgid "For all their utility, Subversion properties&mdash;or, more accurately, the available interfaces to them&mdash;have a major shortcoming: while it is a simple matter to <emphasis>set</emphasis> a custom property, <emphasis>finding</emphasis> that property later is whole different ball of wax."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:376
#, no-c-format
msgid "Trying to locate a custom revision property generally involves performing a linear walk across all the revisions of the repository, asking of each revision, \"Do you have the property I'm looking for?\" Trying to find a custom versioned property is painful, too, and often involves a recursive <command>svn propget</command> across an entire working copy. In your situation, that might not be as bad as a linear walk across all revisions. But it certainly leaves much to be desired in terms of both performance and likelihood of success, especially if the scope of your search would require a working copy from the root of your repository."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:389
#, no-c-format
msgid "For this reason, you might choose&mdash;especially in the revision property use-case&mdash;to simply add your metadata to the revision's log message, using some policy-driven (and perhaps programmatically-enforced) formatting that is designed to be quickly parsed from the output of <command>svn log</command>. It is quite common to see in Subversion log messages the likes of:"
msgstr ""

#. Tag: programlisting
#: ch03-advanced-topics.xml:397
#, no-c-format
msgid ""
"Issue(s): IZ2376, IZ1919\n"
"Reviewed by:  sally\n"
"\n"
"This fixes a nasty segfault in the wort frabbing process\n"
"&hellip;"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:399
#, no-c-format
msgid "But here again lies some misfortune. Subversion doesn't yet provide a log message templating mechanism, which would go a long way toward helping users be consistent with the formatting of their log-embedded revision metadata."
msgstr ""

#. Tag: title
#: ch03-advanced-topics.xml:410
#, no-c-format
msgid "Manipulating Properties"
msgstr "属性の操作"

#. Tag: para
#: ch03-advanced-topics.xml:412
#, fuzzy, no-c-format
msgid "The <command>svn</command> command affords a few ways to add or modify file and directory properties. For properties with short, human-readable values, perhaps the simplest way to add a new property is to specify the property name and value on the command line of the <command>propset</command> subcommand."
msgstr "<command>svn</command> コマンドにはファイルとディレクトリの属性 を追加したり修正したりするいくつかの方法があります。短い可読な属性を 新規に追加する一番簡単な方法は属性の名前と値を<command>propset</command> サブコマンドで指定することです。"

#. Tag: screen
#: ch03-advanced-topics.xml:419
#, fuzzy, no-c-format
msgid ""
"$ svn propset copyright '(c) 2006 Red-Bean Software' calc/button.c\n"
"property 'copyright' set on 'calc/button.c'\n"
"$"
msgstr ""
"$ svn propset copyright '(c) 2003 Red-Bean Software' calc/button.c\n"
"property 'copyright' set on 'calc/button.c'\n"
"$"

#. Tag: para
#: ch03-advanced-topics.xml:421
#, fuzzy, no-c-format
msgid "But we've been touting the flexibility that Subversion offers for your property values. And if you are planning to have a multi-line textual, or even binary, property value, you probably do not want to supply that value on the command line. So the <command>propset</command> subcommand takes a <option>--file (-F)</option> option for specifying the name of a file which contains the new property value."
msgstr "しかし、属性値に対してSubversionが持つ柔軟性については既にさんざん 言ってきました。もし、複数行テキスト、またはバイナリ値を属性値に したいと考えているなら、コマンドラインからその値を入力したくはないと 思います。それで<command>propset</command> サブコマンドは <option>--file</option>(<option>-F</option>) オプションを使って、新しい属性値が入った ファイルの名前を指定することもできます。"

#. Tag: screen
#: ch03-advanced-topics.xml:429
#, no-c-format
msgid ""
"$ svn propset license -F /path/to/LICENSE calc/button.c\n"
"property 'license' set on 'calc/button.c'\n"
"$"
msgstr ""
"$ svn propset license -F /path/to/LICENSE calc/button.c\n"
"property 'license' set on 'calc/button.c'\n"
"$"

#. Tag: para
#: ch03-advanced-topics.xml:431
#, no-c-format
msgid "There are some restrictions on the names you can use for properties. A property name must start with a letter, a colon (<literal>:</literal>), or an underscore (<literal>_</literal>); after that, you can also use digits, hyphens (<literal>-</literal>), and periods (<literal>.</literal>)."
msgstr "属性で利用できる名前にはいくつかの制限があります。属性の名前は 文字、コロン(<literal>:</literal>) あるいはアンダースコア(<literal>_</literal>) で始まり、その後では数字、ハイフン(<literal>-</literal>)、ピリオド(<literal>.</literal>) も使えます。"

#. Tag: para
#: ch03-advanced-topics.xml:438
#, no-c-format
msgid "If you're familiar with XML, this is pretty much the ASCII subset of the syntax for XML \"Name\"."
msgstr "XML に詳しいのであれば、これは XML \"名称\" の ASCII サブセットな構文 に近いものです。"

#. Tag: para
#: ch03-advanced-topics.xml:443
#, fuzzy, no-c-format
msgid "In addition to the <command>propset</command> command, the <command>svn</command> program supplies the <command>propedit</command> command. This command uses the configured editor program (see <xref linkend=\"svn.advanced.confarea.opts.config\"/>) to add or modify properties. When you run the command, <command>svn</command> invokes your editor program on a temporary file that contains the current value of the property (or which is empty, if you are adding a new property). Then, you just modify that value in your editor program until it represents the new value you wish to store for the property, save the temporary file, and then exit the editor program. If Subversion detects that you've actually changed the existing value of the property, it will accept that as the new property value. If you exit your editor without making any changes, no property modification will occur:"
msgstr "<command>propset</command> コマンドに加えて、<command>svn</command> プログラムは<command>propedit</command> コマンドも用意しています。 このコマンドは、設定されたエディタを使って(<xref linkend=\"svn.advanced.confarea.opts.config\"/>参照) 属性を追加したり修正したりします。 このコマンドを実行すると<command>svn</command> は現在の属性値を書き込んだ 一時ファイルを作ってエディタを起動します。(新しい属性を追加する場合は これは空になります)。それから、自分が望むような値になるまで新しい属性値 をエディタを使って修正し、一時ファイルを保存してからエディタを抜けます。 Subversionは属性の値が変更されたことを確認すると、それを新しい属性値 として受け入れます。もしエディタを変更することなく抜ければ、属性値の 変更は起こりません。"

#. Tag: screen
#: ch03-advanced-topics.xml:460
#, no-c-format
msgid ""
"$ svn propedit copyright calc/button.c  ### exit the editor without changes\n"
"No changes to property 'copyright' on 'calc/button.c'\n"
"$"
msgstr ""
"$ svn propedit copyright calc/button.c  ### exit the editor without changes\n"
"No changes to property 'copyright' on 'calc/button.c'\n"
"$"

#. Tag: para
#: ch03-advanced-topics.xml:462
#, no-c-format
msgid "We should note that, as with other <command>svn</command> subcommands, those related to properties can act on multiple paths at once. This enables you to modify properties on whole sets of files with a single command. For example, we could have done:"
msgstr "他の<command>svn</command>コマンドと同様に、属性に関するこれらの コマンドも複数パスに対して一度に実行することができます。これは 一つのコマンドで複数のファイル上の属性を修正することを可能にします。 たとえば、以下のようなことができます:"

#. Tag: screen
#: ch03-advanced-topics.xml:468
#, fuzzy, no-c-format
msgid ""
"$ svn propset copyright '(c) 2006 Red-Bean Software' calc/*\n"
"property 'copyright' set on 'calc/Makefile'\n"
"property 'copyright' set on 'calc/button.c'\n"
"property 'copyright' set on 'calc/integer.c'\n"
"&hellip;\n"
"$"
msgstr ""
"$ svn propset copyright '(c) 2002 Red-Bean Software' calc/*\n"
"property 'copyright' set on 'calc/Makefile'\n"
"property 'copyright' set on 'calc/button.c'\n"
"property 'copyright' set on 'calc/integer.c'\n"
"&hellip;\n"
"$"

#. Tag: para
#: ch03-advanced-topics.xml:470
#, fuzzy, no-c-format
msgid "All of this property adding and editing isn't really very useful if you can't easily get the stored property value. So the <command>svn</command> program supplies two subcommands for displaying the names and values of properties stored on files and directories. The <command>svn proplist</command> command will list the names of properties that exist on a path. Once you know the names of the properties on the node, you can request their values individually using <command>svn propget</command>. This command will, given a property name and a path (or set of paths), print the value of the property to the standard output stream."
msgstr "このような属性の追加や編集は、保管されている属性値を簡単に取得 できないなら、あまり便利ではありません。それで <command>svn</command> プログラムはファイルやディレクトリに保管された 属性の名前と値を表示するためのサブコマンドを二つ用意しています。 <command>svn proplist</command>はパス上に存在する属性の名前の一覧を 表示します。ノード上の属性名がわかってしまえば、個別に <command>svn propget</command>を呼び出してその属性値を要求することが できます。このコマンドは与えられた(一つ以上の)パスと属性名 から、その属性値を標準出力に表示します。"

#. Tag: screen
#: ch03-advanced-topics.xml:482
#, fuzzy, no-c-format
msgid ""
"$ svn proplist calc/button.c\n"
"Properties on 'calc/button.c':\n"
"  copyright\n"
"  license\n"
"$ svn propget copyright calc/button.c\n"
"(c) 2006 Red-Bean Software"
msgstr ""
"$ svn proplist calc/button.c\n"
"Properties on 'calc/button.c':\n"
"  copyright\n"
"  license\n"
"$ svn propget copyright calc/button.c\n"
"(c) 2003 Red-Bean Software"

#. Tag: para
#: ch03-advanced-topics.xml:484
#, no-c-format
msgid "There's even a variation of the <command>proplist</command> command that will list both the name and value of all of the properties. Simply supply the <option>--verbose</option> (<option>-v</option>) option."
msgstr "<command>proplist</command> コマンドの変種として、すべての属性の 名前と値の両方をリストするものがあります。これには単に、 <option>--verbose</option>(<option>-v</option>) オプションを指定すればOKです。"

#. Tag: screen
#: ch03-advanced-topics.xml:489
#, fuzzy, no-c-format
msgid ""
"$ svn proplist -v calc/button.c\n"
"Properties on 'calc/button.c':\n"
"  copyright : (c) 2006 Red-Bean Software\n"
"  license : ================================================================\n"
"Copyright (c) 2006 Red-Bean Software.  All rights reserved.\n"
"\n"
"Redistribution and use in source and binary forms, with or without\n"
"modification, are permitted provided that the following conditions \n"
"are met:\n"
"\n"
"1. Redistributions of source code must retain the above copyright\n"
"notice, this list of conditions, and the recipe for Fitz's famous\n"
"red-beans-and-rice.\n"
"&hellip;"
msgstr ""
"$ svn proplist --verbose calc/button.c\n"
"Properties on 'calc/button.c':\n"
"  copyright : (c) 2003 Red-Bean Software\n"
"  license : ================================================================\n"
"Copyright (c) 2003 Red-Bean Software.  All rights reserved.\n"
"\n"
"Redistribution and use in source and binary forms, with or without\n"
"modification, are permitted provided that the following conditions \n"
"are met:\n"
"\n"
"1. Redistributions of source code must retain the above copyright\n"
"notice, this list of conditions, and the recipe for Fitz's famous\n"
"red-beans-and-rice.\n"
"&hellip;"

#. Tag: para
#: ch03-advanced-topics.xml:491
#, no-c-format
msgid "The last property-related subcommand is <command>propdel</command>. Since Subversion allows you to store properties with empty values, you can't remove a property altogether using <command>propedit</command> or <command>propset</command>. For example, this command will <emphasis>not</emphasis> yield the desired effect:"
msgstr "最後の属性関連サブコマンドは <command>propdel</command>です。Subversionは空の値を持つ属性を 格納することを許すので、<command>propedit</command> や <command>propset</command>を使うだけでは、属性を削除することが できません。たとえばこのコマンドは期待される結果には<emphasis>なりません</emphasis> :"

#. Tag: screen
#: ch03-advanced-topics.xml:498
#, fuzzy, no-c-format
msgid ""
"$ svn propset license '' calc/button.c\n"
"property 'license' set on 'calc/button.c'\n"
"$ svn proplist -v calc/button.c\n"
"Properties on 'calc/button.c':\n"
"  copyright : (c) 2006 Red-Bean Software\n"
"  license : \n"
"$"
msgstr ""
"$ svn propset license '' calc/button.c\n"
"property 'license' set on 'calc/button.c'\n"
"$ svn proplist --verbose calc/button.c\n"
"Properties on 'calc/button.c':\n"
"  copyright : (c) 2003 Red-Bean Software\n"
"  license : \n"
"$"

#. Tag: para
#: ch03-advanced-topics.xml:500
#, fuzzy, no-c-format
msgid "You need to use the <command>propdel</command> subcommand to delete properties altogether. The syntax is similar to the other property commands:"
msgstr "属性の削除には<command>propdel</command> コマンドを使う必要が あります。構文は他の属性関連コマンドとよく似ています:"

#. Tag: screen
#: ch03-advanced-topics.xml:504
#, fuzzy, no-c-format
msgid ""
"$ svn propdel license calc/button.c\n"
"property 'license' deleted from 'calc/button.c'.\n"
"$ svn proplist -v calc/button.c\n"
"Properties on 'calc/button.c':\n"
"  copyright : (c) 2006 Red-Bean Software\n"
"$"
msgstr ""
"$ svn propdel license calc/button.c\n"
"property 'license' deleted from ''.\n"
"$ svn proplist --verbose calc/button.c\n"
"Properties on 'calc/button.c':\n"
"  copyright : (c) 2003 Red-Bean Software\n"
"$"

#. Tag: para
#: ch03-advanced-topics.xml:506
#, no-c-format
msgid "Remember those unversioned revision properties? You can modify those, too, using the same <command>svn</command> subcommands that we just described. Simply add the <option>--revprop</option> command-line parameter, and specify the revision whose property you wish to modify. Since revisions are global, you don't need to specify a target path to these property-related commands so long as you are positioned in a working copy of the repository whose revision property you wish to modify. Otherwise, you can simply provide the URL of any path in the repository of interest (including the repository's root URL). For example, you might want to replace the commit log message of an existing revision. <footnote> <para>Fixing spelling errors, grammatical gotchas, and <quote>just-plain-wrongness</quote> in commit log messages is perhaps the most common use case for the <option>--revprop</option> option.</para> </footnote> If your current working directory is part of a working copy of your repository, you can simply run the <command>svn propset</command> command with no target path:"
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:529
#, fuzzy, no-c-format
msgid ""
"$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop\n"
"property 'svn:log' set on repository revision '11'\n"
"$"
msgstr ""
"$ svn propset --revprop -r 25 svn:log \"Journaled about trip to New York.\"\n"
"property 'svn:log' set on repository revision '25'"

#. Tag: para
#: ch03-advanced-topics.xml:531
#, no-c-format
msgid "But even if you haven't checked out a working copy from that repository, you can still affect the property change by providing the repository's root URL:"
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:535
#, fuzzy, no-c-format
msgid ""
"$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop \\\n"
"              http://svn.example.com/repos/project\n"
"property 'svn:log' set on repository revision '11'\n"
"$"
msgstr ""
"$ svn propset --revprop -r 26 svn:log \"Document nap.\" http://svn.red-bean.com/repos\n"
"property 'svn:log' set on repository revision '25'"

#. Tag: para
#: ch03-advanced-topics.xml:537
#, no-c-format
msgid "Note that the ability to modify these unversioned properties must be explicitly added by the repository administrator (see <xref linkend=\"svn.reposadmin.maint.setlog\"/>). That's because the properties aren't versioned, so you run the risk of losing information if you aren't careful with your edits. The repository administrator can set up methods to protect against this loss, and by default, modification of unversioned properties is disabled."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:547
#, no-c-format
msgid "Users should, where possible, use <command>svn propedit</command> instead of <command>svn propset</command>. While the end result of the commands is identical, the former will allow them to see the current value of the property they are about to change, which helps them to verify that they are, in fact, making the change they think they are making. This is especially true when modifying unversioned revision properties. Also, it is significantly easier to modify multiline property values in a text editor than at the command line."
msgstr ""

#. Tag: title
#: ch03-advanced-topics.xml:563
#, fuzzy, no-c-format
msgid "Properties and the Subversion Workflow"
msgstr "Subversionでの別の属性"

#. Tag: para
#: ch03-advanced-topics.xml:565
#, fuzzy, no-c-format
msgid "Now that you are familiar with all of the property-related <command>svn</command> subcommands, let's see how property modifications affect the usual Subversion workflow. As we mentioned earlier, file and directory properties are versioned, just like your file contents. As a result, Subversion provides the same opportunities for merging&mdash;cleanly or with conflicts&mdash;someone else's modifications into your own."
msgstr "これで、属性関連の<command>svn</command> サブコマンドのすべてに ついて説明したので、日常的なSubversionワークフローに、属性の変更 がどのような影響を与えるかを見てみましょう。前に指摘したように ファイルとディレクトリの属性は、普通のファイルの内容と同様、 バージョン化されます。結果として、Subversionは他の人がした修正点を 自分自身の上にマージすることができます。&mdash;もちろん通常の マージと同様、うまくいくかも知れませんし、衝突するかも知れません。"

#. Tag: para
#: ch03-advanced-topics.xml:574
#, no-c-format
msgid "And as with file contents, your property changes are local modifications, only made permanent when you commit them to the repository with <command>svn commit</command>. Your property changes can be easily unmade, too&mdash;the <command>svn revert</command> command will restore your files and directories to their un-edited states&mdash;contents, properties, and all. Also, you can receive interesting information about the state of your file and directory properties by using the <command>svn status</command> and <command>svn diff</command> commands."
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:585
#, fuzzy, no-c-format
msgid ""
"$ svn status calc/button.c\n"
" M     calc/button.c\n"
"$ svn diff calc/button.c\n"
"Property changes on: calc/button.c\n"
"___________________________________________________________________\n"
"Name: copyright\n"
"   + (c) 2006 Red-Bean Software\n"
"\n"
"$"
msgstr ""
"$ svn propset license '' calc/button.c\n"
"property 'license' set on 'calc/button.c'\n"
"$ svn proplist --verbose calc/button.c\n"
"Properties on 'calc/button.c':\n"
"  copyright : (c) 2003 Red-Bean Software\n"
"  license : \n"
"$"

#. Tag: para
#: ch03-advanced-topics.xml:587
#, no-c-format
msgid "Notice how the <command>status</command> subcommand displays <literal>M</literal> in the second column instead of the first. That is because we have modified the properties on <filename>calc/button.c</filename>, but not its textual contents. Had we changed both, we would have seen <literal>M</literal> in the first column, too (see <xref linkend=\"svn.tour.cycle.examine.status\"/>)."
msgstr ""

#. Tag: title
#: ch03-advanced-topics.xml:596
#, fuzzy, no-c-format
msgid "Property Conflicts"
msgstr "マージの衝突"

#. Tag: para
#: ch03-advanced-topics.xml:598
#, no-c-format
msgid "As with file contents, local property modifications can conflict with changes committed by someone else. If you update your working copy directory and receive property changes on a versioned object that clash with your own, Subversion will report that the object is in a conflicted state."
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:605
#, fuzzy, no-c-format
msgid ""
"% svn update calc\n"
"M  calc/Makefile.in\n"
" C calc/button.c\n"
"Updated to revision 143.\n"
"$"
msgstr ""
"$ svn update\n"
"U  foo.c\n"
"U  bar.c\n"
"Updated to revision 2."

#. Tag: para
#: ch03-advanced-topics.xml:607
#, no-c-format
msgid "Subversion will also create, in the same directory as the conflicted object, a file with a <filename>.prej</filename> extension which contains the details of the conflict. You should examine the contents of this file so you can decide how to resolve the conflict. Until the conflict is resolved, you will see a <literal>C</literal> in the second column of <command>svn status</command> output for that object, and attempts to commit your local modifications will fail."
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:617
#, no-c-format
msgid ""
"$ svn status calc\n"
" C     calc/button.c\n"
"?      calc/button.c.prej\n"
"$ cat calc/button.c.prej \n"
"prop 'linecount': user set to '1256', but update set to '1301'.\n"
"$"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:619
#, no-c-format
msgid "To resolve property conflicts, simply ensure that the conflicting properties contain the values that they should, and then use the <command>svn resolved</command> command to alert Subversion that you have manually resolved the problem."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:627
#, fuzzy, no-c-format
msgid "You might also have noticed the non-standard way that Subversion currently displays property differences. You can still run <command>svn diff</command> and redirect the output to create a usable patch file. The <command>patch</command> program will ignore property patches&mdash;as a rule, it ignores any noise it can't understand. This does, unfortunately, mean that to fully apply a patch generated by <command>svn diff</command>, any property modifications will need to be applied by hand."
msgstr "Subversionが現在の属性の差異を表示する標準的でない方法に 気づかれたかも知れません。 <command>svn diff</command> を実行して、出力をパッチファイルを 作るためにリダイレクトすることができます。<command>patch</command> プログラムは属性にたいするパッチを無視します&mdash;一般的に それは理解できないゴミをすべて無視します。これは不幸にも <command>svn diff</command>で生成されたパッチを完全に適用するには、 属性の修正については手で適用しなくてはならないということを意味します。"

#. Tag: title
#: ch03-advanced-topics.xml:641
#, no-c-format
msgid "Automatic Property Setting"
msgstr "属性の自動設定"

#. Tag: para
#: ch03-advanced-topics.xml:643
#, fuzzy, no-c-format
msgid "Properties are a powerful feature of Subversion, acting as key components of many Subversion features discussed elsewhere in this and other chapters&mdash;textual diff and merge support, keyword substitution, newline translation, etc. But to get the full benefit of properties, they must be set on the right files and directories. Unfortunately, that step can be easily forgotten in the routine of things, especially since failing to set a property doesn't usually result in an obvious error (at least compared to, say, failing to add a file to version control). To help your properties get applied to the places that need them, Subversion provides a couple of simple but useful features."
msgstr "属性は Subversion での強力な機能で、この章や別の章で議論さ れるたくさんの Subversion の機能の重要な部品として振舞います&mdash; テキスト形式の diff やマージのサポート、キーワード置換、改行変換、など です。しかし属性機能を完全に使いこなすには、正しいファイルやディレクト リに設定する必要があります。残念なことに、このステップはきまりきった作 業の中で簡単に忘れられてしまいますが、それは属性の設定し忘れは通常 はっきりしたエラーを起こすことがないからです(少なくても、そう、例えば バージョン管理システムにファイルを追加するのと比較すれば)。必要な場所 で属性が設定されるのを助けるため Subversion は単純ではありますが役に立 つ機能を提供しています。"

#. Tag: para
#: ch03-advanced-topics.xml:656
#, fuzzy, no-c-format
msgid "Whenever you introduce a file to version control using the <command>svn add</command> or <command>svn import</command> commands, Subversion tries to assist by setting some common file properties automatically. First, on operating systems whose filesystems support an execute permission bit, Subversion will automatically set the <literal>svn:executable</literal> property on newly added or imported files whose execute bit is enabled. (See <xref linkend=\"svn.advanced.props.special.executable\"/> for more about this property.) Secondly, it runs a very basic heuristic to determine if that file contains human-readable content. If not, Subversion will automatically set the <literal>svn:mime-type</literal> property on that file to <literal>application/octet-stream</literal> (the generic <quote>this is a collection of bytes</quote> MIME type). Of course, if Subversion guesses incorrectly, or if you wish to set the <literal>svn:mime-type</literal> property to something more precise&mdash;perhaps <literal>image/png</literal> or <literal>application/x-shockwave-flash</literal>&mdash;you can always remove or edit that property. (For more on Subversion's use of MIME types, see <xref linkend=\"svn.advanced.props.special.mime-type\"/>.)"
msgstr "<command>svn add</command>または<command>svn import</command>であるファイルをバージョン管理下に置くばあい、 Subversion はそのファイルが人間によって読めるものか読めないものかを 非常に基本的な方法で決定します。もし読めないファイルであった場合、 Subversion は自動的にそのファイルの<literal>svn:mime-type</literal> 属性を<literal>application/octet-stream</literal>に設定します (これは一般的な<quote>これはバイトの集まりですよ</quote>というMIME タイプになります)。もちろん Subversion が間違った推測をするか、より 正確な<literal>svn:mime-type</literal>属性を設定したい場合&mdash; 多分<literal>image/png</literal>とか、 <literal>application/x-shockwave-flash</literal>とか&mdash;属性を 削除したり編集したりすることは常に可能です。"

#. Tag: para
#: ch03-advanced-topics.xml:679
#, fuzzy, no-c-format
msgid "Subversion also provides, via its runtime configuration system (see <xref linkend=\"svn.advanced.confarea\"/>), a more flexible automatic property setting feature which allows you to create mappings of filename patterns to property names and values. Once again, these mappings affect adds and imports, and can not only override the default MIME type decision made by Subversion during those operations, but can also set additional Subversion or custom properties, too. For example, you might create a mapping that says that any time you add JPEG files&mdash;ones whose names match the pattern <literal>*.jpg</literal>&mdash;Subversion should automatically set the <literal>svn:mime-type</literal> property on those files to <literal>image/jpeg</literal>. Or perhaps any files that match <literal>*.cpp</literal> should have <literal>svn:eol-style</literal> set to <literal>native</literal>, and <literal>svn:keywords</literal> set to <literal>Id</literal>. Automatic property support is perhaps the handiest property-related tool in the Subversion toolbox. See <xref linkend=\"svn.advanced.confarea.opts.config\"/> for more about configuring that support."
msgstr "Subversion はまた自動属性機能を提供しますが、これはファイ ル名のパターンによって適切な属性名と属性値を設定できるようにするもので す。この規則は実行時設定領域に設定します。やはりファイルの追加やインポー トに影響を与え、この操作中で Subversion が決定するデフォルトの MIME タ イプを上書きするだけではなく、Subversion や固有の追加属性を設定するこ ともできます。たとえば、JPEG ファイルを追加する時には常に&mdash; <literal>*.jpg</literal>というパターンに当てはまるファイルを追加する時 には常に&mdash;Subversion は自動的に<literal>svn:mime-type</literal> 属性を<literal>image/jpeg</literal>に設定する、といった具合です。 あるいはまた<literal>*.cpp</literal>に当てはまるすべてのファイルには <literal>svn:eol-style</literal>属性を<literal>native</literal>に設定 し、<literal>svn:keywords</literal>属性を<literal>Id</literal>に設定 する、といった具合です。自動属性のサポートはおそらくSubversion 関連 ツール中で最も手軽に扱うことのできる性質です。この設定に関連した詳細は <xref linkend=\"svn.advanced.confarea.opts.config\"/>を見てください。"

#. Tag: title
#: ch03-advanced-topics.xml:708
#, fuzzy, no-c-format
msgid "File Portability"
msgstr "相互運用性"

#. Tag: para
#: ch03-advanced-topics.xml:710
#, no-c-format
msgid "Fortunately for Subversion users who routinely find themselves on different computers with different operating systems, Subversion's command-line program behaves almost identically on all those systems. If you know how to wield <command>svn</command> on one platform, you know how to wield it everywhere."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:717
#, no-c-format
msgid "However, the same is not always true of other general classes of software, or of the actual files you keep in Subversion. For example, on a Windows machine, the definition of a <quote>text file</quote> would be similar to that used on a Linux box, but with a key difference&mdash;the character sequences used to mark the ends of the lines of those files. There are other differences, too. Unix platforms have (and Subversion supports) symbolic links; Windows does not. Unix platforms use filesystem permission to determine executability; Windows uses filename extensions."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:728
#, no-c-format
msgid "Because Subversion is in no position to unite the whole world in common definitions and implementations of all of these things, the best it can do is to try to help make your life simpler when you need to work with your versioned files and directories on multiple computers and operating systems. This section describes some of the ways Subversion does this."
msgstr ""

#. Tag: title
#: ch03-advanced-topics.xml:737
#, fuzzy, no-c-format
msgid "File Content Type"
msgstr "ファイル内容が変化しました"

#. Tag: para
#: ch03-advanced-topics.xml:739
#, fuzzy, no-c-format
msgid "Subversion joins the ranks of the many applications which recognize and make use of Multipurpose Internet Mail Extensions (MIME) content types. Besides being a general-purpose storage location for a file's content type, the value of the <literal>svn:mime-type</literal> file property determines some behavioral characteristics of Subversion itself."
msgstr "<literal>svn:mime-type</literal> 属性は、Subversionではいろいろな 目的に使われます。ファイル自身のMultipurpose Internet Mail Extensions (MIME) 上の分類の記憶場所で あると同時に、この属性の値はSubversion自身のいくつかの動作モードを 決定します。"

#. Tag: title
#: ch03-advanced-topics.xml:748
#, no-c-format
msgid "Identifying File Types"
msgstr "ファイルタイプを指定する"

#. Tag: para
#: ch03-advanced-topics.xml:750
#, no-c-format
msgid "Various programs on most modern operating systems make assumptions about the type and format of the contents of a file by the file's name, specifically its file extension. For example, files whose names end in <filename>.txt</filename> are generally assumed to be human-readable, able to be understood by simple perusal rather than requiring complex processing to decipher. Files whose names end in <filename>.png</filename>, on the other hand, are assumed to be of the Portable Network Graphics type&mdash;not human-readable at all, and sensible only when interpreted by software which understands the PNG format and can render the information in that format as a raster image."
msgstr "ほとんどの近代的なオペレーティングシステムで動作する多くのプログラムではファイル名、特にファイル拡張子に基づいてファイルタイプやファイルフォーマットに関して仮定します。例えば、<filename>.txt</filename> で終わるファイル名のファイルは、一般に人が読める形式であって、解読のために複雑な処理を必要とせずに理解できると想定できます。一方<filename>.png</filename> で終わるファイル名のファイルは、Portable Network Graphics のデータであると想定されます。type&mdash; そして人は全く理解できません。ソフトウェアで解釈されて始めてそれが PNG フォーマットであるとわかります。そして、ラスタ画像としてその情報をレンダリングすることができます。"

#. Tag: para
#: ch03-advanced-topics.xml:764
#, no-c-format
msgid "Unfortunately, some of those extensions have changed their meanings over time. When personal computers first appeared, a file named <filename>README.DOC</filename> would have almost certainly been a plaintext file, just like today's <filename>.txt</filename> files. But by the mid-1990's, you could almost bet that a file of that name would not be a plaintext file at all, but instead a Microsoft Word document in a proprietary, non-human-readable format. But this change didn't occur overnight&mdash;there was certainly a period of confusion for computer users over what exactly they had in hand when they saw a <filename>.DOC</filename> file."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:777
#, no-c-format
msgid "You think that was rough? During that same era, WordPerfect also used <filename>.DOC</filename> for their proprietary file format's preferred extension!"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:783
#, no-c-format
msgid "The popularity of computer networking cast still more doubt on the mapping between a file's name and its content. With information being served across networks and generated dynamically by server-side scripts, there was often no real file per se, and therefore no file name. Web servers, for example, needed some other way to tell browsers what they were downloading so the browser could do something intelligent with that information, whether that was to display the data using a program registered to handle that data type, or to prompt the user for where on the client machine to store the downloaded data."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:795
#, no-c-format
msgid "Eventually, a standard emerged for, among other things, describing the contents of a data stream. In 1996, RFC2045 was published, the first of five RFCs describing MIME. It describes the concept of media types and subtypes, and recommends a syntax for the representation of those types. Today, MIME media types&mdash;or <quote>MIME types</quote>&mdash;are used almost universally across e-mail applications, Web servers, and other software as the de facto mechanism for clearing up the file content confusion."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:808
#, fuzzy, no-c-format
msgid "For example, one of the benefits that Subversion typically provides is contextual, line-based merging of changes received from the server during an update into your working file. But for files containing non-textual data, there is often no concept of a <quote>line</quote>. So, for versioned files whose <literal>svn:mime-type</literal> property is set to a non-textual MIME type (generally, something that doesn't begin with <literal>text/</literal>, though there are exceptions), Subversion does not attempt to perform contextual merges during updates. Instead, any time you have locally modified a binary working copy file that is also being updated, your file is left untouched and Subversion creates two new files. One file has a <filename>.oldrev</filename> extension and contains the BASE revision of the file. The other file has a <filename>.newrev</filename> extension and contains the contents of the updated revision of the file. This behavior is really for the protection of the user against failed attempts at performing contextual merges on files that simply cannot be contextually merged."
msgstr "たとえば、ファイルの<literal>svn:mime-type</literal> 属性が非テキスト MIMEタイプである場合(例外はあるにせよ、一般的には、<literal>text/</literal> 以外で始まるような場合)、Subversionはファイル内容はバイナリであると仮定 します&mdash;つまり、可読ではない&mdash;。この利点の一つは、Subversion が、作業コピー更新時に、サーバから受け取る変更点を、文脈に依存し行単位に マージする機能を提供することです。しかし、バイナリデータと信じられて いるファイルについては<quote>行</quote>のような概念はまったくありません。 それで、このようなファイルについては、Subversionは更新時に文脈マージを 実行しようとはしません。そのかわり、バイナリの作業コピーファイルを 修正し、それが更新される場合はいつでも、あなたのファイルは <filename>.orig</filename> 拡張子を付けた形に名称変更され、 それからSubversionは更新で受け取る変更を含むが、あなた自身のローカルな 修正は含んでいない新しい作業コピーファイルを、もとの名前で保存します。 この振る舞いは、文脈マージできないファイルに文脈マージを 実行しようとする間違った意図からユーザを守るためです。"

#. Tag: para
#: ch03-advanced-topics.xml:828
#, fuzzy, no-c-format
msgid "Also, if the <literal>svn:mime-type</literal> property is set, then the Subversion Apache module will use its value to populate the <literal>Content-type:</literal> HTTP header when responding to GET requests. This gives your web browser a crucial clue about how to display a file when you use it to peruse your Subversion repository's contents."
msgstr "また、もし<literal>svn:mime-type</literal>属性が設定されていると、 SubversionのApacheモジュールはGET要求に応答するとき、HTTPヘッダの <literal>Content-type:</literal>にこの値を使います。これは ブラウザを使ってリポジトリを調べるときに、そのファイルをどうやって 表示すれば良いかの重要な手がかりになります。"

#. Tag: title
#: ch03-advanced-topics.xml:839
#, no-c-format
msgid "File Executability"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:841
#, fuzzy, no-c-format
msgid "On many operating systems, the ability to execute a file as a command is governed by the presence of an execute permission bit. This bit usually defaults to being disabled, and must be explicitly enabled by the user for each file that needs it. But it would be a monumental hassle to have to remember exactly which files in freshly checked-out working copy were supposed to have their executable bits toggled on, and then to have to do that toggling. So, Subversion provides the <literal>svn:executable</literal> property as a way to specify that the executable bit for the file on which that property is set should be enabled, and Subversion honors that request when populating working copies with such files."
msgstr "たくさんのオペレーティングシステム上で、コマンドとしてファイルを 実行できるかどうかは実行ビットの存在によって支配されています。 このビットは普通、デフォルトでは無効となっていて、必要に応じてユーザ が明示的に有効にしてやる必要があります。作業コピー中では、新しい ファイルが常に作られ、その一方で、更新処理を通じて存在している ファイルの新しいバージョンを受け取ります。これは、あるファイルの 実行ビットを有効にしてから作業コピーを更新した場合、もし更新処理の 一貫としてそのファイルが変更されたときにその実行ビットは無効になって しまう可能性があるということです。そこでSubversionは <literal>svn:executable</literal> 属性を、実行ビットを 有効にし続けるために用意しています。"

#. Tag: para
#: ch03-advanced-topics.xml:854
#, no-c-format
msgid "This property has no effect on filesystems that have no concept of an executable permission bit, such as FAT32 and NTFS. <footnote> <para>The Windows filesystems use file extensions (such as <literal>.EXE</literal>, <literal>.BAT</literal>, and <literal>.COM</literal>) to denote executable files.</para> </footnote> Also, although it has no defined values, Subversion will force its value to <literal>*</literal> when setting this property. Finally, this property is valid only on files, not on directories."
msgstr "この属性はFAT32やNTFSのように実行権限ビットの概念を持たないファイルシステム 上では何の効果もありません。 <footnote> <para> Windowsのファイルシステムはファイル拡張を使ってそれが実行ファイルである ことを示します。(<literal>.EXE</literal>, <literal>.BAT</literal>, <literal>.COM</literal>のような拡張子です) </para> </footnote> また、それは定義された値を持ちませんが、Subversionはこの属性が設定される と、強制的にその値を<literal>*</literal>とします。最後に、この属性は ファイルに対してのみ有効で、ディレクトリに対しては意味を持ちません。"

#. Tag: title
#: ch03-advanced-topics.xml:872
#, no-c-format
msgid "End-of-Line Character Sequences"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:874
#, no-c-format
msgid "Unless otherwise noted using a versioned file's <literal>svn:mime-type</literal> property, Subversion assumes the file contains human-readable data. Generally speaking, Subversion only uses this knowledge to determine if contextual difference reports for that file are possible. Otherwise, to Subversion, bytes are bytes."
msgstr "バージョンファイルの<literal>svn:mime-type</literal> 属性で 指定するのでなければ、Subversionはファイルは可読なデータが含まれている と仮定します。一般的に、Subversionはそのファイルに対する文脈差分を 報告することができるかどうかを決めるためにだけ利用します。そうで なければ、Subversionにとって、バイトはただのバイトでしかありません。"

#. Tag: para
#: ch03-advanced-topics.xml:881
#, fuzzy, no-c-format
msgid "This means that by default, Subversion doesn't pay any attention to the type of <firstterm>end-of-line (EOL) markers</firstterm> used in your files. Unfortunately, different operating systems have different conventions about which character sequences represent the end of a line of text in a file. For example, the usual line ending token used by software on the Windows platform is a pair of ASCII control characters&mdash;a carriage return (<literal>CR</literal>) followed by a line feed (<literal>LF</literal>). Unix software, however, just uses the <literal>LF</literal> character to denote the end of a line."
msgstr "これは、デフォルトではSubversionはあなたのファイルが利用している <firstterm>行端 (EOL)マーカ</firstterm> の種類に注意を向けないことを 意味します。不幸にも、異なるオペレーティングシステムはファイルのそれ ぞれの行末をあらわすのに別のトークンを使います。たとえば、普通Windows プラットフォームのソフトによって使われる行末トークンはアスキー制御文字 の組になります&mdash;キャリッジリターン(<literal>CR</literal>) と ラインフィード(<literal>LF</literal>) です。しかしUnixでは単に <literal>LF</literal> 文字を使って行末を表現します。"

#. Tag: para
#: ch03-advanced-topics.xml:893
#, fuzzy, no-c-format
msgid "Not all of the various tools on these operating systems understand files that contain line endings in a format that differs from the <firstterm>native line ending style</firstterm> of the operating system on which they are running. So, typically, Unix programs treat the <literal>CR</literal> character present in Windows files as a regular character (usually rendered as <literal>^M</literal>), and Windows programs combine all of the lines of a Unix file into one giant line because no carriage return-linefeed (or <literal>CRLF</literal>) character combination was found to denote the ends of the lines."
msgstr "これらのオペレーティングシステムの上のさまざまなツールのすべてが 自分が実行されているオペレーティングシステムの <firstterm>もともとの行末スタイルending style</firstterm> とは違った形式の行末を含んでいるようなファイルを理解することができる わけではありません。よくある結果としては、Unixのプログラムは Windowsのファイルにある<literal>CR</literal> 文字を通常の文字 (普通、<literal>^M</literal>のように表示します)として扱い、Windows のプログラムはUnixファイルのすべての行を一つの巨大な行として連結 してしまいますが、これは行末を示すキャリッジリターン - ラインフィード 文字(あるいは<literal>CRLF</literal>)の組み合わせが見つかれらないため です。"

#. Tag: para
#: ch03-advanced-topics.xml:906
#, fuzzy, no-c-format
msgid "This sensitivity to foreign EOL markers can be frustrating for folks who share a file across different operating systems. For example, consider a source code file, and developers that edit this file on both Windows and Unix systems. If all the developers always use tools which preserve the line ending style of the file, no problems occur."
msgstr "この、別のEOLマーカに関する敏感さは、異なるオペレーティング システム間でファイルを共有しようとする人をいらいらさせます。 たとえば、ソースコードファイルと、このファイルをWindowsでも Unix でも編集する開発者を想像してみてください。もしすべての開発者 が常に行末を保存するようなツールを使うのであれば問題は起こりません。"

#. Tag: para
#: ch03-advanced-topics.xml:914
#, no-c-format
msgid "But in practice, many common tools either fail to properly read a file with foreign EOL markers, or they convert the file's line endings to the native style when the file is saved. If the former is true for a developer, he has to use an external conversion utility (such as <command>dos2unix</command> or its companion, <command>unix2dos</command>) to prepare the file for editing. The latter case requires no extra preparation. But both cases result in a file that differs from the original quite literally on every line! Prior to committing his changes, the user has two choices. Either he can use a conversion utility to restore the modified file to the same line ending style that it was in before his edits were made. Or, he can simply commit the file&mdash;new EOL markers and all."
msgstr "しかし、実際には、たくさんのありふれたツールは別のEOLマーカのファイル を正しく読むことができないか、ファイルが保存されるときに、行末を そのオペレーティングシステム固有のものに変換してしまうかします。 もし開発者に最初のことが起こると、彼は外部の変換ユーティリティー (<command>dos2unix</command> や、それとペアになった <command>unix2dos</command>)を使ってファイル編集の前処理をしなくては なりません。あとの場合には何も特別の用意はいりません。しかし どちらの場合でも、すべての行が、最初のものと違ってしまいます。 変更をコミットする前に、ユーザには二通りの選択があります。 編集する前の行末スタイルと同じスタイルになるように変換ユーティリティー を使って修正したファイルを保存するか、単にそのファイルをコミットするか です&mdash;この場合、行末は新しいEOLマーカがつきます。"

#. Tag: para
#: ch03-advanced-topics.xml:930
#, no-c-format
msgid "The result of scenarios like these include wasted time and unnecessary modifications to committed files. Wasted time is painful enough. But when commits change every line in a file, this complicates the job of determining which of those lines were changed in a non-trivial way. Where was that bug really fixed? On what line was a syntax error introduced?"
msgstr "このようなシナリオの結果は時間の無駄と、コミットされたファイルに対する 不必要な修正になります。時間の無駄はそれだけで十分な苦痛です。しかし、 コミットがファイルのすべての行を変更するなら、これは、本当に修正された のはどの行なのかを決定する作業を非常に複雑なものにします。バグの修正は いったいどの行でなされたのか? どの行で構文エラーがあったのか?"

#. Tag: para
#: ch03-advanced-topics.xml:938
#, no-c-format
msgid "The solution to this problem is the <literal>svn:eol-style</literal> property. When this property is set to a valid value, Subversion uses it to determine what special processing to perform on the file so that the file's line ending style isn't flip-flopping with every commit that comes from a different operating system. The valid values are:"
msgstr "この問題の解決は、<literal>svn:eol-style</literal> 属性です。 この属性が正しい値に設定されれば、Subversionはそれを使って、 どのような特殊な処理がファイルに必要であり、その処理をすれば ファイルの行末スタイルが、異なるオぺレーティングシステムからの コミットによって、ばたばた変化したりしないか、を決定します。 設定できる値は:"

#. Tag: literal
#: ch03-advanced-topics.xml:948
#, no-c-format
msgid "native"
msgstr "native"

#. Tag: para
#: ch03-advanced-topics.xml:950
#, no-c-format
msgid "This causes the file to contain the EOL markers that are native to the operating system on which Subversion was run. In other words, if a user on a Windows machine checks out a working copy that contains a file with an <literal>svn:eol-style</literal> property set to <literal>native</literal>, that file will contain <literal>CRLF</literal> EOL markers. A Unix user checking out a working copy which contains the same file will see <literal>LF</literal> EOL markers in his copy of the file."
msgstr "これは、ファイルが、Subversionが実行されているオペレーティング システムの本来のEOLマーカを含むようにします。言い換えると もしWindows上のユーザが作業コピーをチェックアウトして、そこには <literal>svn:eol-style</literal> 属性が<literal>native</literal> に設定されたファイルがある場合、そのファイルは<literal>CRLF</literal> EOLマーカを含むということです。逆にUnix ユーザが作業コピーをチェック アウトし、そこに、その同じファイルがあった場合は、ファイルのコピー には<literal>LF</literal> EOLマーカが含まれることになります。"

#. Tag: para
#: ch03-advanced-topics.xml:962
#, no-c-format
msgid "Note that Subversion will actually store the file in the repository using normalized <literal>LF</literal> EOL markers regardless of the operating system. This is basically transparent to the user, though."
msgstr "Subversionは実際にはリポジトリにファイルを格納するときには、 オペレーティングシステムにはよらず、正規化された<literal>LF</literal> EOLマーカを使います。これは基本的にユーザには意識しなくても良いように なっているわけですが。"

#. Tag: literal
#: ch03-advanced-topics.xml:970
#, no-c-format
msgid "CRLF"
msgstr "CRLF"

#. Tag: para
#: ch03-advanced-topics.xml:972
#, no-c-format
msgid "This causes the file to contain <literal>CRLF</literal> sequences for EOL markers, regardless of the operating system in use."
msgstr "これは使っているオペレーティングシステムによらず、ファイルのEOLマーカ に<literal>CRLF</literal> の並びを使います。"

#. Tag: literal
#: ch03-advanced-topics.xml:978
#, no-c-format
msgid "<literal>LF</literal>"
msgstr "<literal>LF</literal>"

#. Tag: para
#: ch03-advanced-topics.xml:980
#, no-c-format
msgid "This causes the file to contain <literal>LF</literal> characters for EOL markers, regardless of the operating system in use."
msgstr "これは使っているオペレーティングシステムによらず、ファイルのEOLマーカ に<literal>LF</literal> 文字を使います。"

#. Tag: literal
#: ch03-advanced-topics.xml:986
#, no-c-format
msgid "<literal>CR</literal>"
msgstr "<literal>CR</literal>"

#. Tag: para
#: ch03-advanced-topics.xml:988
#, no-c-format
msgid "This causes the file to contain <literal>CR</literal> characters for EOL markers, regardless of the operating system in use. This line ending style is not very common. It was used on older Macintosh platforms (on which Subversion doesn't even run)."
msgstr "これは使っているオペレーティングシステムによらず、ファイルのEOLマーカ に<literal>CR</literal> 文字を使います。 この行末スタイルはそれほど一般的ではありません。それは古いMacintosh プラットフォームで利用されていました。(その上ではSubversionは実行する ことさえできませんが)"

#. Tag: title
#: ch03-advanced-topics.xml:1005
#, fuzzy, no-c-format
msgid "Ignoring Unversioned Items"
msgstr ""
"#-#-#-#-#  ch05.pot  #-#-#-#-#\n"
"バージョン化されない属性\n"
"#-#-#-#-#  ch09.pot  #-#-#-#-#\n"
"Unversioned Properties"

#. Tag: para
#: ch03-advanced-topics.xml:1007
#, no-c-format
msgid "In any given working copy there is a good chance that alongside all those versioned files and directories are other files and directories which are neither versioned nor intended to be. Text editors litter directories with backup files. Software compilers generate intermediate&mdash;or even final&mdash;files which you typically wouldn't bother to version. And users themselves drop various other files and directories wherever they see fit, often in version control working copies."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1017
#, no-c-format
msgid "It's ludicrous to expect Subversion working copies to be somehow impervious to this kind of clutter and impurity. In fact, Subversion counts it as a <emphasis>feature</emphasis> that its working copies are just typical directories, just like unversioned trees. But these not-to-be-versioned files and directories can cause some annoyance for Subversion users. For example, because the <command>svn add</command> and <command>svn import</command> commands act recursively by default, and don't know which files in a given tree you do and don't wish to version, it's easy to accidentally add stuff to version control that you didn't mean to. And because <command>svn status</command> reports, by default, every item of interest in a working copy&mdash;including unversioned files and directories&mdash;its output can get quite noisy where many of these things exist."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1033
#, no-c-format
msgid "So Subversion provides two ways for telling it which files you would prefer that it simply disregard. One of the ways involves the use of Subversion's runtime configuration system (see <xref linkend=\"svn.advanced.confarea\"/>), and therefore applies to all the Subversion operations which make use of that runtime configuration, generally those performed on a particular computer, or by a particular user of a computer. The other way makes use of Subversion's directory property support, is more tightly bound to the versioned tree itself, and therefore affects everyone who has a working copy of that tree. Both of the mechanisms use file patterns."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1045
#, no-c-format
msgid "The Subversion runtime configuration system provides an option, <literal>global-ignores</literal>, whose value is a whitespace-delimited collection of file patterns (also known as <firstterm>globs</firstterm>). The Subversion client checks these patterns against the names of the files which are candidates for addition to version control, as well as to unversioned files which the <command>svn status</command> command notices. If any file's name matches one of the patterns, Subversion will basically act as if the file didn't exist at all. This is really useful for the kinds of files that you almost never want to version, such as editor backup files like Emacs' <literal>*~</literal> and <literal>.*~</literal> files."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1059
#, no-c-format
msgid "When found on a versioned directory, the <literal>svn:ignore</literal> property is expected to contain a list of newline-delimited file patterns which Subversion should use to determine ignorable objects in that same directory. These patterns do not override those found in the <literal>global-ignores</literal> runtime configuration option, but are instead appended to that list. And it's worth noting again that, unlike the <literal>global-ignores</literal> option, the patterns found in the <literal>svn:ignore</literal> property apply only to the directory on which that property is set, and not to any of its subdirectories. The <literal>svn:ignore</literal> property is a good way to tell Subversion to ignore files that are likely to be present in every user's working copy of that directory, such as compiler output or&mdash;to use an example more appropriate to this book&mdash;the HTML, PDF, or PostScript files generated as the result of a conversion of some source DocBook XML files to a more legible output format."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1079
#, no-c-format
msgid "Subversion's support for ignorable file patterns extends only to the one-time process of adding unversioned files and directories to version control. Once an object is under Subversion's control, the ignore pattern mechanisms no longer apply to it. In other words, don't expect Subversion to avoid committing changes you've made to a versioned file simply because that file's name matches an ignore pattern&mdash;Subversion <emphasis>always</emphasis> notices all of its versioned objects."
msgstr ""

#. Tag: title
#: ch03-advanced-topics.xml:1091
#, no-c-format
msgid "Ignore Patterns for CVS Users"
msgstr "CVSユーザにとっての無視パターン"

#. Tag: para
#: ch03-advanced-topics.xml:1093
#, no-c-format
msgid "The Subversion <literal>svn:ignore</literal> property is very similar in syntax and function to the CVS <filename>.cvsignore</filename> file. In fact, if you are migrating a CVS working copy to Subversion, you can directly migrate the ignore patterns by using the <filename>.cvsignore</filename> file as input file to the <command>svn propset</command> command:"
msgstr "Subversionの<literal>svn:ignore</literal> 属性は CVS の <filename>.cvsignore</filename> ファイルに構文も機能も とてもよく似ています。実際、CVS作業コピーをSubversion に移行する場合、<filename>.cvsignore</filename> の 無視パターンを直接 <command>svn propset</command> コマンド の入力ファイルとすることができます:"

#. Tag: screen
#: ch03-advanced-topics.xml:1101
#, no-c-format
msgid ""
"$ svn propset svn:ignore -F .cvsignore .\n"
"property 'svn:ignore' set on '.'\n"
"$"
msgstr ""
"$ svn propset svn:ignore -F .cvsignore .\n"
"property 'svn:ignore' set on '.'\n"
"$"

#. Tag: para
#: ch03-advanced-topics.xml:1103
#, no-c-format
msgid "There are, however, some differences in the ways that CVS and Subversion handle ignore patterns. The two systems use the ignore patterns at some different times, and there are slight discrepancies in what the ignore patterns apply to. Also, Subversion does not recognize the use of the <literal>!</literal> pattern as a reset back to having no ignore patterns at all."
msgstr "しかし、CVS とSubversionがパターンを無視する方法にはいくつかの 違いがあります。二つのシステムは無視パターンを別のタイミングで 利用し、無視パターンが適用される対象にわずかな相違点があります。 さらに、Subversionは無視パターンが何もない状態に戻すための <literal>!</literal> パターンは使うことができません。"

#. Tag: para
#: ch03-advanced-topics.xml:1113
#, no-c-format
msgid "The global list of ignore patterns tends to be more a matter of personal taste, and tied more closely to a user's particular tool chain than to the details of any particular working copy's needs. So, the rest of this section will focus on the <literal>svn:ignore</literal> property and its uses."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1120
#, no-c-format
msgid "Say you have the following output from <command>svn status</command>:"
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:1123
#, no-c-format
msgid ""
"$ svn status calc\n"
" M     calc/button.c\n"
"?      calc/calculator\n"
"?      calc/data.c\n"
"?      calc/debug_log\n"
"?      calc/debug_log.1\n"
"?      calc/debug_log.2.gz\n"
"?      calc/debug_log.3.gz"
msgstr ""
"$ svn status calc\n"
" M     calc/button.c\n"
"?      calc/calculator\n"
"?      calc/data.c\n"
"?      calc/debug_log\n"
"?      calc/debug_log.1\n"
"?      calc/debug_log.2.gz\n"
"?      calc/debug_log.3.gz"

#. Tag: para
#: ch03-advanced-topics.xml:1125
#, fuzzy, no-c-format
msgid "In this example, you have made some property modifications to <filename>button.c</filename>, but in your working copy you also have some unversioned files: the latest <filename>calculator</filename> program that you've compiled from your source code, a source file named <filename>data.c</filename>, and a set of debugging output log files. Now, you know that your build system always results in the <filename>calculator</filename> program being generated. <footnote> <para>Isn't that the whole point of a build system?</para> </footnote> And you know that your test suite always leaves those debugging log files lying around. These facts are true for all working copies of this project, not just your own. And you know that you aren't interested in seeing those things every time you run <command>svn status</command>, and pretty sure that nobody else is interested in them either. So you use <command>svn propedit svn:ignore calc</command> to add some ignore patterns to the <filename>calc</filename> directory. For example, you might add this as the new value of the <literal>svn:ignore</literal> property:"
msgstr "この例では、<filename>button.c</filename>に対する何かの属性の 変更をしましたが、作業コピー中にはいくつかのバージョン管理して いないファイルもあります:ソースコードから コンパイルした<filename>calculator</filename> プログラム、 <filename>data.c</filename>という名前のソースコード、そして、 デバッグ出力のログファイルです。これで、ビルドシステムは常に <filename>calculator</filename>を生成することを知っています。 <footnote> <para>それがビルドシステムの核心では?</para> </footnote> そして、テストプログラムは常にこのようなデバッグログファイルを 残すことも知っています。このような事実はあなたのだけではなく、 どの作業コピーにとっても正しいことです。そして<command>svn status</command> を実行するたびにこれらのファイルを見ることに興味があるのではないことも 知っています。それで、<command>svn propedit svn:ignore calc</command> を使っていくつかの無視パターンを<filename>calc</filename> ディレクトリに 追加します。たとえば<literal>svn:ignore</literal> 属性の新しい 値として、以下を追加するかも知れません:"

#. Tag: programlisting
#: ch03-advanced-topics.xml:1147
#, no-c-format
msgid ""
"calculator\n"
"debug_log*"
msgstr ""
"calculator\n"
"debug_log*"

#. Tag: para
#: ch03-advanced-topics.xml:1149
#, no-c-format
msgid "After you've added this property, you will now have a local property modification on the <filename>calc</filename> directory. But notice what else is different about your <command>svn status</command> output:"
msgstr "この属性を追加すると、<filename>calc</filename>ディレクトリ上に ローカルな属性変更を手に入れることができます。 しかし、<command>svn status</command> 出力について 何が変わったかに注意してください:"

#. Tag: screen
#: ch03-advanced-topics.xml:1154
#, no-c-format
msgid ""
"$ svn status\n"
" M     calc\n"
" M     calc/button.c\n"
"?      calc/data.c"
msgstr ""
"$ svn status\n"
" M     calc\n"
" M     calc/button.c\n"
"?      calc/data.c"

#. Tag: para
#: ch03-advanced-topics.xml:1156
#, fuzzy, no-c-format
msgid "Now, all that cruft is missing from the output! Of course, your <filename>calculator</filename> compiled program and all those logfiles are still in your working copy. Subversion is simply not reminding you that they are present and unversioned. And now with all the uninteresting noise removed from the display, you are left with more interesting items&mdash;such as that source code file <filename>data.c</filename> that you probably forgot to add to version control."
msgstr "これで、見たくないファイルが出力から全部消えました。 もちろんこのようなファイルはまだ作業コピーにあります。 Subversion はそれが存在していて、バージョン管理下にないことについて は何も言いません。これで、表示からつまらないファイルを全部取り除く 一方、もっと注意する必要のあるアイテムについてはそのままにします&mdash; たとえば、バージョン管理下に追加するのを忘れたソースコードファイル などは、依然として表示されます。"

#. Tag: para
#: ch03-advanced-topics.xml:1165
#, fuzzy, no-c-format
msgid "Of course, this less-verbose report of your working copy status isn't the only one available. If you actually want to see the ignored files as part of the status report, you can pass the <option>--no-ignore</option> option to Subversion:"
msgstr "無視するファイルを見たい場合は、Subversionに <option>--no-ignore</option> オプションを渡すことができます:"

#. Tag: screen
#: ch03-advanced-topics.xml:1170
#, fuzzy, no-c-format
msgid ""
"$ svn status --no-ignore\n"
" M     calc\n"
" M     calc/button.c\n"
"I      calc/calculator\n"
"?      calc/data.c\n"
"I      calc/debug_log\n"
"I      calc/debug_log.1\n"
"I      calc/debug_log.2.gz\n"
"I      calc/debug_log.3.gz"
msgstr ""
"$ svn status --no-ignore\n"
" M     calc/button.c\n"
"I      calc/calculator\n"
"?      calc/data.c\n"
"I      calc/debug_log\n"
"I      calc/debug_log.1\n"
"I      calc/debug_log.2.gz\n"
"I      calc/debug_log.3.gz"

#. Tag: para
#: ch03-advanced-topics.xml:1172
#, fuzzy, no-c-format
msgid "As mentioned earlier, the list of file patterns to ignore is also used by <command>svn add</command> and <command>svn import</command>. Both of these operations involve asking Subversion to begin managing some set of files and directories. Rather than force the user to pick and choose which files in a tree she wishes to start versioning, Subversion uses the ignore patterns&mdash;both the global and the per-directory lists&mdash;to determine which files should not be swept into the version control system as part of a larger recursive addition or import operation. And here again, you can use the <option>--no-ignore</option> option to tell Subversion ignore its ignores list and operate on all the files and directories present."
msgstr "無視されるパターンのリストはまた<command>svn add</command> や <command>svn import</command>でも利用されます。これらの操作は Subversion にあるファイルやディレクトリの集まりを管理させることも 含まれます。ユーザがバージョン管理したいと思うファイルをツリー中 から明示的に選択させるかわりに Subversion は無視パターン規則を使って どのファイルバージョン管理システムから除外されるべきであるかを決定 します。この処理は再帰的なファイル追加処理やインポート処理の一環と して行なわれます。"

#. Tag: title
#: ch03-advanced-topics.xml:1192
#, no-c-format
msgid "Keyword Substitution"
msgstr "キーワード展開"

#. Tag: para
#: ch03-advanced-topics.xml:1194
#, fuzzy, no-c-format
msgid "Subversion has the ability to substitute <firstterm>keywords</firstterm>&mdash;pieces of useful, dynamic information about a versioned file&mdash;into the contents of the file itself. Keywords generally provide information about the last modification made to the file. Because this information changes each time the file changes, and more importantly, just <emphasis>after</emphasis> the file changes, it is a hassle for any process except the version control system to keep the data completely up-to-date. Left to human authors, the information would inevitably grow stale."
msgstr "Subversion は<firstterm>キーワード</firstterm>をファイル自身の内容と して置き換える機能があります&mdash;キーワードとは、バージョン化された ファイルについての役に立つ小さくて動的な情報です&mdash;。 キーワードは一般的にファイルが最後に修正された時刻についての情報を あらわしています。この情報はファイルが変更されるたびに変わり、さらに 重要なことにはファイルが変更された<emphasis>直後</emphasis> に 変わるので、それはデータを完全に最新の状態に保つことは、バージョン管理 システム以外のどのような手段にとっても厄介なものです。編集した人間に まかせれば、その情報は必然的に古くなります。"

#. Tag: para
#: ch03-advanced-topics.xml:1206
#, fuzzy, no-c-format
msgid "For example, say you have a document in which you would like to display the last date on which it was modified. You could burden every author of that document to, just before committing their changes, also tweak the part of the document that describes when it was last changed. But sooner or later, someone would forget to do that. Instead, simply ask Subversion to perform keyword substitution on the <literal>LastChangedDate</literal> keyword. You control where the keyword is inserted into your document by placing a <firstterm>keyword anchor</firstterm> at the desired location in the file. This anchor is just a string of text formatted as <literal>$</literal><replaceable>KeywordName</replaceable><literal>$</literal>."
msgstr "たとえば、修正された最後の日付を表示したいと思っているドキュメントが あるとします。あなたは、そのドキュメントのすべての著者に、変更点を コミットする直前に、最後に変更された時刻を示す、ドキュメントの一部を ちょっとだけ変える作業を強いる必要がありますが、遅かれ早かれ誰かこれを忘れる人が 出てくるでしょう。 そうするかわりに、単にSubversionに対して<literal>LastChangedDate</literal> キーワードに対してキーワード置換を実行するように指示しましょう。 あなたはドキュメント中の<firstterm>keyword anchor</firstterm> を置くこと でキーワードが挿入された、ファイル中の任意の場所を制御することができます。 このアンカー文字列は、単に<literal>$</literal> <replaceable>KeywordName</replaceable><literal>$</literal>のように書式化された 文字列です。"

#. Tag: para
#: ch03-advanced-topics.xml:1220
#, no-c-format
msgid "All keywords are case-sensitive where they appear as anchors in files: you must use the correct capitalization in order for the keyword to be expanded. You should consider the value of the <literal>svn:keywords</literal> property to be case-sensitive too&mdash;certain keyword names will be recognized regardless of case, but this behavior is deprecated."
msgstr "すべてのキーワードは大文字小文字の区別がありファイル中での 目印になります: キーワードが展開されるように大文字小文字を正しく 使う必要があります。 <literal>svn:keywords</literal> 属性の値 についても大文字小文字の区別を考慮すべきです &mdash; ある種の キーワードは大文字小文字を区別せずに解釈されますがこの仕様は 過去のものです。"

#. Tag: para
#: ch03-advanced-topics.xml:1227
#, no-c-format
msgid "Subversion defines the list of keywords available for substitution. That list contains the following five keywords, some of which have aliases that you can also use:"
msgstr "Subversion は、置換可能なキーワードのリストを定義しています。 そのリストは、以下の五つのキーワードで、そのいくつかについては 別名を使うこともできます:"

#. Tag: literal
#: ch03-advanced-topics.xml:1233
#, no-c-format
msgid "Date"
msgstr "Date"

#. Tag: para
#: ch03-advanced-topics.xml:1235
#, fuzzy, no-c-format
msgid "This keyword describes the last time the file was known to have been changed in the repository, and is of the form <literal>$Date: 2006-07-22 21:42:37 -0700 (Sat, 22 Jul 2006) $</literal>. It may also be specified as <literal>LastChangedDate</literal>."
msgstr "このキーワードはファイルがリポジトリ中で修正された最後の時刻 をあらわし、<literal>$Date: 2002-07-22 21:42:37 -0700 (Mon, 22 Jul 2002) $</literal>のようなものです。これは <literal>LastChangedDate</literal>と指定することもできます。"

#. Tag: para
#: ch03-advanced-topics.xml:1246
#, no-c-format
msgid "This keyword describes the last known revision in which this file changed in the repository, and looks something like <literal>$Revision: 144 $</literal>. It may also be specified as <literal>LastChangedRevision</literal> or <literal>Rev</literal>."
msgstr "このキーワードは、ファイルがリポジトリで変更された最後のリビジョン をあらわし、<literal>$Revision: 144 $</literal>のようなものです。これは <literal>LastChangedRevision</literal>または <literal>Rev</literal>と省略することもできます。"

#. Tag: literal
#: ch03-advanced-topics.xml:1255
#, no-c-format
msgid "Author"
msgstr "Author"

#. Tag: para
#: ch03-advanced-topics.xml:1257
#, no-c-format
msgid "This keyword describes the last known user to change this file in the repository, and looks something like <literal>$Author: harry $</literal>. It may also be specified as <literal>LastChangedBy</literal>."
msgstr "このキーワードはリポジトリ中のこのファイルを最後に変更したユーザ をあらわし、<literal>$Author: harry $</literal>のようなものです。これは <literal>LastChangedBy</literal>と省略することもできます。"

#. Tag: literal
#: ch03-advanced-topics.xml:1265
#, no-c-format
msgid "HeadURL"
msgstr "HeadURL"

#. Tag: para
#: ch03-advanced-topics.xml:1267
#, no-c-format
msgid "This keyword describes the full URL to the latest version of the file in the repository, and looks something like <literal>$HeadURL: http://svn.collab.net/repos/trunk/README $</literal>. It may be abbreviated as <literal>URL</literal>."
msgstr "このキーワードはリポジトリ中のファイルの最後のバージョン に対する完全なURLをあらわし、 <literal>$HeadURL: http://svn.collab.net/repos/trunk/README $</literal> のようなものです。これは<literal>URL</literal>と省略する こともできます。"

#. Tag: literal
#: ch03-advanced-topics.xml:1276
#, no-c-format
msgid "<literal>Id</literal>"
msgstr "<literal>Id</literal>"

#. Tag: para
#: ch03-advanced-topics.xml:1278
#, fuzzy, no-c-format
msgid "This keyword is a compressed combination of the other keywords. Its substitution looks something like <literal>$Id: calc.c 148 2006-07-28 21:30:43Z sally $</literal>, and is interpreted to mean that the file <filename>calc.c</filename> was last changed in revision 148 on the evening of July 28, 2006 by the user <literal>sally</literal>."
msgstr "このキーワードは、他のキーワードの圧縮された組み合わせです。 その置き換えは、 <literal>$Id: calc.c 148 2002-07-28 21:30:43Z sally $</literal>のようなもので、ファイル <filename>calc.c</filename> が最後に変更されたのは リビジョン148 で、時間は July 28, 2002 の夜、変更した人は、 <literal>sally</literal>であることを意味しています。"

#. Tag: para
#: ch03-advanced-topics.xml:1289
#, no-c-format
msgid "Several of the previous descriptions use the phrase <quote>last known</quote> or similar wording. Keep in mind that keyword expansion is a client-side operation, and your client only <quote>knows</quote> about changes which have occurred in the repository when you update your working copy to include those changes. If you never update your working copy, your keywords will never expand to different values even if those versioned files are being changed regularly in the repository."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1299
#, no-c-format
msgid "Simply adding keyword anchor text to your file does nothing special. Subversion will never attempt to perform textual substitutions on your file contents unless explicitly asked to do so. After all, you might be writing a document <footnote> <para>&hellip; or maybe even a section of a book &hellip;</para> </footnote> about how to use keywords, and you don't want Subversion to substitute your beautiful examples of un-substituted keyword anchors!"
msgstr "キーワードアンカーテキストをファイルに付け加えただけでは何も 起きません。明示的に要求しなければ Subversion は 決してテキスト置換をやろうとはしません。ようは、 キーワードのそのものの使い方についてのドキュメントを <footnote> <para>&hellip; あるいは、その本の一節を&hellip;</para> </footnote> 書いているときに、そのすばらしい例自身がSubversionに よって置換されてほしくはないでしょう。"

#. Tag: para
#: ch03-advanced-topics.xml:1311
#, no-c-format
msgid "To tell Subversion whether or not to substitute keywords on a particular file, we again turn to the property-related subcommands. The <literal>svn:keywords</literal> property, when set on a versioned file, controls which keywords will be substituted on that file. The value is a space-delimited list of the keyword names or aliases found in the previous table."
msgstr "Subversionが特定のファイルの上でキーワードを置換するかどうかを設定 するために、属性関連のサブコマンドに戻ります。 <literal>svn:keywords</literal> 属性は、バージョンファイルに設定 された場合は、そのファイルのどのキーワードが置換されるかの制御を します。その値は、空白で区切られたキーワード名称か別名のリストで、 前に書いたテーブルの中にあるもののどれかになります。"

#. Tag: para
#: ch03-advanced-topics.xml:1319
#, no-c-format
msgid "For example, say you have a versioned file named <filename>weather.txt</filename> that looks like this:"
msgstr "たとえば、<filename>weather.txt</filename> という名前の バージョン管理されているファイルがあり、以下のようだとします:"

#. Tag: programlisting
#: ch03-advanced-topics.xml:1323
#, no-c-format
msgid ""
"Here is the latest report from the front lines.\n"
"$LastChangedDate$\n"
"$Rev$\n"
"Cumulus clouds are appearing more frequently as summer approaches."
msgstr ""
"Here is the latest report from the front lines.\n"
"$LastChangedDate$\n"
"$Rev$\n"
"Cumulus clouds are appearing more frequently as summer approaches."

#. Tag: para
#: ch03-advanced-topics.xml:1325
#, no-c-format
msgid "With no <literal>svn:keywords</literal> property set on that file, Subversion will do nothing special. Now, let's enable substitution of the <literal>LastChangedDate</literal> keyword."
msgstr "<literal>svn:keywords</literal> 属性がファイルに設定されていなければ Subversionは何も特別なことはしません。さて、 <literal>LastChangedDate</literal> キーワードの置換を有効にして みましょう。"

#. Tag: screen
#: ch03-advanced-topics.xml:1330
#, no-c-format
msgid ""
"$ svn propset svn:keywords \"Date Author\" weather.txt\n"
"property 'svn:keywords' set on 'weather.txt'\n"
"$"
msgstr ""
"$ svn propset svn:keywords \"Date Author\" weather.txt\n"
"property 'svn:keywords' set on 'weather.txt'\n"
"$"

#. Tag: para
#: ch03-advanced-topics.xml:1332
#, no-c-format
msgid "Now you have made a local property modification on the <filename>weather.txt</filename> file. You will see no changes to the file's contents (unless you made some of your own prior to setting the property). Notice that the file contained a keyword anchor for the <literal>Rev</literal> keyword, yet we did not include that keyword in the property value we set. Subversion will happily ignore requests to substitute keywords that are not present in the file, and will not substitute keywords that are not present in the <literal>svn:keywords</literal> property value."
msgstr "これで、<filename>weather.txt</filename> のローカル属性を変更しま した。そのファイルの内容には何の変化もないでしょう(属性を設定 する前に変更していなければ)。ファイルはキーワードアンカー <literal>Rev</literal>キーワードを含んでいたとします。私たちはこの キーワードをまだ属性値として設定していません。Subversionはファイル に存在しないキーワードを置換する要求を無視しますし、 <literal>svn:keywords</literal> 属性値に存在しないキーワードを 置換することもありません。"

#. Tag: para
#: ch03-advanced-topics.xml:1343
#, no-c-format
msgid "Immediately after you commit this property change, Subversion will update your working file with the new substitute text. Instead of seeing your keyword anchor <literal>$LastChangedDate$</literal>, you'll see its substituted result. That result also contains the name of the keyword, and continues to be bounded by the dollar sign (<literal>$</literal>) characters. And as we predicted, the <literal>Rev</literal> keyword was not substituted because we didn't ask for it to be."
msgstr "この属性の変更をコミットした直後、Subversionは作業ファイルを、新しい 置換テキストで更新します。キーワードアンカー <literal>$LastChangedDate$</literal>を見るかわりに、置換結果を 見ることになるでしょう。この結果はキーワードの名前を含み、ドル記号 文字(<literal>$</literal>) でくくられています。そして述べたように、 <literal>Rev</literal> は設定していないので、置換されませんでした。"

#. Tag: para
#: ch03-advanced-topics.xml:1353
#, no-c-format
msgid "Note also that we set the <literal>svn:keywords</literal> property to <quote>Date Author</quote> yet the keyword anchor used the alias <literal>$LastChangedDate$</literal> and still expanded correctly."
msgstr "<literal>svn:keywords</literal> 属性を<quote>Date Author</quote> に設定してもキーワードの目印は<literal>$LastChangedDate$</literal> の別名を使うのでやはりうまく展開されます。"

#. Tag: screen
#: ch03-advanced-topics.xml:1358
#, fuzzy, no-c-format
msgid ""
"Here is the latest report from the front lines.\n"
"$LastChangedDate: 2006-07-22 21:42:37 -0700 (Sat, 22 Jul 2006) $\n"
"$Rev$\n"
"Cumulus clouds are appearing more frequently as summer approaches."
msgstr ""
"Here is the latest report from the front lines.\n"
"$LastChangedDate: 2002-07-22 21:42:37 -0700 (Mon, 22 Jul 2002) $\n"
"$Rev$\n"
"Cumulus clouds are appearing more frequently as summer approaches."

#. Tag: para
#: ch03-advanced-topics.xml:1360
#, no-c-format
msgid "If someone else now commits a change to <filename>weather.txt</filename>, your copy of that file will continue to display the same substituted keyword value as before&mdash;until you update your working copy. At that time the keywords in your <filename>weather.txt</filename> file will be re-substituted with information that reflects the most recent known commit to that file."
msgstr "もし誰か別の人が<filename>weather.txt</filename>に変更点をコミット すれば、ファイルのコピーは前と同じ置換されたキーワード値を表示し続ける でしょう&mdash;作業コピーを更新するまでは。そのとき、 <filename>weather.txt</filename>ファイルのキーワードはそのファイルを コミットした一番最後の状態を反映する情報で置換されるでしょう。"

#. Tag: title
#: ch03-advanced-topics.xml:1369
#, no-c-format
msgid "Where's $GlobalRev$?"
msgstr "$GlobalRev$ はどこ?"

#. Tag: para
#: ch03-advanced-topics.xml:1371
#, no-c-format
msgid "New users are often confused by how the <literal>$Rev$</literal> keyword works. Since the repository has a single, globally increasing revision number, many people assume that it is this number which is reflected by the <literal>$Rev$</literal> keyword's value. But <literal>$Rev$</literal> expands to show the last revision in which the file <emphasis>changed</emphasis>, not the last revision to which it was updated. Understanding this clears the confusion, but frustration often remains&mdash;without the support of a Subversion keyword to do so, how can you automatically get the global revision number into your files?"
msgstr "新しいユーザーはよく <literal>$Rev$</literal> キーワードがどのように動作するか混乱することがあります。リポジトリは単一で、全体的に増加するリビジョン番号をもっているので、多くのユーザーは、<literal>$Rev$</literal> がこのリビジョン番号だと想定してしまいます。しかし、 <literal>$Rev$</literal> はそのファイルが  <emphasis>変更された</emphasis> 最後のリビジョンを指すように展開されます。最後に更新されたリビジョンではありません。このことを理解すれば混乱は楷書売れさます。しかし、不満は残ります。この機能をサポートする Subversion キーワードなしで、自動的に自分のファイルにこのグローバルリビジョンを取得することができるでしょうか?"

#. Tag: para
#: ch03-advanced-topics.xml:1384
#, no-c-format
msgid "To do this, you need external processing. Subversion ships with a tool called <command>svnversion</command> which was designed for just this purpose. <command>svnversion</command> crawls your working copy and generates as output the revision(s) it finds. You can use this program, plus some additional tooling, to embed that revision information into your files. For more information on <command>svnversion</command>, see <xref linkend=\"svn.ref.svnversion\"/>."
msgstr "これを実現するためには、外部プログラムによる処理を行う必要があります。Subversion は <command>svnversion</command> と呼ばれるツールを提供しています。このツールはこの目的のために設計されています。 <command>svnversion</command> は作業コピーを探索して、見つけたリビジョン番号を出力として生成します。このツールとリビジョン番号をファイルに埋め込むための追加ツールを使って行うことができます。 <command>svnversion</command> に関するさらなる情報は、 <xref linkend=\"svn.ref.svnversion\"/> を参照してください。"

#. Tag: para
#: ch03-advanced-topics.xml:1396
#, no-c-format
msgid "Subversion 1.2 introduced a new variant of the keyword syntax which brought additional, useful&mdash;though perhaps atypical&mdash;functionality. You can now tell Subversion to maintain a fixed length (in terms of the number of bytes consumed) for the substituted keyword. By using a double-colon (<literal>::</literal>) after the keyword name, followed by a number of space characters, you define that fixed width. When Subversion goes to substitute your keyword for the keyword and its value, it will essentially replace only those space characters, leaving the overall width of the keyword field unchanged. If the substituted value is shorter than the defined field width, there will be extra padding characters (spaces) at the end of the substituted field; if it is too long, it is truncated with a special hash (<literal>#</literal>) character just before the final dollar sign terminator."
msgstr "Subversion 1.2 introduced a new variant of the keyword syntax which brought additional, useful&mdash;though perhaps atypical&mdash;functionality. You can now tell Subversion to maintain a fixed length (in terms of the number of bytes consumed) for the substituted keyword. By using a double-colon (<literal>::</literal>) after the keyword name, followed by a number of space characters, you define that fixed width. When Subversion goes to substitute your keyword for the keyword and its value, it will essentially replace only those space characters, leaving the overall width of the keyword field unchanged. If the substituted value is shorter than the defined field width, there will be extra padding characters (spaces) at the end of the substituted field; if it is too long, it is truncated with a special hash (<literal>#</literal>) character just before the final dollar sign terminator."

#. Tag: para
#: ch03-advanced-topics.xml:1413
#, no-c-format
msgid "For example, say you have a document in which you have some section of tabular data reflecting the document's Subversion keywords. Using the original Subversion keyword substitution syntax, your file might look something like:"
msgstr "For example, say you have a document in which you have some section of tabular data reflecting the document's Subversion keywords. Using the original Subversion keyword substitution syntax, your file might look something like:"

#. Tag: screen
#: ch03-advanced-topics.xml:1419
#, no-c-format
msgid ""
"$Rev$:     Revision of last commit\n"
"$Author$:  Author of last commit\n"
"$Date$:    Date of last commit"
msgstr ""
"$Rev$:     Revision of last commit\n"
"$Author$:  Author of last commit\n"
"$Date$:    Date of last commit"

#. Tag: para
#: ch03-advanced-topics.xml:1421
#, no-c-format
msgid "Now, that looks nice and tabular at the start of things. But when you then commit that file (with keyword substitution enabled, of course), you see:"
msgstr "Now, that looks nice and tabular at the start of things. But when you then commit that file (with keyword substitution enabled, of course), you see:"

#. Tag: screen
#: ch03-advanced-topics.xml:1425
#, no-c-format
msgid ""
"$Rev: 12 $:     Revision of last commit\n"
"$Author: harry $:  Author of last commit\n"
"$Date: 2006-03-15 02:33:03 -0500 (Wed, 15 Mar 2006) $:    Date of last commit"
msgstr ""
"$Rev: 12 $:     Revision of last commit\n"
"$Author: harry $:  Author of last commit\n"
"$Date: 2006-03-15 02:33:03 -0500 (Wed, 15 Mar 2006) $:    Date of last commit"

#. Tag: para
#: ch03-advanced-topics.xml:1427
#, no-c-format
msgid "The result is not so beautiful. And you might be tempted to then adjust the file after the substitution so that it again looks tabular. But that only holds as long as the keyword values are the same width. If the last committed revision rolls into a new place value (say, from 99 to 100), or if another person with a longer username commits the file, stuff gets all crooked again. However, if you are using Subversion 1.2 or better, you can use the new fixed-length keyword syntax, define some field widths that seem sane, and now your file might look like this:"
msgstr "The result is not so beautiful. And you might be tempted to then adjust the file after the substitution so that it again looks tabular. But that only holds as long as the keyword values are the same width. If the last committed revision rolls into a new place value (say, from 99 to 100), or if another person with a longer username commits the file, stuff gets all crooked again. However, if you are using Subversion 1.2 or better, you can use the new fixed-length keyword syntax, define some field widths that seem sane, and now your file might look like this:"

#. Tag: screen
#: ch03-advanced-topics.xml:1438
#, no-c-format
msgid ""
"$Rev::               $:  Revision of last commit\n"
"$Author::            $:  Author of last commit\n"
"$Date::              $:  Date of last commit"
msgstr ""
"$Rev::               $:  Revision of last commit\n"
"$Author::            $:  Author of last commit\n"
"$Date::              $:  Date of last commit"

#. Tag: para
#: ch03-advanced-topics.xml:1440
#, no-c-format
msgid "You commit this change to your file. This time, Subversion notices the new fixed-length keyword syntax, and maintains the width of the fields as defined by the padding you placed between the double-colon and the trailing dollar sign. After substitution, the width of the fields is completely unchanged&mdash;the short values for <literal>Rev</literal> and <literal>Author</literal> are padded with spaces, and the long <literal>Date</literal> field is truncated by a hash character:"
msgstr "You commit this change to your file. This time, Subversion notices the new fixed-length keyword syntax, and maintains the width of the fields as defined by the padding you placed between the double-colon and the trailing dollar sign. After substitution, the width of the fields is completely unchanged&mdash;the short values for <literal>Rev</literal> and <literal>Author</literal> are padded with spaces, and the long <literal>Date</literal> field is truncated by a hash character:"

#. Tag: screen
#: ch03-advanced-topics.xml:1450
#, no-c-format
msgid ""
"$Rev:: 13            $:  Revision of last commit\n"
"$Author:: harry      $:  Author of last commit\n"
"$Date:: 2006-03-15 0#$:  Date of last commit"
msgstr ""
"$Rev:: 13            $:  Revision of last commit\n"
"$Author:: harry      $:  Author of last commit\n"
"$Date:: 2006-03-15 0#$:  Date of last commit"

#. Tag: para
#: ch03-advanced-topics.xml:1452
#, no-c-format
msgid "The use of fixed-length keywords is especially handy when performing substitutions into complex file formats that themselves use fixed-length fields for data, or for which the stored size of a given data field is overbearingly difficult to modify from outside the format's native application (such as for Microsoft Office documents)."
msgstr "The use of fixed-length keywords is especially handy when performing substitutions into complex file formats that themselves use fixed-length fields for data, or for which the stored size of a given data field is overbearingly difficult to modify from outside the format's native application (such as for Microsoft Office documents)."

#. Tag: para
#: ch03-advanced-topics.xml:1460
#, fuzzy, no-c-format
msgid "Be aware that because the width of a keyword field is measured in bytes, the potential for corruption of multi-byte values exists. For example, a username which contains some multi-byte UTF-8 characters might suffer truncation in the middle of the string of bytes which make up one of those characters. The result will be a mere truncation when viewed at the byte level, but will likely appear as a string with an incorrect or garbled final character when viewed as UTF-8 text. It is conceivable that certain applications, when asked to load the file, would notice the broken UTF-8 text and deem the entire file corrupt, refusing to operate on the file altogether. So, when limiting keywords to a fixed size, choose a size that allows for this type of byte-wise expansion."
msgstr "Be aware that because the width of a keyword field is measured in bytes, the potential for corruption of multi-byte values exists. For example, a username which contains some multi-byte UTF-8 characters might suffer truncation in the middle of the string of bytes which make up one of those characters. The result will be a mere truncation when viewed at the byte level, but will likely appear as a string with an incorrect or garbled final character when viewed as UTF-8 text. It is conceivable that certain applications, when asked to load the file, would notice the broken UTF-8 text and deem the entire file corrupt, refusing to operate on the file altogether."

#. Tag: title
#: ch03-advanced-topics.xml:1483
#, no-c-format
msgid "Locking"
msgstr "ロック"

#. Tag: para
#: ch03-advanced-topics.xml:1485
#, no-c-format
msgid "Subversion's copy-modify-merge version control model lives and dies on its data merging algorithms, specifically on how well those algorithms perform when trying to resolve conflicts caused by multiple users modifying the same file concurrently. Subversion itself provides only one such algorithm, a three-way differencing algorithm which is smart enough to handle data at a granularity of a single line of text. Subversion also allows you to supplement its content merge processing with external differencing utilities (as described in <xref linkend=\"svn.advanced.externaldifftools.diff3\"/>), some of which may do an even better job, perhaps providing granularity of a word or a single character of text. But common among those algorithms is that they generally work only on text files. The landscape starts to look pretty grim when you start talking about content merges of non-textual file formats. And when you can't find a tool that can handle that type of merging, you begin to run into problems with the copy-modify-merge model."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1504
#, no-c-format
msgid "Let's look at a real-life example of where this model runs aground. Harry and Sally are both graphic designers working on the same project, a bit of marketing collateral for an automobile mechanic. Central to the design of a particular poster is an image of a car in need of some body work, stored in a file using the PNG image format. The poster's layout is almost finished, and both Harry and Sally are pleased with the particular photo they chose for their damaged car&mdash;a baby blue 1967 Ford Mustang with an unfortunate bit of crumpling on the left front fender."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1515
#, no-c-format
msgid "Now, as is common in graphic design work, there's a change in plans which causes the car's color to be a concern. So Sally updates her working copy to <literal>HEAD</literal>, fires up her photo editing software, and sets about tweaking the image so that the car is now cherry red. Meanwhile, Harry, feeling particularly inspired that day, decides that the image would have greater impact if the car also appears to have suffered greater impact. He, too, updates to <literal>HEAD</literal>, and then draws some cracks on the vehicle's windshield. He manages to finish his work before Sally finishes hers, and after admiring the fruits of his undeniable talent, commits the modified image. Shortly thereafter, Sally is finished with the car's new finish, and tries to commit her changes. But, as expected, Subversion fails the commit, informing Sally that now her version of the image is out of date."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1531
#, no-c-format
msgid "Here's where the difficulty sets in. Were Harry and Sally making changes to a text file, Sally would simply update her working copy, receiving Harry's changes in the process. In the worst possible case, they would have modified the same region of the file, and Sally would have to work out by hand the proper resolution to the conflict. But these aren't text files&mdash;they are binary images. And while it's a simple matter to describe what one would expect the results of this content merge to be, there is precious little chance that any software exists which is smart enough to examine the common baseline image that each of these graphic artists worked against, the changes that Harry made, and the changes that Sally made, and spit out an image of a busted-up red Mustang with a cracked windshield!"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1546
#, no-c-format
msgid "Clearly, things would have gone more smoothly if Harry and Sally had serialized their modifications to the image&mdash;if, say, Harry had waited to draw his windshield cracks on Sally's now-red car, or if Sally had tweaked the color of a car whose windshield was already cracked. As is discussed in <xref linkend=\"svn.basic.vsn-models.copy-merge\"/>, most of these types of problems go away entirely where perfect communication between Harry and Sally exists. <footnote> <para>Communication wouldn't have been such bad medicine for Harry and Sally's Hollywood namesakes, either, for that matter.</para> </footnote> But as one's version control system is, in fact, one form of communication, it follows that having that software facilitate the serialization of non-parallelizable editing efforts is no bad thing. This where Subversion's implementation of the lock-modify-unlock model steps into the spotlight. This is where we talk about Subversion's <firstterm>locking</firstterm> feature, which is similar to the <quote>reserved checkouts</quote> mechanisms of other version control systems."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1569
#, fuzzy, no-c-format
msgid "Subversion's locking feature serves two main purposes:"
msgstr "Subversion のロック機能は主に二つの目標があります:"

#. Tag: para
#: ch03-advanced-topics.xml:1574
#, fuzzy, no-c-format
msgid "<emphasis>Serializing access to a versioned object</emphasis>. By allowing a user to programmatically claim the exclusive right to change to a file in the repository, that user can be reasonably confident that energy invested on unmergeable changes won't be wasted&mdash;his commit of those changes will succeed."
msgstr "<emphasis> リソースに対する直列化されたアクセス</emphasis>。 ユーザがリポジトリ中のファイルを変更するための排他的な権限を取得できる ようにします。Harry が<filename>foo.jpg</filename>を変更する権利を 取得した場合、Sally にはそのファイルの変更点をコミットするのを禁止すべき です。"

#. Tag: para
#: ch03-advanced-topics.xml:1583
#, no-c-format
msgid "<emphasis>Aiding communication</emphasis>. By alerting other users that serialization is in effect for a particular versioned object, those other users can reasonably expect that the object is about to be changed by someone else, and they, too, can avoid wasting their time and energy on unmergeable changes that won't be committable due to eventual out-of-dateness."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1593
#, no-c-format
msgid "When referring to Subversion's locking feature, one is actually talking about a fairly diverse collection of behaviors which include the ability to lock a versioned file <footnote> <para>Subversion does not currently allow locks on directories.</para> </footnote> (claiming the exclusive right to modify the file), to unlock that file (yielding that exclusive right to modify), to see reports about which files are locked and by whom, to annotate files for which locking before editing is strongly advised, and so on. In this section, we'll cover all of these facets of the larger locking feature."
msgstr ""

#. Tag: title
#: ch03-advanced-topics.xml:1607
#, fuzzy, no-c-format
msgid "The three meanings of <quote>lock</quote>"
msgstr "Three meanings of <quote>lock</quote>"

#. Tag: para
#: ch03-advanced-topics.xml:1609
#, no-c-format
msgid "In this section, and almost everywhere in this book, the words <quote>lock</quote> and <quote>locking</quote> describe a mechanism for mutual exclusion between users to avoid clashing commits. Unfortunately, there are two other sorts of <quote>lock</quote> with which Subversion, and therefore this book, sometimes needs to be concerned."
msgstr "In this section, and almost everywhere in this book, the words <quote>lock</quote> and <quote>locking</quote> describe a mechanism for mutual exclusion between users to avoid clashing commits. Unfortunately, there are two other sorts of <quote>lock</quote> with which Subversion, and therefore this book, sometimes needs to be concerned."

#. Tag: para
#: ch03-advanced-topics.xml:1616
#, fuzzy, no-c-format
msgid "The first is <firstterm>working copy locks</firstterm>, used internally by Subversion to prevent clashes between multiple Subversion clients operating on the same working copy. This is the sort of lock indicated by an <computeroutput>L</computeroutput> in the third column of <command>svn status</command> output, and removed by the <command>svn cleanup</command> command, as described in <xref linkend=\"svn.tour.cleanup\"/>."
msgstr "<firstterm>Working copy locks</firstterm>, used internally by Subversion to prevent clashes between multiple Subversion clients operating on the same working copy. This is the sort of lock indicated by an <computeroutput>L</computeroutput> in the third column of <command>svn status</command> output, and removed by the <command>svn cleanup</command> command, as described in <xref linkend=\"svn.tour.other.cleanup\"/>."

#. Tag: para
#: ch03-advanced-topics.xml:1625
#, fuzzy, no-c-format
msgid "Secondly, there are <firstterm>database locks</firstterm>, used internally by the Berkeley DB backend to prevent clashes between multiple programs trying to access the database. This is the sort of lock whose unwanted persistence after an error can cause a repository to be <quote>wedged</quote>, as described in <xref linkend=\"svn.reposadmin.maint.recovery\"/>."
msgstr "<firstterm>Database locks</firstterm>, used internally by the Berkeley DB backend to prevent clashes between multiple programs trying to access the database. This is the sort of lock whose unwanted persistence after an error can cause a repository to be <quote>wedged</quote>, as described in <xref linkend=\"svn.reposadmin.maint.recovery\"/>."

#. Tag: para
#: ch03-advanced-topics.xml:1632
#, fuzzy, no-c-format
msgid "You can generally forget about these other kinds of locks until something goes wrong that requires you to care about them. In this book, <quote>lock</quote> means the first sort unless the contrary is either clear from context or explicitly stated."
msgstr "You can generally forget about these other sorts of lock, until something goes wrong that requires you to care about them. In this book, <quote>lock</quote> means the first sort unless the contrary is either clear from context or explicitly stated."

#. Tag: title
#: ch03-advanced-topics.xml:1642
#, no-c-format
msgid "Creating locks"
msgstr "ロックの作成"

#. Tag: para
#: ch03-advanced-topics.xml:1644
#, fuzzy, no-c-format
msgid "In the Subversion repository, a <firstterm>lock</firstterm> is a piece of metadata which grants exclusive access to one user to change a file. This user is said to be the <firstterm>lock owner</firstterm>. Each lock also has a unique identifier, typically a long string of characters, known as the <firstterm>lock token</firstterm>. The repository manages locks, ultimately handling their creation, enforcement, and removal. If any commit transaction attempts to modify or delete a locked file (or delete one of the parent directories of the file), the repository will demand two pieces of information&mdash;that the client performing the commit be authenticated as the lock owner, and that the lock token has been provided as part of the commit process as a sort of proof that client knows which lock it is using."
msgstr "Subversion リポジトリでは<firstterm>ロック</firstterm>とは あるユーザがファイルを修正する排他的な権限を与える小さなメタデータ です。このユーザは<firstterm>ロックの所有者</firstterm>と呼ばれます。 ロックごとにユニークな識別子があり、普通これは長い文字列の形を したもので、 <firstterm>ロック・トークン</firstterm>と言われます。 リポジトリは独立したテーブル中にロック情報を管理し、コミット操作の最中に 強制的にロックをかけます。コミットのトランザクションがファイルを修正 または削除しようとした場合(あるいはファイルの親を削除しようとした場合)、 リポジトリは二つの情報を要求します:"

#. Tag: para
#: ch03-advanced-topics.xml:1660
#, fuzzy, no-c-format
msgid "To demonstrate lock creation, let's refer back to our example of multiple graphic designers working with on the same binary image files. Harry has decided to change a JPEG image. To prevent other people from committing changes to the file while he is modifying it (as well as alerting them that he is about to change it), he locks the file in the repository using the <command>svn lock</command> command."
msgstr "以下の例によって順序よく説明していきます。Harry が JPEG 画像を修正することに 決めたとしましょう。他の人たちがそのファイルに対する修正をコミットしないように 彼はリポジトリ中のファイルを<command>svn lock</command>コマンドによって ロックします:"

#. Tag: screen
#: ch03-advanced-topics.xml:1668
#, no-c-format
msgid ""
"$ svn lock banana.jpg -m \"Editing file for tomorrow's release.\"\n"
"'banana.jpg' locked by user 'harry'.\n"
"$"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:1670
#, fuzzy, no-c-format
msgid "There are a number of new things demonstrated in the previous example. First, notice that Harry passed the <option>--message (-m)</option> option to <command>svn lock</command>. Similar to <command>svn commit</command>, the <command>svn lock</command> command can take comments (either via <option>--message (-m)</option> or <option>--file (-F)</option>) to describe the reason for locking the file. Unlike <command>svn commit</command>, however, <command>svn lock</command> will not demand a message by launching your preferred text editor. Lock comments are optional, but still recommended to aid communication."
msgstr "前の例には新しい話がたくさん含まれています。まず Harry は <command>svn lock</command> に <option>--message</option> オプションを 渡しています。<command>svn commit</command>と同様、<command>svn lock</command>コマンドは( <option>--message (-m)</option>または <option>--file (-F)</option>オプションによって)コメントをつけてそのファイル をロックした理由を説明することができます。<command>svn commit</command>と違うのは<command>svn lock</command>は 自分の好きなエディタによる メッセージを常に要求するわけではないところです。ロックのコメントは オプションですが、コミュニケーションを円滑にするためにつけることを お勧めします。"

#. Tag: para
#: ch03-advanced-topics.xml:1682
#, fuzzy, no-c-format
msgid "Secondly, the lock attempt succeeded. This means that the file wasn't already locked, and that Harry had the latest version of the file. If Harry's working copy of the file had been out-of-date, the repository would have rejected the request, forcing Harry to <command>svn update</command> and reattempt the locking command. The locking command would also have failed if the file already been locked by someone else."
msgstr "つぎにロックが成醐ｻ駈ｵています。これはそのファイルはまだロックされて いなかったこと、そして Harry がそのファイルの最新バージョンを得たことを 意味しています。もし Harry の作業コピー中のファイルが古いものであれば リポジトリはその要求を拒否し、Harry に対してまず<command>svn update</command> を実行してから再びロックコマンドを発行するように要求します。"

#. Tag: para
#: ch03-advanced-topics.xml:1691
#, no-c-format
msgid "As you can see, the <command>svn lock</command> command prints confirmation of the successful lock. At this point, the fact that the file is locked becomes apparent in the output of the <command>svn status</command> and <command>svn info</command> reporting subcommands."
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:1697
#, fuzzy, no-c-format
msgid ""
"$ svn status\n"
"     K banana.jpg\n"
"\n"
"$ svn info banana.jpg\n"
"Path: banana.jpg\n"
"Name: banana.jpg\n"
"URL: http://svn.example.com/repos/project/banana.jpg\n"
"Repository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec\n"
"Revision: 2198\n"
"Node Kind: file\n"
"Schedule: normal\n"
"Last Changed Author: frank\n"
"Last Changed Rev: 1950\n"
"Last Changed Date: 2006-03-15 12:43:04 -0600 (Wed, 15 Mar 2006)\n"
"Text Last Updated: 2006-06-08 19:23:07 -0500 (Thu, 08 Jun 2006)\n"
"Properties Last Updated: 2006-06-08 19:23:07 -0500 (Thu, 08 Jun 2006)\n"
"Checksum: 3b110d3b10638f5d1f4fe0f436a5a2a5\n"
"Lock Token: opaquelocktoken:0c0f600b-88f9-0310-9e48-355b44d4a58e\n"
"Lock Owner: harry\n"
"Lock Created: 2006-06-14 17:20:31 -0500 (Wed, 14 Jun 2006)\n"
"Lock Comment (1 line):\n"
"Editing file for tomorrow's release.\n"
"\n"
"$"
msgstr ""
"$ svn lock banana.jpg --message \"Editing file for tomorrow's release.\"\n"
"'banana.jpg' locked by user 'harry'.\n"
"\n"
"$ svn status\n"
"     K banana.jpg\n"
"\n"
"$ svn info banana.jpg\n"
"Path: banana.jpg\n"
"Name: banana.jpg\n"
"URL: http://svn.example.com/repos/project/banana.jpg\n"
"Repository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec\n"
"Revision: 2198\n"
"Node Kind: file\n"
"Schedule: normal\n"
"Last Changed Author: frank\n"
"Last Changed Rev: 1950\n"
"Last Changed Date: 2005-03-15 12:43:04 -0600 (Tue, 15 Mar 2005)\n"
"Text Last Updated: 2005-06-08 19:23:07 -0500 (Wed, 08 Jun 2005)\n"
"Properties Last Updated: 2005-06-08 19:23:07 -0500 (Wed, 08 Jun 2005)\n"
"Checksum: 3b110d3b10638f5d1f4fe0f436a5a2a5\n"
"Lock Token: opaquelocktoken:0c0f600b-88f9-0310-9e48-355b44d4a58e\n"
"Lock Owner: harry\n"
"Lock Created: 2005-06-14 17:20:31 -0500 (Tue, 14 Jun 2005)\n"
"Lock Comment (1 line):\n"
"Editing file for tomorrow's release."

#. Tag: para
#: ch03-advanced-topics.xml:1699
#, fuzzy, no-c-format
msgid "That the <command>svn info</command> command, which does not contact the repository when run against working copy paths, can display the lock token reveals an important fact about lock tokens&mdash;that they are cached in the working copy. The presence of the lock token is critical. It gives the working copy authorization to make use of the lock later on. Also, the <command>svn status</command> command shows a <literal>K</literal> next to the file (short for locKed), indicating that the lock token is present."
msgstr "リポジトリ中にロックを作成した後、作業コピーはロックについての情報 をキャッシュすることにも注意してください&mdash;そのうち最も重要なのは ロック・トークンです。ロック・トークンの存在は非常に重要です。作業コピー はそれによって後でロック機能の認可を受けるからです。 <command>svn status</command>コマンドはファイル名のとなりに (locKed の省略として)<literal>K</literal>を表示しロック・トークンが存在 していることを示します。"

#. Tag: title
#: ch03-advanced-topics.xml:1710
#, no-c-format
msgid "Regarding lock tokens"
msgstr "ロック・トークンに関する注意"

#. Tag: para
#: ch03-advanced-topics.xml:1712
#, fuzzy, no-c-format
msgid "A lock token isn't an authentication token, so much as an <emphasis>authorization</emphasis> token. The token isn't a protected secret. In fact, a lock's unique token is discoverable by anyone who runs <command>svn info URL</command>. A lock token is special only when it lives inside a working copy. It's proof that the lock was created in that particular working copy, and not somewhere else by some other client. Merely authenticating as the lock owner isn't enough to prevent accidents."
msgstr "ロック・トークンは作業コピー中に存在する時にだけ特別な意味を持ちます。 トークンによってその特別な作業コピー中でロックが作成され、どこか他の場所に ある他のクライアントによってではないことが証明されます。ロック所有者として 認証されるだけでは不測の事故を避けるのに十分ではないのです。"

#. Tag: para
#: ch03-advanced-topics.xml:1722
#, fuzzy, no-c-format
msgid "For example, suppose you lock a file using a computer at your office, but leave work for the day before you finish your changes to that file. It should not be possible to accidentally commit changes to that same file from your home computer later that evening simply because you've authenticated as the lock's owner. In other words, the lock token prevents one piece of Subversion-related software from undermining the work of another. (In our example, if you really need to change the file from an alternate working copy, you would need to <firstterm>break</firstterm> the lock and re-lock the file.)"
msgstr "例えば: おそらく作成中のチェンジセットの一部として、あなたの職場の コンピュータを使ってあるファイルにロックをかけたとします。 こうしてしまえば、あなたの家にあるほうのコンピュータ上にある作業コピー(あるいは 別の Subversion クライアント)が、あなたがユーザ認証されているからという 理由だけで、間違って同じファイルに変更点をコミットしてしまうことは 不可能です。言い換えるとロック・トークンは Subversion に関係したあるソフトウェア が、他の場所での作業によって台無しにされるのを防ぎます。(今の例では、 もし別の作業コピーからファイルに対する修正を本当に行う必要があるなら ロックを解除し、もう一度そのファイルに対してロックする必要があるで しょう)。"

#. Tag: para
#: ch03-advanced-topics.xml:1736
#, no-c-format
msgid "Now that Harry has locked <filename>banana.jpg</filename>, Sally is unable to change or delete that file:"
msgstr "これで Harry は <filename>banana.jpg</filename> をロックし、Sally は そのファイルを修正したり削除したりできなくなりました:"

#. Tag: screen
#: ch03-advanced-topics.xml:1739
#, fuzzy, no-c-format
msgid ""
"$ svn delete banana.jpg\n"
"D         banana.jpg\n"
"$ svn commit -m \"Delete useless file.\"\n"
"Deleting       banana.jpg\n"
"svn: Commit failed (details follow):\n"
"svn: DELETE of\n"
"'/repos/project/!svn/wrk/64bad3a9-96f9-0310-818a-df4224ddc35d/banana.jpg':\n"
"423 Locked (http://svn.example.com)\n"
"$"
msgstr ""
"$ whoami\n"
"sally\n"
"\n"
"$ svn delete banana.jpg\n"
"D         banana.jpg\n"
"\n"
"$ svn commit -m \"Delete useless file.\"\n"
"Deleting       banana.jpg\n"
"svn: Commit failed (details follow):\n"
"svn: DELETE of\n"
"'/repos/project/!svn/wrk/64bad3a9-96f9-0310-818a-df4224ddc35d/banana.jpg':\n"
"423 Locked (http://svn.example.com)"

#. Tag: para
#: ch03-advanced-topics.xml:1741
#, no-c-format
msgid "But Harry, after touching up the banana's shade of yellow, is able to commit his changes to the file. That's because he authenticates as the lock owner, and also because his working copy holds the correct lock token:"
msgstr "しかし Harry は banana の色合いをもう少し黄色くしたあと、その変更点を コミットすることができます。理由はロック所有者としての認可を受けている からであり、彼の作業コピーにはそのための正しいロック・トークンがあるためです:"

#. Tag: screen
#: ch03-advanced-topics.xml:1746
#, fuzzy, no-c-format
msgid ""
"$ svn status\n"
"M    K banana.jpg\n"
"$ svn commit -m \"Make banana more yellow\"\n"
"Sending        banana.jpg\n"
"Transmitting file data .\n"
"Committed revision 2201.\n"
"$ svn status\n"
"$"
msgstr ""
"$ whoami\n"
"harry\n"
"\n"
"$ svn status\n"
"M    K banana.jpg\n"
"\n"
"$ svn commit -m \"Make banana more yellow\"\n"
"Sending        banana.jpg\n"
"Transmitting file data .\n"
"Committed revision 2201.\n"
"\n"
"$ svn status\n"
"$"

#. Tag: para
#: ch03-advanced-topics.xml:1748
#, fuzzy, no-c-format
msgid "Notice that after the commit is finished, <command>svn status</command> shows that the lock token is no longer present in working copy. This is the standard behavior of <command>svn commit</command>&mdash;it searches the working copy (or list of targets, if you provide such a list) for local modifications, and sends all the lock tokens it encounters during this walk to the server as part of the commit transaction. After the commit completes successfully, all of the repository locks that were mentioned are released&mdash;<emphasis>even on files that weren't committed</emphasis>. This is meant to discourage users from being sloppy about locking, or from holding locks for too long. If Harry haphazardly locks thirty files in a directory named <filename>images</filename> because he's unsure of which files he needs to change, yet only only changes four of those files, when he runs <command>svn commit images</command>, the process will still release all thirty locks."
msgstr "コミット実行後 <command>svn status</command> がロック・トークンが もう作業コピーに存在していないことを示しているのに注意してください。 これが <command>svn commit</command>の普通の動作です: 作業コピーを (あるいは一覧表を用意していた場合はそのリストを)調べてコミット トランザクションの一環として検出したすべてのロック・トークンをサーバに 送信します。コミットが成醐ｻ駈ｵた後で今回関係していたリポジトリ中のすべて のロックは解除されます&mdash;<emphasis>そしてこれはコミット対象とは ならなかったファイルにたいしてもそうなります。</emphasis> この理由はユーザがみだりにロックしないようにすること、そしてあまり長く ロックし続けないようにするためです。たとえば Harry はおおざっぱに <filename>images</filename>という名前のディレクトリ中にある 30 個のファイル にロックしたとします。どのファイルを変更したいのかはっきりしていなかった からです。最終的に、彼は 4 個のファイルに対してだけ修正を加えました。 <command>svn commit images</command>を実行するときそのプロセスは残りファイルも 含めた 30 個すべてのロックを解除するでしょう。"

#. Tag: para
#: ch03-advanced-topics.xml:1766
#, fuzzy, no-c-format
msgid "This behavior of automatically releasing locks can be overridden with the <option>--no-unlock</option> option to <command>svn commit</command>. This is best used for those times when you want to commit changes, but still plan to make more changes and thus need to retain existing locks. You can also make this your default behavior by setting the <literal>no-unlock</literal> runtime configuration option (see <xref linkend=\"svn.advanced.confarea\"/>)."
msgstr "この動作は <command>svn commit</command>に<option>--no-unlock</option>オプション を指定することで上書きできます。これは修正をコミットしたいが、 さらに別の変更する計画があり、ロックを残しておく必要があるような場合に 一番よく使われます。この動作は実行時 <filename>config</filename>ファイル に<literal>no-unlock = yes</literal>を設定することによって半永久的に 調整することもできます(<xref linkend=\"svn.advanced.confarea\"/> を見てください。)"

#. Tag: para
#: ch03-advanced-topics.xml:1775
#, no-c-format
msgid "Of course, locking a file doesn't oblige one to commit a change to it. The lock can be released at any time with a simple <command>svn unlock</command> command:"
msgstr "もちろんファイルをロックした後、修正を必ずコミットしなくてはならない という義務はありません。ロックは単に<command>svn unlock</command> コマンドを利用していつでも解除することもできます:"

#. Tag: screen
#: ch03-advanced-topics.xml:1779
#, no-c-format
msgid ""
"$ svn unlock banana.c\n"
"'banana.c' unlocked."
msgstr ""
"$ svn unlock banana.c\n"
"'banana.c' unlocked."

#. Tag: title
#: ch03-advanced-topics.xml:1785
#, no-c-format
msgid "Discovering locks"
msgstr "ロック状況の調査"

#. Tag: para
#: ch03-advanced-topics.xml:1787
#, no-c-format
msgid "When a commit fails due to someone else's locks, it's fairly easy to learn about them. The easiest of these is <command>svn status --show-updates</command>:"
msgstr "誰かがロックしているせいでコミットに失敗した時には、原因は割と簡単に 調べることができます。一番簡単な方法は <command>svn status --show-updates</command> を実行することです:"

#. Tag: screen
#: ch03-advanced-topics.xml:1791
#, fuzzy, no-c-format
msgid ""
"$ svn status -u\n"
"M              23   bar.c\n"
"M    O         32   raisin.jpg\n"
"       *       72   foo.h\n"
"Status against revision:     105\n"
"$"
msgstr ""
"$ whoami\n"
"sally\n"
"\n"
"$ svn status --show-updates\n"
"M              23   bar.c\n"
"M    O         32   raisin.jpg\n"
"       *       72   foo.h\n"
"Status against revision:     105"

#. Tag: para
#: ch03-advanced-topics.xml:1793
#, no-c-format
msgid "In this example, Sally can see not only that her copy of <filename>foo.h</filename> is out-of-date, but that one of the two modified files she plans to commit is locked in the repository. The <literal>O</literal> symbol stands for <quote>Other</quote>, meaning that a lock exists on the file, and was created by somebody else. If she were to attempt a commit, the lock on <filename>raisin.jpg</filename> would prevent it. Sally is left wondering who made the lock, when, and why. Once again, <command>svn info</command> has the answers:"
msgstr "この例では Sally は自分の作業コピーの <filename>foo.h</filename> が古いだけでなくコミットしようと思っている二つの修正したファイルの 片方はリポジトリ中でロックされていることもわかります。 <literal>O</literal>の記号は <quote>Other(他の)</quote> の意味で ロックがファイル上に存在していてそれをしたのは誰か別の人である という意味になります。彼女がコミットしようとしても<filename>raisin.jpg</filename> 上のロックが邪魔をするでしょう。Sally はさらにロックしたのは誰で、いつ、 どうしてロックしたのかも知りたいとします。今度は <command>svn info</command> が答えを教えてくれます:"

#. Tag: screen
#: ch03-advanced-topics.xml:1804
#, fuzzy, no-c-format
msgid ""
"$ svn info http://svn.example.com/repos/project/raisin.jpg\n"
"Path: raisin.jpg\n"
"Name: raisin.jpg\n"
"URL: http://svn.example.com/repos/project/raisin.jpg\n"
"Repository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec\n"
"Revision: 105\n"
"Node Kind: file\n"
"Last Changed Author: sally\n"
"Last Changed Rev: 32\n"
"Last Changed Date: 2006-01-25 12:43:04 -0600 (Sun, 25 Jan 2006)\n"
"Lock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b\n"
"Lock Owner: harry\n"
"Lock Created: 2006-02-16 13:29:18 -0500 (Thu, 16 Feb 2006)\n"
"Lock Comment (1 line):\n"
"Need to make a quick tweak to this image.\n"
"$"
msgstr ""
"$ svn info http://svn.example.com/repos/project/raisin.jpg\n"
"Path: raisin.jpg\n"
"Name: raisin.jpg\n"
"URL: http://svn.example.com/repos/project/raisin.jpg\n"
"Repository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec\n"
"Revision: 105\n"
"Node Kind: file\n"
"Last Changed Author: sally\n"
"Last Changed Rev: 32\n"
"Last Changed Date: 2005-01-25 12:43:04 -0600 (Tue, 25 Jan 2005)\n"
"Lock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b\n"
"Lock Owner: harry\n"
"Lock Created: 2005-02-16 13:29:18 -0500 (Wed, 16 Feb 2005)\n"
"Lock Comment (1 line):\n"
"Need to make a quick tweak to this image."

#. Tag: para
#: ch03-advanced-topics.xml:1806
#, fuzzy, no-c-format
msgid "Just as <command>svn info</command> can be used to examine objects in the working copy, it can also be used to examine objects in the repository. If the main argument to <command>svn info</command> is a working copy path, then all of the working copy's cached information is displayed; any mention of a lock means that the working copy is holding a lock token (if a file is locked by another user or in another working copy, <command>svn info</command> on a working copy path will show no lock information at all). If the main argument to <command>svn info</command> is a URL, then the information reflects the latest version of an object in the repository, and any mention of a lock describes the current lock on the object."
msgstr "<command>svn info</command>は作業コピー中のオブジェクトの調査にも利用 できますが、リポジトリ中のオブジェクトに対しても調査することができます。 <command>svn info</command>の引数で作業コピーのパスを指定した 場合には作業コピーにキャッシュされているすべての情報が表示されます; ロックに関する上記メッセージのすべては作業コピーがロック・トークンを 持っていることを示しています。(ファイルが別のユーザか別の作業コピーに よってロックされている場合、作業コピーパスでの<command>svn info</command> はロックに関する情報をまったく表示しません)。 <command>svn info</command>の引数が URL なら情報はリポジトリ中のオブジェクトの 最新バージョンに関するものになります; ロックについての表示はそのオブジェクト の現在のロック状況を示しています。"

#. Tag: para
#: ch03-advanced-topics.xml:1820
#, no-c-format
msgid "So in this particular example, Sally can see that Harry locked the file on February 16th to <quote>make a quick tweak</quote>. It being June, she suspects that he probably forgot all about the lock. She might phone Harry to complain and ask him to release the lock. If he's unavailable, she might try to forcibly break the lock herself or ask an administrator to do so."
msgstr "それで今回の具体的な例の場合、Sally は Hally が<quote>ちょっとした 修正</quote>のために 2 月 16 日にそのファイルをロックしたことが わかります。今は 6 月であるので、Sally は多分 Hally は自分がロックしたことを 忘れてしまっているのではないかと考えます。彼女は Harry に電話してロック をはずしてくれるように頼むかも知れません。彼がつかまらなければ彼女は 自分で強制的にロックを解除するか、システム管理者にそうしてもらうように頼む かも知れません。"

#. Tag: title
#: ch03-advanced-topics.xml:1832
#, no-c-format
msgid "Breaking and stealing locks"
msgstr "ロックの解除と横取り(steal)"

#. Tag: para
#: ch03-advanced-topics.xml:1834
#, fuzzy, no-c-format
msgid "A repository lock isn't sacred&mdash;in Subversion's default configuration state, locks can be released not only by the person who created them, but by anyone at all. When somebody other than the original lock creator destroys a lock, we refer to this as <firstterm>breaking</firstterm> the lock."
msgstr "リポジトリのロックは不可侵のものではありません; それはロックした人によっても あるいはまったく別の人によっても解除することができます。ロック作成者以外 の別の人がロックを取り除いた場合、ロックは<firstterm>解除された</firstterm> と言います。"

#. Tag: para
#: ch03-advanced-topics.xml:1841
#, no-c-format
msgid "From the administrator's chair, it's simple to break locks. The <command>svnlook</command> and <command>svnadmin</command> programs have the ability to display and remove locks directly from the repository. (For more information about these tools, see <xref linkend=\"svn.reposadmin.maint.tk\"/>.)"
msgstr "管理者にとってはロックを解除するのは簡単です。<command>svnlook</command> と <command>svnadmin</command> プログラムはリポジトリに対して直接 ロック状況を表示したり解除することができます。(これらのツールに関しての より詳しい情報は <xref linkend=\"svn.reposadmin.maint.tk\"/>を見てください。)"

#. Tag: screen
#: ch03-advanced-topics.xml:1848
#, fuzzy, no-c-format
msgid ""
"$ svnadmin lslocks /usr/local/svn/repos\n"
"Path: /project2/images/banana.jpg\n"
"UUID Token: opaquelocktoken:c32b4d88-e8fb-2310-abb3-153ff1236923\n"
"Owner: frank\n"
"Created: 2006-06-15 13:29:18 -0500 (Thu, 15 Jun 2006)\n"
"Expires: \n"
"Comment (1 line):\n"
"Still improving the yellow color.\n"
"\n"
"Path: /project/raisin.jpg\n"
"UUID Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b\n"
"Owner: harry\n"
"Created: 2006-02-16 13:29:18 -0500 (Thu, 16 Feb 2006)\n"
"Expires: \n"
"Comment (1 line):\n"
"Need to make a quick tweak to this image.\n"
"\n"
"$ svnadmin rmlocks /usr/local/svn/repos /project/raisin.jpg\n"
"Removed lock on '/project/raisin.jpg'.\n"
"$"
msgstr ""
"$ svnadmin lslocks /usr/local/svn/repos\n"
"Path: /project2/images/banana.jpg\n"
"UUID Token: opaquelocktoken:c32b4d88-e8fb-2310-abb3-153ff1236923\n"
"Owner: frank\n"
"Created: 2005-06-15 13:29:18 -0500 (Wed, 15 Jun 2005)\n"
"Expires: \n"
"Comment (1 line):\n"
"Still improving the yellow color.\n"
"\n"
"Path: /project/raisin.jpg\n"
"UUID Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b\n"
"Owner: harry\n"
"Created: 2005-02-16 13:29:18 -0500 (Wed, 16 Feb 2005)\n"
"Expires: \n"
"Comment (1 line):\n"
"Need to make a quick tweak to this image.\n"
"\n"
"$ svnadmin rmlocks /usr/local/svn/repos /project/raisin.jpg\n"
"Removed lock on '/project/raisin.jpg'."

#. Tag: para
#: ch03-advanced-topics.xml:1850
#, fuzzy, no-c-format
msgid "The more interesting option is allowing users to break each other's locks over the network. To do this, Sally simply needs to pass the <option>--force</option> to the unlock command:"
msgstr "さらに興味深いオプションがあって、ネットワーク越しに人のロックを 解除することができます。これには unlock コマンドに対して <option>--force</option>を渡すだけです:"

#. Tag: screen
#: ch03-advanced-topics.xml:1855
#, fuzzy, no-c-format
msgid ""
"$ svn status -u\n"
"M              23   bar.c\n"
"M    O         32   raisin.jpg\n"
"       *       72   foo.h\n"
"Status against revision:     105\n"
"$ svn unlock raisin.jpg\n"
"svn: 'raisin.jpg' is not locked in this working copy\n"
"$ svn info raisin.jpg | grep URL\n"
"URL: http://svn.example.com/repos/project/raisin.jpg\n"
"$ svn unlock http://svn.example.com/repos/project/raisin.jpg\n"
"svn: Unlock request failed: 403 Forbidden (http://svn.example.com)\n"
"$ svn unlock --force http://svn.example.com/repos/project/raisin.jpg\n"
"'raisin.jpg' unlocked.\n"
"$"
msgstr ""
"$ whoami\n"
"sally\n"
"\n"
"$ svn status --show-updates\n"
"M              23   bar.c\n"
"M    O         32   raisin.jpg\n"
"       *       72   foo.h\n"
"Status against revision:     105\n"
"\n"
"$ svn unlock raisin.jpg\n"
"svn: 'raisin.jpg' is not locked in this working copy\n"
"\n"
"$ svn info raisin.jpg | grep URL\n"
"URL: http://svn.example.com/repos/project/raisin.jpg\n"
"\n"
"$ svn unlock http://svn.example.com/repos/project/raisin.jpg\n"
"svn: Unlock request failed: 403 Forbidden (http://svn.example.com)\n"
"\n"
"$ svn unlock --force http://svn.example.com/repos/project/raisin.jpg\n"
"'raisin.jpg' unlocked."

#. Tag: para
#: ch03-advanced-topics.xml:1857
#, fuzzy, no-c-format
msgid "Now, Sally's initial attempt to unlock failed because she ran <command>svn unlock</command> directly on her working copy of the file, and no lock token was present. To remove the lock directly from the repository, she needs to pass a URL to <command>svn unlock</command>. Her first attempt to unlock the URL fails, because she can't authenticate as the lock owner (nor does she have the lock token). But when she passes <option>--force</option>, the authentication and authorization requirements are ignored, and the remote lock is broken."
msgstr "サリーが最初に unlock に失敗したのは自分の作業コピー中のファイルに対して 直接 <command>svn unlock</command>を実行したのに、そこにはロックが存在 していなかったためです。リポジトリから直接ロックを取り除くには <command>svn unlock</command> に URL の引数を渡す必要があります。 URL をロック解除しようという最初の試みには失敗していますが、それは ロック所有者の認可を受けていない(し、ロック・トークンも持っていない)ため です。しかし <option>--force</option> オプションを渡すと、認証と認可の 要求は無視され、他の人によって作成されたロックは解除されます。"

#. Tag: para
#: ch03-advanced-topics.xml:1868
#, fuzzy, no-c-format
msgid "Simply breaking a lock may not be enough. In the running example, Sally may not only want to break Harry's long-forgotten lock, but re-lock the file for her own use. She can accomplish this by running <command>svn unlock --force</command> and then <command>svn lock</command> back-to-back, but there's a small chance that somebody else might lock the file between the two commands. The simpler thing to is <firstterm>steal</firstterm> the lock, which involves breaking and re-locking the file all in one atomic step. To do this, Sally passes the <option>--force</option> option to <command>svn lock</command>:"
msgstr "もちろん単にロックを解除するだけでは十分ではないでしょう。上記の例では Sally は Harry がずっと長いこと忘れていたロックを解除したいだけではなく 自分自身の作業のためにそのファイルを再ロックしたいのが普通でしょう。 <command>svn unlock --force</command>のあとで <command>svn lock</command>を実行すれ ばうまくいきます。しかし、この二つのコマンドの間に誰か別の人がロックして しまうわずかな可能性があります。もっと簡単な方法はロックを <firstterm>横取りする(steal)</firstterm>ことであり、これはロック解除と 再取得を不分割な一まとまりの処理として実行します。これには <command>svn lock</command>に <option>--force</option>オプションを 指定します:"

#. Tag: screen
#: ch03-advanced-topics.xml:1880
#, fuzzy, no-c-format
msgid ""
"$ svn lock raisin.jpg\n"
"svn: Lock request failed: 423 Locked (http://svn.example.com)\n"
"$ svn lock --force raisin.jpg\n"
"'raisin.jpg' locked by user 'sally'.\n"
"$"
msgstr ""
"$ svn lock raisin.jpg\n"
"svn: Lock request failed: 423 Locked (http://svn.example.com)\n"
"\n"
"$ svn lock --force raisin.jpg\n"
"'raisin.jpg' locked by user 'sally'."

#. Tag: para
#: ch03-advanced-topics.xml:1882
#, fuzzy, no-c-format
msgid "In any case, whether the lock is broken or stolen, Harry may be in for a surprise. Harry's working copy still contains the original lock token, but that lock no longer exists. The lock token is said to be <firstterm>defunct</firstterm>. The lock represented by the lock token has either been broken (no longer in the repository), or stolen (replaced with a different lock). Either way, Harry can see this by asking <command>svn status</command> to contact the repository:"
msgstr "ロックを解除しようと横取りしようと、Harry はびっくりするかも知れません。 Harry の作業コピーにはまだ最初にロックを取得したときのロック・トークンがある のにロックそのものはもう存在していないからです。そのロック・トークンは <firstterm>無効になった(defunct)</firstterm>と言います。 そのロック・トークンによって表されているロックは解除されたか(すでに リポジトリに存在していない)、横取りされたか(別のロックに置き換わった) のいずれかです。どちらの場合も Harry はリポジトリに対して <command>svn status</command>コマンドを実行することで様子をつかむことが できます:"

#. Tag: screen
#: ch03-advanced-topics.xml:1892
#, fuzzy, no-c-format
msgid ""
"$ svn status\n"
"     K raisin.jpg\n"
"$ svn status -u\n"
"     B         32   raisin.jpg\n"
"$ svn update\n"
"  B  raisin.jpg\n"
"$ svn status\n"
"$"
msgstr ""
"$ whoami\n"
"harry\n"
"\n"
"$ svn status\n"
"     K raisin.jpg\n"
"\n"
"$ svn status --show-updates\n"
"     B         32   raisin.jpg\n"
"\n"
"$ svn update\n"
"  B  raisin.jpg\n"
" \n"
"$ svn status\n"
"\n"
"$"

#. Tag: para
#: ch03-advanced-topics.xml:1894
#, no-c-format
msgid "If the repository lock was broken, then <command>svn status --show-updates</command> displays a <literal>B</literal> (Broken) symbol next to the file. If a new lock exists in place of the old one, then a <literal>T</literal> (sTolen) symbol is shown. Finally, <command>svn update</command> notices any defunct lock tokens and removes them from the working copy."
msgstr "リポジトリロックが解除された場合、 <command>svn status --show-updates</command>はファイルの隣に <literal>B</literal> (Broken の意味)の記号を表示します。 古いトークンに変わって新たしいロックが存在している場合だと <literal>T</literal> (sTolen)の記号を表示します。 また <command>svn update</command> は無効になったすべての ロック・トークンを表示し、作業コピーから取り除きます。"

#. Tag: title
#: ch03-advanced-topics.xml:1903
#, no-c-format
msgid "Locking Policies"
msgstr "ロックのポリシー"

#. Tag: para
#: ch03-advanced-topics.xml:1905
#, fuzzy, no-c-format
msgid "Different systems have different notions of how strict a lock should be. Some folks argue that locks must be strictly enforced at all costs, releasable only by the original creator or administrator. They argue that if anyone can break a lock, then chaos runs rampant and the whole point of locking is defeated. The other side argues that locks are first and foremost a communication tool. If users are constantly breaking each others' locks, then it represents a cultural failure within the team and the problem falls outside the scope of software enforcement."
msgstr "ロックをどの程度厳密にとらえるかはシステムごとに違った考えかたがあります。 人によってはロックは非常に厳密なものであって、最初に作成した人か管理者に よってのみ解除できなくてはならないと言います。彼らの論点は、もし誰もが ロックを解除できるとすれば混乱が生じ、ロックの機構が目的とする機能が うまく提供できないというものです。別の人たちはロックはまずは、そしてほとんどの 場合はコミュニケーションのための道具であると言います。ユーザが他人のロック を頻繁に解除するようだと、それはそのチームがうまく協調して作業することに失敗して いることを意味していて、それはソフトウェアが提供する範囲外の問題である と考えます。"

#. Tag: para
#: ch03-advanced-topics.xml:1916
#, fuzzy, no-c-format
msgid "Subversion defaults to the <quote>softer</quote> approach, but still allows administrators to create stricter enforcement policies through the use of hook scripts. In particular, the <filename>pre-lock</filename> and <filename>pre-unlock</filename> hooks allow administrators to decide when lock creation and lock releases are allowed to happen. Depending on whether or not a lock already exists, these two hooks can decide whether or not to allow a certain user to break or steal a lock. The <filename>post-lock</filename> and <filename>post-unlock</filename> hooks are also available, and can be used to send email after locking actions. To learn more about repository hooks, see <xref linkend=\"svn.reposadmin.create.hooks\"/>."
msgstr "Subversion はデフォルトでは<quote>柔軟な</quote>アプローチをとりますが それでも管理者がフックスクリプトを利用することによって厳密なポリシーを 作ることも認めています。ロックがすでに存在しているかどうかによって これら二つのフックプログラムはある特定のユーザがロックを解除したり横取りしたり するのを許すかどうかを決めることができます。 <filename>post-lock</filename> と <filename>post-unlock</filename> のフックも有効で、それはロック処理の後で email を送信するのに利用する ことができます。"

#. Tag: title
#: ch03-advanced-topics.xml:1937
#, no-c-format
msgid "Lock Communication"
msgstr "ロックのコミュニケーション"

#. Tag: para
#: ch03-advanced-topics.xml:1939
#, no-c-format
msgid "We've seen how <command>svn lock</command> and <command>svn unlock</command> can be used to create, release, break, and steal locks. This satisfies the goal of serializing commit access to a file. But what about the larger problem of preventing wasted time?"
msgstr "<command>svn lock</command>と<command>svn unlock</command> がどうやってロックを作ったり解放したり強制解除したり横取りしたりするか を見てきました。これは特定のファイルに対する直列化したコミットをしたい という目標を満足するものです。しかし、作業時間を無駄にしないという、 より大きな問題についてはどうなのでしょうか?"

#. Tag: para
#: ch03-advanced-topics.xml:1945
#, no-c-format
msgid "For example, suppose Harry locks an image file and then begins editing it. Meanwhile, miles away, Sally wants to do the same thing. She doesn't think to run <command>svn status --show-updates</command>, so she has no idea that Harry has already locked the file. She spends hours editing the file, and when she tries to commit her change, she discovers that either the file is locked or that she's out-of-date. Regardless, her changes aren't mergeable with Harry's. One of these two people has to throw away their work, and a lot of time has been wasted."
msgstr "たとえば Harry がある画像ファイルをロックしてから編集し始めたとしましょう。 いっぽう、かなり離れた場所にいる Sally も同じことがしたかったとします。 彼女は <command>svn status --show-updates</command>を実行することを知らないので Harry が 既にそのファイルをロックしていることを知ることができません。彼女は そのファイルを何時間かかけて編集し、その自分の修正点をコミットしようとして はじめてそのファイルはロックされているか、彼女のファイルが最新ではない ことに気づきます。どうであれ、彼女の変更は Harry のものとマージすることが できません。二人のうちのどちらかが自分の作業を捨てなければならず 多くの時間が無駄になります。"

#. Tag: para
#: ch03-advanced-topics.xml:1956
#, fuzzy, no-c-format
msgid "Subversion's solution to this problem is to provide a mechanism to remind users that a file ought to be locked <emphasis>before</emphasis> the editing begins. The mechanism is a special property, <literal>svn:needs-lock</literal>. If that property is attached to a file (regardless of its value, which is irrelevant), then Subversion will try to use filesystem-level permissions to make the file read-only&mdash;unless, of course, the user has explicitly locked the file. When a lock token is present (as a result of running <command>svn lock</command>), the file becomes read-write. When the lock is released, the file becomes read-only again."
msgstr "この属性はそのファイルが変数前にロックされるべきであることを 示すのに利用されます。属性の値は無関係です: Subversion はこの値を <literal>*</literal>に一律置き換えます。存在している場合、ファイル はユーザが明示的にファイルをロックしない限り、読み込むことだけが許され ます。ロックが取得できている場合(これは <command>svn lock</command> 実行の結果ですが)、ファイルは読み書き可能になります。ロックが解除 されるとファイルは再び読み込むことだけができる状態になります。"

#. Tag: para
#: ch03-advanced-topics.xml:1969
#, fuzzy, no-c-format
msgid "The theory, then, is that if the image file has this property attached, then Sally would immediately notice something is strange when she opens the file for editing: many applications alert users immediately when a read-only file is opened for editing, and nearly all would prevent her from saving changes to the file. This reminds her to lock the file before editing, whereby she discovers the pre-existing lock:"
msgstr "こうすることで、画像ファイルにこの属性がついている場合、Sally は 編集のためにファイルを開いた時に何かおかしなことになっていることに すぐに気づくはずです。彼女が使っているアプリケーションはそのファイル が読み込み専用であることを伝えます。これで彼女は編集前にそのファイルを ロックしなくてはならないことを思いだし、こうして既に存在しているロック に気づくことになります:"

#. Tag: screen
#: ch03-advanced-topics.xml:1978
#, fuzzy, no-c-format
msgid ""
"$ /usr/local/bin/gimp raisin.jpg\n"
"gimp: error: file is read-only!\n"
"$ ls -l raisin.jpg\n"
"-r--r--r--   1 sally   sally   215589 Jun  8 19:23 raisin.jpg\n"
"$ svn lock raisin.jpg\n"
"svn: Lock request failed: 423 Locked (http://svn.example.com)\n"
"$ svn info http://svn.example.com/repos/project/raisin.jpg | grep Lock\n"
"Lock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b\n"
"Lock Owner: harry\n"
"Lock Created: 2006-06-08 07:29:18 -0500 (Thu, 08 June 2006)\n"
"Lock Comment (1 line):\n"
"Making some tweaks.  Locking for the next two hours.\n"
"$"
msgstr ""
"$ /usr/local/bin/gimp raisin.jpg\n"
"gimp: error: file is read-only!\n"
"$ ls -l raisin.jpg\n"
"-r--r--r--   1 sally   sally   215589 Jun  8 19:23 raisin.jpg\n"
" \n"
"$ svn lock raisin.jpg\n"
"svn: Lock request failed: 423 Locked (http://svn.example.com)\n"
" \n"
"$ svn info http://svn.example.com/repos/project/raisin.jpg | grep Lock\n"
"Lock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b\n"
"Lock Owner: harry\n"
"Lock Created: 2005-06-08 07:29:18 -0500 (Thu, 08 June 2005)\n"
"Lock Comment (1 line):\n"
"Making some tweaks.  Locking for the next two hours."

#. Tag: para
#: ch03-advanced-topics.xml:1981
#, fuzzy, no-c-format
msgid "Users and administrators alike are encouraged to attach the <literal>svn:needs-lock</literal> property to any file which cannot be contextually merged. This is the primary technique for encouraging good locking habits and preventing wasted effort."
msgstr "<quote>最良の方法</quote>は、ユーザも管理者もお互いにマージすることが できないようなファイルには常に <literal>svn:needs-lock</literal> 属性をつけておくというものです。この技法はロック機能を利用する上での 良い習慣であり、無駄な作業を防ぐことができます。"

#. Tag: para
#: ch03-advanced-topics.xml:1988
#, no-c-format
msgid "Note that this property is a communication tool which works independently from the locking system. In other words, any file can be locked, whether or not this property is present. And conversely, the presence of this property doesn't make the repository require a lock when committing."
msgstr "この属性はロックシステムとは独立して機能するコミュニケーション用の 仕組みであることに注意してください。言いかえるとどのようなファイル も、このプロパティーがあるかどうかにかかわらずロックすることが できます。逆にこの属性の存在だけで、コミット時にリポジトリから常に ロックを要求されるということにはなりません。"

#. Tag: para
#: ch03-advanced-topics.xml:1995
#, fuzzy, no-c-format
msgid "Unfortunately, the system isn't flawless. It's possible that even when a file has the property, the read-only reminder won't always work. Sometimes applications misbehave and <quote>hijack</quote> the read-only file, silently allowing users to edit and save the file anyway. There's not much that Subversion can do in this situation&mdash;at the end of the day, there's simply no substitution for good interpersonal communication."
msgstr "これで完璧とはいきません。ファイルがこの属性を持っていたとしても 読み込み専用の警告機能が常に動作するとは限りません。アプリケーション の間違った動作によっては、警告を出さずに黙ってそのファイルに対する 編集を許し、保存してしまう結果、読み込み専用ファイルを<quote>乗っ取って</quote> しまうこともあるでしょう。残念なことにこのような状況に対して Subversion ができることはあまり多くはありません。"

#. Tag: para
#: ch03-advanced-topics.xml:2004
#, no-c-format
msgid "Except, perhaps, a classic Vulcan mind-meld."
msgstr ""

#. Tag: title
#: ch03-advanced-topics.xml:2016
#, no-c-format
msgid "Externals Definitions"
msgstr "外部定義"

#. Tag: para
#: ch03-advanced-topics.xml:2018
#, fuzzy, no-c-format
msgid "Sometimes it is useful to construct a working copy that is made out of a number of different checkouts. For example, you may want different subdirectories to come from different locations in a repository, or perhaps from different repositories altogether. You could certainly set up such a scenario by hand&mdash;using <command>svn checkout</command> to create the sort of nested working copy structure you are trying to achieve. But if this layout is important for everyone who uses your repository, every other user will need to perform the same checkout operations that you did."
msgstr "ときどき、いくつかの別のチェックアウトによって、一つの作業 コピーを作るのが便利なことがあります。たとえば、リポジトリの別々の場所に ある異なるサブディレクトリがほしいとか、リポジトリ自体が別であるとかです。 そのようなことを手で設定することももちろんできます&mdash; <command>svn checkout</command> を使ってネストした作業コピー構造のような ものを作るわけです。しかし、このレイアウトがリポジトリを使うすべての人に とって重要であれば、他の全員もあなたがやったのと同じチェックアウト操作を する必要があります。"

#. Tag: para
#: ch03-advanced-topics.xml:2029
#, fuzzy, no-c-format
msgid "Fortunately, Subversion provides support for <firstterm>externals definitions</firstterm>. An externals definition is a mapping of a local directory to the URL&mdash;and ideally a particular revision&mdash;of a versioned directory. In Subversion, you declare externals definitions in groups using the <literal>svn:externals</literal> property. You can create or modify this property using <command>svn propset</command> or <command>svn propedit</command> (see <xref linkend=\"svn.advanced.props.manip\"/>). It can be set on any versioned directory, and its value is a multi-line table of subdirectories (relative to the versioned directory on which the property is set), optional revision flags, and fully qualified, absolute Subversion repository URLs."
msgstr "幸運なことに、Subversionは<firstterm>外部定義</firstterm>をサポート しています。外部定義は、ローカルディレクトリをバージョン管理された リソースのURL&mdash;や特定のリビジョン&mdash;に結びつけるものです。Subversionでは、 <literal>svn:externals</literal>属性を使って外部定義をグループにして 宣言します。<command>svn propset</command>か、<command>svn propedit</command> コマンドでこの属性を作ったり修正したりすることができます(<xref linkend=\"svn.advanced.props.why\"/>を参照してください)。 この属性はバージョン管理されたディレクトリに設定され、 その値は(属性が設定されたバージョン管理されたディレクトリ に相対的な)サブディレクトリと、完全に修飾されたSubversionリポジトリURL の絶対パス名を一行とした複数行テーブルです。"

#. Tag: screen
#: ch03-advanced-topics.xml:2043
#, no-c-format
msgid ""
"$ svn propget svn:externals calc\n"
"third-party/sounds             http://sounds.red-bean.com/repos\n"
"third-party/skins              http://skins.red-bean.com/repositories/skinproj\n"
"third-party/skins/toolkit -r21 http://svn.red-bean.com/repos/skin-maker"
msgstr ""
"$ svn propget svn:externals calc\n"
"third-party/sounds             http://sounds.red-bean.com/repos\n"
"third-party/skins              http://skins.red-bean.com/repositories/skinproj\n"
"third-party/skins/toolkit -r21 http://svn.red-bean.com/repos/skin-maker"

#. Tag: para
#: ch03-advanced-topics.xml:2045
#, fuzzy, no-c-format
msgid "The convenience of the <literal>svn:externals</literal> property is that once it is set on a versioned directory, everyone who checks out a working copy with that directory also gets the benefit of the externals definition. In other words, once one person has made the effort to define those nested working copy checkouts, no one else has to bother&mdash;Subversion will, upon checkout of the original working copy, also check out the external working copies."
msgstr "<literal>svn:externals</literal>が便利なのは、ひとたびバージョン管理 下のディレクトリに設定してしまえば、そのディレクトリのある作業コピーを チェックアウトした人は誰でも外部定義の恩恵にあずかることができる ところです。言い換えると、誰かがそのようなネストした作業コピーの チェックアウトを定義すれば、他の人は誰もそれについて悩まなくて済む ということです&mdash;Subversionは、もともとの作業コピーのチェックアウト の上にも外部作業コピーをチェックアウトすることができます。"

#. Tag: para
#: ch03-advanced-topics.xml:2055
#, no-c-format
msgid "The relative target subdirectories of externals definitions <emphasis>must not</emphasis> already exist on your or other users' systems&mdash;Subversion will create them when it checks out the external working copy."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2061
#, fuzzy, no-c-format
msgid "Note the previous externals definition example. When someone checks out a working copy of the <filename>calc</filename> directory, Subversion also continues to check out the items found in its externals definition."
msgstr "前の外部定義の例を見てみましょう。誰かが<filename>calc</filename> ディレクトリの作業コピーをチェックアウトすると、Subversionは その外部定義にあるアイテムも続けてチェックアウトします。"

#. Tag: screen
#: ch03-advanced-topics.xml:2066
#, no-c-format
msgid ""
"$ svn checkout http://svn.example.com/repos/calc\n"
"A  calc\n"
"A  calc/Makefile\n"
"A  calc/integer.c\n"
"A  calc/button.c\n"
"Checked out revision 148.\n"
"\n"
"Fetching external item into calc/third-party/sounds\n"
"A  calc/third-party/sounds/ding.ogg\n"
"A  calc/third-party/sounds/dong.ogg\n"
"A  calc/third-party/sounds/clang.ogg\n"
"&hellip;\n"
"A  calc/third-party/sounds/bang.ogg\n"
"A  calc/third-party/sounds/twang.ogg\n"
"Checked out revision 14.\n"
"\n"
"Fetching external item into calc/third-party/skins\n"
"&hellip;"
msgstr ""
"$ svn checkout http://svn.example.com/repos/calc\n"
"A  calc\n"
"A  calc/Makefile\n"
"A  calc/integer.c\n"
"A  calc/button.c\n"
"Checked out revision 148.\n"
"\n"
"Fetching external item into calc/third-party/sounds\n"
"A  calc/third-party/sounds/ding.ogg\n"
"A  calc/third-party/sounds/dong.ogg\n"
"A  calc/third-party/sounds/clang.ogg\n"
"&hellip;\n"
"A  calc/third-party/sounds/bang.ogg\n"
"A  calc/third-party/sounds/twang.ogg\n"
"Checked out revision 14.\n"
"\n"
"Fetching external item into calc/third-party/skins\n"
"&hellip;"

#. Tag: para
#: ch03-advanced-topics.xml:2068
#, no-c-format
msgid "If you need to change the externals definition, you can do so using the regular property modification subcommands. When you commit a change to the <literal>svn:externals</literal> property, Subversion will synchronize the checked-out items against the changed externals definition when you next run <command>svn update</command>. The same thing will happen when others update their working copies and receive your changes to the externals definition."
msgstr "もし、外部定義を変更する必要がある場合、通常の属性変更 サブコマンドを使ってやることができます。 <literal>svn:externals</literal>属性への変更をコミットするとき、 Subversionは次の<command>svn update</command>を実行するときの 変更された外部定義に対してチェックアウトするアイテムを同期します。 同じことが、他の人が作業コピーを更新し、あなたが変更した外部定義 を受け取るときにも起こります。"

#. Tag: para
#: ch03-advanced-topics.xml:2078
#, no-c-format
msgid "Because the <literal>svn:externals</literal> property has a multiline value, we strongly recommend that you use <command>svn propedit</command> instead of <command>svn propset</command>."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2085
#, fuzzy, no-c-format
msgid "You should seriously consider using explicit revision numbers in all of your externals definitions. Doing so means that you get to decide when to pull down a different snapshot of external information, and exactly which snapshot to pull. Besides avoiding the surprise of getting changes to third-party repositories that you might not have any control over, using explicit revision numbers also means that as you backdate your working copy to a previous revision, your externals definitions will also revert to the way they looked in that previous revision, which in turn means that the external working copies will be updated to match they way <emphasis>they</emphasis> looked back when your repository was at that previous revision. For software projects, this could be the difference between a successful and a failed build of an older snapshot of your complex codebase."
msgstr "外部定義のすべてに明示的なリビジョン番号を使うことを強くお勧めします。 これによって異なる外部定義のスナップショットを引っ張ってくる時にどれを 持ってくれば良いか決めることができ、正しいものを持ってこれるように なります。自分ではまったく制御できないサードパーティーのリポジトリに 対する変更点に対する変更に対して冷静に対処できるという当たり前の利点 のほか、明示的なリビジョン番号はまた、以前のあるリビジョンに作業コピーを 戻す場合に、外部定義もその以前のリビジョンでの内容に戻るわけです が、それはまた、あなたのリポジトリがその以前のリビジョンであった 時に<emphasis>彼らが</emphasis>見たいと思う状態に合う形で外部作業 コピーが更新されることを意味しています。ソフトウェアプロジェクトにおいて これが複雑なソースコードの古いスナップショットを再構築する時の成否の 鍵になります。"

#. Tag: para
#: ch03-advanced-topics.xml:2102
#, no-c-format
msgid "The <command>svn status</command> command also recognizes externals definitions, displaying a status code of <literal>X</literal> for the disjoint subdirectories into which externals are checked out, and then recursing into those subdirectories to display the status of the external items themselves."
msgstr "<command>svn status</command> コマンドも外部定義がチェックアウトされた サブディレクトリごとに<literal>X</literal>の状態コードを表示する形で 外部定義を認識し、外部アイテムそれ自身の状態を表示するためにそれらの サブディレクトリに再帰的に降りていきます。"

#. Tag: para
#: ch03-advanced-topics.xml:2109
#, fuzzy, no-c-format
msgid "The support that exists for externals definitions in Subversion is less than ideal, though. First, an externals definition can only point to directories, not files. Second, the externals definition cannot point to relative paths (paths like <filename>../../skins/myskin</filename>). Third, the working copies created via the externals definition support are still disconnected from the primary working copy (on whose versioned directories the <literal>svn:externals</literal> property was actually set). And Subversion still only truly operates on non-disjoint working copies. So, for example, if you want to commit changes that you've made in one or more of those external working copies, you must run <command>svn commit</command> explicitly on those working copies&mdash;committing on the primary working copy will not recurse into any external ones."
msgstr "しかし現在の Subversion での外部定義のサポートは少し誤解されています。 まず、外部定義はディレクトリだけを指すことができ、ファイルを指すことは できません。次に外部定義は相対パス (<filename>../../skins/myskin</filename>のようなもの)を指すことはでき ません。さらに外部定義のサポートを通じて作られれた作業コピーは最初の作業コピーとは まだ独立したものです(つまり、<literal>svn:externals</literal>属性が 実際に設定されているかも知れないバージョン化されたディレクトリからは 独立したものです)。そして Subversion は、この分離されていない作業コピー 上に対してだけ正しく働きます。このため例えば、もし一つ以上のの外部作業 コピーに対して行った変更をコミットしたい場合、その作業コピー上で明示的 に<command>svn commit</command>を実行する必要があります&mdash;最初の作 業コピーでのコミットが外部の作業コピーのコミットを連鎖的に発生させる ことはありません。"

#. Tag: para
#: ch03-advanced-topics.xml:2125
#, fuzzy, no-c-format
msgid "Also, since the definitions themselves use absolute URLs, moving or copying a directory to which they are attached will not affect what gets checked out as an external (though the relative local target subdirectory will, of course, move with renamed directory). This can be confusing&mdash;even frustrating&mdash;in certain situations. For example, say you have a top-level directory named <filename>my-project</filename>, and you've created an externals definition on one of its subdirectories (<filename>my-project/some-dir</filename>) which tracks the latest revision of another of its subdirectories (<filename>my-project/external-dir</filename>)."
msgstr "またその定義自身もURLの絶対パス名を利用するのでそのパスに関係する ディレクトリの移動やコピーは外部のものとしてチェックアウトした ものに影響を与えません(相対的なローカルターゲットディレクトリはもちろん その名称変更されたディレクトリと共に移動しますが)。これはある種の 状況では混乱の元になるかも知れません&mdash;あるいはいらいらさせる かもしれません。たとえば、同じ開発ラインの別の部分を指しているような <filename>/trunk</filename>開発ライン上のディレクトリで外部定義を 使い、それから<command>svn copy</command>でそのラインのブランチを どこか別の場所 <filename>/branches/my-branch</filename>に作ったと すると、新しいブランチ上のアイテムに定義された外部定義はまだ <filename>/trunk</filename>中のバージョン化されたリソースを参照して います。また、もし作業コピーの親を(<command>svn switch --relocate</command> を使って)再設定する必要がある場合、外部定義がそれに付随することは <emphasis>ありません</emphasis>。"

#. Tag: screen
#: ch03-advanced-topics.xml:2138
#, no-c-format
msgid ""
"$ svn checkout http://svn.example.com/projects .\n"
"A    my-project\n"
"A    my-project/some-dir\n"
"A    my-project/external-dir\n"
"&hellip;\n"
"Fetching external item into 'my-project/some-dir/subdir'\n"
"Checked out external at revision 11.\n"
"\n"
"Checked out revision 11.\n"
"$ svn propget svn:externals my-project/some-dir\n"
"subdir http://svn.example.com/projects/my-project/external-dir\n"
"\n"
"$"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2140
#, no-c-format
msgid "Now you use <command>svn move</command> to rename the <filename>my-project</filename> directory. At this point, your externals definition will still refer to a path under the <filename>my-project</filename> directory, even though that directory no longer exists."
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:2146
#, no-c-format
msgid ""
"$ svn move -q my-project renamed-project\n"
"$ svn commit -m \"Rename my-project to renamed-project.\"\n"
"Deleting       my-project\n"
"Adding         my-renamed-project\n"
"\n"
"Committed revision 12.\n"
"$ svn update\n"
"\n"
"Fetching external item into 'renamed-project/some-dir/subdir'\n"
"svn: Target path does not exist\n"
"$"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2148
#, no-c-format
msgid "Also, the absolute URLs that externals definitions use can cause problems with repositories that are available via multiple URL schemes. For example, if your Subversion server is configured to allow everyone to check out the repository over <literal>http://</literal> or <literal>https://</literal>, but only allow commits to come in via <literal>https://</literal>, you have an interesting problem on your hands. If your externals definitions use the <literal>http://</literal> form of the repository URLs, you won't be able to commit anything from the working copies created by those externals. On the other hand, if they use the <literal>https://</literal> form of the URLs, anyone who might be checking out via <literal>http://</literal> because their client doesn't support <literal>https://</literal> will be unable to fetch the external items. Be aware, too, that if you need to re-parent your working copy (using <command>svn switch --relocate</command>), externals definitions will <emphasis>not</emphasis> also be re-parented."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2167
#, fuzzy, no-c-format
msgid "Finally, there might be times when you would prefer that <command>svn</command> subcommands would not recognize, or otherwise operate upon, the external working copies. In those instances, you can pass the <option>--ignore-externals</option> option to the subcommand."
msgstr "最後に、<command>svn</command>のサブコマンドが外部定義を認識しない ようにしたいこともあります。そうしないと外部定義処理の結果として作成 された外部作業コピーに対する処理が実行されてしまうような場合です。 これはサブコマンドに <option>--ignore-externals</option> オプションを指定すれば解決します。"

#. Tag: title
#: ch03-advanced-topics.xml:2178
#, no-c-format
msgid "Peg and Operative Revisions"
msgstr "ペグ・リビジョンと操作対象リビジョン"

#. Tag: para
#: ch03-advanced-topics.xml:2180
#, fuzzy, no-c-format
msgid "We copy, move, rename, and completely replace files and directories on our computers all the time. And your version control system shouldn't get in the way of your doing these things with your version-controlled files and directories, either. Subversion's file management support is quite liberating, affording almost as much flexibility for versioned files as you'd expect when manipulating your unversioned ones. But that flexibility means that across the lifetime of your repository, a given versioned object might have many paths, and a given path might represent several entirely different versioned objects. And this introduces a certain level of complexity to your interactions with those paths and objects."
msgstr "ファイルやディレクトリをコピーしたり移動したり名称を変更したりすること、 また、ファイルを作って、一度消したあとにもう一度同じ名前でファイルを作 ること&mdash; このようなことはコンピュータを使う上で常に、また当たり前 のようにやっている操作です。Subversion もまた、あなたにその手の操作を 当たり前にやってほしいと思っています。Subversion のファイル管理は非常 に自由であり、バージョン化されていないファイルを操作するときに期待され る動作とほとんど同じような柔軟性を、バージョン管理されているファイルに 対してサポートしています。しかしこのような柔軟性はリポジトリの一生を通 じて、バージョン管理されている資源はいろいろなパス名をとること、逆にあ る特定のパス名がまったく別のバージョン管理された資源を表す可能性がある ことも意味しています。"

#. Tag: para
#: ch03-advanced-topics.xml:2194
#, fuzzy, no-c-format
msgid "Subversion is pretty smart about noticing when an object's version history includes such <quote>changes of address</quote>. For example, if you ask for the revision history log of a particular file that was renamed last week, Subversion happily provides all those logs&mdash;the revision in which the rename itself happened, plus the logs of relevant revisions both before and after that rename. So, most of the time, you don't even have to think about such things. But occasionally, Subversion needs your help to clear up ambiguities."
msgstr "Subversion はあるオブジェクトのバージョンの履歴がそのような<quote>所在 地の変更</quote>を含むような場合でも、そのことを非常に正確に気づきます。 例えば先週ファイル名を変えた、あるファイルのすべての履歴を表示させよう としても、Subversion はそのログ全体をうまく表示してみせます&mdash; つ まり名称変更が実際に起きたリビジョンと、それに関連した名称変更の前と後 にあるすべてのリビジョンについてという意味です。そんなわけでほとんどの 場合、あなたは、何かを特に意識する必要もありません。しかし場合によって は Subversion は、あいまいさを解消するためにあなたの助けを必要とするこ ともあります。"

#. Tag: para
#: ch03-advanced-topics.xml:2204
#, fuzzy, no-c-format
msgid "The simplest example of this occurs when a directory or file is deleted from version control, and then a new directory or file is created with the same name and added to version control. Clearly the thing you deleted and the thing you later added aren't the same thing. They merely happen to have had the same path, <filename>/trunk/object</filename> for example. What, then, does it mean to ask Subversion about the history of <filename>/trunk/object</filename>? Are you asking about the thing currently at that location, or the old thing you deleted from that location? Are you asking about the operations that have happened to <emphasis>all</emphasis> the objects that have ever lived at that path? Clearly, Subversion needs a hint about what you really want."
msgstr "一番簡単な例はバージョン管理下にあるディレクトリやファイルがいったん削除され、 その後おなじ名前のディレクトリやファイルがあらためて作成されてから バージョン管理項目として追加されたような場合です。とうぜん削除したファイルと あとから追加したファイルはまったく別のものです。両者は単にたまたま同じパス名を 持っているというだけのことです。このファイル名を <filename>/trunk/object</filename> としておきましょう。さてこの場合、<filename>/trunk/object</filename> の履歴に関する問い合わせを Subversion にする場合、どんな意味になるので しょうか? 現にそのパスに存在しているほうのファイルについての問い合わせ でしょうか、あるいはその場所から以前いったん削除したほうのファイルに ついての問い合わせでしょうか? あるいは全履歴中で、とにかくそのパスに あったオブジェクトに対して実行したすべての操作についての意味でしょうか? 確かに Subversion にはあなたが本当に知りたいと思っていることについての ヒントを与えてやることが必要です。"

#. Tag: para
#: ch03-advanced-topics.xml:2218
#, fuzzy, no-c-format
msgid "And thanks to moves, versioned object history can get far more twisted than that, even. For example, you might have a directory named <filename>concept</filename>, containing some nascent software project you've been toying with. Eventually, though, that project matures to the point that the idea seems to actually have some wings, so you do the unthinkable and decide to give the project a name. <footnote> <para><quote>You're not supposed to name it. Once you name it, you start getting attached to it.</quote>&mdash;Mike Wazowski</para> </footnote> Let's say you called your software Frabnaggilywort. At this point, it makes sense to rename the directory to reflect the project's new name, so <filename>concept</filename> is renamed to <filename>frabnaggilywort</filename>. Life goes on, Frabnaggilywort releases a 1.0 version, and is downloaded and used daily by hordes of people aiming to improve their lives."
msgstr "さらにありがたいことに、ファイル移動の操作によってバージョン管理上の履 歴はさらにずっとややこしいことになります。たとえば、 <filename>concept</filename> という名前のディレクトリがあって、その中 にはまだ始まったばかりの、ままごとプロジェクトがあったとします。しかし 最終的に、その考えはしっかりしたものになり、プロジェクトは真面目な利用 ができるような状態となったので、そのプロジェクトに聞いたこともないよう な名前をつけることにしました。<footnote> <para><quote> 名前なんかつけ ちゃだめだ。いったん名前をつけたら、それにとらわれるようになってしまう よ。</quote> &mdash; Mike Wazowski</para> </footnote> そのソフトの名前 を Frabnaggilywort としましょう。ここから先はプロジェクトの新しい名前 にふさわしいようにディレクトリを<filename>concept</filename> から <filename>frabnaggilywort</filename> に変えるのはもっともな話しです。 開発が進み frabnaggilywort はバージョン 1.0 をリリースすることになり、 それは多くの人々によってダウンロードされ、日々利用され、みんな幸せにな りました。"

#. Tag: para
#: ch03-advanced-topics.xml:2238
#, no-c-format
msgid "It's a nice story, really, but it doesn't end there. Entrepreneur that you are, you've already got another think in the tank. So you make a new directory, <filename>concept</filename>, and the cycle begins again. In fact, the cycle begins again many times over the years, each time starting with that old <filename>concept</filename> directory, then sometimes seeing that directory renamed as the idea cures, sometimes seeing it deleted when you scrap the idea. Or, to get really sick, maybe you rename <filename>concept</filename> to something else for a while, but later rename the thing back to <filename>concept</filename> for some reason."
msgstr "いい話しです。まったく。しかしこれで話しが終わるわけではありません。あ なたは企業家です。すでに次の着想を得ています。あなたは新しいディレクト リ<filename>concept</filename> を作り、次の開発サイクルが始まります。 実際にはこのサイクルは何年にもわたって何度も繰り返し発生します。いつも <filename>concept</filename>ディレクトリから始め、時にはそのアイディア を膨らませるためにディレクトリの名称は変更され、時にはそのアイディアを ボツにするためにディレクトリは削除されます。あるいは、さらにややこしい 場合、いったん <filename>concept</filename> を別の名前に変えた後、何か 理由があって再び<filename>concept</filename> に名前を戻したりすること もあるでしょう。"

#. Tag: para
#: ch03-advanced-topics.xml:2251
#, fuzzy, no-c-format
msgid "In scenarios like these, attempting to instruct Subversion to work with these re-used paths can be a little like instructing a motorist in Chicago's West Suburbs to drive east down Roosevelt Road and turn left onto Main Street. In a mere twenty minutes, you can cross <quote>Main Street</quote> in Wheaton, Glen Ellyn, and Lombard. And no, they aren't the same street. Our motorist&mdash;and our Subversion&mdash;need a little more detail in order to do the right thing."
msgstr "この手の話しになったとき、Subversion に対してファイルパス名を再訪問す るように指示するのはシカゴの West Suburbs にいる運転手に east down Roosevelt Road まで行き、そこでメインストリートに左折するように指示す るのと少し似ています。20分もしないうちにWheaton, Glen Ellyn, そして Lombard にある<quote>メインストリート</quote>を横切ることになるでしょ う。しかし、これらはすべて別の道です。私たちの運転手には &mdash; そし て Subversion に対しても同様に &mdash; 正しい場所に行ってもらうために はもう少し詳しい情報が必要になります。"

#. Tag: para
#: ch03-advanced-topics.xml:2260
#, fuzzy, no-c-format
msgid "In version 1.1, Subversion introduced a way for you to tell it exactly which Main Street you meant. It's called the <firstterm>peg revision</firstterm>, and it is a revision provided to Subversion for the sole purpose of identifying a unique line of history. Because at most one versioned object may occupy a path at any given time&mdash;or, more precisely, in any one revision&mdash;the combination of a path and a peg revision is all that is needed to refer to a specific line of history. Peg revisions are specified to the Subversion command-line client using <firstterm>at syntax</firstterm>, so called because the syntax involves appending an <quote>at sign</quote> (<literal>@</literal>) and the peg revision to the end of the path with which the revision is associated."
msgstr "バージョン 1.1 で、Subversion はどのメインストリートに行きたいかをもっ と正確に伝える方法を取り入れました。これは<firstterm>ペグ・リビジョン </firstterm> と呼ばれ、Subversion に対して特定の履歴ラインを指定するた めだけの目的で用意されたものです。ある特定の時点では&mdash; あるいはも う少し正確にはある特定のリビジョンでは&mdash; あるパス名はせいぜい一つ のバージョン管理されたリソースによって利用されるだけなので、パス名とペ グ・リビジョンの組み合わせはある特定の履歴ラインを指定するのに十分な情 報になります。ペグ・リビジョンは Subversion のコマンドラインクライアン トから<firstterm>アットマーク構文</firstterm>によって指定されますが、 これはその構文が <quote>アットマーク</quote> (<literal>@</literal>) と ペグ・リビジョンをパス名の最後につける形になるからです。このパス名はペ グ・リビジョンに存在しているパス名です。"

#. Tag: para
#: ch03-advanced-topics.xml:2274
#, no-c-format
msgid "But what of the <option>--revision (-r)</option> of which we've spoken so much in this book? That revision (or set of revisions) is called the <firstterm>operative revision</firstterm> (or <firstterm>operative revision range</firstterm>). Once a particular line of history has been identified using a path and peg revision, Subversion performs the requested operation using the operative revision(s). To map this to our Chicagoland streets analogy, if we are told to go to 606 N. Main Street in Wheaton, <footnote> <para>606 N. Main Street, Wheaton, Illinois, is the home of the Wheaton History Center. Get it&mdash;<quote>History Center</quote>? It seemed appropriate&hellip;.</para> </footnote> we can think of <quote>Main Street</quote> as our path and <quote>Wheaton</quote> as our peg revision. These two pieces of information identify a unique path which can travelled (north or south on Main Street), and will keep us from travelling up and down the wrong Main Street in search of our destination. Now we throw in <quote>606 N.</quote> as our operative revision, of sorts, and we know <emphasis>exactly</emphasis> where to go."
msgstr "ではこの本の中でいつも出てくる <option>--revision (-r)</option>で指定 されるほうのリビジョンは何と言われるのでしょうか ? こちらは<firstterm> 操作対象リビジョン</firstterm>(あるいはリビジョンの範囲を指定する場合 には、<firstterm>操作対象リビジョン範囲</firstterm>) と呼ばれます。いっ たん特定の履歴ラインがパス名とペグ・リビジョンによって指定されると Subversion は操作対象リビジョンに対して要求された操作を実行します。 この話をシカゴの道順のたとえで説明すると、 606 N. Main Street in Wheaton に行きたい場合だと <footnote> <para>606 N. Main Street, Wheaton, Illinois, は Wheaton 歴史センターのある場所です。 たずねてみてください&mdash;<quote>歴史センター</quote>だって? 確かに&hellip;.</para> </footnote> <quote>Main Street</quote>がパス名に、<quote>Wheaton</quote>がペグリビ ジョンにあたるものと考えることができます。この二つの情報によって実際に 行ってほしい道順(メインストリートの北、あるいは南)を特定することができ、 行き先を探すのに、間違った別のメインストリートを右往左往せずにすみます。 そして、操作対象リビジョンにあたる <quote>606 N.</quote> によって実際 に行きたい場所を<emphasis>正確に</emphasis>知ることができるというわけ です。"

#. Tag: title
#: ch03-advanced-topics.xml:2298
#, fuzzy, no-c-format
msgid "The peg revision algorithm"
msgstr "\"ペグ・リビジョン\" のアルゴリズム"

#. Tag: para
#: ch03-advanced-topics.xml:2300
#, no-c-format
msgid "The Subversion command-line performs the peg revision algorithm any time it needs to resolve possible ambiguities in the paths and revisions provided to it. Here's an example of such an invocation:"
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:2305
#, no-c-format
msgid "$ svn <replaceable>command</replaceable> -r <replaceable>OPERATIVE-REV</replaceable> item@<replaceable>PEG-REV</replaceable>"
msgstr "$ svn <replaceable>command</replaceable> -r <replaceable>OPERATIVE-REV</replaceable> item@<replaceable>PEG-REV</replaceable>"

#. Tag: para
#: ch03-advanced-topics.xml:2307
#, fuzzy, no-c-format
msgid "If <replaceable>OPERATIVE-REV</replaceable> is older than <replaceable>PEG-REV</replaceable>, then the algorithm is as follows:"
msgstr "$ svn <replaceable>command</replaceable> -r <replaceable>OPERATIVE-REV</replaceable> item@<replaceable>PEG-REV</replaceable>"

#. Tag: para
#: ch03-advanced-topics.xml:2314
#, fuzzy, no-c-format
msgid "Locate <replaceable>item</replaceable> in the revision identified by <replaceable>PEG-REV</replaceable>. There can be only one such object."
msgstr "リビジョン <replaceable>PEG-REV</replaceable>に移り、<replaceable>item</replaceable> を見つけます。この形式でリポジトリ中の特定のオブジェクトを指し示すことができます。"

#. Tag: para
#: ch03-advanced-topics.xml:2320
#, fuzzy, no-c-format
msgid "Trace the object's history backwards (through any possible renames) to its ancestor in the revision <replaceable>OPERATIVE-REV</replaceable>."
msgstr "そのオブジェクトの履歴を後ろ向きに(名称変更があった場合も考慮しながら) リビジョン <replaceable>OPERATIVE-REV</replaceable>にある祖先まで たどります。"

#. Tag: para
#: ch03-advanced-topics.xml:2326
#, fuzzy, no-c-format
msgid "Perform the requested action on that ancestor, wherever it is located, or whatever its name might be or have been at that time."
msgstr "その祖先に対して指定した処理を実行します。これがどのリビジョンにあろうと、 また、その時点で何という名前で存在していようとも、です。"

#. Tag: para
#: ch03-advanced-topics.xml:2333
#, no-c-format
msgid "But what if <replaceable>OPERATIVE-REV</replaceable> is <emphasis>younger</emphasis> than <replaceable>PEG-REV</replaceable>? Well, that adds some complexity to the theoretical problem of locating the path in <replaceable>OPERATIVE-REV</replaceable>, because the path's history could have forked multiple times (thanks to copy operations) between <replaceable>PEG-REV</replaceable> and <replaceable>OPERATIVE-REV</replaceable>. And that's not all&mdash;Subversion doesn't store enough information to performantly trace an object's history forward, anyway. So the algorithm is a little different:"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2348
#, fuzzy, no-c-format
msgid "Locate <replaceable>item</replaceable> in the revision identified by <replaceable>OPERATIVE-REV</replaceable>. There can be only one such object."
msgstr "$ svn <replaceable>command</replaceable> -r <replaceable>OPERATIVE-REV</replaceable> item@<replaceable>PEG-REV</replaceable>"

#. Tag: para
#: ch03-advanced-topics.xml:2354
#, fuzzy, no-c-format
msgid "Trace the object's history backwards (through any possible renames) to its ancestor in the revision <replaceable>PEG-REV</replaceable>."
msgstr "そのオブジェクトの履歴を後ろ向きに(名称変更があった場合も考慮しながら) リビジョン <replaceable>OPERATIVE-REV</replaceable>にある祖先まで たどります。"

#. Tag: para
#: ch03-advanced-topics.xml:2360
#, no-c-format
msgid "Verify that the object's location (path-wise) in <replaceable>PEG-REV</replaceable> is the same as it is in <replaceable>OPERATIVE-REV</replaceable>. If that's the case, then at least the two locations are known to be directly related, so perform the requested action on the location in <replaceable>OPERATIVE-REV</replaceable>. Otherwise, relatedness was not established, so error out with a loud complaint that no viable location was found. (Someday, we expect that Subversion will be able to handle this usage scenario with more flexibility and grace.)"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2375
#, no-c-format
msgid "Note that even when you don't explicitly supply a peg revision or operative revision, they are still present. For your convenience, the default peg revision is <literal>BASE</literal> for working copy items and <literal>HEAD</literal> for repository URLs. And when no operative revision is provided, it defaults to being the same revision as the peg revision."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2385
#, no-c-format
msgid "Say that long ago we created our repository, and in revision 1 added our first <filename>concept</filename> directory, plus an <filename>IDEA</filename> file in that directory talking about the concept. After several revisions in which real code was added and tweaked, we, in revision 20, renamed this directory to <filename>frabnaggilywort</filename>. By revision 27, we had a new concept, a new <filename>concept</filename> directory to hold it, and a new <filename>IDEA</filename> file to describe it. And then five years and twenty thousand revisions flew by, just like they would in any good romance story."
msgstr "ずっと以前に作っておいたリポジトリがあって、リビジョン 1 で最初の <filename>concept</filename>ディレクトリとその中にある <filename>IDEA</filename>という名前のファイルを追加したとしましょう。 このファイルは実際のコンセプトについての説明が書いてあります。 実際のソースコードを追加したり修正したりしてたくさんのリビジョンが 追加されたあと、リビジョン 20 でこのディレクトリを <filename>frabnaggilywort</filename>に名称変更したとしましょう。 リビジョン 27 で新しい着想を得たので、新規に<filename>concept</filename> ディレクトリを作り、またその中に新規に <filename>IDEA</filename> ファイルを置いて、その内容を書いておきます。そして良くできたロマンス 小説よろしくその後 5 年間で 20,000 リビジョンにまで達したと しましょう。"

#. Tag: para
#: ch03-advanced-topics.xml:2396
#, fuzzy, no-c-format
msgid "Now, years later, we wonder what the <filename>IDEA</filename> file looked like back in revision 1. But Subversion needs to know if we are asking about how the <emphasis>current</emphasis> file looked back in revision 1, or if we are asking for the contents of whatever file lived at <filename>concepts/IDEA</filename> in revision 1. Certainly those questions have different answers, and because of peg revisions, you can ask either of them. To find out how the current <filename>IDEA</filename> file looked in that old revision, you run:"
msgstr "こうして何年もたってから、リビジョン 1 での <filename>IDEA</filename> ファイルがどんな具合であったか知りたくなったとします。しかしこの場合 Subversion は <emphasis>現在の</emphasis>ファイルの過去がリビジョン 1 でどうであったのか、あるいはとにかくそれが何であれ、リビジョン 1 で <filename>concepts/IDEA</filename> という名前で存在していたファイルの 内容が知りたいのかを知る必要があります。この二つの質問の答えは明らかに 別のものになりますが、ペグ・リビジョンがサポートされているので このどちらの質問もすることができます。現在の <filename>IDEA</filename> ファイルが過去のリビジョン 1 でどうであったかを知りたい場合には以下の ようにします:"

#. Tag: screen
#: ch03-advanced-topics.xml:2407
#, fuzzy, no-c-format
msgid ""
"$ svn cat -r 1 concept/IDEA \n"
"svn: Unable to find repository location for 'concept/IDEA' in revision 1"
msgstr ""
"$ svn cat -r 1 concept/IDEA \n"
"subversion/libsvn_client/ra.c:775: (apr_err=20014)\n"
"svn: Unable to find repository location for 'concept/IDEA' in revision 1"

#. Tag: para
#: ch03-advanced-topics.xml:2409
#, no-c-format
msgid "Of course, in this example, the current <filename>IDEA</filename> file didn't exist yet in revision 1, so Subversion gives an error. The command above is shorthand for a longer notation which explicitly lists a peg revision. The expanded notation is:"
msgstr "この例ではもちろん、現在の <filename>IDEA</filename>ファイルは リビジョン 1 では存在しなかったので Subversion はエラーを出します。 上のコマンドはペグ・リビジョンを明示的に指定する、より長い形の形式 の略記法です。長い形式は以下のようになります:"

#. Tag: screen
#: ch03-advanced-topics.xml:2415
#, fuzzy, no-c-format
msgid ""
"$ svn cat -r 1 concept/IDEA@BASE\n"
"svn: Unable to find repository location for 'concept/IDEA' in revision 1"
msgstr ""
"$ svn cat -r 1 concept/IDEA@BASE\n"
"subversion/libsvn_client/ra.c:775: (apr_err=20014)\n"
"svn: Unable to find repository location for 'concept/IDEA' in revision 1"

#. Tag: para
#: ch03-advanced-topics.xml:2417
#, no-c-format
msgid "And when executed, it has the expected results."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2419
#, no-c-format
msgid "The perceptive reader is probably wondering at this point if the peg revision syntax causes problems for working copy paths or URLs that actually have at signs in them. After all, how does <command>svn</command> know whether <literal>news@11</literal> is the name of a directory in my tree, or just a syntax for <quote>revision 11 of <filename>news</filename></quote>? Thankfully, while <command>svn</command> will always assume the latter, there is a trivial workaround. You need only append an at sign to the end of the path, such as <literal>news@11@</literal>. <command>svn</command> only cares about the last at sign in the argument, and it is not considered illegal to omit a literal peg revision specifier after that at sign. This workaround even applies to paths that end in an at sign&mdash;you would use <literal>filename@@</literal> to talk about a file named <filename>filename@</filename>."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2436
#, no-c-format
msgid "Let's ask the other question, then&mdash;in revision 1, what were the contents of whatever file occupied the address <filename>concepts/IDEA</filename> at the time? We'll use an explicit peg revision to help us out."
msgstr "今度はもう一方の質問をしてみましょう。つまり &mdash;リビジョン 1 の時点で、とにかく <filename>concepts/IDEA</filename>という名前で 存在していたファイルの内容はどんなものでしたか? これを指定する ために明示的なペグ・リビジョンを使います。"

#. Tag: screen
#: ch03-advanced-topics.xml:2441
#, no-c-format
msgid ""
"$ svn cat concept/IDEA@1\n"
"The idea behind this project is to come up with a piece of software\n"
"that can frab a naggily wort.  Frabbing naggily worts is tricky\n"
"business, and doing it incorrectly can have serious ramifications, so\n"
"we need to employ over-the-top input validation and data verification\n"
"mechanisms."
msgstr ""
"$ svn cat concept/IDEA@1\n"
"The idea behind this project is to come up with a piece of software\n"
"that can frab a naggily wort.  Frabbing naggily worts is tricky\n"
"business, and doing it incorrectly can have serious ramifications, so\n"
"we need to employ over-the-top input validation and data verification\n"
"mechanisms."

#. Tag: para
#: ch03-advanced-topics.xml:2443
#, no-c-format
msgid "Notice that we didn't provide an operative revision this time. That's because when no operative revision is specified, Subversion assumes a default operative revision that's the same as the peg revision."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2448
#, fuzzy, no-c-format
msgid "As you can see, the output from our operation appears to be correct. The text even mentions frabbing naggily worts, so this is almost certainly the file which describes the software now called Frabnaggilywort. In fact, we can verify this using the combination of an explicit peg revision and explicit operative revision. We know that in <literal>HEAD</literal>, the Frabnaggilywort project is located in the <filename>frabnaggilywort</filename> directory. So we specify that we want to see how the line of history identified in <literal>HEAD</literal> as the path <filename>frabnaggilywort/IDEA</filename> looked in revision 1."
msgstr "正しい出力になっているようです。このテキスト中で、 frabbing naggily worts という単語が出てきているところを見ると、現在 Frabnaggilywort と いう名前で呼ばれているソフトウェアについて説明したファイルであることは まず間違いないところでしょう。実際、明示的なペグ・リビジョンと明示的な 操作対象リビジョンの組合せによってこれを確認することができます。 <literal>HEAD</literal> では Frabnaggilywortプロジェクトが <filename>frabnaggilywort</filename>ディレクトリにあることはわかってい ます。それで <literal>HEAD</literal> で <filename>frabnaggilywort/IDEA</filename> というパス名で特定される履歴 ラインが、リビジョン 1 ではどのようであったかを知りたいのだ、というこ とを指定してみます。"

#. Tag: screen
#: ch03-advanced-topics.xml:2461
#, no-c-format
msgid ""
"$ svn cat -r 1 frabnaggilywort/IDEA@HEAD\n"
"The idea behind this project is to come up with a piece of software\n"
"that can frab a naggily wort.  Frabbing naggily worts is tricky\n"
"business, and doing it incorrectly can have serious ramifications, so\n"
"we need to employ over-the-top input validation and data verification\n"
"mechanisms."
msgstr ""
"$ svn cat -r 1 frabnaggilywort/IDEA@HEAD\n"
"The idea behind this project is to come up with a piece of software\n"
"that can frab a naggily wort.  Frabbing naggily worts is tricky\n"
"business, and doing it incorrectly can have serious ramifications, so\n"
"we need to employ over-the-top input validation and data verification\n"
"mechanisms."

#. Tag: para
#: ch03-advanced-topics.xml:2463
#, no-c-format
msgid "And the peg and operative revisions need not be so trivial, either. For example, say <filename>frabnaggilywort</filename> had been deleted from <literal>HEAD</literal>, but we know it existed in revision 20, and we want to see the diffs for its <filename>IDEA</filename> file between revisions 4 and 10. We can use the peg revision 20 in conjunction with the URL that would have held Frabnaggilywort's <filename>IDEA</filename> file in revision 20, and then use 4 and 10 as our operative revision range."
msgstr "そして、ペグ・リビジョンも操作対象リビジョンも、時には非常に重要な意味 を持ちます。例えば、 <filename>frabnaggilywort</filename>がリビジョン 20 で <literal>HEAD</literal> から削除されているが、リビジョン 20 では 存在していたことを知っていて、その時の <filename>IDEA</filename> ファイルが、リビジョン 4 と リビジョン 10 の間でどのように変化したか を見たいとします。これには、ペグ・リビジョン 20 を、そのリビジョンで Frabnaggilywort の <filename>IDEA</filename>ファイルを保持していた URL の後につけて指定します。また同時に操作対象リビジョン範囲として 4 と 10 を指定します。"

#. Tag: screen
#: ch03-advanced-topics.xml:2473
#, no-c-format
msgid ""
"$ svn diff -r 4:10 http://svn.red-bean.com/projects/frabnaggilywort/IDEA@20\n"
"Index: frabnaggilywort/IDEA\n"
"===================================================================\n"
"--- frabnaggilywort/IDEA        (revision 4)\n"
"+++ frabnaggilywort/IDEA        (revision 10)\n"
"@@ -1,5 +1,5 @@\n"
"-The idea behind this project is to come up with a piece of software\n"
"-that can frab a naggily wort.  Frabbing naggily worts is tricky\n"
"-business, and doing it incorrectly can have serious ramifications, so\n"
"-we need to employ over-the-top input validation and data verification\n"
"-mechanisms.\n"
"+The idea behind this project is to come up with a piece of\n"
"+client-server software that can remotely frab a naggily wort.\n"
"+Frabbing naggily worts is tricky business, and doing it incorrectly\n"
"+can have serious ramifications, so we need to employ over-the-top\n"
"+input validation and data verification mechanisms."
msgstr ""
"$ svn diff -r 4:10 http://svn.red-bean.com/projects/frabnaggilywort/IDEA@20\n"
"Index: frabnaggilywort/IDEA\n"
"===================================================================\n"
"--- frabnaggilywort/IDEA        (revision 4)\n"
"+++ frabnaggilywort/IDEA        (revision 10)\n"
"@@ -1,5 +1,5 @@\n"
"-The idea behind this project is to come up with a piece of software\n"
"-that can frab a naggily wort.  Frabbing naggily worts is tricky\n"
"-business, and doing it incorrectly can have serious ramifications, so\n"
"-we need to employ over-the-top input validation and data verification\n"
"-mechanisms.\n"
"+The idea behind this project is to come up with a piece of\n"
"+client-server software that can remotely frab a naggily wort.\n"
"+Frabbing naggily worts is tricky business, and doing it incorrectly\n"
"+can have serious ramifications, so we need to employ over-the-top\n"
"+input validation and data verification mechanisms."

#. Tag: para
#: ch03-advanced-topics.xml:2475
#, no-c-format
msgid "Fortunately, most folks aren't faced with such complex situations. But when you are, remember that peg revisions are that extra hint Subversion needs to clear up ambiguity."
msgstr "ありがたいことにほとんどのユーザはこんな複雑な状況に出会うことはありま せん。しかし万一そんなことになった場合には、Subversion がファイル名の あいまいさを解消するにはペグ・リビジョンを追加で指定してやれば良いこと は覚えておいてください。"

#. Tag: title
#: ch03-advanced-topics.xml:2486
#, no-c-format
msgid "Network Model"
msgstr "ネットワークモデル"

#. Tag: para
#: ch03-advanced-topics.xml:2488
#, no-c-format
msgid "At some point, you're going to need to understand how your Subversion client communicates with its server. Subversion's networking layer is abstracted, meaning that Subversion clients exhibit the same general behaviors no matter what sort of server they are operating against. Whether speaking the HTTP protocol (<literal>http://</literal>) with the Apache HTTP Server or speaking the custom Subversion protocol (<literal>svn://</literal>) with <command>svnserve</command>, the basic network model is the same. In this section, we'll explain the basics of that network model, including how Subversion manages authentication and authorization matters."
msgstr ""

#. Tag: title
#: ch03-advanced-topics.xml:2503
#, no-c-format
msgid "Requests and Responses"
msgstr "要求と応答"

#. Tag: para
#: ch03-advanced-topics.xml:2505
#, fuzzy, no-c-format
msgid "The Subversion client spends most of its time managing working copies. When it needs information from a remote repository, however, it makes a network request, and the server responds with an appropriate answer. The details of the network protocol are hidden from the user&mdash;the client attempts to access a URL, and depending on the URL scheme, a particular protocol is used to contact the server (see <xref linkend=\"svn.basic.in-action.wc.sb-1\"/>)."
msgstr "Subversion クライアントはほとんどの時間を作業コピーの管理に費やします。 しかしリポジトリからの情報が必要な場合にはネットワーク要求を発行し、 これに対してサーバが適切に応答します。ネットワークプロトコルの詳細は ユーザからは隠されています; クライアントは URL にアクセスしようとし、 URL スキーマの種類によって特定のプロトコルがサーバとの通信に利用され ます(<xref linkend=\"svn.basic.in-action.wc.sb-1\"/>)。ユーザは<command>svn --version </command> を実行してSubversion クライアントがどの URL スキーマとプロトコル を利用できるかを知ることができます。"

#. Tag: para
#: ch03-advanced-topics.xml:2514
#, no-c-format
msgid "Run <command>svn --version</command> to see which URL schemes and protocols the client knows how to use."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2519
#, fuzzy, no-c-format
msgid "When the server process receives a client request, it often demands that the client identify itself. It issues an authentication challenge to the client, and the client responds by providing <firstterm>credentials</firstterm> back to the server. Once authentication is complete, the server responds with the original information the client asked for. Notice that this system is different from systems like CVS, where the client pre-emptively offers credentials (<quote>logs in</quote>) to the server before ever making a request. In Subversion, the server <quote>pulls</quote> credentials by challenging the client at the appropriate moment, rather than the client <quote>pushing</quote> them. This makes certain operations more elegant. For example, if a server is configured to allow anyone in the world to read a repository, then the server will never issue an authentication challenge when a client attempts to <command>svn checkout</command>."
msgstr "サーバプロセスがクライアント要求を受け取ると、普通はクライアントの認証を 要求します。クライアントに対して認証確認を実行し、クライアントは <firstterm>認証証明</firstterm>を提示することでこれに答えます。いったん 認証が成醐ｻ駈ｷればサーバはクライアントがそもそも要求していた情報を返します。 このシステムは CVS のようなシステムとは異なっていることに注意してください。 CVS などではクライアントは要求を出す前に、あらかじめ認証証明を (<quote>ログインによって</quote>)サーバに送ります。Subversion ではサーバは適当な時点 でクライアントにチャレンジの仕組みによって認証証明を <quote>要求</quote> します。 クライアントが自発的にサーバに <quote>送りつける</quote> わけではありません。 これはある種の操作をより洗練されたものにします。たとえばもしサーバが 世界中の誰でもそのリポジトリを読めるように設定すれば、クライアントが <command>svn checkout</command>を実行するときに認証確認を実行せずに 済みます。"

#. Tag: para
#: ch03-advanced-topics.xml:2536
#, fuzzy, no-c-format
msgid "If the particular network requests issued by the client result in a new revision being created in the repository, (e.g. <command>svn commit</command>), then Subversion uses the authenticated username associated with those requests as the author of the revision. That is, the authenticated user's name is stored as the value of the <literal>svn:author</literal> property on the new revision (see <xref linkend=\"svn.ref.properties\"/>). If the client was not authenticated (in other words, the server never issued an authentication challenge), then the revision's <literal>svn:author</literal> property is empty."
msgstr "クライアントネットワーク要求が新しいデータをリポジトリに書き込む場合 (たとえば <command>svn commit</command>) 、新しいリビジョンツリーが 作成されます。もしクライアント要求が認証されれば認証されたユーザ名は 新しいリビジョンの<literal>svn:author</literal>属性の値として 格納されます(<xref linkend=\"svn.reposadmin.basics.revprops\"/>参照)。もしクライアント が認証されなければ(言い換えるとサーバが認証確認に失敗すれば)、その リビジョンの<literal>svn:author</literal>属性は空となります。"

#. Tag: title
#: ch03-advanced-topics.xml:2553
#, no-c-format
msgid "Client Credentials Caching"
msgstr "クライアント証明のキャッシュ"

#. Tag: para
#: ch03-advanced-topics.xml:2555
#, fuzzy, no-c-format
msgid "Many servers are configured to require authentication on every request. This would be a big annoyance to users, if they were forced to type their passwords over and over again. Fortunately, the Subversion client has a remedy for this&mdash;a built-in system for caching authentication credentials on disk. By default, whenever the command-line client successfully responds to a server's authentication challenge, it saves the credentials in the user's private runtime configuration area (<filename>~/.subversion/auth/</filename> on Unix-like systems or <filename>%APPDATA%/Subversion/auth/</filename> on Windows; see <xref linkend=\"svn.advanced.confarea\"/> for more details about the runtime configuration system). Successful credentials are cached on disk, keyed on a combination of the server's hostname, port, and authentication realm."
msgstr "ありがたいことに、Subversion クライアントはこれに対する処方箋が あります: ディスク上での認証証明をキャッシュするための組み込みシステム があります。デフォルトではコマンドラインクライアントがサーバに対する 認証に成醐ｻ駈ｵたときは常にユーザの実行時環境領域にその証明を保存します &mdash; この場所はUnix 系システムでは<filename>‾/.subversion/auth/</filename>、 Windows であれば <filename>%APPDATA%/Subversion/auth/</filename>に なります。(実行時領域については、<xref linkend=\"svn.advanced.confarea\"/> により詳しい説明があります)。成醐ｻ駈ｵた証明はディスクにキャッシュされ ホスト名、ポート、認証方式の組み合わせをキーとして保存されます。"

#. Tag: para
#: ch03-advanced-topics.xml:2571
#, fuzzy, no-c-format
msgid "When the client receives an authentication challenge, it first looks for the appropriate credentials in the user's disk cache. If seemingly suitable credentials are not present, or if the cached credentials ultimately fail to authenticate, then the client will, by default, fall back to prompting the user for the necessary information."
msgstr "クライアントが認証確認を受けたとき、まずディスクキャッシュにある証明を探し ます; 存在しないかキャッシュされた証明が認証に失敗した場合はクライアントは ユーザに入力を求めるプロンプトを出します。"

#. Tag: para
#: ch03-advanced-topics.xml:2578
#, fuzzy, no-c-format
msgid "The security-conscious reader will suspect immediately that there is reason for concern here. <quote>Caching passwords on disk? That's terrible! You should never do that!</quote>"
msgstr "セキュリティー狂なら思うかも知れません、<quote>パスワードをディスクにキャッシュ するだと? ひどすぎる。絶対やめろ!</quote> と。まあ落ち着いて。それは見かけほど 危険な状態ではありません。"

#. Tag: para
#: ch03-advanced-topics.xml:2583
#, no-c-format
msgid "The Subversion developers recognize the legitimacy of such concerns, and so Subversion works with available mechanisms provided by the operating system and environment to try to minimize the risk of leaking this information. Here's a breakdown of what this means for users on the most common platforms:"
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2593
#, fuzzy, no-c-format
msgid "On Windows 2000 and later, the Subversion client uses standard Windows cryptography services to encrypt the password on disk. Because the encryption key is managed by Windows and is tied to the user's own login credentials, only the user can decrypt the cached password. (Note that if the user's Windows account password is reset by an administrator, all of the cached passwords become undecipherable. The Subversion client will behave as if they don't exist, prompting for passwords when required.)"
msgstr "Windows 2000 とそれ以降の場合、Subversion クライアントは標準的な Windows の 暗号サービスを利用してディスク上のパスワードを暗号化します。暗号キーはWindows によって管理されユーザ固有のログイン認証に結びついているのでそのユーザだけが キャッシュされたパスワードを復号化できます。(注意: ユーザの Windows アカウント パスワードが変更された場合、キャッシュされているすべてのパスワードは復号化不能 になります。Subversion クライアントはそれが存在していないかのような動作をし、 必要に応じてパスワードの入力をうながします。)"

#. Tag: para
#: ch03-advanced-topics.xml:2606
#, no-c-format
msgid "Similarly, on Mac OS X, the Subversion client stores all repository passwords in the login keyring (managed by the Keychain service), which is protected by the user's account password. User preference settings can impose additional policies, such as requiring the user's account password be entered each time the Subversion password is used."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2616
#, fuzzy, no-c-format
msgid "For other Unix-like operating systems, no standard <quote>keychain</quote> services exist. However, the <filename>auth/</filename> caching area is still permission-protected so that only the user (owner) can read data from it, not the world at large. The operating system's own file permissions protect the passwords."
msgstr "<filename>auth/</filename> のキャッシュ領域はパーミッションで保護されている ので(所有者である)ユーザだけがそのデータを読むことができ、誰でもというわけでは ありません。オペレーティングシステムのファイル所有権限はパスワードによって保護 されています。"

#. Tag: para
#: ch03-advanced-topics.xml:2626
#, no-c-format
msgid "Of course, for the truly paranoid, none of these mechanisms meets the test of perfection. So for those folks willing to sacrifice convenience for the ultimate security, Subversion provides various ways of disabling its credentials caching system altogether."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2632
#, no-c-format
msgid "To disable caching for a single command, pass the <option>--no-auth-cache</option> option:"
msgstr "単一のコマンド中でキャッシュ を無効にする場合は <option>--no-auth-cache</option>オプションを渡して ください:"

#. Tag: screen
#: ch03-advanced-topics.xml:2635
#, no-c-format
msgid ""
"$ svn commit -F log_msg.txt --no-auth-cache\n"
"Authentication realm: &lt;svn://host.example.com:3690&gt; example realm\n"
"Username:  joe\n"
"Password for 'joe':\n"
"\n"
"Adding         newfile\n"
"Transmitting file data .\n"
"Committed revision 2324.\n"
"\n"
"# password was not cached, so a second commit still prompts us\n"
"\n"
"$ svn delete newfile\n"
"$ svn commit -F new_msg.txt\n"
"Authentication realm: &lt;svn://host.example.com:3690&gt; example realm\n"
"Username:  joe\n"
"&hellip;"
msgstr ""
"$ svn commit -F log_msg.txt --no-auth-cache\n"
"Authentication realm: &lt;svn://host.example.com:3690&gt; example realm\n"
"Username:  joe\n"
"Password for 'joe':\n"
"\n"
"Adding         newfile\n"
"Transmitting file data .\n"
"Committed revision 2324.\n"
"\n"
"# password was not cached, so a second commit still prompts us\n"
"\n"
"$ svn delete newfile\n"
"$ svn commit -F new_msg.txt\n"
"Authentication realm: &lt;svn://host.example.com:3690&gt; example realm\n"
"Username:  joe\n"
"&hellip;"

#. Tag: para
#: ch03-advanced-topics.xml:2637
#, no-c-format
msgid "Or, if you want to disable credential caching permanently, you can edit the <filename>config</filename> file in your runtime configuration area, and set the <option>store-auth-creds</option> option to <literal>no</literal>. This will prevent the storing of credentials used in any Subversion interactions you perform on the affected computer. This can be extended to cover all users on the computer, too, by modifying the system-wide runtime configuration area (described in <xref linkend=\"svn.advanced.confarea.layout\"/>)."
msgstr ""

#. Tag: screen
#: ch03-advanced-topics.xml:2648
#, no-c-format
msgid ""
"[auth]\n"
"store-auth-creds = no"
msgstr ""
"[auth]\n"
"store-auth-creds = no"

#. Tag: para
#: ch03-advanced-topics.xml:2650
#, no-c-format
msgid "Sometimes users will want to remove specific credentials from the disk cache. To do this, you need to navigate into the <filename>auth/</filename> area and manually delete the appropriate cache file. Credentials are cached in individual files; if you look inside each file, you will see keys and values. The <literal>svn:realmstring</literal> key describes the particular server realm that the file is associated with:"
msgstr "ときどき特定の証明をディスクキャッシュから削除したくなることがあります。 これには<filename>auth/</filename>領域を調べて適当なキャッシュファイルを 手で削除してください。証明は個別のファイルにキャッシュされています; それぞれ のファイルの中にはキーとその値があります。 <literal>svn:realmstring</literal> キーはファイルが関係している特定のサーバの認証範囲を記録しています:"

#. Tag: screen
#: ch03-advanced-topics.xml:2659
#, fuzzy, no-c-format
msgid ""
"$ ls ~/.subversion/auth/svn.simple/\n"
"5671adf2865e267db74f09ba6f872c28\n"
"3893ed123b39500bca8a0b382839198e\n"
"5c3c22968347b390f349ff340196ed39\n"
"\n"
"$ cat ~/.subversion/auth/svn.simple/5671adf2865e267db74f09ba6f872c28\n"
"\n"
"K 8\n"
"username\n"
"V 3\n"
"joe\n"
"K 8\n"
"password\n"
"V 4\n"
"blah\n"
"K 15\n"
"svn:realmstring\n"
"V 45\n"
"&lt;https://svn.domain.com:443&gt; Joe's repository\n"
"END"
msgstr ""
"$ ls ‾/.subversion/auth/svn.simple/\n"
"5671adf2865e267db74f09ba6f872c28        \n"
"3893ed123b39500bca8a0b382839198e\n"
"5c3c22968347b390f349ff340196ed39\n"
"\n"
"$ cat ‾/.subversion/auth/svn.simple/5671adf2865e267db74f09ba6f872c28\n"
"\n"
"K 8\n"
"username\n"
"V 3\n"
"joe\n"
"K 8\n"
"password\n"
"V 4\n"
"blah\n"
"K 15\n"
"svn:realmstring\n"
"V 45\n"
"&lt;https://svn.domain.com:443&gt; Joe's repository\n"
"END"

#. Tag: para
#: ch03-advanced-topics.xml:2661
#, no-c-format
msgid "Once you have located the proper cache file, just delete it."
msgstr "適切なキャッシュファイルを特定し、それを削除してください。"

#. Tag: para
#: ch03-advanced-topics.xml:2664
#, fuzzy, no-c-format
msgid "One last word about <command>svn</command>'s authentication behavior, specifically regarding the <option>--username</option> and <option>--password</option> options. Many client subcommands accept these options, but it is important to understand using these options does <emphasis>not</emphasis> automatically send credentials to the server. As discussed earlier, the server <quote>pulls</quote> credentials from the client when it deems necessary; the client cannot <quote>push</quote> them at will. If a username and/or password are passed as options, they will only be presented to the server if the server requests them. <footnote> <para>Again, a common mistake is to misconfigure a server so that it never issues an authentication challenge. When users pass <option>--username</option> and <option>--password</option> options to the client, they're surprised to see that they're never used, i.e. new revisions still appear to have been committed anonymously!</para> </footnote> These options are typically used to authenticate as a different user than Subversion would have chosen by default (such as your system login name), or when trying to avoid interactive prompting (such as when calling <command>svn</command> from a script)."
msgstr "クライアント認証について最後に一つ: <option>--username</option> と <option>--password</option>オプションについての説明が少し 必要です。たくさんのクライアントサブコマンドはこれらのオプションを 受け付けます; しかしこのようなオプションはサーバに自動的に証明を 送るのでは<emphasis>ない</emphasis>ことに注意してください。既に 説明したようにサーバは必要に応じてクライアントに証明の提示を<quote>要求</quote> します; クライアントから<quote>自発的に提示する</quote>ことはできないのです。 もしユーザ名とパスワードがオプションとして渡された場合でも、それは サーバが要求したときに<emphasis>のみ</emphasis>提示されるのです。 <footnote><para> ここでもよくある間違いは認証確認を決して要求しないようにサーバを 間違って設定してしまうというものです。この場合ユーザが <option>--username</option>と <option>--password</option>オプション をクライアントに渡しているのにそれが利用されないという状況に驚くでしょう。 つまり新しいリビジョンは依然として匿名でコミットされているように見える わけです! </para></footnote> 典型的にはこれのようなオプションは以下のような場合に利用されます:"

#. Tag: para
#: ch03-advanced-topics.xml:2691
#, fuzzy, no-c-format
msgid "Here is a final summary that describes how a Subversion client behaves when it receives an authentication challenge."
msgstr "最後にどのようにしてSubversion クライアントが認証確認を受けたときに 振る舞うかをまとめておきます:"

#. Tag: para
#: ch03-advanced-topics.xml:2697
#, fuzzy, no-c-format
msgid "First, the client checks whether the user specified any credentials as command-line options (<option>--username</option> and/or <option>--password</option>). If not, or if these options fail to authenticate successfully, then"
msgstr "ユーザがコマンドラインオプション中で<option>--username</option> または<option>--password</option>を通じて何らかの証明を指定しているか どうかを確認します。指定していないか、オプションによる認証が失敗した 場合には、"

#. Tag: para
#: ch03-advanced-topics.xml:2705
#, fuzzy, no-c-format
msgid "the client looks up the server's hostname, port, and realm in the runtime <filename>auth/</filename> area, to see if the user already has the appropriate credentials cached. If not, or if the cached credentials fail to authenticate, then"
msgstr "実行時 <filename>auth/</filename>領域中でサーバの認証範囲を探して ユーザが既に適切な証明をキャッシュしているかどうかを調べます。 もしそうでないかキャッシュされた証明が認証に失敗した場合はさらに、"

#. Tag: para
#: ch03-advanced-topics.xml:2713
#, no-c-format
msgid "finally, the client resorts to prompting the user (unless instructed not to do so via the <option>--non-interactive</option> option or its client-specific equivalents)."
msgstr ""

#. Tag: para
#: ch03-advanced-topics.xml:2721
#, no-c-format
msgid "If the client successfully authenticates by any of the methods listed above, it will attempt to cache the credentials on disk (unless the user has disabled this behavior, as mentioned earlier)."
msgstr "クライアントが上記のどれかの方法で認証に成醐ｻ駈ｵた場合はディスク上にその 証明をキャッシュしようとします (既に述べたように、ユーザがこの動作 を無効にしない限り、そうします)。"

#. Tag: title
#: ch04-branching-and-merging.xml:2
#, no-c-format
msgid "Branching and Merging"
msgstr "ブランチとマージ"

#. Tag: attribution
#: ch04-branching-and-merging.xml:5
#, fuzzy, no-c-format
msgid "Confucius"
msgstr "config"

#. Tag: quote
#: ch04-branching-and-merging.xml:6
#, no-c-format
msgid "君子务本 (It is upon the Trunk that a gentleman works.)"
msgstr ""

#. Tag: para
#: ch04-branching-and-merging.xml:11
#, no-c-format
msgid "Branching, tagging, and merging are concepts common to almost all version control systems. If you're not familiar with these ideas, we provide a good introduction in this chapter. If you are familiar, then hopefully you'll find it interesting to see how Subversion implements these ideas."
msgstr "ブランチ、タグ、マージはほとんどすべてのバージョン管理システムで 共通の概念です。もしあまりなじみがないのであれば、この章は良い とっかかりになるでしょう。既に詳しいのであれば、これらの概念 をSubversionがどのように実装しているかを知るのに興味深い章である ことがわかるでしょう。"

#. Tag: para
#: ch04-branching-and-merging.xml:17
#, no-c-format
msgid "Branching is a fundamental part of version control. If you're going to allow Subversion to manage your data, then this is a feature you'll eventually come to depend on. This chapter assumes that you're already familiar with Subversion's basic concepts (<xref linkend=\"svn.basic\"/>)."
msgstr "ブランチ化は、バージョン管理の基本にあります。Subversionで自分の データをマージするときには、この機能はときどき必要となる機能です。 この章では、あなたがSubversionの基本コンセプトを既に理解している ことを前提とします(<xref linkend=\"svn.basic\"/>)。"

#. Tag: title
#: ch04-branching-and-merging.xml:28
#, no-c-format
msgid "What's a Branch?"
msgstr "ブランチとは?"

#. Tag: para
#: ch04-branching-and-merging.xml:30
#, no-c-format
msgid "Suppose it's your job to maintain a document for a division in your company, a handbook of some sort. One day a different division asks you for the same handbook, but with a few parts <quote>tweaked</quote> for them, since they do things slightly differently."
msgstr "あなたの仕事が、何かのハンドブックを扱う企業の一部署で、ドキュメントの 管理をすることだとします。ある日別の部署から同じハンドブックが必要 なのだが、ある部分を<quote>ちょっとだけ</quote>変えたものがほしい、ほんの少しだけ 業務形態に違いがあるから、といわれたとします。"

#. Tag: para
#: ch04-branching-and-merging.xml:36
#, no-c-format
msgid "What do you do in this situation? You do the obvious thing: you make a second copy of your document, and begin maintaining the two copies separately. As each department asks you to make small changes, you incorporate them into one copy or the other."
msgstr "この状況で、あなたはどうしなくてはならないでしょうか? 答えはあたりまえです: ドキュメントのコピーを作って二つのコピーを 別々に管理することにします。それぞれの部署が小さな変更を依頼して くるたび、一方を修正したり、もう一方を修正したりします。"

#. Tag: para
#: ch04-branching-and-merging.xml:42
#, no-c-format
msgid "You often want to make the same change to both copies. For example, if you discover a typo in the first copy, it's very likely that the same typo exists in the second copy. The two documents are almost the same, after all; they only differ in small, specific ways."
msgstr "両方のコピーに同じ修正を加えたいこともよくあります。たとえば 最初のコピーにスペルミスがあったとします。もう一方のコピーにも おそらく同じ間違いがあるでしょう。両方のドキュメントはほとんど同じ なのですから。二つはほんの少し違っているだけです。"

#. Tag: para
#: ch04-branching-and-merging.xml:48
#, no-c-format
msgid "This is the basic concept of a <firstterm>branch</firstterm>&mdash;namely, a line of development that exists independently of another line, yet still shares a common history if you look far enough back in time. A branch always begins life as a copy of something, and moves on from there, generating its own history (see <xref linkend=\"svn.branchmerge.whatis.dia-1\"/>)."
msgstr "これは <firstterm>ブランチ</firstterm>の基本的な概念です&mdash; つまり、一つの開発の流れが、もう一方と独立して存在しているが、 もし過去にさかのぼれば、同じ履歴を共有している、という状況です。 ブランチは必ず、何かのコピーから始まり、枝分かれして、 自分自身の歴史を持っていくようになります(<xref linkend=\"svn.branchmerge.whatis.dia-1\"/>を参照してください)。"

#. Tag: title
#: ch04-branching-and-merging.xml:57
#, no-c-format
msgid "Branches of development"
msgstr "開発のブランチ"

#. Tag: para
#: ch04-branching-and-merging.xml:61
#, no-c-format
msgid "Subversion has commands to help you maintain parallel branches of your files and directories. It allows you to create branches by copying your data, and remembers that the copies are related to one another. It also helps you duplicate changes from one branch to another. Finally, it can make portions of your working copy reflect different branches, so that you can <quote>mix and match</quote> different lines of development in your daily work."
msgstr "Subversionはファイルやディレクトリの平行したブランチを管理するのを 手助けするコマンドがあります。データをコピーしてブランチを作ったり、 どのように二つのコピーが関係しているかを記憶しておくことができます。 片方のブランチに対する修正をもう一方にも追加する作業を助けることも できます。最後に、作業コピーの一部だけ別のブランチにすることもできる ので、通常の作業で、別の作業のラインを<quote>混ぜあわせる</quote>こともできます。"

#. Tag: title
#: ch04-branching-and-merging.xml:76
#, no-c-format
msgid "Using Branches"
msgstr "ブランチの利用"

#. Tag: para
#: ch04-branching-and-merging.xml:78
#, no-c-format
msgid "At this point, you should understand how each commit creates an entire new filesystem tree (called a <quote>revision</quote>) in the repository. If not, go back and read about revisions in <xref linkend=\"svn.basic.in-action.revs\"/>."
msgstr "これまでのところで、それぞれのコミットがどうやってリポジトリに完全に新しい ファイルシステムツリー(<quote>リビジョン</quote>と呼ばれます)を作るかを知っていると思います。 まだ知らないのであれば、戻ってリビジョンに関する<xref linkend=\"svn.basic.in-action.revs\"/>を 読んでください。"

#. Tag: para
#: ch04-branching-and-merging.xml:83
#, fuzzy, no-c-format
msgid "For this chapter, we'll go back to the same example from <xref linkend=\"svn.basic\"/>. Remember that you and your collaborator, Sally, are sharing a repository that contains two projects, <filename>paint</filename> and <filename>calc</filename>. Notice that in <xref linkend=\"svn.branchmerge.using.dia-1\"/>, however, each project directory now contains subdirectories named <filename>trunk</filename> and <filename>branches</filename>. The reason for this will soon become clear."
msgstr "この章では、第2章と同じ例を使います。同僚のSally とあなたが <filename>paint</filename> と<filename>calc</filename>という 二つのプロジェクトのあるリポジトリを共有していたことを思い出して ください。しかし、<xref linkend=\"svn.branchmerge.using.dia-1\"/>を見ると、個々の プロジェクトディレクトリは<filename>trunk</filename>と <filename>branches</filename>というサブディレクトリを含んでいること に注意してください。この理由はすぐに明らかになります。"

#. Tag: title
#: ch04-branching-and-merging.xml:94
#, no-c-format
msgid "Starting repository layout"
msgstr "リポジトリレイアウトの開始"

#. Tag: para
#: ch04-branching-and-merging.xml:98
#, no-c-format
msgid "As before, assume that Sally and you both have working copies of the <quote>calc</quote> project. Specifically, you each have a working copy of <filename>/calc/trunk</filename>. All the files for the project are in this subdirectory rather than in <filename>/calc</filename> itself, because your team has decided that <filename>/calc/trunk</filename> is where the <quote>main line</quote> of development is going to take place."
msgstr "以前と同様、あなたと Sally はそれぞれ <quote>calc</quote> プロジェクトの作業コピーを持っているとします。特に両者はそれぞれ <filename>/calc/trunk</filename>の作業コピーを持っています。 プロジェクトのすべてのファイルは <filename>/calc</filename>に ではなくこのサブディレクトリ中にありますが、それは皆が開発の<quote>主系</quote> を <filename>/calc/trunk</filename>に置くことに決めたからです。"

#. Tag: para
#: ch04-branching-and-merging.xml:107
#, fuzzy, no-c-format
msgid "Let's say that you've been given the task of implementing radical new project feature. It will take a long time to write, and will affect all the files in the project. The problem here is that you don't want to interfere with Sally, who is in the process of fixing small bugs here and there. She's depending on the fact that the latest version of the project (in <filename>/calc/trunk</filename>) is always usable. If you start committing your changes bit-by-bit, you'll surely break things for Sally."
msgstr "あなたはプロジェクトの大胆な再編成を任されたとします。 それには長い時間が必要で、プロジェクトの全ファイルに影響 を与えます。問題はあなたは Sally に干渉したくない ということにあります。彼女はまだあちこちにある小さなバグを 潰している最中だからです。彼女はプロジェクトの最終バージョンが (これは<filename>/calc/trunk</filename>にあるのですが) 利用可能だということに依存しています。もし、あなたが自分の 変更をちょっとづつコミットすれば、Sallyの作業を確実に中断させて しまうでしょう。"

#. Tag: para
#: ch04-branching-and-merging.xml:117
#, no-c-format
msgid "One strategy is to crawl into a hole: you and Sally can stop sharing information for a week or two. That is, start gutting and reorganizing all the files in your working copy, but don't commit or update until you're completely finished with the task. There are a number of problems with this, though. First, it's not very safe. Most people like to save their work to the repository frequently, should something bad accidentally happen to their working copy. Second, it's not very flexible. If you do your work on different computers (perhaps you have a working copy of <filename>/calc/trunk</filename> on two different machines), you'll need to manually copy your changes back and forth, or just do all the work on a single computer. By that same token, it's difficult to share your changes-in-progress with anyone else. A common software development <quote>best practice</quote> is to allow your peers to review your work as you go. If nobody sees your intermediate commits, you lose potential feedback. Finally, when you're finished with all your changes, you might find it very difficult to re-merge your final work with the rest of the company's main body of code. Sally (or others) may have made many other changes in the repository that are difficult to incorporate into your working copy&mdash;especially if you run <command>svn update</command> after weeks of isolation."
msgstr "一つのやり方として、閉じこもってしまう方法があります:あなたと Sallyは1,2週間、情報を共有するのをやめます。つまり、自分の 作業コピー中の全ファイルに対する大手術を始めるのですが、 それが完了するまで、コミットも更新もしないという方法です。 しかしこれにはいろいろな問題があります。まず安全ではありません。 ほとんどの人は、作業コピーにヘンなことが起こらないように、 リポジトリに対してこまめに自分の作業を保存するのを好みます。 次に、まったく柔軟ではありません。もし、あなたがたが別の マシンで仕事をしているなら、(多分二つの別のマシンに <filename>/calc/trunk</filename> の作業コピーがあるのでしょう) 自分の変更を手であちこちにコピーしなくてはならないか、 一つのマシン上に作業全体をフルコピーするかになります。 同じようにして他の誰との間でも自分の進行中の変更部分を共有する ことは困難です。通常のソフトウェア開発で<quote>一番よいやり方</quote> はあなたの作業の進行状況を他の人からも参照できるようにすることです。 もしあなたの中間的なコミットを誰も見ることができないとすると あなたは他の人からフィードバックしてもらうことができなくなって しまいます。 最終的に自分の変更作業が完了したとき、その変更を コミットするのは非常に困難であることに気づくでしょう。Sally(と 他のメンバー)はリポジトリに対してたくさんの別の変更を加えており、 それをあなたの作業コピーにマージするのは困難です&mdash; 何週間も孤立した作業の後に<command>svn update</command>を実行する ような場合には特にそうです。"

#. Tag: para
#: ch04-branching-and-merging.xml:141
#, no-c-format
msgid "The better solution is to create your own branch, or line of development, in the repository. This allows you to save your half-broken work frequently without interfering with others, yet you can still selectively share information with your collaborators. You'll see exactly how this works later on."
msgstr "もっとましなやり方はリポジトリに自分用のブランチ、あるいは 自分用の作業の別ラインを作ることです。これは他の人に干渉 せずに、自分の中途半端な作業をときどき保存できるように しますが、それでも同僚との間で、一部の情報については共有する ことができます。どうやったらこんなことができるかは後で説明 します。"

#. Tag: title
#: ch04-branching-and-merging.xml:150
#, no-c-format
msgid "Creating a Branch"
msgstr "ブランチの作成"

#. Tag: para
#: ch04-branching-and-merging.xml:152
#, no-c-format
msgid "Creating a branch is very simple&mdash;you make a copy of the project in the repository using the <command>svn copy</command> command. Subversion is not only able to copy single files, but whole directories as well. In this case, you want to make a copy of the <filename>/calc/trunk</filename> directory. Where should the new copy live? Wherever you wish&mdash;it's a matter of project policy. Let's say that your team has a policy of creating branches in the <filename>/calc/branches</filename> area of the repository, and you want to name your branch <literal>my-calc-branch</literal>. You'll want to create a new directory, <filename>/calc/branches/my-calc-branch</filename>, which begins its life as a copy of <filename>/calc/trunk</filename>."
msgstr "ブランチの作成はとても簡単です &mdash; <command>svn copy</command> コマンドでリポジトリ中のプロジェクトをコピーするだけです。 Subversionでは一つのファイルをコピーするだけでなく、ディレクトリ 全体をコピーすることができます。今回は、<filename>/calc/trunk</filename> ディレクトリのコピーがほしいでしょう。新しいコピーはどこに置けば 良いのでしょう? 好きな場所に置けます &mdash; あとはプロジェクトのポリシーに よります。チームのポリシーは、リポジトリの<filename>/calc/branches</filename> 領域にブランチを作ることで、ブランチ名は <quote>my-calc-branch</quote> としましょう。この場合、<filename>/calc/trunk</filename>のコピーとして、 <filename>/calc/branches/my-calc-branch</filename>という新しいディレクトリ を作る必要があります。"

#. Tag: para
#: ch04-branching-and-merging.xml:168
#, no-c-format
msgid "There are two different ways to make a copy. We'll demonstrate the messy way first, just to make the concept clear. To begin, check out a working copy of the project's root directory, <filename>/calc</filename>:"
msgstr "コピーを作るには、二つの方法があります。面倒な方法を最初に 説明して、概念をはっきりさせます。最初にプロジェクトのルートディレクトリ である <filename>/calc</filename>を作業コピーにチェックアウトします:"

#. Tag: screen
#: ch04-branching-and-merging.xml:173
#, no-c-format
msgid ""
"$ svn checkout http://svn.example.com/repos/calc bigwc\n"
"A  bigwc/trunk/\n"
"A  bigwc/trunk/Makefile\n"
"A  bigwc/trunk/integer.c\n"
"A  bigwc/trunk/button.c\n"
"A  bigwc/branches/\n"
"Checked out revision 340."
msgstr ""
"$ svn checkout http://svn.example.com/repos/calc bigwc\n"
"A  bigwc/trunk/\n"
"A  bigwc/trunk/Makefile\n"
"A  bigwc/trunk/integer.c\n"
"A  bigwc/trunk/button.c\n"
"A  bigwc/branches/\n"
"Checked out revision 340."

#. Tag: para
#: ch04-branching-and-merging.xml:175
#, no-c-format
msgid "Making a copy is now simply a matter of passing two working-copy paths to the <command>svn copy</command> command:"
msgstr "あとは、 <command>svn copy</command>コマンドに作業コピーパスを 二つ渡すだけでコピーを作れます:"

#. Tag: screen
#: ch04-branching-and-merging.xml:179
#, no-c-format
msgid ""
"$ cd bigwc\n"
"$ svn copy trunk branches/my-calc-branch\n"
"$ svn status\n"
"A  +   branches/my-calc-branch"
msgstr ""
"$ cd bigwc\n"
"$ svn copy trunk branches/my-calc-branch\n"
"$ svn status\n"
"A  +   branches/my-calc-branch"

#. Tag: para
#: ch04-branching-and-merging.xml:181
#, no-c-format
msgid "In this case, the <command>svn copy</command> command recursively copies the <filename>trunk</filename> working directory to a new working directory, <filename>branches/my-calc-branch</filename>. As you can see from the <command>svn status</command> command, the new directory is now scheduled for addition to the repository. But also notice the <quote>+</quote> sign next to the letter A. This indicates that the scheduled addition is a <emphasis>copy</emphasis> of something, not something new. When you commit your changes, Subversion will create <filename>/calc/branches/my-calc-branch</filename> in the repository by copying <filename>/calc/trunk</filename>, rather than resending all of the working copy data over the network:"
msgstr "この場合、<command>svn copy</command> コマンドは再帰的に <filename>trunk</filename>作業ディレクトリの内容を 新しい作業ディレクトリ<filename>branches/my-calc-branch</filename> にコピーします。<command>svn status</command> コマンドで 確認できますが、これで新しいディレクトリはリポジトリへの追加として 予告されます。ただ、Aの後に、<quote>+</quote>サインが表示されるのに注意して ください。これは、追加予告が、新規のものではなく、何かの <emphasis>コピー</emphasis> であることを示しています。 変更をコミットすると、Subversionは、ネットワーク越しに 作業コピーデータの全体を再送信するのではなく、 <filename>/calc/trunk</filename>をコピーすることで リポジトリに <filename>/calc/branches/my-calc-branch</filename> を作ります:"

#. Tag: screen
#: ch04-branching-and-merging.xml:196
#, no-c-format
msgid ""
"$ svn commit -m \"Creating a private branch of /calc/trunk.\"\n"
"Adding         branches/my-calc-branch\n"
"Committed revision 341."
msgstr ""
"$ svn commit -m \"Creating a private branch of /calc/trunk.\"\n"
"Adding         branches/my-calc-branch\n"
"Committed revision 341."

#. Tag: para
#: ch04-branching-and-merging.xml:198
#, fuzzy, no-c-format
msgid "And now here's the easier method of creating a branch, which we should have told you about in the first place: <command>svn copy</command> is able to operate directly on two URLs."
msgstr "さて、ブランチを作るもっと簡単な方法は、先に説明すべきでした が: <command>svn copy</command> は 引数に直接URLを二つとることが できるということです。"

#. Tag: screen
#: ch04-branching-and-merging.xml:203
#, no-c-format
msgid ""
"$ svn copy http://svn.example.com/repos/calc/trunk \\\n"
"           http://svn.example.com/repos/calc/branches/my-calc-branch \\\n"
"      -m \"Creating a private branch of /calc/trunk.\"\n"
"\n"
"Committed revision 341."
msgstr ""
"$ svn copy http://svn.example.com/repos/calc/trunk ¥\n"
"           http://svn.example.com/repos/calc/branches/my-calc-branch ¥\n"
"      -m \"Creating a private branch of /calc/trunk\"\n"
"\n"
"Committed revision 341."

#. Tag: para
#: ch04-branching-and-merging.xml:205
#, fuzzy, no-c-format
msgid "From the repository's point of view, there's really no difference between these two methods. Both procedures create a new directory in revision 341, and the new directory is a copy of <filename>/calc/trunk</filename>. This is shown in <xref linkend=\"svn.branchmerge.using.create.dia-1\"/>. Notice that the second method, however, performs an <emphasis>immediate</emphasis> commit in constant time. <footnote> <para>Subversion does not support copying between different repositories. When using URLs with <command>svn copy</command> or <command>svn move</command>, you can only copy items within the same repository.</para> </footnote> It's an easier procedure, because it doesn't require you to check out a large portion of the repository. In fact, this technique doesn't even require you to have a working copy at all. This is the way most users create branches."
msgstr "この二つの方法には何の違いもありません。 両方とも新しいリビジョン341のディレクトリを作り、新しい ディレクトリは<filename>/calc/trunk</filename>のコピーに なります。<xref linkend=\"svn.branchmerge.using.create.dia-1\"/>にこれを示しました。 ただし二番目の方法は<emphasis>同時に</emphasis> コミットも発行します。 <footnote><para> Subversion はリポジトリ間コピーをサポートしていません。<command>svn copy</command>や<command>svn move</command>で URLを指定する場合、 同じリポジトリ内でのみコピーすることができます。 </para> </footnote> 二番目のほうが楽です。リポジトリの 大きなコピーをチェックアウトしなくていいからです。 実際、この方法では、作業コピーそのものを用意する必要 すらありません。"

#. Tag: title
#: ch04-branching-and-merging.xml:226
#, no-c-format
msgid "Repository with new copy"
msgstr "新しいコピーのあるリポジトリ"

#. Tag: title
#: ch04-branching-and-merging.xml:231
#, no-c-format
msgid "Cheap Copies"
msgstr "簡易コピー"

#. Tag: para
#: ch04-branching-and-merging.xml:233
#, fuzzy, no-c-format
msgid "Subversion's repository has a special design. When you copy a directory, you don't need to worry about the repository growing huge&mdash;Subversion doesn't actually duplicate any data. Instead, it creates a new directory entry that points to an <emphasis>existing</emphasis> tree. If you're a Unix user, this is the same concept as a hard-link. As further changes are made to files and directories beneath the copied directory, Subversion continues to employ this hard-link concept where it can. It only duplicates data when it is necessary to disambiguate different versions of objects."
msgstr "Subversionのリポジトリは特殊な設計になっています。ディレクトリ をコピーするとき、リポジトリが不要に大きくなるかと心配する 必要はありません。&mdash; Subversionは実際には全然データを コピーしません。そのかわり、既に<emphasis>存在している</emphasis> ツリーを指し示すような新しいディレクトリを作ります。 Unixユーザなら、これはハードリンクの概念と同じです。 そんなわけで、このコピーは、<quote>ものぐさ方式</quote>と呼ばれます。 つまりコピーされたディレクトリ中の一つのファイルの変更を コミットしたとき、そのファイルだけが変更されます &mdash; 残りの ファイルは、依然として最初のディレクトリのもともとのファイル へのリンクのままです。"

#. Tag: para
#: ch04-branching-and-merging.xml:245
#, no-c-format
msgid "This is why you'll often hear Subversion users talk about <quote>cheap copies</quote>. It doesn't matter how large the directory is&mdash;it takes a very tiny, constant amount of time to make a copy of it. In fact, this feature is the basis of how commits work in Subversion: each revision is a <quote>cheap copy</quote> of the previous revision, with a few items lazily changed within. (To read more about this, visit Subversion's website and read about the <quote>bubble up</quote> method in Subversion's design documents.)"
msgstr "これが、Subversionユーザが、<quote>簡易コピー</quote>という言葉をよく聞く 理由です。ディレクトリがどれほど大きいかには無関係なのです &mdash; コピーには非常にわずかな、一定の時間がかかるだけです。 これがSubversionでのコミットのやり方の基本です: それぞれの リビジョンは前のリビジョンの<quote>簡易コピー</quote>で、その中のいくつか のアイテムだけが、実際にコピーされます。(もっと知りたい人は Subversionのウェブサイトに行き、Subversion設計ドキュメント中の <quote>bubble up</quote>方式を読んでください)"

#. Tag: para
#: ch04-branching-and-merging.xml:256
#, fuzzy, no-c-format
msgid "Of course, these internal mechanics of copying and sharing data are hidden from the user, who simply sees copies of trees. The main point here is that copies are cheap, both in time and space. If you create a branch entirely within the repository (by running <command>svn copy URL1 URL2</command>), it's a quick, constant-time operation. Make branches as often as you want."
msgstr "もちろん、このようなデータのコピーと共有の内部的な仕組みは ユーザからは見えず、単にツリーのコピーが見えるだけです。ここ での要点はコピー処理は時間的に空間的にも軽いということです。 好きなだけブランチを作ってください。"

#. Tag: title
#: ch04-branching-and-merging.xml:269
#, no-c-format
msgid "Working with Your Branch"
msgstr "自分用のブランチでの作業"

#. Tag: para
#: ch04-branching-and-merging.xml:271
#, no-c-format
msgid "Now that you've created a branch of the project, you can check out a new working copy to start using it:"
msgstr "これでプロジェクトにブランチを作ることができたので それを使った新しい作業コピーをチェックアウトできます:"

#. Tag: screen
#: ch04-branching-and-merging.xml:274
#, no-c-format
msgid ""
"$ svn checkout http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"A  my-calc-branch/Makefile\n"
"A  my-calc-branch/integer.c\n"
"A  my-calc-branch/button.c\n"
"Checked out revision 341."
msgstr ""
"$ svn checkout http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"A  my-calc-branch/Makefile\n"
"A  my-calc-branch/integer.c\n"
"A  my-calc-branch/button.c\n"
"Checked out revision 341."

#. Tag: para
#: ch04-branching-and-merging.xml:276
#, fuzzy, no-c-format
msgid "There's nothing special about this working copy; it simply mirrors a different directory in the repository. When you commit changes, however, Sally won'tsee them when she updates, because her working copy is of <filename>/calc/trunk</filename>. (Be sure to read <xref linkend=\"svn.branchmerge.switchwc\"/> later in this chapter: the <command>svn switch</command> command is an alternate way of creating a working copy of a branch.)"
msgstr "この作業コピーについては何も特別なことはありません。単に 別のディレクトリにあるリポジトリのコピーだというだけです。 ただし、あなたが変更をコミットして、その後にSallyが更新しても その変更を見ることはありません。彼女の作業コピーは、 <filename>/calc/trunk</filename>からのものだからです。 (この章の<xref linkend=\"svn.branchmerge.switchwc\"/>を読んでください: <command>svn switch</command>コマンドはブランチの作業コピー を作る別の方法です。)"

#. Tag: para
#: ch04-branching-and-merging.xml:285
#, no-c-format
msgid "Let's pretend that a week goes by, and the following commits happen:"
msgstr "一週間が経過する間に、以下のコミットが起こったとしましょう:"

#. Tag: para
#: ch04-branching-and-merging.xml:289
#, no-c-format
msgid "You make a change to <filename>/calc/branches/my-calc-branch/button.c</filename>, which creates revision 342."
msgstr "<filename>/calc/branches/my-calc-branch/button.c</filename>, に変更を加え、リビジョン342を作った。"

#. Tag: para
#: ch04-branching-and-merging.xml:295
#, no-c-format
msgid "You make a change to <filename>/calc/branches/my-calc-branch/integer.c</filename>, which creates revision 343."
msgstr "<filename>/calc/branches/my-calc-branch/integer.c</filename>, に変更を加え、リビジョン343を作った。"

#. Tag: para
#: ch04-branching-and-merging.xml:301
#, no-c-format
msgid "Sally makes a change to <filename>/calc/trunk/integer.c</filename>, which creates revision 344."
msgstr "Sallyは <filename>/calc/trunk/integer.c</filename>に 修正を加え、リビジョン344を作った。"

#. Tag: para
#: ch04-branching-and-merging.xml:308
#, no-c-format
msgid "There are now two independent lines of development, shown in <xref linkend=\"svn.branchmerge.using.work.dia-1\"/>, happening on <filename>integer.c</filename>."
msgstr "これで、<xref linkend=\"svn.branchmerge.using.work.dia-1\"/>に示すように <filename>integer.c</filename>に二つの独立した開発ラインができました:"

#. Tag: title
#: ch04-branching-and-merging.xml:313
#, no-c-format
msgid "The branching of one file's history"
msgstr "あるファイルの履歴のブランチ化"

#. Tag: para
#: ch04-branching-and-merging.xml:317
#, no-c-format
msgid "Things get interesting when you look at the history of changes made to your copy of <filename>integer.c</filename>:"
msgstr "<filename>integer.c</filename>のコピーに起きた変更履歴を 見ると面白いことがわかります:"

#. Tag: screen
#: ch04-branching-and-merging.xml:321
#, fuzzy, no-c-format
msgid ""
"$ pwd\n"
"/home/user/my-calc-branch\n"
"\n"
"$ svn log -v integer.c\n"
"------------------------------------------------------------------------\n"
"r343 | user | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/branches/my-calc-branch/integer.c\n"
"\n"
"* integer.c:  frozzled the wazjub.\n"
"\n"
"------------------------------------------------------------------------\n"
"r341 | user | 2002-11-03 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\n"
"Changed paths:\n"
"   A /calc/branches/my-calc-branch (from /calc/trunk:340)\n"
"\n"
"Creating a private branch of /calc/trunk.\n"
"\n"
"------------------------------------------------------------------------\n"
"r303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/trunk/integer.c\n"
"\n"
"* integer.c:  changed a docstring.\n"
"\n"
"------------------------------------------------------------------------\n"
"r98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/trunk/integer.c\n"
"\n"
"* integer.c:  adding this file to the project.\n"
"\n"
"------------------------------------------------------------------------"
msgstr ""
"$ pwd\n"
"/home/user/my-calc-branch\n"
"\n"
"$ svn log --verbose integer.c\n"
"------------------------------------------------------------------------\n"
"r343 | user | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/branches/my-calc-branch/integer.c\n"
"\n"
"* integer.c:  frozzled the wazjub.\n"
"\n"
"------------------------------------------------------------------------\n"
"r341 | user | 2002-11-03 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\n"
"Changed paths:\n"
"   A /calc/branches/my-calc-branch (from /calc/trunk:340)\n"
"\n"
"Creating a private branch of /calc/trunk.\n"
"\n"
"------------------------------------------------------------------------\n"
"r303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/trunk/integer.c\n"
"\n"
"* integer.c:  changed a docstring.\n"
"\n"
"------------------------------------------------------------------------\n"
"r98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/trunk/integer.c\n"
"\n"
"* integer.c:  adding this file to the project.\n"
"\n"
"------------------------------------------------------------------------"

#. Tag: para
#: ch04-branching-and-merging.xml:323
#, no-c-format
msgid "Notice that Subversion is tracing the history of your branch's <filename>integer.c</filename> all the way back through time, even traversing the point where it was copied. It shows the creation of the branch as an event in the history, because <filename>integer.c</filename> was implicitly copied when all of <filename>/calc/trunk/</filename> was copied. Now look what happens when Sally runs the same command on her copy of the file:"
msgstr "Subversion はブランチにある<filename>integer.c</filename>の履歴を 時間を逆向きにたどり、これにはコピーされた地点も含まれることに注意 してください。それはブランチの生成を履歴上の一つのできごととして 表示しますが、それは<filename>integer.c</filename>も <filename>/calc/trunk/</filename>全体がコピーされたときに暗黙に コピーされたものだからです。今度は Sally が自分のファイルコピー上 で同じコマンドを実行した結果を見てみましょう:"

#. Tag: screen
#: ch04-branching-and-merging.xml:332
#, fuzzy, no-c-format
msgid ""
"$ pwd\n"
"/home/sally/calc\n"
"\n"
"$ svn log -v integer.c\n"
"------------------------------------------------------------------------\n"
"r344 | sally | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/trunk/integer.c\n"
"\n"
"* integer.c:  fix a bunch of spelling errors.\n"
"\n"
"------------------------------------------------------------------------\n"
"r303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/trunk/integer.c\n"
"\n"
"* integer.c:  changed a docstring.\n"
"\n"
"------------------------------------------------------------------------\n"
"r98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/trunk/integer.c\n"
"\n"
"* integer.c:  adding this file to the project.\n"
"\n"
"------------------------------------------------------------------------"
msgstr ""
"$ pwd\n"
"/home/sally/calc\n"
"\n"
"$ svn log --verbose integer.c\n"
"------------------------------------------------------------------------\n"
"r344 | sally | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/trunk/integer.c\n"
"\n"
"* integer.c:  fix a bunch of spelling errors.\n"
"\n"
"------------------------------------------------------------------------\n"
"r303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/trunk/integer.c\n"
"\n"
"* integer.c:  changed a docstring.\n"
"\n"
"------------------------------------------------------------------------\n"
"r98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines\n"
"Changed paths:\n"
"   M /calc/trunk/integer.c\n"
"\n"
"* integer.c:  adding this file to the project.\n"
"\n"
"------------------------------------------------------------------------"

#. Tag: para
#: ch04-branching-and-merging.xml:334
#, no-c-format
msgid "Sally sees her own revision 344 change, but not the change you made in revision 343. As far as Subversion is concerned, these two commits affected different files in different repository locations. However, Subversion <emphasis>does</emphasis> show that the two files share a common history. Before the branch-copy was made in revision 341, they used to be the same file. That's why you and Sally both see the changes made in revisions 303 and 98."
msgstr "Sallyは自分のリビジョン344の変更を見ることができますが、あなたが リビジョン343にやった変更は見ることができません。Subversionでは、 この二つのコミットはリポジトリの別の場所にある別のファイルに 対して起こります。しかし、Subversionは、二つのファイルが共通の履歴を 持っていることを<emphasis>示してもいます</emphasis>。リビジョン341 で起きたブランチコピーの前は両者は同じファイルを使っていました。 Sallyとあなたがどちらもリビジョン 303と98での変更を見ることができるのは そのためです。"

#. Tag: title
#: ch04-branching-and-merging.xml:347
#, no-c-format
msgid "The Key Concepts Behind Branches"
msgstr "ブランチの背後にある鍵となる考え方"

#. Tag: para
#: ch04-branching-and-merging.xml:349
#, fuzzy, no-c-format
msgid "There are two important lessons that you should remember from this section. First, Subversion has no internal concept of a branch&mdash;it only knows how to make copies. When you copy a directory, the resulting directory is only a <quote>branch</quote> because <emphasis>you</emphasis> attach that meaning to it. You may think of the directory differently, or treat it differently, but to Subversion it's just an ordinary directory that happens to carry some extra historical information. Second, because of this copy mechanism, Subversion's branches exist as <emphasis>normal filesystem directories</emphasis> in the repository. This is different from other version control systems, where branches are typically defined by adding extra-dimensional <quote>labels</quote> to collections of files."
msgstr "Subversionは内部的にはブランチという概念を持ちません &mdash;それはただのコピーです。ディレクトリをコピーした とき、結果としてできたディレクトリが<quote>ブランチ</quote>であるのは、 <emphasis>あなたが</emphasis> そのような意味で見ることに したからです。そのディレクトリを別の意味合いにとらえたり 取り扱ったりすることもできますが、いずれにせよSubversionに とっては、コピーによって作成された普通のディレクトリの 一つにすぎません。"

#. Tag: title
#: ch04-branching-and-merging.xml:373
#, no-c-format
msgid "Copying Changes Between Branches"
msgstr "ブランチをまたいで変更をコピーすること"

#. Tag: para
#: ch04-branching-and-merging.xml:375
#, no-c-format
msgid "Now you and Sally are working on parallel branches of the project: you're working on a private branch, and Sally is working on the <firstterm>trunk</firstterm>, or main line of development."
msgstr "さて、あなたとSallyはプロジェクト上の平行したブランチで作業しています。 あなたは自分のプライベートなブランチで作業していて、Sally は <firstterm>trunk</firstterm>、あるいは、開発の主系の上で作業していると します。"

#. Tag: para
#: ch04-branching-and-merging.xml:380
#, no-c-format
msgid "For projects that have a large number of contributors, it's common for most people to have working copies of the trunk. Whenever someone needs to make a long-running change that is likely to disrupt the trunk, a standard procedure is to create a private branch and commit changes there until all the work is complete."
msgstr "たくさんの貢献者がいるようなプロジェクトでは、ほとんどの人たちは trunkのコピーを持っているのが普通です。trunk を壊してしまうかも知れない ような長い期間をかけての変更を加える必要がある場合は常に、標準的な手続き としてはまずプライベートなブランチを作り、すべての作業が完了するまで変更 点をそのブランチにコミットします。"

#. Tag: para
#: ch04-branching-and-merging.xml:387
#, no-c-format
msgid "So, the good news is that you and Sally aren't interfering with each other. The bad news is that it's very easy to drift <emphasis>too</emphasis> far apart. Remember that one of the problems with the <quote>crawl in a hole</quote> strategy is that by the time you're finished with your branch, it may be near-impossible to merge your changes back into the trunk without a huge number of conflicts."
msgstr "そのようなやり方の利点としては、二人の作業はお互いに干渉しないところです。 欠点は二人の作業内容はすぐに<emphasis>ひどく</emphasis> 違っていって しまうことです。<quote>引きこもり</quote>戦略の問題の一つは自分のブランチの作業が 完了するときに起こることを思い出してください。恐ろしくたくさんの衝突 なしに、あなたの変更をtrunkにマージするのはほとんど不可能でしょう。"

#. Tag: para
#: ch04-branching-and-merging.xml:395
#, no-c-format
msgid "Instead, you and Sally might continue to share changes as you work. It's up to you to decide which changes are worth sharing; Subversion gives you the ability to selectively <quote>copy</quote> changes between branches. And when you're completely finished with your branch, your entire set of branch changes can be copied back into the trunk."
msgstr "そのかわりに、作業中に、あなたとSallyは変更を共有し続けるのが良い でしょう。どのような変更が共有する価値があるのかはあなたが決める ことです。Subversionを使うとブランチ間の選択的な<quote>コピー</quote>ができます。 そしてブランチ上での作業が完全に終ったら、ブランチ上にした変更点の 全体をtrunkに書き戻すことができます。"

#. Tag: title
#: ch04-branching-and-merging.xml:405
#, no-c-format
msgid "Copying Specific Changes"
msgstr "特定の変更点のコピー"

#. Tag: para
#: ch04-branching-and-merging.xml:408
#, no-c-format
msgid "In the previous section, we mentioned that both you and Sally made changes to <filename>integer.c</filename> on different branches. If you look at Sally's log message for revision 344, you can see that she fixed some spelling errors. No doubt, your copy of the same file still has the same spelling errors. It's likely that your future changes to this file will be affecting the same areas that have the spelling errors, so you're in for some potential conflicts when you merge your branch someday. It's better, then, to receive Sally's change now, <emphasis>before</emphasis> you start working too heavily in the same places."
msgstr "前の節で、あなたとSallyは別ブランチ上で<filename>integer.c</filename> に変更を加えたと言いました。もしリビジョン344のSallyのログメッセージ を見れば、何かのスペルミスを直したことがわかるかも知れません。 この場合間違いなく、同じファイルのあなたのコピーもやはり同じスペルミスが あるはずです。このファイルに対する今後のあなたの修正はスペルミスのある 場所に影響を与えるかも知れず、自分のブランチをいつかマージするときに は衝突が起こってしまいます。そうなるくらいなら、あまりひどいことになる <emphasis>前に</emphasis>、Sallyの修正をいま受け取ったほうが良いでしょう。"

#. Tag: para
#: ch04-branching-and-merging.xml:420
#, fuzzy, no-c-format
msgid "It's time to use the <command>svn merge</command> command. This command, it turns out, is a very close cousin to the <command>svn diff</command> command (which you read about in <xref linkend=\"svn.tour\"/>). Both commands are able to compare any two objects in the repository and describe the differences. For example, you can ask <command>svn diff</command> to show you the exact change made by Sally in revision 344:"
msgstr "<command>svn merge</command> コマンドを使うときがやってきました。 このコマンドは、 <command>svn diff</command> に非常に近い 親戚だということがわかります。(このコマンドは第3章で説明しました)。 両方ともリポジトリ中の二つのオブジェクトを比較して、その差を 調べることができます。たとえば<command>svn diff</command> に Sallyがリビジョン344でやった変更点を正確に表示することができます:"

#. Tag: screen
#: ch04-branching-and-merging.xml:429
#, fuzzy, no-c-format
msgid ""
"$ svn diff -c 344 http://svn.example.com/repos/calc/trunk\n"
"\n"
"Index: integer.c\n"
"===================================================================\n"
"--- integer.c        (revision 343)\n"
"+++ integer.c        (revision 344)\n"
"@@ -147,7 +147,7 @@\n"
"     case 6:  sprintf(info-&gt;operating_system, \"HPFS (OS/2 or NT)\"); break;\n"
"     case 7:  sprintf(info-&gt;operating_system, \"Macintosh\"); break;\n"
"     case 8:  sprintf(info-&gt;operating_system, \"Z-System\"); break;\n"
"-    case 9:  sprintf(info-&gt;operating_system, \"CPM\"); break;\n"
"+    case 9:  sprintf(info-&gt;operating_system, \"CP/M\"); break;\n"
"     case 10:  sprintf(info-&gt;operating_system, \"TOPS-20\"); break;\n"
"     case 11:  sprintf(info-&gt;operating_system, \"NTFS (Windows NT)\"); break;\n"
"     case 12:  sprintf(info-&gt;operating_system, \"QDOS\"); break;\n"
"@@ -164,7 +164,7 @@\n"
"     low = (unsigned short) read_byte(gzfile);  /* read LSB */\n"
"     high = (unsigned short) read_byte(gzfile); /* read MSB */\n"
"     high = high &lt;&lt; 8;  /* interpret MSB correctly */\n"
"-    total = low + high; /* add them togethe for correct total */\n"
"+    total = low + high; /* add them together for correct total */\n"
"\n"
"     info-&gt;extra_header = (unsigned char *) my_malloc(total);\n"
"     fread(info-&gt;extra_header, total, 1, gzfile);\n"
"@@ -241,7 +241,7 @@\n"
"      Store the offset with ftell() ! */\n"
"\n"
"   if ((info-&gt;data_offset = ftell(gzfile))== -1) {\n"
"-    printf(\"error: ftell() retturned -1.\\n"
"\");\n"
"+    printf(\"error: ftell() returned -1.\\n"
"\");\n"
"     exit(1);\n"
"   }\n"
"\n"
"@@ -249,7 +249,7 @@\n"
"   printf(\"I believe start of compressed data is %u\\n"
"\", info-&gt;data_offset);\n"
"   #endif\n"
"\n"
"-  /* Set postion eight bytes from the end of the file. */\n"
"+  /* Set position eight bytes from the end of the file. */\n"
"\n"
"   if (fseek(gzfile, -8, SEEK_END)) {\n"
"     printf(\"error: fseek() returned non-zero\\n"
"\");"
msgstr ""
"$ svn diff -r 343:344 http://svn.example.com/repos/calc/trunk\n"
"\n"
"Index: integer.c\n"
"===================================================================\n"
"--- integer.c        (revision 343)\n"
"+++ integer.c        (revision 344)\n"
"@@ -147,7 +147,7 @@\n"
"     case 6:  sprintf(info-&gt;operating_system, \"HPFS (OS/2 or NT)\"); break;\n"
"     case 7:  sprintf(info-&gt;operating_system, \"Macintosh\"); break;\n"
"     case 8:  sprintf(info-&gt;operating_system, \"Z-System\"); break;\n"
"-    case 9:  sprintf(info-&gt;operating_system, \"CPM\"); break;\n"
"+    case 9:  sprintf(info-&gt;operating_system, \"CP/M\"); break;\n"
"     case 10:  sprintf(info-&gt;operating_system, \"TOPS-20\"); break;\n"
"     case 11:  sprintf(info-&gt;operating_system, \"NTFS (Windows NT)\"); break;\n"
"     case 12:  sprintf(info-&gt;operating_system, \"QDOS\"); break;\n"
"@@ -164,7 +164,7 @@\n"
"     low = (unsigned short) read_byte(gzfile);  /* read LSB */\n"
"     high = (unsigned short) read_byte(gzfile); /* read MSB */\n"
"     high = high &lt;&lt; 8;  /* interpret MSB correctly */\n"
"-    total = low + high; /* add them togethe for correct total */\n"
"+    total = low + high; /* add them together for correct total */\n"
" \n"
"     info-&gt;extra_header = (unsigned char *) my_malloc(total);\n"
"     fread(info-&gt;extra_header, total, 1, gzfile);\n"
"@@ -241,7 +241,7 @@\n"
"      Store the offset with ftell() ! */\n"
" \n"
"   if ((info-&gt;data_offset = ftell(gzfile))== -1) {\n"
"-    printf(\"error: ftell() retturned -1.¥n\");\n"
"+    printf(\"error: ftell() returned -1.¥n\");\n"
"     exit(1);\n"
"   }\n"
" \n"
"@@ -249,7 +249,7 @@\n"
"   printf(\"I believe start of compressed data is %u¥n\", info-&gt;data_offset);\n"
"   #endif\n"
"   \n"
"-  /* Set postion eight bytes from the end of the file. */\n"
"+  /* Set position eight bytes from the end of the file. */\n"
" \n"
"   if (fseek(gzfile, -8, SEEK_END)) {\n"
"     printf(\"error: fseek() returned non-zero¥n\");"

#. Tag: para
#: ch04-branching-and-merging.xml:431
#, no-c-format
msgid "The <command>svn merge</command> command is almost exactly the same. Instead of printing the differences to your terminal, however, it applies them directly to your working copy as <emphasis>local modifications</emphasis>:"
msgstr "<command>svn merge</command> コマンドもほとんど同じです。差分を 画面に表示するかわりに、それは<emphasis>ローカルな 修正分</emphasis>として直接あなたの作業コピーに適用 します:"

#. Tag: screen
#: ch04-branching-and-merging.xml:436
#, fuzzy, no-c-format
msgid ""
"$ svn merge -c 344 http://svn.example.com/repos/calc/trunk\n"
"U  integer.c\n"
"\n"
"$ svn status\n"
"M  integer.c"
msgstr ""
"$ svn merge -r 343:344 http://svn.example.com/repos/calc/trunk\n"
"U  integer.c\n"
"\n"
"$ svn status\n"
"M  integer.c"

#. Tag: para
#: ch04-branching-and-merging.xml:438
#, no-c-format
msgid "The output of <command>svn merge</command> shows that your copy of <filename>integer.c</filename> was patched. It now contains Sally's change&mdash;the change has been <quote>copied</quote> from the trunk to your working copy of your private branch, and now exists as a local modification. At this point, it's up to you to review the local modification and make sure it works correctly."
msgstr "<command>svn merge</command> の出力は、あなた用の <filename>integer.c</filename> のコピーがパッチされた 結果です。これでSallyの変更が含まれるようになりました&mdash; それはtrunkからあなたのプライベートなブランチの作業コピーに <quote>コピー</quote>され、ローカルな修正の一部となりました。この修正を再検討し、 正しく動作することを確認するのはあなたの仕事です。"

#. Tag: para
#: ch04-branching-and-merging.xml:446
#, fuzzy, no-c-format
msgid "In another scenario, it's possible that things may not have gone so well, and that <filename>integer.c</filename> may have entered a conflicted state. You might need to resolve the conflict using standard procedures (see <xref linkend=\"svn.tour\"/>), or if you decide that the merge was a bad idea altogether, simply give up and <command>svn revert</command> the local change."
msgstr "別のシナリオとして、そんなにうまくはいかず、 <filename>integer.c</filename> が衝突の状態になることもあります。 標準的な方法を使って衝突を解消するか(第3章を見てください)、 結局マージが悪いアイディアだったと思ったときには、あきらめて <command>svn revert</command> でローカルの変更を取り消すことも できます。"

#. Tag: para
#: ch04-branching-and-merging.xml:454
#, no-c-format
msgid "But assuming that you've reviewed the merged change, you can <command>svn commit</command> the change as usual. At that point, the change has been merged into your repository branch. In version control terminology, this act of copying changes between branches is commonly called <firstterm>porting</firstterm> changes."
msgstr "しかし、マージされた変更を確認して、<command>svn commit</command> をかけるのが普通です。これで、変更は自分のリポジトリブランチに マージされました。バージョン管理の言い方では、このようなブランチ間の 修正点のコピーを、普通<firstterm>porting</firstterm> による変更と いいます。"

#. Tag: para
#: ch04-branching-and-merging.xml:461
#, no-c-format
msgid "When you commit the local modification, make sure your log message mentions that you're porting a specific change from one branch to another. For example:"
msgstr "ローカルな修正をコミットするときには、あるブランチから別のブランチ に対して特定の変更を移したことを示すようなログメッセージになって いることを確認してください。たとえば:"

#. Tag: screen
#: ch04-branching-and-merging.xml:465
#, no-c-format
msgid ""
"$ svn commit -m \"integer.c: ported r344 (spelling fixes) from trunk.\"\n"
"Sending        integer.c\n"
"Transmitting file data .\n"
"Committed revision 360."
msgstr ""
"$ svn commit -m \"integer.c: ported r344 (spelling fixes) from trunk.\"\n"
"Sending        integer.c\n"
"Transmitting file data .\n"
"Committed revision 360."

#. Tag: para
#: ch04-branching-and-merging.xml:467
#, no-c-format
msgid "As you'll see in the next sections, this is a very important <quote>best practice</quote> to follow."
msgstr "次の節で見るように、これは参考にすべき <quote>最善の方法</quote> です。非常に重要です。"

#. Tag: title
#: ch04-branching-and-merging.xml:471
#, no-c-format
msgid "Why Not Use Patches Instead?"
msgstr "どうしてパッチを使わないの?"

#. Tag: para
#: ch04-branching-and-merging.xml:473
#, no-c-format
msgid "A question may be on your mind, especially if you're a Unix user: why bother to use <command>svn merge</command> at all? Why not simply use the operating system's <command>patch</command> command to accomplish the same job? For example:"
msgstr "そう思うかも知れません。特にあなたがUnixユーザならそうでしょう。 なんでわざわざ<command>svn merge</command> みたいなものを使うのか? どうして単にOSについている<command>patch</command> コマンドを 使って同じことをしないのか? たとえば:"

#. Tag: screen
#: ch04-branching-and-merging.xml:479
#, fuzzy, no-c-format
msgid ""
"$ svn diff -c 344 http://svn.example.com/repos/calc/trunk &gt; patchfile\n"
"$ patch -p0  &lt; patchfile\n"
"Patching file integer.c using Plan A...\n"
"Hunk #1 succeeded at 147.\n"
"Hunk #2 succeeded at 164.\n"
"Hunk #3 succeeded at 241.\n"
"Hunk #4 succeeded at 249.\n"
"done"
msgstr ""
"$ svn diff -r 343:344 http://svn.example.com/repos/calc/trunk &gt; patchfile\n"
"$ patch -p0  &lt; patchfile\n"
"Patching file integer.c using Plan A...\n"
"Hunk #1 succeeded at 147.\n"
"Hunk #2 succeeded at 164.\n"
"Hunk #3 succeeded at 241.\n"
"Hunk #4 succeeded at 249.\n"
"done"

#. Tag: para
#: ch04-branching-and-merging.xml:481
#, fuzzy, no-c-format
msgid "In this particular case, yes, there really is no difference. But <command>svn merge</command> has special abilities that surpass the <command>patch</command> program. The file format used by <command>patch</command> is quite limited; it's only able to tweak file contents. There's no way to represent changes to <emphasis>trees</emphasis>, such as the addition, removal, or renaming of files and directories. Nor can the <command>patch</command> program notice changes to properties. If Sally's change had, say, added a new directory, the output of <command>svn diff</command> wouldn't have mentioned it at all. <command>svn diff</command> only outputs the limited patch-format, so there are some ideas it simply can't express. The <command>svn merge</command> command, however, can express changes in tree structure and properties by directly applying them to your working copy."
msgstr "このような特別な場合なら、おっしゃる通り。何の違いも ありません。しかし<command>svn merge</command> は <command>patch</command> ではできない特殊な機能があります。 <command>patch</command> で使えるファイル形式は非常に 限定されています。それは単にファイル内容をわずかに 変更することができるだけです。複数のファイルやディレクトリの 追加、削除、名称変更のような<emphasis>ツリー</emphasis>を 変更する仕組みを持っていません。 Sallyの変更が新しいディレクトリを追加するようなものだった 場合、 <command>svn diff</command> はそのことに全然注意を むけないでしょう。 <command>svn diff</command> は限定された パッチ形式の出力をするだけで簡単には表現できないことが あります。 <footnote> <para> 将来的にはSubversionプロジェクトはツリー構造と属性の変更点を表現する ような拡張したパッチ形式を使う(あるいは開発する)計画があります。 </para> </footnote> しかし<command>svn merge</command> コマンドは作業コピーに直接 働くことでツリー構造と属性の変更点を表現することができます。"

#. Tag: para
#: ch04-branching-and-merging.xml:500
#, fuzzy, no-c-format
msgid "A word of warning: while <command>svn diff</command> and <command>svn merge</command> are very similar in concept, they do have different syntax in many cases. Be sure to read about them in <xref linkend=\"svn.ref\"/> for details, or ask <command>svn help</command>. For example, <command>svn merge</command> requires a working-copy path as a target, i.e. a place where it should apply the tree-changes. If the target isn't specified, it assumes you are trying to perform one of the following common operations:"
msgstr "注意: <command>svn diff</command> と <command>svn merge</command> は とてもよく似たコンセプトを持っていますが、いろいろな場合で 別の構文になります。関連した第9章をよく読むか、<command>svn help</command> を使ってください。たとえば<command>svn merge</command>は作業コピー パスを引数とします。つまりツリーの変更を適用する場所の指定が必要 になります。この指定がなければ、よく利用される以下の操作のどちらか を実行しようとしているとみなされます:"

#. Tag: para
#: ch04-branching-and-merging.xml:512
#, no-c-format
msgid "You want to merge directory changes into your current working directory."
msgstr "現在の作業ディレクトリ中に、ディレクトリの変更点をマージ しようとしている。"

#. Tag: para
#: ch04-branching-and-merging.xml:516
#, no-c-format
msgid "You want to merge the changes in a specific file into a file by the same name which exists in your current working directory."
msgstr "現在の作業ディレクトリ中にある同じ名前のファイルに対して、 ある特定のファイルに起きた修正をマージしようとしている。"

#. Tag: para
#: ch04-branching-and-merging.xml:522
#, no-c-format
msgid "If you are merging a directory and haven't specified a target path, <command>svn merge</command> assumes the first case above and tries to apply the changes into your current directory. If you are merging a file, and that file (or a file by the same name) exists in your current working directory, <command>svn merge</command> assumes the second case and tries to apply the changes to a local file with the same name."
msgstr "ディレクトリをマージしようとしている場合で、目的のパスを指定しなかった 場合、<command>svn merge</command>は、上にあげた第一の場合であると みなし、現在のディレクトリ中のファイルに対して適用しようとします。 もし、ファイルをマージしようとしている場合で、そのファイル(または 同じ名前のファイル)が作業コピーディレクトリに存在している場合、 <command>svn merge</command>は第二の場合であるとみなし、同じ名前の ローカルファイルに対して変更を適用しようとします。"

#. Tag: para
#: ch04-branching-and-merging.xml:530
#, no-c-format
msgid "If you want changes applied somewhere else, you'll need to say so. For example, if you're sitting in the parent directory of your working copy, you'll have to specify the target directory to receive the changes:"
msgstr "上記以外の場所に適用したい場合には そのことを明示的に指定する必要があります。たとえば作業コピーの親ディレクトリ にいて、変更を受け取るための対象ディレクトリを指定する必要がある場合なら:"

#. Tag: screen
#: ch04-branching-and-merging.xml:535
#, fuzzy, no-c-format
msgid ""
"$ svn merge -c 344 http://svn.example.com/repos/calc/trunk my-calc-branch\n"
"U   my-calc-branch/integer.c"
msgstr ""
"$ svn merge -r 343:344 http://svn.example.com/repos/calc/trunk my-calc-branch\n"
"U   my-calc-branch/integer.c"

#. Tag: title
#: ch04-branching-and-merging.xml:541
#, no-c-format
msgid "The Key Concept Behind Merging"
msgstr "マージの基本的な考え方"

#. Tag: para
#: ch04-branching-and-merging.xml:543
#, no-c-format
msgid "You've now seen an example of the <command>svn merge</command> command, and you're about to see several more. If you're feeling confused about exactly how merging works, you're not alone. Many users (especially those new to version control) are initially perplexed about the proper syntax of the command, and about how and when the feature should be used. But fear not, this command is actually much simpler than you think! There's a very easy technique for understanding exactly how <command>svn merge</command> behaves."
msgstr "ここまでのところで <command>svn merge</command> の例を見てきましたが、さらにいくつかの例を あげます。マージが本当のところどのように機能するかについて何か混乱 した気になるのは何もあなただけではありません。多くのユーザは(特に バージョン管理システムになじみのない人にとっては) まず最初にコマンド の構文に戸惑い、さらにどのようにして、またいつその機能をつかえば良い かということにも戸惑います。しかし怖がることは何もありません。このコマンドは 実際にはあなたが思っているよりずっと単純なものです。<command>svn merge</command> がどのように動作するかを正確に知るためのとても簡単な方法があります。"

#. Tag: para
#: ch04-branching-and-merging.xml:554
#, no-c-format
msgid "The main source of confusion is the <emphasis>name</emphasis> of the command. The term <quote>merge</quote> somehow denotes that branches are combined together, or that there's some sort of mysterious blending of data going on. That's not the case. A better name for the command might have been <command>svn diff-and-apply</command>, because that's all that happens: two repository trees are compared, and the differences are applied to a working copy."
msgstr "混乱の一番の原因はこのコマンドの<emphasis>名前</emphasis>です。<quote> マージ(merge)</quote>という言葉は、何か二つのブランチが統合されたり、 データ同士が、何か神秘的な方法で混ぜ合わされてしまったりするような表現 です。しかし、そんなことがおこるわけではありません。多分このコマンドに 対するもっとふさわしい名前は<command>svn diff-and-apply</command>(差分 をとってから、それを適用する)かも知れません。実際、起こることは本当に それだけなのですから: つまり、二つのリポジトリのツリーが比較され、その 差分が、作業コピーに適用されるのです。"

#. Tag: para
#: ch04-branching-and-merging.xml:564
#, no-c-format
msgid "The command takes three arguments:"
msgstr "このコマンドは三つの引数をとります:"

#. Tag: para
#: ch04-branching-and-merging.xml:568
#, no-c-format
msgid "An initial repository tree (often called the <firstterm>left side</firstterm> of the comparison),"
msgstr "最初の状態を示すリポジトリ・ツリー ( 比較時の<firstterm>左側</firstterm> などとよく言われます),"

#. Tag: para
#: ch04-branching-and-merging.xml:572
#, no-c-format
msgid "A final repository tree (often called the <firstterm>right side</firstterm> of the comparison),"
msgstr "最終的な状態を示すリポジトリ・ツリー (often called the 比較時の<firstterm>右側</firstterm> などとよく言われます),"

#. Tag: para
#: ch04-branching-and-merging.xml:576
#, no-c-format
msgid "A working copy to accept the differences as local changes (often called the <firstterm>target</firstterm> of the merge)."
msgstr "上記二つの間の差分をローカルな変更として受け入れる作業コピー (マージの <firstterm>ターゲット</firstterm>などとよく言われます)."

#. Tag: para
#: ch04-branching-and-merging.xml:582
#, no-c-format
msgid "Once these three arguments are specified, the two trees are compared, and the resulting differences are applied to the target working copy as local modifications. When the command is done, the results are no different than if you had hand-edited the files, or run various <command>svn add</command> or <command>svn delete</command> commands yourself. If you like the results, you can commit them. If you don't like the results, you can simply <command>svn revert</command> all of the changes."
msgstr "この三つの引数が指定されると二つのツリーが比較され、結果の 差分がターゲットの作業コピーに対して、ローカルな修正点の形で反映されま す。この結果はあなた自身が手作業でファイルを編集したり、<command>svn add</command> や <command>svn delete</command>コマンドをいろいろと実行 したのとなんら変わるところはありません。結果の修正内容が満足のいくもの であれば、それをコミットすることができます。気に入らなければ、単に <command>svn revert</command>を実行しさえすればすべての変更は元に戻り ます。"

#. Tag: para
#: ch04-branching-and-merging.xml:592
#, no-c-format
msgid "The syntax of <command>svn merge</command> allows you to specify the three necessary arguments rather flexibly. Here are some examples:"
msgstr "<command>svn merge</command> の構文は必要な三つの引数をある程度 柔軟に指定できるようになっています。以下がその例です:"

#. Tag: screen
#: ch04-branching-and-merging.xml:596
#, fuzzy, no-c-format
msgid ""
"$ svn merge http://svn.example.com/repos/branch1@150 \\\n"
"            http://svn.example.com/repos/branch2@212 \\\n"
"            my-working-copy\n"
"\n"
"$ svn merge -r 100:200 http://svn.example.com/repos/trunk my-working-copy\n"
"\n"
"$ svn merge -r 100:200 http://svn.example.com/repos/trunk"
msgstr ""
"$ svn merge http://svn.example.com/repos/branch1@150 ¥\n"
"            http://svn.example.com/repos/branch2@212 ¥\n"
"            my-working-copy\n"
"            \n"
"$ svn merge -r 100:200 http://svn.example.com/repos/trunk my-working-copy\n"
"\n"
"$ svn merge -r 100:200 http://svn.example.com/repos/trunk"

#. Tag: para
#: ch04-branching-and-merging.xml:598
#, no-c-format
msgid "The first syntax lays out all three arguments explicitly, naming each tree in the form <emphasis>URL@REV</emphasis> and naming the working copy target. The second syntax can be used as a shorthand for situations when you're comparing two different revisions of the same URL. The last syntax shows how the working-copy argument is optional; if omitted, it defaults to the current directory."
msgstr "最初の構文は三つのすべての引数を明示的に指定するもので、ツリーについては それぞれ <emphasis>URL@REV</emphasis> の形で指定し、ターゲットの作業コピー はその名前で示します。二番目の構文は、同じ URL 上にある異なるリビジョンを 比較する場合の略記法です。最後の構文は作業コピーを省略した場合の例です; デフォルトではカレントディレクトリが指定される決まりです。"

#. Tag: title
#: ch04-branching-and-merging.xml:611
#, no-c-format
msgid "Best Practices for Merging"
msgstr "マージの一番うまいやり方"

#. Tag: title
#: ch04-branching-and-merging.xml:615
#, no-c-format
msgid "Tracking Merges Manually"
msgstr "手でマージする方法"

#. Tag: para
#: ch04-branching-and-merging.xml:617
#, no-c-format
msgid "Merging changes sounds simple enough, but in practice it can become a headache. The problem is that if you repeatedly merge changes from one branch to another, you might accidentally merge the same change <emphasis>twice</emphasis>. When this happens, sometimes things will work fine. When patching a file, Subversion typically notices if the file already has the change, and does nothing. But if the already-existing change has been modified in any way, you'll get a conflict."
msgstr "変更のマージは非常に単純なことに思えますが実際には厄介な ものです。問題は、もし一つのブランチを別のブランチに対して 変更点を繰り返しマージすると、間違って同じ変更を <emphasis>二度</emphasis>やってしまうかも知れないということです。 こういうことが起こっても、問題が起こらないこともあります。 ファイルをパッチするとき、Subversion はファイルが既に変更されている 場合にはそれに気がついて、何もしません。しかし、既に存在している 変更が何らかの方法で修正されていた場合、衝突が起こります。"

#. Tag: para
#: ch04-branching-and-merging.xml:627
#, no-c-format
msgid "Ideally, your version control system should prevent the double-application of changes to a branch. It should automatically remember which changes a branch has already received, and be able to list them for you. It should use this information to help automate merges as much as possible."
msgstr "理想的には、バージョン管理システムはブランチに対して変更点の重複 した適用を回避すべきです。ブランチが既に受け取った変更点を自動的に 記憶し、その一覧を表示できるようにすべきです。そしてバージョン管理システム は自動マージを支援するために可能な限りこの情報を利用すべきです。"

#. Tag: para
#: ch04-branching-and-merging.xml:634
#, fuzzy, no-c-format
msgid "Unfortunately, Subversion is not such a system; it does not yet record any information about merge operations. <footnote><para>However, at the time of writing, this feature is being worked on!</para></footnote> When you commit local modifications, the repository has no idea whether those changes came from running <command>svn merge</command>, or from just hand-editing the files."
msgstr "残念ながら Subversion はそのようなシステムではありません。CVS と同様 Subversion はまだマージ操作に関するどのような情報も記録しません。 ローカルな修正をコミットしても、リポジトリはそれが<command>svn merge </command>を実行したものによるのか、あるいは単に手でファイルを修正した ものによるのか区別できません。"

#. Tag: para
#: ch04-branching-and-merging.xml:642
#, fuzzy, no-c-format
msgid "What does this mean to you, the user? It means that until the day Subversion grows this feature, you'll have to track merge information yourself. The best place to do this is in the commit log-message. As demonstrated in prior examples, it's recommended that your log-message mention a specific revision number (or range of revisions) that are being merged into your branch. Later on, you can run <command>svn log</command> to review which changes your branch already contains. This will allow you to carefully construct a subsequent <command>svn merge</command> command that won't be redundant with previously ported changes."
msgstr "これはユーザにとって何を意味するのでしょうか? それはSubversionにこの 機能がいつか実装されるまではマージの情報を自分で記録しておく必要が あるということです。一番良い場所はコミットログメッセージ中でしょう。 以前の例で説明したように、あなたのブランチにマージした特定のリビジョン 番号(あるいはリビジョン番号の範囲)をログメッセージ中で示しておくこと をお勧めします。あとで<command>svn log</command>を実行してあなたの ブランチがどの変更点を既に含んでいるかを知ることができます。これで <command>svn merge</command>コマンドを繰り返し実行する際に以前に 取り込んだ変更点を再び取り込むことがないように注意することが できます。"

#. Tag: para
#: ch04-branching-and-merging.xml:655
#, no-c-format
msgid "In the next section, we'll show some examples of this technique in action."
msgstr "次の節ではこの技法の例を実際にお見せします。"

#. Tag: title
#: ch04-branching-and-merging.xml:662
#, no-c-format
msgid "Previewing Merges"
msgstr "マージ内容の確認"

#. Tag: para
#: ch04-branching-and-merging.xml:664
#, no-c-format
msgid "First, always remember to do your merge into a working copy that has <emphasis>no</emphasis> local edits and has been recently updated. If your working copy isn't <quote>clean</quote> in these ways, you can run into some headaches."
msgstr ""

#. Tag: para
#: ch04-branching-and-merging.xml:670
#, fuzzy, no-c-format
msgid "Assuming your working copy is tidy, merging isn't a particularly high-risk operation. If you get the merge wrong the first time, simply <command>svn revert</command> the changes and try again."
msgstr "マージは作業コピーを変更するだけなので、それほど危険な操作では ありません。マージに失敗しても、単に<command>svn revert</command>を実行すれば元に戻せるのでもう一度 やり直すことができます。"

#. Tag: para
#: ch04-branching-and-merging.xml:675
#, fuzzy, no-c-format
msgid "If you've merged into a working copy that already has local modifications, the changes applied by a merge will be mixed with your pre-existing ones, and running <command>svn revert</command> is no longer an option. The two sets of changes may be impossible to separate."
msgstr "しかし作業コピーには既にローカルな修正が加えられていることもあります。 マージによって適用された修正は既に加えていた修正と混じってしまう のでこの場合には<command>svn revert</command>は使えません。 この二つの修正の組を分離することは不可能です。"

#. Tag: para
#: ch04-branching-and-merging.xml:681
#, no-c-format
msgid "In cases like this, people take comfort in being able to predict or examine merges before they happen. One simple way to do that is to run <command>svn diff</command> with the same arguments you plan to pass to <command>svn merge</command>, as we already showed in our first example of merging. Another method of previewing is to pass the <option>--dry-run</option> option to the merge command:"
msgstr "このような場合には、実際にマージする前に、マージしたとしたらどうなるか を調べておくべきです。このための一つの簡単な方法としては<command>svn merge</command>に渡そうとしているのと同じ引数で<command>svn diff</command> を実行する方法があります。それは既にマージの最初の例で見たものです。 もう一つの方法は、マージコマンドに対して <option>--dry-run</option> オプションを渡す方法です:"

#. Tag: screen
#: ch04-branching-and-merging.xml:690
#, fuzzy, no-c-format
msgid ""
"$ svn merge --dry-run -c 344 http://svn.example.com/repos/calc/trunk\n"
"U  integer.c\n"
"\n"
"$ svn status\n"
"#  nothing printed, working copy is still unchanged."
msgstr ""
"$ svn merge --dry-run -r 343:344 http://svn.example.com/repos/calc/trunk\n"
"U  integer.c\n"
"\n"
"$ svn status\n"
"#  nothing printed, working copy is still unchanged."

#. Tag: para
#: ch04-branching-and-merging.xml:692
#, no-c-format
msgid "The <option>--dry-run</option> option doesn't actually apply any local changes to the working copy. It only shows status codes that <emphasis>would</emphasis> be printed in a real merge. It's useful for getting a <quote>high level</quote> preview of the potential merge, for those times when running <command>svn diff</command> gives too much detail."
msgstr "<option>--dry-run</option>オプションは、実際には作業コピーに対してローカルな 修正を適用しません。実際のマージで表示されるで<emphasis>あろう</emphasis> 状態コードを表示するだけです。これは<command>svn diff</command>ではあまりにも詳細 な内容が表示されてしまうような場合に、潜在的なマージの概要を確認するための <quote>高度な</quote>方法です。"

#. Tag: title
#: ch04-branching-and-merging.xml:704
#, no-c-format
msgid "Merge Conflicts"
msgstr "マージの衝突"

#. Tag: para
#: ch04-branching-and-merging.xml:706
#, no-c-format
msgid "Just like the <command>svn update</command> command, <command>svn merge</command> applies changes to your working copy. And therefore it's also capable of creating conflicts. The conflicts produced by <command>svn merge</command>, however, are sometimes different, and this section explains those differences."
msgstr "<command>svn update</command> コマンドと同様 <command>svn merge</command> は変更を作業コピーに対して行うので 衝突を起こすこともあります。しかし <command>svn merge</command>によっておきた衝突については様子が 違うこともあり、以下ではこの違いについて説明します。"

#. Tag: para
#: ch04-branching-and-merging.xml:713
#, no-c-format
msgid "To begin with, assume that your working copy has no local edits. When you <command>svn update</command> to a particular revision, the changes sent by the server will always apply <quote>cleanly</quote> to your working copy. The server produces the delta by comparing two trees: a virtual snapshot of your working copy, and the revision tree you're interested in. Because the left-hand side of the comparison is exactly equal to what you already have, the delta is guaranteed to correctly convert your working copy into the right-hand tree."
msgstr "まず、作業コピーにはローカルな修正が加えられていないとします。 特定のリビジョンに対して<command>svn update</command>を実行すると サーバから送られてきた変更点は作業コピーに対して常に <quote>きれいに </quote>適用されます。サーバは二つのツリーを比較することで差分を 生成します: 作業コピーの仮想的なスナップショットと、適用しようとして いるリビジョンとの間の差分です。前者は作業コピーと全く同じものなので この差分が作業コピーをきれいに後者に変換することは保証されています。"

#. Tag: para
#: ch04-branching-and-merging.xml:724
#, fuzzy, no-c-format
msgid "But <command>svn merge</command> has no such guarantees and can be much more chaotic: the user can ask the server to compare <emphasis>any</emphasis> two trees at all, even ones that are unrelated to the working copy! This means there's large potential for human error. Users will sometimes compare the wrong two trees, creating a delta that doesn't apply cleanly. <command>svn merge</command> will do its best to apply as much of the delta as possible, but some parts may be impossible. Just as the Unix <command>patch</command> command sometimes complains about <quote>failed hunks</quote>, <command>svn merge</command> will complain about <quote>skipped targets</quote>:"
msgstr "しかし<command>svn merge</command>の場合はそのような保証はなく、 結果はもっと混沌としたものになる可能性もあります: ユーザは全く <emphasis>任意の</emphasis>二つのツリーの比較をするようサーバに 指示することもでき、作業コピーとは全く無関係なものであるかも知れないのです!。 これは人間の側の操作ミスが起こる潜在的な可能性が大きいことを 意味します。場合によってはユーザは間違った二つのツリーを比較し、 きれいに適用できないような差分を作ってしまうかも知れません。 <command>svn merge</command> はできる限りこの差分を適用しようと しますが、ある部分は不可能かも知れません。ちょうど Unix の <command>patch</command>コマンドが<quote>適用できなかったハンク </quote>について文句を言ってくることがあるのと同じように <command>svn merge</command>は<quote>処理を飛ばしたファイル</quote> について文句を言うかも知れません:"

#. Tag: screen
#: ch04-branching-and-merging.xml:737
#, no-c-format
msgid ""
"$ svn merge -r 1288:1351 http://svn.example.com/repos/branch\n"
"U  foo.c\n"
"U  bar.c\n"
"Skipped missing target: 'baz.c'\n"
"U  glub.c\n"
"C  glorb.h\n"
"\n"
"$"
msgstr ""
"$ svn merge -r 1288:1351 http://svn.example.com/repos/branch\n"
"U  foo.c\n"
"U  bar.c\n"
"Skipped missing target: 'baz.c'\n"
"U  glub.c\n"
"C  glorb.h\n"
"\n"
"$"

#. Tag: para
#: ch04-branching-and-merging.xml:739
#, fuzzy, no-c-format
msgid "In the previous example it might be the case that <filename>baz.c</filename> exists in both snapshots of the branch being compared, and the resulting delta wants to change the file's contents, but the file doesn't exist in the working copy. Whatever the case, the <quote>skipped</quote> message means that the user is most likely comparing the wrong two trees; they're the classic sign of user error. When this happens, it's easy to recursively revert all the changes created by the merge (<command>svn revert --recursive</command>), delete any unversioned files or directories left behind after the revert, and re-run <command>svn merge</command> with different arguments."
msgstr "この例では比較対象となる二つのブランチのスナップショットの両方に <filename>baz.c</filename>が存在していたため、生成された差分もその ファイルの内容を変更しようとしますが、作業コピー中には対応するファイル が存在しなかったような場合だと考えられます。いずれにせよ <quote>スキップ</quote>のメッセージはユーザが間違った二つのツリーを 比較してしまったことを意味することがほとんどです。ユーザ側のエラー を示す典型的な状況です。こうなった場合でも(<command>svn revert --recursive</command>を使って)、マージによって実行されたすべての変更 点を再帰的に元に戻し、バージョン化されていないファイルやディレクトリ が残っている場合にはそれらも削除し、正しい引数で<command>svn merge</command>を再実行するのは難しいことではありません。"

#. Tag: para
#: ch04-branching-and-merging.xml:753
#, no-c-format
msgid "Also notice that the previous example shows a conflict happening on <filename>glorb.h</filename>. We already stated that the working copy has no local edits: how can a conflict possibly happen? Again, because the user can use <command>svn merge</command> to define and apply any old delta to the working copy, that delta may contain textual changes that don't cleanly apply to a working file, even if the file has no local modifications."
msgstr "前の例では<filename>glorb.h</filename>に衝突が起きたことにも注意 してください。今回の場合作業コピーに対してローカルな修正がされていない ことはすでに述べました: ではなぜ衝突が起きるのでしょうか? この場合 でもやはりユーザは<command>svn merge</command>で古い差分を作ってから 作業コピーに適用することができるので、ローカルな修正がなかったと しても、その差分が作業コピーに対してきれいに適用できないような変更を 含んでしまうことはありうるのです。"

#. Tag: para
#: ch04-branching-and-merging.xml:762
#, no-c-format
msgid "Another small difference between <command>svn update</command> and <command>svn merge</command> are the names of the full-text files created when a conflict happens. In <xref linkend=\"svn.tour.cycle.resolve\"/>, we saw that an update produces files named <filename>filename.mine</filename>, <filename>filename.rOLDREV</filename>, and <filename>filename.rNEWREV</filename>. When <command>svn merge</command> produces a conflict, though, it creates three files named <filename>filename.working</filename>, <filename>filename.left</filename>, and <filename>filename.right</filename>. In this case, the terms <quote>left</quote> and <quote>right</quote> are describing which side of the double-tree comparison the file came from. In any case, these differing names will help you distinguish between conflicts that happened as a result of an update versus ones that happened as a result of a merge."
msgstr "その他<command>svn update</command> と <command>svn merge</command>の 小さな違いとしては衝突がおきたときにできるテキストファイルの名前です。 <xref linkend=\"svn.tour.cycle.resolve\"/>で見たように、update の場合には <filename>filename.mine</filename>, <filename>filename.rOLDREV</filename>, <filename>filename.rNEWREV</filename>という名前のファイルができます。 これにたいして<command>svn merge</command>の場合には <filename>filename.working</filename>, <filename>filename.left</filename>, <filename>filename.right</filename>という名前になります。 この場合<quote>left</quote> と <quote>right</quote> は、それぞれの ファイルが比較した二つのツリーのどちら側に由来するものかを示しています。 いずれにせよファイル名称の違いは、衝突が update コマンドの結果である のか merge コマンドの結果であるかを区別する助けになるでしょう。"

#. Tag: title
#: ch04-branching-and-merging.xml:785
#, no-c-format
msgid "Noticing or Ignoring Ancestry"
msgstr "系統(Ancestry)を考慮することと無視すること"

#. Tag: para
#: ch04-branching-and-merging.xml:787
#, no-c-format
msgid "When conversing with a Subversion developer, you might very likely hear reference to the term <firstterm>ancestry</firstterm>. This word is used to describe the relationship between two objects in a repository: if they're related to each other, then one object is said to be an ancestor of the other."
msgstr "Subversion 開発者と会話するとき<firstterm>系統 </firstterm>(ancestry)という言葉を非常によく耳にするでしょう。 この言葉はリポジトリ中の二つのオブジェクト間の関係を記述するた めに用いられるものです:もし両者が互いに関係している場合、ある オブジェクトはもう一方の祖先(ancestor)といわれます。"

#. Tag: para
#: ch04-branching-and-merging.xml:794
#, no-c-format
msgid "For example, suppose you commit revision 100, which includes a change to a file <filename>foo.c</filename>. Then <filename>foo.c@99</filename> is an <quote>ancestor</quote> of <filename>foo.c@100</filename>. On the other hand, suppose you commit the deletion of <filename>foo.c</filename> in revision 101, and then add a new file by the same name in revision 102. In this case, <filename>foo.c@99</filename> and <filename>foo.c@102</filename> may appear to be related (they have the same path), but in fact are completely different objects in the repository. They share no history or <quote>ancestry</quote>."
msgstr "例えば、リビジョン100をコミットし、それが <filename>foo.c</filename>というファイルへの変更を含んでいると します。すると<filename>foo.c@99</filename>は <filename>foo.c@100</filename>の<quote>祖先</quote>ということ になります。一方リビジョン 101 で<filename>foo.c</filename>を 削除するコミットがあり、リビジョン102 で同じ名前の新しいファイ ルを追加したとしましょう。この場合 <filename>foo.c@99</filename>と<filename>foo.c@102</filename> は関係しているように見えます(なぜなら同じファイル名なのですか ら)が、実際にはリポジトリ中ではまったく別のオブジェクトです。 両者は履歴、あるいは<quote>系統</quote>を共有していないからで す。"

#. Tag: para
#: ch04-branching-and-merging.xml:807
#, no-c-format
msgid "The reason for bringing this up is to point out an important difference between <command>svn diff</command> and <command>svn merge</command>. The former command ignores ancestry, while the latter command is quite sensitive to it. For example, if you asked <command>svn diff</command> to compare revisions 99 and 102 of <filename>foo.c</filename>, you would see line-based diffs; the <literal>diff</literal> command is blindly comparing two paths. But if you asked <command>svn merge</command> to compare the same two objects, it would notice that they're unrelated and first attempt to delete the old file, then add the new file; the output would indicate a deletion followed by an add:"
msgstr "ここでこんな話をするのは、<command>svn diff</command>と <command>svn merge</command>の間の重要な違いを指摘したいからです。前者 は系統を無視しますが、後者は系統を非常に慎重に考慮します。例えば <command>svn diff</command>でリビジョン99 と102 の <filename>foo.c</filename>を比較した場合、行単位の差分を見ることになる でしょう; <literal>diff</literal> コマンドは二つのファイル名を無条件に比較するからです。 しかし<command>svn merge</command>を使っていまと同じ二つのオブジェクトを比較す るとそれらが無関係であることを検知し古いファイルをいったん削除し、それ から新しいファイルを追加しようとするでしょう; 出力は追加のあとに削除した ことを示すものとなるでしょう:"

#. Tag: screen
#: ch04-branching-and-merging.xml:820
#, no-c-format
msgid ""
"D  foo.c\n"
"A  foo.c"
msgstr ""
"D  foo.c\n"
"A  foo.c"

#. Tag: para
#: ch04-branching-and-merging.xml:822
#, fuzzy, no-c-format
msgid "Most merges involve comparing trees that are ancestrally related to one another, and therefore <command>svn merge</command> defaults to this behavior. Occasionally, however, you may want the <literal>merge</literal> command to compare two unrelated trees. For example, you may have imported two source-code trees representing different vendor releases of a software project (see <xref linkend=\"svn.advanced.vendorbr\"/>). If you asked <command>svn merge</command> to compare the two trees, you'd see the entire first tree being deleted, followed by an add of the entire second tree! In these situations, you'll want <command>svn merge</command> to do a path-based comparison only, ignoring any relations between files and directories. Add the <option>--ignore-ancestry</option> option to your merge command, and it will behave just like <command>svn diff</command>. (And conversely, the <option>--notice-ancestry</option> option will cause <command>svn diff</command> to behave like the <literal>merge</literal> command.)"
msgstr "ほとんどのマージはお互いに系統上関係したツリーを比較する ので、<command>svn merge</command>はデフォルトで上記のような動 作になります。しかし、二つの無関係なツリーを比較するために <literal>merge</literal>コマンドを使いたいと思うこともあるかも知れません。 たとえばあるソフトウェアプロジェクトの、異なる 二つのベンダーリリースを表すようなソースコードツリーをインポー トするかも知れません(<xref linkend=\"svn.advanced.vendorbr\"/>参照)。 この二つのツリーを<command>svn merge</command>で比較すると最初 のツリー全体がいったん削除され、次いで後のツリー全体が追加され たように見えるでしょう!"

#. Tag: title
#: ch04-branching-and-merging.xml:846
#, fuzzy, no-c-format
msgid "Merges and Moves"
msgstr "バージョン管理されたモジュール"

#. Tag: para
#: ch04-branching-and-merging.xml:848
#, no-c-format
msgid "A common desire is to refactor source code, especially in Java-based software projects. Files and directories are shuffled around and renamed, often causing great disruption to everyone working on the project. Sounds like a perfect case to use a branch, doesn't it? Just create a branch, shuffle things around, then merge the branch back to the trunk, right?"
msgstr ""

#. Tag: para
#: ch04-branching-and-merging.xml:856
#, no-c-format
msgid "Alas, this scenario doesn't work so well right now, and is considered one of Subversion's current weak spots. The problem is that Subversion's <command>update</command> command isn't as robust as it should be, particularly when dealing with copy and move operations."
msgstr ""

#. Tag: para
#: ch04-branching-and-merging.xml:862
#, no-c-format
msgid "When you use <command>svn copy</command> to duplicate a file, the repository remembers where the new file came from, but it fails to transmit that information to the client which is running <command>svn update</command> or <command>svn merge</command>. Instead of telling the client, <quote>Copy that file you already have to this new location</quote>, it instead sends down an entirely new file. This can lead to problems, especially because the same thing happens with renamed files. A lesser-known fact about Subversion is that it lacks <quote>true renames</quote>&mdash;the <command>svn move</command> command is nothing more than an aggregation of <command>svn copy</command> and <command>svn delete</command>."
msgstr ""

#. Tag: para
#: ch04-branching-and-merging.xml:876
#, no-c-format
msgid "For example, suppose that while working on your private branch, you rename <filename>integer.c</filename> to <filename>whole.c</filename>. Effectively you've created a new file in your branch that is a copy of the original file, and deleted the original file. Meanwhile, back on <filename>trunk</filename>, Sally has committed some improvements to <filename>integer.c</filename>. Now you decide to merge your branch to the trunk:"
msgstr ""

#. Tag: screen
#: ch04-branching-and-merging.xml:885
#, fuzzy, no-c-format
msgid ""
"$ cd calc/trunk\n"
"\n"
"$ svn merge -r 341:405 http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"D   integer.c\n"
"A   whole.c"
msgstr ""
"$ svn merge -r 343:344 http://svn.example.com/repos/calc/trunk my-calc-branch\n"
"U   my-calc-branch/integer.c"

#. Tag: para
#: ch04-branching-and-merging.xml:887
#, no-c-format
msgid "This doesn't look so bad at first glance, but it's also probably not what you or Sally expected. The merge operation has deleted the latest version of <filename>integer.c</filename> file (the one containing Sally's latest changes), and blindly added your new <filename>whole.c</filename> file&mdash;which is a duplicate of the <emphasis>older</emphasis> version of <filename>integer.c</filename>. The net effect is that merging your <quote>rename</quote> to the branch has removed Sally's recent changes from the latest revision!"
msgstr ""

#. Tag: para
#: ch04-branching-and-merging.xml:898
#, no-c-format
msgid "This isn't true data-loss; Sally's changes are still in the repository's history, but it may not be immediately obvious that this has happened. The moral of this story is that until Subversion improves, be very careful about merging copies and renames from one branch to another."
msgstr ""

#. Tag: title
#: ch04-branching-and-merging.xml:916
#, no-c-format
msgid "Common Use-Cases"
msgstr "典型的な利用方法"

#. Tag: para
#: ch04-branching-and-merging.xml:918
#, no-c-format
msgid "There are many different uses for branching and <command>svn merge</command>, and this section describes the most common ones you're likely to run into."
msgstr "ブランチの作り方と<command>svn merge</command>にはいくつもの異なったやり方があり、この節では あなたが出くわしそうな一番よくあるパターンについて説明します。"

#. Tag: title
#: ch04-branching-and-merging.xml:924
#, no-c-format
msgid "Merging a Whole Branch to Another"
msgstr "ブランチ全体を別の場所にマージすること"

#. Tag: para
#: ch04-branching-and-merging.xml:926
#, no-c-format
msgid "To complete our running example, we'll move forward in time. Suppose several days have passed, and many changes have happened on both the trunk and your private branch. Suppose that you've finished working on your private branch; the feature or bug fix is finally complete, and now you want to merge all of your branch changes back into the trunk for others to enjoy."
msgstr "いま、考えてきた例を完結させるため、少し時間が経過したとします。何日か 経過し、たくさんの変更がtrunkにもあなたのプライベートなブランチにも 起こったとましす。そしてあなたはプライベートなブランチ上での作業を 終えたとしましょう; 機能追加、またはバグフィッックスが完了し、他の 人がその部分を使えるようにするために、あなたのブランチ上の変更点の すべてを trunk にマージしたいとします。"

#. Tag: para
#: ch04-branching-and-merging.xml:934
#, no-c-format
msgid "So how do we use <command>svn merge</command> in this scenario? Remember that this command compares two trees, and applies the differences to a working copy. So to receive the changes, you need to have a working copy of the trunk. We'll assume that either you still have your original one lying around (fully updated), or that you recently checked out a fresh working copy of <filename>/calc/trunk</filename>."
msgstr "さて、このような状況では、どのようにして<command>svn merge</command> を使えば良いのでしょうか? このコマンドは二つのツリーを比較し、その差分を 作業コピーに適用するものであったことを思い出してください。変更点 を受け取るためには、あなたはtrunkの作業コピーを手に入れる必要があります。 ここではあなたは(完全に更新された)もともとの作業コピーをまだ持っているか、 <filename>/calc/trunk</filename>の新しい作業コピーをチェックアウトしたもの と仮定します。"

#. Tag: para
#: ch04-branching-and-merging.xml:942
#, no-c-format
msgid "But which two trees should be compared? At first glance, the answer may seem obvious: just compare the latest trunk tree with your latest branch tree. But beware&mdash;this assumption is <emphasis>wrong</emphasis>, and has burned many a new user! Since <command>svn merge</command> operates like <command>svn diff</command>, comparing the latest trunk and branch trees will <emphasis>not</emphasis> merely describe the set of changes you made to your branch. Such a comparison shows too many changes: it would not only show the addition of your branch changes, but also the <emphasis>removal</emphasis> of trunk changes that never happened on your branch."
msgstr "しかし、どのツリーとどのツリーを比較すれば良いのでしょうか? ちょっと考えると、 その答えは明らかに思えます: 単にtrunkの最新のツリーと、あなたのブランチの最新の ツリーです。しかし、気をつけてください &mdash; この仮定は<emphasis>間違い </emphasis>です。そしてこの間違いに、たいていの初心者はやられてしまいます! <command>svn merge</command>は<command>svn diff</command>のように働くので 最後のトランクとブランチのツリーの比較は単にあなたが自分の ツリーに対して行った変更点のみを示すものでは<emphasis>ない</emphasis> のがわかります。 そのような比較は、非常にたくさんの変更を表示するでしょう: それは、あなたのブランチに対する追加点だけを表示するのではなく、 あなたのブランチでは決して起こらなかった、trunk上の変更点の<emphasis> 取り消し</emphasis>も表示してしまうことでしょう。"

#. Tag: para
#: ch04-branching-and-merging.xml:954
#, no-c-format
msgid "To express only the changes that happened on your branch, you need to compare the initial state of your branch to its final state. Using <command>svn log</command> on your branch, you can see that your branch was created in revision 341. And the final state of your branch is simply a matter of using the <literal>HEAD</literal> revision. That means you want to compare revisions 341 and <literal>HEAD</literal> of your branch directory, and apply those differences to a working copy of the trunk."
msgstr "あなたのブランチ上に起きた変更のみをあらわすには、あなたのブランチの 初期状態と、最終的な状態を比較する必要があります。 <command>svn log</command>コマンドをあなたのブランチ上で使えば、 そのブランチはリビジョン341で作られたことがわかります。そして、ブランチ の最終的な状態は、単に、<literal>HEAD</literal> リビジョンを指定すればわかります。 これはブランチディレクトリのリビジョン 341 と <literal>HEAD</literal> を比較しその違いを トランクの作業コピーに適用したいと考えていることを意味します。"

#. Tag: para
#: ch04-branching-and-merging.xml:965
#, no-c-format
msgid "A nice way of finding the revision in which a branch was created (the <quote>base</quote> of the branch) is to use the <option>--stop-on-copy</option> option to <command>svn log</command>. The log subcommand will normally show every change ever made to the branch, including tracing back through the copy which created the branch. So normally, you'll see history from the trunk as well. The <option>--stop-on-copy</option> will halt log output as soon as <command>svn log</command> detects that its target was copied or renamed."
msgstr "ブランチが作成されたリビジョンを見つけるうまい方法は (ブランチの<quote>ベース</quote>リビジョンのことですが)<command>svn log</command>で<option>--stop-on-copy</option>オプションを利用 することです。log サブコマンドは通常ブランチに対するすべての変更を表示 し、それはブランチが作成されたコピーよりも前にさかのぼります。このた め通常トランクの履歴も表示されてしまいます。 <option>--stop-on-copy</option>は、<command>svn log</command>がターゲットのコピーあ るいは名称変更の個所を見つけると直ちにログの出力を中止します。"

#. Tag: para
#: ch04-branching-and-merging.xml:976
#, no-c-format
msgid "So in our continuing example,"
msgstr "それで現在の例で言うと、"

#. Tag: screen
#: ch04-branching-and-merging.xml:978
#, fuzzy, no-c-format
msgid ""
"$ svn log -v --stop-on-copy \\\n"
"          http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"&hellip;\n"
"------------------------------------------------------------------------\n"
"r341 | user | 2002-11-03 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\n"
"Changed paths:\n"
"   A /calc/branches/my-calc-branch (from /calc/trunk:340)\n"
"\n"
"$"
msgstr ""
"$ svn log --verbose --stop-on-copy ¥\n"
"          http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"&hellip;\n"
"------------------------------------------------------------------------\n"
"r341 | user | 2002-11-03 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\n"
"Changed paths:\n"
"   A /calc/branches/my-calc-branch (from /calc/trunk:340)\n"
"\n"
"$"

#. Tag: para
#: ch04-branching-and-merging.xml:980
#, no-c-format
msgid "As expected, the final revision printed by this command is the revision in which <filename>my-calc-branch</filename> was created by copying."
msgstr "期待したとおり、このコマンドによって表示される最後のリビ ジョンはコピーによって<filename>my-calc-branch</filename>が作成された リビジョンになります。"

#. Tag: para
#: ch04-branching-and-merging.xml:986
#, no-c-format
msgid "Here's the final merging procedure, then:"
msgstr "結局、最終的なマージ処理は以下のようになります:"

#. Tag: screen
#: ch04-branching-and-merging.xml:988
#, no-c-format
msgid ""
"$ cd calc/trunk\n"
"$ svn update\n"
"At revision 405.\n"
"\n"
"$ svn merge -r 341:405 http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"U   integer.c\n"
"U   button.c\n"
"U   Makefile\n"
"\n"
"$ svn status\n"
"M   integer.c\n"
"M   button.c\n"
"M   Makefile\n"
"\n"
"# ...examine the diffs, compile, test, etc...\n"
"\n"
"$ svn commit -m \"Merged my-calc-branch changes r341:405 into the trunk.\"\n"
"Sending        integer.c\n"
"Sending        button.c\n"
"Sending        Makefile\n"
"Transmitting file data ...\n"
"Committed revision 406."
msgstr ""
"$ cd calc/trunk\n"
"$ svn update\n"
"At revision 405.\n"
"\n"
"$ svn merge -r 341:405 http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"U   integer.c\n"
"U   button.c\n"
"U   Makefile\n"
"\n"
"$ svn status\n"
"M   integer.c\n"
"M   button.c\n"
"M   Makefile\n"
"\n"
"# ...examine the diffs, compile, test, etc...\n"
"\n"
"$ svn commit -m \"Merged my-calc-branch changes r341:405 into the trunk.\"\n"
"Sending        integer.c\n"
"Sending        button.c\n"
"Sending        Makefile\n"
"Transmitting file data ...\n"
"Committed revision 406."

#. Tag: para
#: ch04-branching-and-merging.xml:990
#, no-c-format
msgid "Again, notice that the commit log message very specifically mentions the range of changes that was merged into the trunk. Always remember to do this, because it's critical information you'll need later on."
msgstr "ここでもトランクにマージされた変更範囲についてコミットログメッセージは 非常に具体的に触れていることに注意してください。このことを常に憶えて おいてください。後になって必要になる非常に重要な情報だからです。"

#. Tag: para
#: ch04-branching-and-merging.xml:995
#, no-c-format
msgid "For example, suppose you decide to keep working on your branch for another week, in order to complete an enhancement to your original feature or bug fix. The repository's <literal>HEAD</literal> revision is now 480, and you're ready to do another merge from your private branch to the trunk. But as discussed in <xref linkend=\"svn.branchmerge.copychanges.bestprac\"/>, you don't want to merge the changes you've already merged before; you only want to merge everything <quote>new</quote> on your branch since the last time you merged. The trick is to figure out what's new."
msgstr "たとえば、独自の機能拡張やバグフィックスなどのために、もう一週間自分の ブランチ上で作業を続けることにしたとしましょう。リポジトリの <literal>HEAD</literal> リビジョンはいま 480 となり、あなたは自分のプライベートなブランチから トランクに対するマージの用意ができています。しかし<xref linkend=\"svn.branchmerge.copychanges.bestprac\"/>で議論したように既に以前マージした 変更を再びマージしたくはありません; 最後にマージしてからブランチ上に <quote>新しく起きた</quote>変更だけをマージしたいのです。問題はどうやって 新しい部分を見つけるかです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1006
#, no-c-format
msgid "The first step is to run <command>svn log</command> on the trunk, and look for a log message about the last time you merged from the branch:"
msgstr "最初のステップはトランク上で<command>svn log</command>を 実行し最後にブランチからマージしたときのログメッセージを見ます:"

#. Tag: screen
#: ch04-branching-and-merging.xml:1010
#, no-c-format
msgid ""
"$ cd calc/trunk\n"
"$ svn log\n"
"&hellip;\n"
"------------------------------------------------------------------------\n"
"r406 | user | 2004-02-08 11:17:26 -0600 (Sun, 08 Feb 2004) | 1 line\n"
"\n"
"Merged my-calc-branch changes r341:405 into the trunk.\n"
"------------------------------------------------------------------------\n"
"&hellip;"
msgstr ""
"$ cd calc/trunk\n"
"$ svn log\n"
"&hellip;\n"
"------------------------------------------------------------------------\n"
"r406 | user | 2004-02-08 11:17:26 -0600 (Sun, 08 Feb 2004) | 1 line\n"
"\n"
"Merged my-calc-branch changes r341:405 into the trunk.\n"
"------------------------------------------------------------------------\n"
"&hellip;"

#. Tag: para
#: ch04-branching-and-merging.xml:1012
#, no-c-format
msgid "Aha! Since all branch-changes that happened between revisions 341 and 405 were previously merged to the trunk as revision 406, you now know that you want to merge only the branch changes after that&mdash;by comparing revisions 406 and <literal>HEAD</literal>."
msgstr "ああ、なるほど。341 と 405 の間のリビジョンに起きたすべてのブランチ上での 変更はリビジョン 406 として既にトランクにマージされているので、それ以降にブランチ上で起きた 変更のみをマージすれば良いことがわかります&mdash; つまり、リビジョン 406 から <literal>HEAD</literal> までです。"

#. Tag: screen
#: ch04-branching-and-merging.xml:1018
#, no-c-format
msgid ""
"$ cd calc/trunk\n"
"$ svn update\n"
"At revision 480.\n"
"\n"
"# We notice that HEAD is currently 480, so we use it to do the merge:\n"
"\n"
"$ svn merge -r 406:480 http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"U   integer.c\n"
"U   button.c\n"
"U   Makefile\n"
"\n"
"$ svn commit -m \"Merged my-calc-branch changes r406:480 into the trunk.\"\n"
"Sending        integer.c\n"
"Sending        button.c\n"
"Sending        Makefile\n"
"Transmitting file data ...\n"
"Committed revision 481."
msgstr ""
"$ cd calc/trunk\n"
"$ svn update\n"
"At revision 480.\n"
"\n"
"# 現在の HEAD が 480 であることがわかったので、以下のようにマージすれ\n"
"# ばよいことになります\n"
"\n"
"$ svn merge -r 406:480 http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"U   integer.c\n"
"U   button.c\n"
"U   Makefile\n"
" \n"
"$ svn commit -m \"Merged my-calc-branch changes r406:480 into the trunk.\"\n"
"Sending        integer.c\n"
"Sending        button.c\n"
"Sending        Makefile\n"
"Transmitting file data ...\n"
"Committed revision 481."

#. Tag: para
#: ch04-branching-and-merging.xml:1020
#, no-c-format
msgid "Now the trunk contains the complete second wave of changes made to the branch. At this point, you can either delete your branch (we'll discuss this later on), or continue working on your branch and repeat this procedure for subsequent merges."
msgstr "これでトランクはブランチに起きた変更の第二波全体を含むことになりました。 この時点でブランチを削除する(これについては後で議論します)ことも、 ブランチ上で引き続き作業し、以降のマージについて上記の手続きを繰り返す こともできます。"

#. Tag: title
#: ch04-branching-and-merging.xml:1030
#, no-c-format
msgid "Undoing Changes"
msgstr "変更の取り消し"

#. Tag: para
#: ch04-branching-and-merging.xml:1032
#, fuzzy, no-c-format
msgid "Another common use for <command>svn merge</command> is to roll back a change that has already been committed. Suppose you're working away happily on a working copy of <filename>/calc/trunk</filename>, and you discover that the change made way back in revision 303, which changed <filename>integer.c</filename>, is completely wrong. It never should have been committed. You can use <command>svn merge</command> to <quote>undo</quote> the change in your working copy, and then commit the local modification to the repository. All you need to do is to specify a <emphasis>reverse</emphasis> difference. (You can do this by specifying <option>--revision 303:302</option>, or by an equivalent <option>--change -303</option>.)"
msgstr "<command>svn merge</command>のほかのよくある使い方としては、既にコミット した変更をもとに戻したい場合です。<filename>/calc/trunk</filename>の 作業コピー上で作業中に、<filename>integer.c</filename>を修正したリビジョン 303 は完全に間違いであったことを発見したとしましょう。それはコミットすべき ではありませんでした。作業コピーの変更を<quote>取り消す</quote>のに<command>svn merge</command>を使い、その後リポジトリに対してローカルな変更を コミットすることができます。やらなくてはならないことは<emphasis>反対向きの</emphasis> 差分を指定することだけです:"

#. Tag: screen
#: ch04-branching-and-merging.xml:1047
#, fuzzy, no-c-format
msgid ""
"$ svn merge -c -303 http://svn.example.com/repos/calc/trunk\n"
"U  integer.c\n"
"\n"
"$ svn status\n"
"M  integer.c\n"
"\n"
"$ svn diff\n"
"&hellip;\n"
"# verify that the change is removed\n"
"&hellip;\n"
"\n"
"$ svn commit -m \"Undoing change committed in r303.\"\n"
"Sending        integer.c\n"
"Transmitting file data .\n"
"Committed revision 350."
msgstr ""
"$ svn merge -r 303:302 http://svn.example.com/repos/calc/trunk\n"
"U  integer.c\n"
"\n"
"$ svn status\n"
"M  integer.c\n"
"\n"
"$ svn diff\n"
"&hellip;\n"
"# verify that the change is removed\n"
"&hellip;\n"
"\n"
"$ svn commit -m \"Undoing change committed in r303.\"\n"
"Sending        integer.c\n"
"Transmitting file data .\n"
"Committed revision 350."

#. Tag: para
#: ch04-branching-and-merging.xml:1049
#, fuzzy, no-c-format
msgid "One way to think about a repository revision is as a specific group of changes (some version control systems call these <firstterm>changesets</firstterm>). By using the <option>-r</option> option, you can ask <command>svn merge</command> to apply a changeset, or whole range of changesets, to your working copy. In our case of undoing a change, we're asking <command>svn merge</command> to apply changeset #303 to our working copy <emphasis>backwards</emphasis>."
msgstr "リポジトリリビジョンについてのもう一つの考え方は、それを 特定の変更のあつまりと考えることです(いくつかのバージョン管理 システムでは、これを、<firstterm>changesets</firstterm>と 呼んでいます)。<option>-r</option> スイッチを使って <command>svn merge</command> を呼び出すことで、あるチェンジ セットを適用するか、もしくはある範囲のチェンジセット全部を作業コピーに 適用することができます。私たちの場合だと<command>svn merge</command> を使ってチェンジセット#303を作業コピーに<emphasis>反対向きに</emphasis> 適用します。"

#. Tag: title
#: ch04-branching-and-merging.xml:1060
#, no-c-format
msgid "Subversion and Changesets"
msgstr "Subversion とチェンジセット"

#. Tag: para
#: ch04-branching-and-merging.xml:1062
#, no-c-format
msgid "Everyone seems to have a slightly different definition of <quote>changeset</quote>, or at least a different expectation of what it means for a version control system to have <quote>changeset features</quote>. For our purpose, let's say that a changeset is just a collection of changes with a unique name. The changes might include textual edits to file contents, modifications to tree structure, or tweaks to metadata. In more common speak, a changeset is just a patch with a name you can refer to."
msgstr "<quote>チェンジセット</quote>の定義は人によって少しずつ違うか、 少なくともバージョン管理システムが<quote>チェンジセットの機能</quote> を持っているというときに期待するものは異なっています。ここでは チェンジセットは一意の名前がついた変更点の集まりであるとしておきましょう。 この変更はファイル内容の編集、ツリー構造の変形、メタデータの修正などが 含まれています。もっと普通の言い方をすると、チェンジセットとは参照できる ような名前がついたパッチのことです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1072
#, fuzzy, no-c-format
msgid "In Subversion, a global revision number N names a tree in the repository: it's the way the repository looked after the Nth commit. It's also the name of an implicit changeset: if you compare tree N with tree N-1, you can derive the exact patch that was committed. For this reason, it's easy to think of <quote>revision N</quote> as not just a tree, but a changeset as well. If you use an issue tracker to manage bugs, you can use the revision numbers to refer to particular patches that fix bugs&mdash;for example, <quote>this issue was fixed by revision 9238.</quote>. Somebody can then run <command>svn log -r9238</command> to read about the exact changeset which fixed the bug, and run <command>svn diff -c 9238</command> to see the patch itself. And Subversion's <literal>merge</literal> command also uses revision numbers. You can merge specific changesets from one branch to another by naming them in the merge arguments: <command>svn merge -r9237:9238</command> would merge changeset #9238 into your working copy."
msgstr "Subversion では大域的なリビジョン番号 N がリポジトリ中のツリーの名前に なります: それはリポジトリの N番目のコミット後の様子です。またそれは 暗黙のチェンジセットの名前でもあります: もしツリー N と N-1 を比較 すればコミットされたパッチを正確に求めることができます。この理由により、 <quote>リビジョン N</quote>をツリーと考えることもできますが、また チェンジセットとみなすこともできます。バグを管理するバグ追跡システム を使っているなら、バグを修正した特定のパッチに言及するのにリビジョン 番号を使うことができます&mdash; たとえば<quote>この問題はリビジョン 9238 で修正されました</quote>といった具合です。ついで別の人は <command>svn log -r9238</command>を実行してそのバグを修正したチェンジセット についてのログを見ることができ、さらに<command>svn diff -r9237:9238</command> を実行して、そのパッチ自身を表示することもできます。Subversion の <literal>merge</literal>コマンドもまたリビジョン番号を使います。あるブランチから別の ブランチに特定のチェンジセットをマージしたい場合にはマージの引数で それを与えます: <command>svn merge -r9237:9238</command> はチェンジセット #9238 をあなたの作業コピーにマージするでしょう。"

#. Tag: para
#: ch04-branching-and-merging.xml:1092
#, no-c-format
msgid "Keep in mind that rolling back a change like this is just like any other <command>svn merge</command> operation, so you should use <command>svn status</command> and <command>svn diff</command> to confirm that your work is in the state you want it to be in, and then use <command>svn commit</command> to send the final version to the repository. After committing, this particular changeset is no longer reflected in the <literal>HEAD</literal> revision."
msgstr "このような変更の取り消しは、普通の<command>svn merge</command> の操作にすぎないので、作業コピーが望む状態になったかどうかは <command>svn status</command> と<command>svn diff</command> を 使うことができ、その後<command>svn commit</command> でリポジトリに 最終的なバージョンを送ることができるのだ、ということを押さえておいて ください。コミット後はこの特別なチェンジセットはもはや <literal>HEAD</literal>リビジョンには反映されません。"

#. Tag: para
#: ch04-branching-and-merging.xml:1101
#, no-c-format
msgid "Again, you may be thinking: well, that really didn't undo the commit, did it? The change still exists in revision 303. If somebody checks out a version of the <filename>calc</filename> project between revisions 303 and 349, they'll still see the bad change, right?"
msgstr "こう思うかも知れません: とすると、それは「取り消し」じゃない じゃないか。変更はまだリビジョン303に存在しているのでは、と。 もし誰かが<filename>calc</filename> プロジェクトのリビジョン303 と 349の間のバージョンをチェックアウトしたとしたら、間違った 変更を受け取るのではないか、違うか、と。"

#. Tag: para
#: ch04-branching-and-merging.xml:1107
#, no-c-format
msgid "Yes, that's true. When we talk about <quote>removing</quote> a change, we're really talking about removing it from <literal>HEAD</literal>. The original change still exists in the repository's history. For most situations, this is good enough. Most people are only interested in tracking the <literal>HEAD</literal> of a project anyway. There are special cases, however, where you really might want to destroy all evidence of the commit. (Perhaps somebody accidentally committed a confidential document.) This isn't so easy, it turns out, because Subversion was deliberately designed to never lose information. Revisions are immutable trees which build upon one another. Removing a revision from history would cause a domino effect, creating chaos in all subsequent revisions and possibly invalidating all working copies."
msgstr "おっしゃる通り。私たちが、変更の<quote>取り消し</quote>について語るとき、 本当は<literal>HEAD</literal>から取り除くことを言っています。もともとの変更は リポジトリの履歴に依然として残っています。ほとんどの状況では これで十分です。とにかくほとんどの人たちはプロジェクトの <literal>HEAD</literal>を追いかける ことだけに興味があるからです。しかし、コミットに関するすべての 情報を削除したいという例外的な状況もあるでしょう。(多分、誰かが 極秘のドキュメントをコミットしてしまった、など) これはそんなに やさしいことではありません。Subversionは意図的に決して情報が 失われないように設計されているからです。履歴からのリビジョンの 削除は、連鎖的な影響を与え、すべての後続リビジョンと、多分 すべての作業コピーに混乱を起こします。"

#. Tag: para
#: ch04-branching-and-merging.xml:1123
#, fuzzy, no-c-format
msgid "The Subversion project has plans, however, to someday implement a command that would accomplish the task of permanently deleting information. In the meantime, see <xref linkend=\"svn.reposadmin.maint.tk.svndumpfilter\"/> for a possible workaround."
msgstr "しかしながら、Subversionプロジェクトはいつの日か <command>svnadmin obliterate</command>コマンドを 実装する計画があります。これは情報の完全な消去を実行するコマンド です。それまでは回避策として<xref linkend=\"svn.reposadmin.maint.tk.svndumpfilter\"/> の方法を利用してください。"

#. Tag: title
#: ch04-branching-and-merging.xml:1135
#, no-c-format
msgid "Resurrecting Deleted Items"
msgstr "削除されたアイテムの復活"

#. Tag: para
#: ch04-branching-and-merging.xml:1137
#, no-c-format
msgid "The great thing about version control systems is that information is never lost. Even when you delete a file or directory, it may be gone from the <literal>HEAD</literal> revision, but the object still exists in earlier revisions. One of the most common questions new users ask is, <quote>How do I get my old file or directory back?</quote>."
msgstr "バージョン管理システムの偉大なところは情報が決して失われないという ところです。ファイルやディレクトリを削除した場合でもそれは <literal>HEAD</literal> リビジョン から消えただけであり、以前のリビジョン中には依然として存在し続けます。 新規ユーザからの一番よくある質問の一つは: <quote>どうやって古いファイルや ディレクトリを戻せば良いのですか?</quote> というものです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1144
#, fuzzy, no-c-format
msgid "The first step is to define exactly <emphasis role=\"bold\">which</emphasis> item you're trying to resurrect. Here's a useful metaphor: you can think of every object in the repository as existing in a sort of two-dimensional coordinate system. The first coordinate is a particular revision tree, and the second coordinate is a path within that tree. So every version of your file or directory can be defined by a specific coordinate pair. (Remember the <quote>peg revision</quote> syntax&mdash;foo.c@224 &mdash;mentioned back in <xref linkend=\"svn.advanced.pegrevs\"/>.)"
msgstr "最初のステップはあなたが復活させようとしているものは正確には<emphasis role=\"bold\">何であるか</emphasis>をはっきりさせることです。 うまいたとえがあります: リポジトリ中のそれぞれのオブジェクトは 一種の二次元座標系の中に存在していると考えることができます。第一の軸 は特定のリビジョンツリーで第二の軸はそのツリー中のパスです。すると ファイルあるいはディレクトリのそれぞれのバージョンは特定の座標の組で 定義することができます。"

#. Tag: para
#: ch04-branching-and-merging.xml:1156
#, fuzzy, no-c-format
msgid "First, you might need to use <command>svn log</command> to discover the exact coordinate pair you wish to resurrect. A good strategy is to run <command>svn log --verbose</command> in a directory which used to contain your deleted item. The <option>--verbose (-v)</option> option shows a list of all changed items in each revision; all you need to do is find the revision in which you deleted the file or directory. You can do this visually, or by using another tool to examine the log output (via <command>grep</command>, or perhaps via an incremental search in an editor)."
msgstr "Subversion は CVS のような <filename>Attic</filename> ディレクトリを持ちません <footnote> <para> CVS はツリーのバージョン管理ができないので削除されたファイルを 記憶しておくためにリポジトリ用のディレクトリ中に <filename>Attic</filename> 領域を 作ります。 </para> </footnote> ので復活させたいと思う正確な座標ペアを見つける のに<command>svn log</command>を使わなくてはなりません。うまいやり方 としては削除されたアイテムがあったディレクトリで<command>svn log --verbose</command> を実行することです。<option>--verbose</option>オプションはそれぞれの リビジョン中でのすべての変更アイテムのリストを表示します; 必要なことは ファイルやディレクトリをどのリビジョンで削除したかを調べることです。 これはビジュアルにやることもできますし、ログ出力を解析する別のツールを 使うこともできます(<command>grep</command>コマンドを通じて、あるいは エディタでのインクリメンタル検索機能を使う形かも知れません)。"

#. Tag: screen
#: ch04-branching-and-merging.xml:1167
#, fuzzy, no-c-format
msgid ""
"$ cd parent-dir\n"
"$ svn log -v\n"
"&hellip;\n"
"------------------------------------------------------------------------\n"
"r808 | joe | 2003-12-26 14:29:40 -0600 (Fri, 26 Dec 2003) | 3 lines\n"
"Changed paths:\n"
"   D /calc/trunk/real.c\n"
"   M /calc/trunk/integer.c\n"
"\n"
"Added fast fourier transform functions to integer.c.\n"
"Removed real.c because code now in double.c.\n"
"&hellip;"
msgstr ""
"$ cd parent-dir\n"
"$ svn log --verbose\n"
"&hellip;\n"
"------------------------------------------------------------------------\n"
"r808 | joe | 2003-12-26 14:29:40 -0600 (Fri, 26 Dec 2003) | 3 lines\n"
"Changed paths:\n"
"   D /calc/trunk/real.c\n"
"   M /calc/trunk/integer.c\n"
"\n"
"Added fast fourier transform functions to integer.c.\n"
"Removed real.c because code now in double.c.\n"
"&hellip;"

#. Tag: para
#: ch04-branching-and-merging.xml:1169
#, no-c-format
msgid "In the example, we're assuming that you're looking for a deleted file <filename>real.c</filename>. By looking through the logs of a parent directory, you've spotted that this file was deleted in revision 808. Therefore, the last version of the file to exist was in the revision right before that. Conclusion: you want to resurrect the path <filename>/calc/trunk/real.c</filename> from revision 807."
msgstr "例では削除してしまったファイル <filename>real.c</filename>を探している とします。親ディレクトリのログを見ることでこのファイルはリビジョン 808 で削除されたことを突き止めました。それでこのファイルが存在していた 最後のバージョンはそのリビジョンの直前であることになります。結論: リビジョン 807 から <filename>/calc/trunk/real.c</filename>のパスを 復活させれば良いことになります。"

#. Tag: para
#: ch04-branching-and-merging.xml:1178
#, no-c-format
msgid "That was the hard part&mdash;the research. Now that you know what you want to restore, you have two different choices."
msgstr "これが面倒な部分です &mdash; つまりファイルを見つける作業です。 これで復元したいものが何であるか突き止めました。後は二つの方法が あります。"

#. Tag: para
#: ch04-branching-and-merging.xml:1182
#, no-c-format
msgid "One option is to use <command>svn merge</command> to apply revision 808 <quote>in reverse</quote>. (We've already discussed how to undo changes, see <xref linkend=\"svn.branchmerge.commonuses.undo\"/>.) This would have the effect of re-adding <filename>real.c</filename> as a local modification. The file would be scheduled for addition, and after a commit, the file would again exist in <literal>HEAD</literal>."
msgstr "最初のやり方はリビジョン 808 を <quote>逆向きに</quote> 適用するために <command>svn merge</command>を利用することです。(変更の取り消し の仕方については既に議論しました。 <xref linkend=\"svn.branchmerge.commonuses.undo\"/> を参照してください。) これはローカルな変更として<filename>real.c</filename> をもう一度追加する効果があります。ファイルは追加予告され、コミット後には <literal>HEAD</literal> 上に再び存在するようになります。"

#. Tag: para
#: ch04-branching-and-merging.xml:1191
#, no-c-format
msgid "In this particular example, however, this is probably not the best strategy. Reverse-applying revision 808 would not only schedule <filename>real.c</filename> for addition, but the log message indicates that it would also undo certain changes to <filename>integer.c</filename>, which you don't want. Certainly, you could reverse-merge revision 808 and then <command>svn revert</command> the local modifications to <filename>integer.c</filename>, but this technique doesn't scale well. What if there were 90 files changed in revision 808?"
msgstr "しかしこの例は多分最善の方法ではないでしょう。リビジョン 808 の逆向き の適用は<filename>real.c</filename>の追加予告だけではなく、ログメッセージ が示すように、今回必要としない<filename>integer.c</filename>への変更点 も取り消してしまいます。確かにリビジョン 808 を逆向きにマージした後 <filename>integer.c</filename>のローカル変更を <command>svn revert</command> することもできますが、この技法はファイルが多くなるとうまくスケールしません。 リビジョン 808 で 90 個のファイルが変更されていたとしたらどうなりますか?"

#. Tag: para
#: ch04-branching-and-merging.xml:1202
#, no-c-format
msgid "A second, more targeted strategy is not to use <command>svn merge</command> at all, but rather the <command>svn copy</command> command. Simply copy the exact revision and path <quote>coordinate pair</quote> from the repository to your working copy:"
msgstr "もっと洗練された二番目の方法は<command>svn merge</command>は利用せず、 そのかわりに<command>svn copy</command>コマンドを使います。正確な リビジョンとパスの <quote>座標の組</quote> を指定してリポジトリから自分の作業コピーに 単にコピーするだけです:"

#. Tag: screen
#: ch04-branching-and-merging.xml:1208
#, fuzzy, no-c-format
msgid ""
"$ svn copy -r 807 \\\n"
"           http://svn.example.com/repos/calc/trunk/real.c ./real.c\n"
"\n"
"$ svn status\n"
"A  +   real.c\n"
"\n"
"$ svn commit -m \"Resurrected real.c from revision 807, /calc/trunk/real.c.\"\n"
"Adding         real.c\n"
"Transmitting file data .\n"
"Committed revision 1390."
msgstr ""
"$ svn copy --revision 807 ¥\n"
"           http://svn.example.com/repos/calc/trunk/real.c ./real.c\n"
"\n"
"$ svn status\n"
"A  +   real.c\n"
"\n"
"$ svn commit -m \"Resurrected real.c from revision 807, /calc/trunk/real.c.\"\n"
"Adding         real.c\n"
"Transmitting file data .\n"
"Committed revision 1390."

#. Tag: para
#: ch04-branching-and-merging.xml:1210
#, no-c-format
msgid "The plus sign in the status output indicates that the item isn't merely scheduled for addition, but scheduled for addition <quote>with history</quote>. Subversion remembers where it was copied from. In the future, running <command>svn log</command> on this file will traverse back through the file's resurrection and through all the history it had prior to revision 807. In other words, this new <filename>real.c</filename> isn't really new; it's a direct descendant of the original, deleted file."
msgstr "ステータス表示中のプラス記号はそのアイテムは単に追加予告されただけではなく <quote>履歴と共に</quote> 追加予告されたことを示しています。Subversion はどこからそれが コピーされたかを記憶しています。今後このファイル上に <command>svn log</command>を実行するとファイルの復活についてと、リビジョン 807 以前のすべての履歴をたどることができます。言いかえるとこの新しい <filename>real.c</filename>は本当に新しいわけではありません;それは 削除されたもとのファイルの直接の子孫になっています。"

#. Tag: para
#: ch04-branching-and-merging.xml:1220
#, no-c-format
msgid "Although our example shows us resurrecting a file, note that these same techniques work just as well for resurrecting deleted directories."
msgstr "私たちの例はファイルの復活でしたが、同じ技法が削除されたディレクトリ の復活についても利用できることに注意してください。"

#. Tag: title
#: ch04-branching-and-merging.xml:1228
#, no-c-format
msgid "Common Branching Patterns"
msgstr "ブランチの作り方"

#. Tag: para
#: ch04-branching-and-merging.xml:1230
#, no-c-format
msgid "Version control is most often used for software development, so here's a quick peek at two of the most common branching/merging patterns used by teams of programmers. If you're not using Subversion for software development, feel free to skip this section. If you're a software developer using version control for the first time, pay close attention, as these patterns are often considered best practices by experienced folk. These processes aren't specific to Subversion; they're applicable to any version control system. Still, it may help to see them described in Subversion terms."
msgstr "バージョン管理システムはソフトウェア開発で一番よく使われるので、ここで 何かの開発チームによって利用される典型的なブランチ化/マージのパターン をちょっと見てみましょう。Subversion をソフトウェア開発に使うのでなけ ればこの節は読み飛ばしてもかまいません。ソフトウェア開発にバージョン 管理システムを使うのが初めてなのであれば、よく読んでください。 ここでのパターンは経験を積んだ多くの開発者によって最良の方法だと考えられて いるからです。このようなやり方は Subversion に限った話ではありません; どのようなバージョン管理システムにでも応用できる考え方です。また同時に 他のシステムのユーザに対しては Subversion ではどんな言葉を使ってこの標 準的なやり方を表現するかを理解する手がかりになるでしょう。"

#. Tag: title
#: ch04-branching-and-merging.xml:1244
#, no-c-format
msgid "Release Branches"
msgstr "リリースブランチ"

#. Tag: para
#: ch04-branching-and-merging.xml:1246
#, no-c-format
msgid "Most software has a typical lifecycle: code, test, release, repeat. There are two problems with this process. First, developers need to keep writing new features while quality-assurance teams take time to test supposedly-stable versions of the software. New work cannot halt while the software is tested. Second, the team almost always needs to support older, released versions of software; if a bug is discovered in the latest code, it most likely exists in released versions as well, and customers will want to get that bugfix without having to wait for a major new release."
msgstr "ほとんどのソフトウェアは典型的な作業サイクルがあります: コーディング、 テスト、リリース、この繰り返しです。このようなやり方には二つの問題が あります。まず開発者は新しい機能を追加し続けなくてはならない一方で 品質保証チームはそのソフトウェアの安定版だと考えられるバージョンを テストするのに時間をついやさなくてはなりません。テスト途中だからといっ て新しい機能追加を中断することはできません。次に開発チームはほとんど の場合、すでにリリースされた古いバージョンのソフトウェアを保守しなくては なりません; もし最新のコードにバグが見つかった場合、すでにリリースしている バージョンにも同じバグが潜んでいる可能性は高く、利用者は次のリリースを 待たずにこのバグを修正して欲しいと望んでいることでしょう。"

#. Tag: para
#: ch04-branching-and-merging.xml:1258
#, no-c-format
msgid "Here's where version control can help. The typical procedure looks like this:"
msgstr "バージョン管理システムの出番です。典型的なやり方は以下のようなものです:"

#. Tag: para
#: ch04-branching-and-merging.xml:1264
#, no-c-format
msgid "<emphasis>Developers commit all new work to the trunk.</emphasis> Day-to-day changes are committed to <filename>/trunk</filename>: new features, bugfixes, and so on."
msgstr "<emphasis> 開発者は新規開発部分をトランクにコミットします。 </emphasis> 日々の変更点は<filename>/trunk</filename>にコミットされます: 新しい機 バグ修正、その他もろもろです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1273
#, no-c-format
msgid "<emphasis>The trunk is copied to a <quote>release</quote> branch.</emphasis> When the team thinks the software is ready for release (say, a 1.0 release), then <filename>/trunk</filename> might be copied to <filename>/branches/1.0</filename>."
msgstr "<emphasis> トランクの内容は<quote>リリース</quote>ブランチにコピーされます。 </emphasis> あるチームが、そのソフトウェアがリリースできる状態になったと考えた 時点で(つまり、1.0 のリリースのような場合)、<filename>/trunk</filename> は<filename>/branches/1.0</filename>のような名前でコピーされる ことになります。"

#. Tag: para
#: ch04-branching-and-merging.xml:1283
#, no-c-format
msgid "<emphasis>Teams continue to work in parallel.</emphasis> One team begins rigorous testing of the release branch, while another team continues new work (say, for version 2.0) on <filename>/trunk</filename>. If bugs are discovered in either location, fixes are ported back and forth as necessary. At some point, however, even that process stops. The branch is <quote>frozen</quote> for final testing right before a release."
msgstr "<emphasis> これと並行して、他のチームが作業を続けます。 </emphasis> あるチームがリリースブランチの内容を徹底的なテストを開始する一方で 他のチームは新規開発分(つまり、バージョン 2.0 に向けた作業)を <filename>/trunk</filename>上で継続して行います。どちらかの場所で バグが見つかれば、必要に応じてその修正がお互いの間を行き来します。 しかしこの作業もやがては終わります。このブランチはリリース直前の 最終的なテストに向けて<quote>凍結</quote>されます。"

#. Tag: para
#: ch04-branching-and-merging.xml:1295
#, no-c-format
msgid "<emphasis>The branch is tagged and released.</emphasis> When testing is complete, <filename>/branches/1.0</filename> is copied to <filename>/tags/1.0.0</filename> as a reference snapshot. The tag is packaged and released to customers."
msgstr "<emphasis>ブランチはタグづけされ、リリースされます。 </emphasis> テストが完了したら<filename>/branches/1.0</filename>は <filename>/tags/1.0.0</filename>にコピーされ、これが参照用のスナップ ショットになります。このタグの内容はパッケージ化され、利用者に対して リリースされます。"

#. Tag: para
#: ch04-branching-and-merging.xml:1305
#, no-c-format
msgid "<emphasis>The branch is maintained over time.</emphasis> While work continues on <filename>/trunk</filename> for version 2.0, bugfixes continue to be ported from <filename>/trunk</filename> to <filename>/branches/1.0</filename>. When enough bugfixes have accumulated, management may decide to do a 1.0.1 release: <filename>/branches/1.0</filename> is copied to <filename>/tags/1.0.1</filename>, and the tag is packaged and released."
msgstr "<emphasis>ブランチはその後も保守されます。</emphasis> バージョン 2.0に向けた作業が<filename>/trunk</filename>上で進む一方、 バグ修正個所については<filename>/trunk</filename>から <filename>/branches/1.0</filename>に引き続き反映されます。 十分なバグ修正が反映されたら、管理者は 1.0.1 をリリースする決断をする かも知れません: <filename>/branches/1.0</filename>は <filename>/tags/1.0.1</filename>にコピーされ、このタグはパッケージ 化されてからリリースされます。"

#. Tag: para
#: ch04-branching-and-merging.xml:1319
#, no-c-format
msgid "This entire process repeats as the software matures: when the 2.0 work is complete, a new 2.0 release branch is created, tested, tagged, and eventually released. After some years, the repository ends up with a number of release branches in <quote>maintenance</quote> mode, and a number of tags representing final shipped versions."
msgstr "このような作業の流れを繰り返すことでソフトウェアは安定していきます: 2.0 の開発が完了したら新しい 2.0 のリリースブランチが作られ、テスト され、タグがつけられ、最終的にリリースされることになります。 何年かしてリポジトリは<quote>保守対象</quote>の状態になったいくつかの リリースブランチと最終的にリリースされたバージョンを示すタグの集まり になるでしょう。"

#. Tag: title
#: ch04-branching-and-merging.xml:1330
#, no-c-format
msgid "Feature Branches"
msgstr "(特定機能の)開発用ブランチ"

#. Tag: para
#: ch04-branching-and-merging.xml:1332
#, no-c-format
msgid "A <firstterm>feature branch</firstterm> is the sort of branch that's been the dominant example in this chapter, the one you've been working on while Sally continues to work on <filename>/trunk</filename>. It's a temporary branch created to work on a complex change without interfering with the stability of <filename>/trunk</filename>. Unlike release branches (which may need to be supported forever), feature branches are born, used for a while, merged back to the trunk, then ultimately deleted. They have a finite span of usefulness."
msgstr "<firstterm>開発用ブランチ(feature branch)</firstterm> はこの章での 例として中心的な役割を果たしてきたようなタイプのブランチで、その ブランチ上であなたが作業をするのと同時に並行してSally は <filename>/trunk</filename>上で作業を継続することができるような ものでした。それは一時的なブランチで、安定している <filename>/trunk</filename>に影響を与えることなく複雑な変更をする ためのものです。リリース用ブランチ(これはずっと保守しつづけなければ ならないかも知れません)とは違って、開発用ブランチは作成されたあと ある程度の期間利用され、変更部分がトランクに反映された後で完全に 削除されてしまいます。利用されるのは、ある決まった期間の中だけです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1343
#, no-c-format
msgid "Again, project policies vary widely concerning exactly when it's appropriate to create a feature branch. Some projects never use feature branches at all: commits to <filename>/trunk</filename> are a free-for-all. The advantage to this system is that it's simple&mdash;nobody needs to learn about branching or merging. The disadvantage is that the trunk code is often unstable or unusable. Other projects use branches to an extreme: no change is <emphasis>ever</emphasis> committed to the trunk directly. Even the most trivial changes are created on a short-lived branch, carefully reviewed and merged to the trunk. Then the branch is deleted. This system guarantees an exceptionally stable and usable trunk at all times, but at the cost of tremendous process overhead."
msgstr "プロジェクトの考え方によって、開発用ブランチをいつ作るのが適切である かにはかなりの幅があります。プロジェクトによっては開発用ブランチを 全く使いません: <filename>/trunk</filename>に対するコミットは 全員に許されています。このやり方の長所はその単純さです&mdash;誰も ブランチ化やマージについて理解する必要がありません。欠点はこの方法 だとトランクのソースコードが不安定になったりまったく利用できなく なったりしやすいことです。逆に別のプロジェクトではブランチを極端な 形で使います: <emphasis>どんな変更も</emphasis>トランクに対して直接 コミットすることは認められていません。まったくささいな変更に対しても 短い生存期間をもつブランチを作り、それを注意深く検討し、 トランクに反映させます。それから、そのブランチを削除します。この方法は トランクを常に非常に安定して利用できる状態に置くことができますが それには無視できない処理効率の低下が伴います。"

#. Tag: para
#: ch04-branching-and-merging.xml:1358
#, no-c-format
msgid "Most projects take a middle-of-the-road approach. They commonly insist that <filename>/trunk</filename> compile and pass regression tests at all times. A feature branch is only required when a change requires a large number of destabilizing commits. A good rule of thumb is to ask this question: if the developer worked for days in isolation and then committed the large change all at once (so that <filename>/trunk</filename> were never destabilized), would it be too large a change to review? If the answer to that question is <quote>yes</quote>, then the change should be developed on a feature branch. As the developer commits incremental changes to the branch, they can be easily reviewed by peers."
msgstr "ほとんどのプロジェクトではこの中間のやり方をとります。普通は <filename>/trunk</filename>は常にコンパイル可能な状態であり、 一度フィックスしたバグが元に戻っていないことを保証するためのテスト もクリアした状態にあることを要求します。ある変更をするのに プログラムを不安定にするようなコミットを何度も必要とする場合に だけ開発ブランチが作られます。基本的な方針としては次のようなことを 考えてみることです: もし開発者が孤立した状態で何日も作業した後で 一度に変更点全体をコミットしたとしたら(<filename>/trunk</filename>が 不安定にならないようにするためにそうするのでしょうが)、その変更 内容が正しいかどうかを検討するには大きすぎませんか? もし答えが <quote>イエス</quote>なら、その変更は開発用ブランチでやるべきで しょう。開発者はブランチに対して変更点を少しずつコミットするので 他の人たちはそれぞれの部分について簡単に内容を検証することができ ます。"

#. Tag: para
#: ch04-branching-and-merging.xml:1372
#, no-c-format
msgid "Finally, there's the issue of how to best keep a feature branch in <quote>sync</quote> with the trunk as work progresses. As we mentioned earlier, there's a great risk to working on a branch for weeks or months; trunk changes may continue to pour in, to the point where the two lines of development differ so greatly that it may become a nightmare trying to merge the branch back to the trunk."
msgstr "最後に、開発用ブランチでの作業が進むにつれて、どうやってそれを トランクの内容に<quote>同期</quote>させるのがよいかについて 考えてみます。すでに注意したようにブランチ上で数週間あるいは数ヶ月 ものあいだ作業しつづけるのには大きなリスクが伴います; トランクへの 変更はその間次々と発生し、ついには二つの開発ラインはあまりにもかけ離れて しまい、ブランチの変更内容をトランクにマージによって戻すのは全く 非現実的な話になってしまうかも知れないのです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1380
#, no-c-format
msgid "This situation is best avoided by regularly merging trunk changes to the branch. Make up a policy: once a week, merge the last week's worth of trunk changes to the branch. Take care when doing this; the merging needs to be hand-tracked to avoid the problem of repeated merges (as described in <xref linkend=\"svn.branchmerge.copychanges.bestprac.track\"/>). You'll need to write careful log messages detailing exactly which revision ranges have been merged already (as demonstrated in <xref linkend=\"svn.branchmerge.commonuses.wholebr\"/>). It may sound intimidating, but it's actually pretty easy to do."
msgstr "この状況を避けるためにはトランクの内容を定期的にブランチにマージする ことです。次のようなルールを決めておきましょう: 一週間に一度、 先週トランク上におきた変更をブランチにマージすること。これは注意して 実行する必要があります; マージは手作業で実行し、繰り返してマージする のを避ける必要があります(これについては <xref linkend=\"svn.branchmerge.copychanges.bestprac.track\"/>で説明しました)。ログメッセージ を書く時には注意して、どの範囲のリビジョンが既にマージされているか を正確に控えておきましょう(これは<xref linkend=\"svn.branchmerge.commonuses.wholebr\"/> でやってみせました)。大変な作業に思えるかも知れませんが、実際には 非常に簡単なことです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1395
#, no-c-format
msgid "At some point, you'll be ready to merge the <quote>synchronized</quote> feature branch back to the trunk. To do this, begin by doing a final merge of the latest trunk changes to the branch. When that's done, the latest versions of branch and trunk will be absolutely identical except for your branch changes. So in this special case, you would merge by comparing the branch with the trunk:"
msgstr "あるところまで作業が進んだら、開発用ブランチの内容をトランクに <quote>同期</quote>させるためのマージの準被ｳ器ｺ整います。これには まず、最新のトランクの変更部分をブランチに取り込む最後のマージ 処理を実行することで始めます。この処理の後では、ブランチ上の最後のリビ ジョンとトランク上の最後のリビジョンは、ブランチでの変更部分を のぞけば、完全に同じ状態になります。このような特定の状況下では ブランチとトランクの内容を比較することによってマージすることが できるはずです:"

#. Tag: screen
#: ch04-branching-and-merging.xml:1404
#, no-c-format
msgid ""
"$ cd trunk-working-copy\n"
"\n"
"$ svn update\n"
"At revision 1910.\n"
"\n"
"$ svn merge http://svn.example.com/repos/calc/trunk@1910 \\\n"
"            http://svn.example.com/repos/calc/branches/mybranch@1910\n"
"U  real.c\n"
"U  integer.c\n"
"A  newdirectory\n"
"A  newdirectory/newfile\n"
"&hellip;"
msgstr ""
"$ cd trunk-working-copy\n"
"\n"
"$ svn update\n"
"At revision 1910.\n"
"\n"
"$ svn merge http://svn.example.com/repos/calc/trunk@1910 ¥\n"
"            http://svn.example.com/repos/calc/branches/mybranch@1910\n"
"U  real.c\n"
"U  integer.c\n"
"A  newdirectory\n"
"A  newdirectory/newfile\n"
"&hellip;"

#. Tag: para
#: ch04-branching-and-merging.xml:1406
#, no-c-format
msgid "By comparing the <literal>HEAD</literal> revision of the trunk with the <literal>HEAD</literal> revision of the branch, you're defining a delta that describes only the changes you made to the branch; both lines of development already have all of the trunk changes."
msgstr "トランクの<literal>HEAD</literal>リビジョンとブランチの <literal>HEAD</literal>リビジョンを比較することで、ブランチにだけ 加えた修正点を含む差分を作ることができます; 両方の開発ラインとも トランクに起きた修正についてはすでに取り込んでいるからです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1412
#, no-c-format
msgid "Another way of thinking about this pattern is that your weekly sync of trunk to branch is analogous to running <command>svn update</command> in a working copy, while the final merge step is analogous to running <command>svn commit</command> from a working copy. After all, what else <emphasis>is</emphasis> a working copy but a very shallow private branch? It's a branch that's only capable of storing one change at a time."
msgstr "このような作業パターンは、自分のブランチに対して 毎週トランクを同期させる処理は、作業コピーに対して<command>svn update</command> を実行するのとよく似ていて、最後のマージ処理に ついては作業コピーから<command>svn commit</command>を実行するのに よく似ていると考えることができます。結局、作業コピーと、ちょっと作った プライベートなブランチと、他に何が違うと言うのでしょう? 作業コピー とは、一度に一つの変更しか保存できないような単なるブランチにすぎ ません。"

#. Tag: title
#: ch04-branching-and-merging.xml:1431
#, fuzzy, no-c-format
msgid "Traversing Branches"
msgstr "ブランチの利用"

#. Tag: para
#: ch04-branching-and-merging.xml:1433
#, fuzzy, no-c-format
msgid "The <command>svn switch</command> command transforms an existing working copy to reflect a different branch. While this command isn't strictly necessary for working with branches, it provides a nice shortcut. In our earlier example, after creating your private branch, you checked out a fresh working copy of the new repository directory. Instead, you can simply ask Subversion to change your working copy of <filename>/calc/trunk</filename> to mirror the new branch location:"
msgstr "<command>svn switch</command> コマンドは存在している作業コピーを 別のブランチに変換します。このコマンドはブランチで作業するのに 常に必要というわけではありませんが、ユーザに対して便利なショートカット を用意します。前の例で、プライベートなブランチを作ったあと、その新しい リポジトリディレクトリの作業コピーをチェックアウトしました。そうする かわりに、単に<filename>/calc/trunk</filename> の作業コピーを新しい ブランチの場所のコピーに変更することができます:"

#. Tag: screen
#: ch04-branching-and-merging.xml:1443
#, no-c-format
msgid ""
"$ cd calc\n"
"\n"
"$ svn info | grep URL\n"
"URL: http://svn.example.com/repos/calc/trunk\n"
"\n"
"$ svn switch http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"U   integer.c\n"
"U   button.c\n"
"U   Makefile\n"
"Updated to revision 341.\n"
"\n"
"$ svn info | grep URL\n"
"URL: http://svn.example.com/repos/calc/branches/my-calc-branch"
msgstr ""
"$ cd calc\n"
"\n"
"$ svn info | grep URL\n"
"URL: http://svn.example.com/repos/calc/trunk\n"
"\n"
"$ svn switch http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"U   integer.c\n"
"U   button.c\n"
"U   Makefile\n"
"Updated to revision 341.\n"
"\n"
"$ svn info | grep URL\n"
"URL: http://svn.example.com/repos/calc/branches/my-calc-branch"

#. Tag: para
#: ch04-branching-and-merging.xml:1445
#, no-c-format
msgid "After <quote>switching</quote> to the branch, your working copy is no different than what you would get from doing a fresh checkout of the directory. And it's usually more efficient to use this command, because often branches only differ by a small degree. The server sends only the minimal set of changes necessary to make your working copy reflect the branch directory."
msgstr "ブランチに<quote>スイッチ</quote>したあとでは、作業コピーの内容はそのディレクトリ を新しくチェックアウトした場合とまったく同じものになります。そして 普通このコマンドを使うほうがより効率的です。というのは、たいてい ブランチはほんの少し内容が違うだけです。サーバはそのブランチディレクトリ を反映させるために作業コピーにしなくてはならない最小限の変更だけを 送信すれば済むのです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1453
#, fuzzy, no-c-format
msgid "The <command>svn switch</command> command also takes a <option>--revision</option> (<option>-r</option>) option, so you need not always move your working copy to the <literal>HEAD</literal> of the branch."
msgstr "<command>svn switch</command> は<option>--revision</option> (<option>-r</option>) オプションをとることもできるので、常に作業コピー をブランチの<quote>最新状態</quote>にに移す必要があるわけではありません。"

#. Tag: para
#: ch04-branching-and-merging.xml:1458
#, no-c-format
msgid "Of course, most projects are more complicated than our <filename>calc</filename> example, containing multiple subdirectories. Subversion users often follow a specific algorithm when using branches:"
msgstr "もちろん、ほとんどのプロジェクトは<filename>calc</filename>よりは もっと複雑で、複数のサブディレクトリを含んでいます。Subversionユーザは ブランチを利用するときにはよく、特定のやり方をします。:"

#. Tag: para
#: ch04-branching-and-merging.xml:1465
#, no-c-format
msgid "Copy the project's entire <quote>trunk</quote> to a new branch directory."
msgstr "プロジェクトの<quote>幹(trunk)</quote>全体を新しいブランチディレクトリ にコピーする。"

#. Tag: para
#: ch04-branching-and-merging.xml:1469
#, no-c-format
msgid "Switch only <emphasis>part</emphasis> of the trunk working copy to mirror the branch."
msgstr "幹(trunk)の作業コピーの<emphasis>一部</emphasis>のみを ブランチにミラーする。"

#. Tag: para
#: ch04-branching-and-merging.xml:1474
#, no-c-format
msgid "In other words, if a user knows that the branch-work only needs to happen on a specific subdirectory, they use <command>svn switch</command> to move only that subdirectory to the branch. (Or sometimes users will switch just a single working file to the branch!) That way, they can continue to receive normal <quote>trunk</quote> updates to most of their working copy, but the switched portions will remain immune (unless someone commits a change to their branch). This feature adds a whole new dimension to the concept of a <quote>mixed working copy</quote>&mdash;not only can working copies contain a mixture of working revisions, but a mixture of repository locations as well."
msgstr "言い換えると、ユーザが特定のサブディレクトリ上でだけブランチの作業が起きる ことを知っている場合には<command>svn switch</command>を使ってブランチに そのサブディレクトリのみを移動します。(あるいは、たった一つの作業ファイル だけをブランチに switch することさえあります!) その方法では、作業コピー のほとんどすべての更新を普通の<quote>幹(trunk)</quote>から従来どおり受け取ることが できますが、切り替えた部分だけは変更されることなく残ります(もしブランチ に対して誰かが変更点をコミットしさえしなければ)。この機能は <quote>混合作業コピー</quote>という概念にまったく新しい次元を付け加える ことになります&mdash;作業コピーは作業リビジョンの混合を含むことができる だけではなく、リポジトリ位置の混合も含むことができます。"

#. Tag: para
#: ch04-branching-and-merging.xml:1487
#, no-c-format
msgid "If your working copy contains a number of switched subtrees from different repository locations, it continues to function as normal. When you update, you'll receive patches to each subtree as appropriate. When you commit, your local changes will still be applied as a single, atomic change to the repository."
msgstr "もし作業コピーが異なるリポジトリ位置からのスイッチされたサブツリー をいくつか含むなら、それは普通に機能し続けます。更新すると、 それぞれのサブツリーのパッチを適切に受け取るでしょう。コミットすると ローカル修正は一つの不可分の変更をリポジトリに適用するでしょう。"

#. Tag: para
#: ch04-branching-and-merging.xml:1493
#, fuzzy, no-c-format
msgid "Note that while it's okay for your working copy to reflect a mixture of repository locations, these locations must all be within the <emphasis>same</emphasis> repository. Subversion repositories aren't yet able to communicate with one another; that's a feature planned for the future."
msgstr "リポジトリ位置の混合を作業コピーに反映させることはできますが、 このようなリポジトリ位置はすべて<emphasis>同じ</emphasis> リポジトリ の中になくてはなりません。Subversionのリポジトリはまだお互いに通信 することはできません。これはSubversion1.0以降で計画されている機能です。"

#. Tag: para
#: ch04-branching-and-merging.xml:1500
#, fuzzy, no-c-format
msgid "You <emphasis>can</emphasis>, however, use <command>svn switch</command> with the <option>--relocate</option> option if the URL of your server changes and you don't want to abandon an existing working copy. See <xref linkend=\"svn.ref.svn.c.switch\"/> for more information and an example."
msgstr "しかし、サーバ上の URL が変更されたが、既存の作業コピー を捨てたくない場合には、<option>--relocate</option>スイッチ付きで <command>svn switch</command>を使うことは<emphasis>できます</emphasis>。 より詳しい情報と例については<xref linkend=\"svn.ref\"/>の<command> svn switch</command>の章を見てください。"

#. Tag: title
#: ch04-branching-and-merging.xml:1509
#, no-c-format
msgid "Switches and Updates"
msgstr "スイッチと更新"

#. Tag: para
#: ch04-branching-and-merging.xml:1511
#, no-c-format
msgid "Have you noticed that the output of <command>svn switch</command> and <command>svn update</command> look the same? The <literal>switch</literal> command is actually a superset of the update command."
msgstr "<command>svn switch</command> と <command>svn update</command> の 出力が同じなのに気がつきましたか? <literal>switch</literal>コマンドは実際にはupdate コマンドのスーパーセットになっています。"

#. Tag: para
#: ch04-branching-and-merging.xml:1516
#, no-c-format
msgid "When you run <command>svn update</command>, you're asking the repository to compare two trees. The repository does so, and then sends a description of the differences back to the client. The only difference between <command>svn switch</command> and <command>svn update</command> is that the <literal>update</literal> command always compares two identical paths."
msgstr "<command>svn update</command>を実行するとき、それはリポジトリに対して 二つのツリーを比較するように要求します。リポジトリはその比較を実行 し、クライアントに差分の内容を送信します。 <command>svn switch</command> と <command>svn update</command> の 唯一の違いは <literal>update</literal> コマンドは常に二つの同じパスを比較するという ことです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1524
#, no-c-format
msgid "That is, if your working copy is a mirror of <filename>/calc/trunk</filename>, then <command>svn update</command> will automatically compare your working copy of <filename>/calc/trunk</filename> to <filename>/calc/trunk</filename> in the <literal>HEAD</literal> revision. If you're switching your working copy to a branch, then <command>svn switch</command> will compare your working copy of <filename>/calc/trunk</filename> to some <emphasis>other</emphasis> branch-directory in the <literal>HEAD</literal> revision."
msgstr "つまり、もし作業コピーが <filename>/calc/trunk</filename>のコピーなら <command>svn update</command> は自動的に<filename>/calc/trunk</filename> の作業コピーを <literal>HEAD</literal>リビジョンの<filename>/calc/trunk</filename> と比較 します。もし作業コピーをブランチに移すと、 <command>svn switch</command> は<filename>/calc/trunk</filename> の作業コピーを何か<literal>HEAD</literal>リビジョンの<emphasis>他の</emphasis> ブランチディレクトリと比較します。"

#. Tag: para
#: ch04-branching-and-merging.xml:1536
#, no-c-format
msgid "In other words, an update moves your working copy through time. A switch moves your working copy through time <emphasis>and</emphasis> space."
msgstr "言い換えると、更新は時間の方向に作業コピーを動かします。 switch は作業コピーを時間<emphasis>と</emphasis> 空間の 両方の方向に動かします。"

#. Tag: para
#: ch04-branching-and-merging.xml:1541
#, no-c-format
msgid "Because <command>svn switch</command> is essentially a variant of <command>svn update</command>, it shares the same behaviors; any local modifications in your working copy are preserved when new data arrives from the repository. This allows you to perform all sorts of clever tricks."
msgstr "<command>svn switch</command> は本質的には<command>svn update</command> の変種なので、同じ動作を共有します。作業コピー中のどのようなローカルの 変更もリポジトリから新しいデータが届くときに保存されます。これで あらゆる利口な小技がきくようになります。"

#. Tag: para
#: ch04-branching-and-merging.xml:1547
#, no-c-format
msgid "For example, suppose you have a working copy of <filename>/calc/trunk</filename> and make a number of changes to it. Then you suddenly realize that you meant to make the changes to a branch instead. No problem! When you <command>svn switch</command> your working copy to the branch, the local changes will remain. You can then test and commit them to the branch."
msgstr "たとえば<filename>/calc/trunk</filename> の作業コピーがありそれにいくつか 変更を加えたとします。それから突然、本当はブランチにやる変更だったことに 気づきます。問題ありません。作業コピーを<command>svn switch</command> でブランチにスイッチしても、ローカルの変更はそのまま残ります。で、 それをブランチに対してテストし、コミットすることができます。"

#. Tag: title
#: ch04-branching-and-merging.xml:1562
#, no-c-format
msgid "Tags"
msgstr "タグ"

#. Tag: para
#: ch04-branching-and-merging.xml:1564
#, no-c-format
msgid "Another common version control concept is a <firstterm>tag</firstterm>. A tag is just a <quote>snapshot</quote> of a project in time. In Subversion, this idea already seems to be everywhere. Each repository revision is exactly that&mdash;a snapshot of the filesystem after each commit."
msgstr "別のバージョン管理の概念に、<firstterm>タグ</firstterm>があります。 タグはある時点でのプロジェクトの<quote>スナップショット</quote>です。Subversion ではこのアイディアは既にさまざまな場所にあるように見えます。それぞれ のリポジトリリビジョンはまさにそれです&mdash;つまり、それはコミット直後の ファイルシステムのスナップショットです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1571
#, no-c-format
msgid "However, people often want to give more human-friendly names to tags, like <literal>release-1.0</literal>. And they want to make snapshots of smaller subdirectories of the filesystem. After all, it's not so easy to remember that release-1.0 of a piece of software is a particular subdirectory of revision 4822."
msgstr "しかし、人はしばしばタグに対して人間になじみのある名前を付けたいと 思うものです。たとえば、<quote>release-1.0</quote>のような。また、ファイルシステム のもっと小さなサブディレクトリのスナップショットがほしいこともあります。 結局、あるソフトの一部のrelease-1.0 がリビジョン4822の特定のサブディレクトリ であることを思い出すのは簡単ではありません。"

#. Tag: title
#: ch04-branching-and-merging.xml:1580
#, no-c-format
msgid "Creating a Simple Tag"
msgstr "簡単なタグの作成"

#. Tag: para
#: ch04-branching-and-merging.xml:1582
#, no-c-format
msgid "Once again, <command>svn copy</command> comes to the rescue. If you want to create a snapshot of <filename>/calc/trunk</filename> exactly as it looks in the <literal>HEAD</literal> revision, then make a copy of it:"
msgstr "もう一度、<command>svn copy</command> の助けを借ります。 もし<literal>HEAD</literal>リビジョンの<filename>/calc/trunk</filename> のスナップ ショットを作りたいときには、そのコピーをとればいいのでした:"

#. Tag: screen
#: ch04-branching-and-merging.xml:1587
#, no-c-format
msgid ""
"$ svn copy http://svn.example.com/repos/calc/trunk \\\n"
"           http://svn.example.com/repos/calc/tags/release-1.0 \\\n"
"      -m \"Tagging the 1.0 release of the 'calc' project.\"\n"
"\n"
"Committed revision 351."
msgstr ""
"$ svn copy http://svn.example.com/repos/calc/trunk ¥\n"
"           http://svn.example.com/repos/calc/tags/release-1.0 ¥\n"
"      -m \"Tagging the 1.0 release of the 'calc' project.\"\n"
"\n"
"Committed revision 351."

#. Tag: para
#: ch04-branching-and-merging.xml:1589
#, fuzzy, no-c-format
msgid "This example assumes that a <filename>/calc/tags</filename> directory already exists. (If it doesn't, you can create it using <command>svn mkdir</command>.) After the copy completes, the new <filename>release-1.0</filename> directory is forever a snapshot of how the project looked in the <literal>HEAD</literal> revision at the time you made the copy. Of course you might want to be more precise about exactly which revision you copy, in case somebody else may have committed changes to the project when you weren't looking. So if you know that revision 350 of <filename>/calc/trunk</filename> is exactly the snapshot you want, you can specify it by passing <option>-r 350</option> to the <command>svn copy</command> command."
msgstr "この例では<filename>/calc/tags</filename> ディレクトリが既に 存在しているものとしています。(もしそうでないなら、<xref linkend=\"svn.ref.svn.c.mkdir\"/> を見てください)。 コピー完了後、新しい <filename>release-1.0</filename> ディレクトリは、あなたがコピーした 時点の<literal>HEAD</literal>リビジョンにおいてプロジェクトがどう見えていたかをスナップ ショットとして永遠に残すものです。 もちろん、どのリビジョンをコピーするかについてもっと正確でありたいと 思うかも知れません。他の人があなたが見ていないときにプロジェクトに 対して変更点をコミットしていたかも知れませんから。もしあなたが <filename>/calc/trunk</filename> のリビジョン350が自分のほしいスナップ ショットだと知っていれば<command>svn copy</command> コマンドに <option>-r 350</option>を指定することができます。"

#. Tag: para
#: ch04-branching-and-merging.xml:1604
#, no-c-format
msgid "But wait a moment: isn't this tag-creation procedure the same procedure we used to create a branch? Yes, in fact, it is. In Subversion, there's no difference between a tag and a branch. Both are just ordinary directories that are created by copying. Just as with branches, the only reason a copied directory is a <quote>tag</quote> is because <emphasis>humans</emphasis> have decided to treat it that way: as long as nobody ever commits to the directory, it forever remains a snapshot. If people start committing to it, it becomes a branch."
msgstr "でもちょっと待ってください: このタグ作成の手続きはブランチを作る ために使ってきた手続きと同じじゃないの? 実はその通りです。 Subversion ではタグとブランチには違いはありません。両方とも コピーで作られた普通のディレクトリです。ちょうどブランチのように コピーされたディレクトリが<quote>タグ</quote>であるといわれるのは、単に <emphasis>人間が</emphasis>そうやって扱うことに決めたから、ただ それだけです。そのディレクトリに誰もコミットしない限り、それは 永遠にスナップショットとして残ります。もし誰かがそれにコミット し始めると、それはブランチになります。"

#. Tag: para
#: ch04-branching-and-merging.xml:1615
#, no-c-format
msgid "If you are administering a repository, there are two approaches you can take to managing tags. The first approach is <quote>hands off</quote>: as a matter of project policy, decide where your tags will live, and make sure all users know how to treat the directories they copy in there. (That is, make sure they know not to commit to them.) The second approach is more paranoid: you can use one of the access-control scripts provided with Subversion to prevent anyone from doing anything but creating new copies in the tags-area (See <xref linkend=\"svn.serverconfig\"/>.) The paranoid approach, however, isn't usually necessary. If a user accidentally commits a change to a tag-directory, you can simply undo the change as discussed in the previous section. This is version control, after all."
msgstr "もしリポジトリを管理しているなら、タグを管理するには二通りの 方法があります。最初のアプローチは、<quote>ユーザ任せ</quote>です。 プロジェクトポリシーとして、あなたのタグを置く場所を決め、 すべてのユーザにそのディレクトリをコピーするときにはどうやって扱うか を知らせます。(つまり、みんながそこにコミットしないように約束します) 二番目のやり方はもっとガチガチです。Subversionが提供するアクセス 制御スクリプトのどれかを使って、タグ領域には新しいコピーを 作ることだけができて、それ以外の操作を禁止します。 (<xref linkend=\"svn.serverconfig\"/>を参照してください。) ガチガチ方式は、普通は不要です。もしユーザが間違ってタグディレクトリ に自分の変更をコミットしてしまったら、前の章で説明した方法で その変更を取り消せばいいのですから。結局、Subversionはバージョン 管理システムなのです。"

#. Tag: title
#: ch04-branching-and-merging.xml:1634
#, no-c-format
msgid "Creating a Complex Tag"
msgstr "複雑なタグの作成"

#. Tag: para
#: ch04-branching-and-merging.xml:1636
#, no-c-format
msgid "Sometimes you may want your <quote>snapshot</quote> to be more complicated than a single directory at a single revision."
msgstr "ときどき、一つのリビジョンの一つのディレクトリよりも もっと複雑な<quote>スナップショット</quote>がほしいことがあります。"

#. Tag: para
#: ch04-branching-and-merging.xml:1640
#, no-c-format
msgid "For example, pretend your project is much larger than our <filename>calc</filename> example: suppose it contains a number of subdirectories and many more files. In the course of your work, you may decide that you need to create a working copy that is designed to have specific features and bug fixes. You can accomplish this by selectively backdating files or directories to particular revisions (using <command>svn update -r</command> liberally), or by switching files and directories to particular branches (making use of <command>svn switch</command>). When you're done, your working copy is a hodgepodge of repository locations from different revisions. But after testing, you know it's the precise combination of data you need."
msgstr "たとえば、プロジェクトが私たちの<filename>calc</filename> よりも もっと大きいとします。たくさんのサブディレクトリともっとたくさん のファイルがあるとします。仕事の過程で、特定の機能とバグ修正を含んだ 作業コピーが必要になったと判断します。特定のリビジョンの 以前のファイルとディレクトリを選んで(<command>svn update -r</command> liberally を使って), これを作ることもできますし、 特定のブランチにファイルとディレクトリをスイッチすることによっても できます。 (<command>svn switch</command>を使う) これをやると、あなたと作業コピーは別々のリビジョンからなる別々の リポジトリ位置のつぎはぎになります。しかしテスト後、自分がまさに必要と している組み合わせであることがわかりました。"

#. Tag: para
#: ch04-branching-and-merging.xml:1654
#, fuzzy, no-c-format
msgid "Time to make a snapshot. Copying one URL to another won't work here. In this case, you want to make a snapshot of your exact working copy arrangement and store it in the repository. Luckily, <command>svn copy</command> actually has four different uses (which you can read about in <xref linkend=\"svn.ref\"/>), including the ability to copy a working-copy tree to the repository:"
msgstr "さあスナップショットをとります。一つのURLを作業していない別の 場所にコピーします。この場合、やりたいことは特定の作業コピー状態 で、それをリポジトリに格納したいのです。幸運なことに <command>svn copy</command> は実際には四種類の異なる使い方が あります。(第9章を読んでください)その中には作業コピーツリー をリポジトリにコピーする、というのもあります:"

#. Tag: screen
#: ch04-branching-and-merging.xml:1662
#, no-c-format
msgid ""
"$ ls\n"
"my-working-copy/\n"
"\n"
"$ svn copy my-working-copy http://svn.example.com/repos/calc/tags/mytag\n"
"\n"
"Committed revision 352."
msgstr ""
"$ ls\n"
"my-working-copy/\n"
"\n"
"$ svn copy my-working-copy http://svn.example.com/repos/calc/tags/mytag\n"
"\n"
"Committed revision 352."

#. Tag: para
#: ch04-branching-and-merging.xml:1664
#, no-c-format
msgid "Now there is a new directory in the repository, <filename>/calc/tags/mytag</filename>, which is an exact snapshot of your working copy&mdash;mixed revisions, URLs, and all."
msgstr "これでリポジトリに新しいディレクトリができました。 <filename>/calc/tags/mytag</filename>です。これはあなたの作業コピー の正確なスナップショットです&mdash; 混合リビジョン、URLそして すべてです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1669
#, fuzzy, no-c-format
msgid "Other users have found interesting uses for this feature. Sometimes there are situations where you have a bunch of local changes made to your working copy, and you'd like a collaborator to see them. Instead of running <command>svn diff</command> and sending a patch file (which won't capture tree changes, symlink changes or changes in properties), you can instead use <command>svn copy</command> to <quote>upload</quote> your working copy to a private area of the repository. Your collaborator can then either check out a verbatim copy of your working copy, or use <command>svn merge</command> to receive your exact changes."
msgstr "別のユーザはこの機能の面白い使い方を見つけました。 ときどき、自分の作業コピーにローカルな修正をした ブランチがあるが、それを他のメンバーに見せたいというような 状況です。<command>svn diff</command> を使ってパッチファイル (それはツリーの変更、シンボリックリンクの変更、あるいは属性の変更を取得できません) を送るかわりに、<command>svn copy</command>を使って、作業コピーをリポジトリの プライベートな領域に<quote>アップロード</quote>します。他のメンバーは 作業コピーを新しくチェックアウトするか、<command>svn merge</command> を使って変更点のみを受け取ることができます。"

#. Tag: para
#: ch04-branching-and-merging.xml:1681
#, no-c-format
msgid "While this is a nice method for uploading a quick snapshot of your working copy, note that this is <emphasis>not</emphasis> a good way to initially create a branch. Branch creation should be an event onto itself, and this method conflates the creation of a branch with extra changes to files, all within a single revision. This makes it very difficult (later on) to identify a single revision number as a branch point."
msgstr ""

#. Tag: para
#: ch04-branching-and-merging.xml:1690
#, no-c-format
msgid "Have you ever found yourself making some complex edits (in your <filename>/trunk</filename> working copy) and suddenly realized, <quote>hey, these changes ought to be in their own branch?</quote> A great technique to do this can be summarized in two steps:"
msgstr ""

#. Tag: screen
#: ch04-branching-and-merging.xml:1696
#, fuzzy, no-c-format
msgid ""
"$ svn copy http://svn.example.com/repos/calc/trunk \\\n"
"           http://svn.example.com/repos/calc/branches/newbranch\n"
"Committed revision 353.\n"
"\n"
"$ svn switch http://svn.example.com/repos/calc/branches/newbranch\n"
"At revision 353."
msgstr ""
"$ svn copy http://svn.example.com/repos/calc/trunk ¥\n"
"           http://svn.example.com/repos/calc/branches/my-calc-branch ¥\n"
"      -m \"Creating a private branch of /calc/trunk\"\n"
"\n"
"Committed revision 341."

#. Tag: para
#: ch04-branching-and-merging.xml:1698
#, no-c-format
msgid "The <command>svn switch</command> command, like <command>svn update</command>, preserves your local edits. At this point, your working copy is now a reflection of the newly created branch, and your next <command>svn commit</command> invocation will send your changes there."
msgstr ""

#. Tag: title
#: ch04-branching-and-merging.xml:1713
#, no-c-format
msgid "Branch Maintenance"
msgstr "ブランチの管理"

#. Tag: para
#: ch04-branching-and-merging.xml:1715
#, no-c-format
msgid "You may have noticed by now that Subversion is extremely flexible. Because it implements branches and tags with the same underlying mechanism (directory copies), and because branches and tags appear in normal filesystem space, many people find Subversion intimidating. It's almost <emphasis>too</emphasis> flexible. In this section, we'll offer some suggestions for arranging and managing your data over time."
msgstr "ここまでで、Subversionは非常に柔軟なシステムであることがおわかり いただけたかと思います。ディレクトリのコピーという同じ基本的な 仕組みの上にブランチもタグも実装しており、ブランチもタグも普通の ファイルシステムの空間の中にあるので、多くの人々はSubversionの 仕組みにびっくりします。それは<emphasis>柔軟すぎる</emphasis>くらい です。この節では時間経過と共にどのようにデータを配置し管理するのが 良いかについて、少し説明します。"

#. Tag: title
#: ch04-branching-and-merging.xml:1725
#, no-c-format
msgid "Repository Layout"
msgstr "リポジトリのレイアウト"

#. Tag: para
#: ch04-branching-and-merging.xml:1727
#, no-c-format
msgid "There are some standard, recommended ways to organize a repository. Most people create a <filename>trunk</filename> directory to hold the <quote>main line</quote> of development, a <filename>branches</filename> directory to contain branch copies, and a <filename>tags</filename> directory to contain tag copies. If a repository holds only one project, then often people create these top-level directories:"
msgstr "リポジトリの編成にはある程度、標準化された、おすすめの方法が あります。ほとんどの人々は<filename>trunk</filename>ディレクトリ に開発の<quote>主系</quote>、ブランチのコピーがある<filename>branches</filename> ディレクトリ、そしてタグのコピーがある<filename>tags</filename>ディレクトリ を入れます。リポジトリがただ一つのプロジェクトを含む場合には しばしば、この三つのディレクトリをリポジトリ最上位に作ります:"

#. Tag: screen
#: ch04-branching-and-merging.xml:1735
#, no-c-format
msgid ""
"/trunk\n"
"/branches\n"
"/tags"
msgstr ""
"/trunk\n"
"/branches\n"
"/tags"

#. Tag: para
#: ch04-branching-and-merging.xml:1737
#, no-c-format
msgid "If a repository contains multiple projects, admins typically index their layout by project (see <xref linkend=\"svn.reposadmin.projects.chooselayout\"/> to read more about <quote>project roots</quote>):"
msgstr "リポジトリが複数プロジェクトを含む場合は、プロジェクトごとに レイアウトをインデックス化します (<quote>プロジェクトルート</quote>についての詳細は <xref linkend=\"svn.reposadmin.projects.chooselayout\"/> を読んでください):"

#. Tag: screen
#: ch04-branching-and-merging.xml:1742
#, no-c-format
msgid ""
"/paint/trunk\n"
"/paint/branches\n"
"/paint/tags\n"
"/calc/trunk\n"
"/calc/branches\n"
"/calc/tags"
msgstr ""
"/paint/trunk\n"
"/paint/branches\n"
"/paint/tags\n"
"/calc/trunk\n"
"/calc/branches\n"
"/calc/tags"

#. Tag: para
#: ch04-branching-and-merging.xml:1744
#, no-c-format
msgid "Of course, you're free to ignore these common layouts. You can create any sort of variation, whatever works best for you or your team. Remember that whatever you choose, it's not a permanent commitment. You can reorganize your repository at any time. Because branches and tags are ordinary directories, the <command>svn move</command> command can move or rename them however you wish. Switching from one layout to another is just a matter of issuing a series of server-side moves; if you don't like the way things are organized in the repository, just juggle the directories around."
msgstr "もちろん、この標準的なレイアウトを無視してもかまいません。 あなたと、チームが最も作業しやすいように、このレイアウトは どのように変化させてもかまいません。どれを選んでもそれは 永久に固定されたものではありません。いつでもリポジトリを 再編成することができます。ブランチとタグは普通のディレクトリ にすぎないので<command>svn move</command>コマンドを使えば 好きなように移動、名称変更ができます。あるレイアウトから別の レイアウトへの切り替えは単にサーバ側での何回かの移動の話になります。 もしリポジトリ中の編成に何か気に入らないところがあるなら、ディレクトリ に関連した小技を使ってください。"

#. Tag: para
#: ch04-branching-and-merging.xml:1755
#, no-c-format
msgid "Remember, though, that while moving directories may be easy to do, you need to be considerate of your users as well. Your juggling can be disorienting to users with existing working copies. If a user has a working copy of a particular repository directory, your <command>svn move</command> operation might remove the path from the latest revision. When the user next runs <command>svn update</command>, she will be told that her working copy represents a path that no longer exists, and the user will be forced to <command>svn switch</command> to the new location."
msgstr "しかし、ディレクトリの移動は簡単ではありますが、ユーザのこともよく 考える必要があります。この変更は既にある各自の作業コピーの場所 を再配置します。もしユーザが特定のリポジトリのディレクトリの作業 コピーを持っている場合、あなたの <command>svn move</command>操作 は最新リビジョンのパスを削除してしまうかも知れません。ユーザが 次に<command>svn update</command>を実行すると、作業コピーは すでに存在しないパスを示しているとされ、新しい場所に移動する ために<command>svn switch</command>の実行を強要されてしまう でしょう。"

#. Tag: title
#: ch04-branching-and-merging.xml:1771
#, no-c-format
msgid "Data Lifetimes"
msgstr "データの寿命"

#. Tag: para
#: ch04-branching-and-merging.xml:1773
#, no-c-format
msgid "Another nice feature of Subversion's model is that branches and tags can have finite lifetimes, just like any other versioned item. For example, suppose you eventually finish all your work on your personal branch of the <filename>calc</filename> project. After merging all of your changes back into <filename>/calc/trunk</filename>, there's no need for your private branch directory to stick around anymore:"
msgstr "Subversionモデルの別の良い機能としては他のバージョン 管理されたアイテムと同様、ブランチとタグは有限の種ｴ幔ｽしか持たない ようにもできることです。たとえば<filename>calc</filename>プロジェクト の個人的なブランチ上ですべての作業が完了したとします。すべての 変更を、<filename>/calc/trunk</filename>にマージしたあとでは その個人的なブランチのディレクトリがまったく不要になります:"

#. Tag: screen
#: ch04-branching-and-merging.xml:1782
#, no-c-format
msgid ""
"$ svn delete http://svn.example.com/repos/calc/branches/my-calc-branch \\\n"
"             -m \"Removing obsolete branch of calc project.\"\n"
"\n"
"Committed revision 375."
msgstr ""
"$ svn delete http://svn.example.com/repos/calc/branches/my-calc-branch ¥\n"
"             -m \"Removing obsolete branch of calc project.\"\n"
"\n"
"Committed revision 375."

#. Tag: para
#: ch04-branching-and-merging.xml:1784
#, no-c-format
msgid "And now your branch is gone. Of course it's not really gone: the directory is simply missing from the <literal>HEAD</literal> revision, no longer distracting anyone. If you use <command>svn checkout</command>, <command>svn switch</command>, or <command>svn list</command> to examine an earlier revision, you'll still be able to see your old branch."
msgstr "これでブランチはなくなってしまいました。もちろん本当に削除された わけではありません: ディレクトリは単に <literal>HEAD</literal>リビジョンからなくなった だけで、誰もわずらわせることはなくなりました。 前のバージョンを調べるために<command>svn checkout</command>、 <command>svn switch</command>、あるいは <command>svn list</command> を使えば依然として古いブランチを見ることができます。"

#. Tag: para
#: ch04-branching-and-merging.xml:1792
#, no-c-format
msgid "If browsing your deleted directory isn't enough, you can always bring it back. Resurrecting data is very easy in Subversion. If there's a deleted directory (or file) that you'd like to bring back into <literal>HEAD</literal>, simply use <command>svn copy -r</command> to copy it from the old revision:"
msgstr "削除したディレクトリを閲覧するだけでは不十分な場合は、いつでも 戻すこともできます。データの復活はSubversionではお手のものです。 <literal>HEAD</literal>に戻したい削除ディレクトリ(またはファイル)がある場合は、単に <command>svn copy -r</command> を使って古いリビジョンから コピーしてください:"

#. Tag: screen
#: ch04-branching-and-merging.xml:1799
#, no-c-format
msgid ""
"$ svn copy -r 374 http://svn.example.com/repos/calc/branches/my-calc-branch \\\n"
"                  http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"\n"
"Committed revision 376."
msgstr ""
"$ svn copy -r 374 http://svn.example.com/repos/calc/branches/my-calc-branch ¥\n"
"                  http://svn.example.com/repos/calc/branches/my-calc-branch\n"
"\n"
"Committed revision 376."

#. Tag: para
#: ch04-branching-and-merging.xml:1801
#, no-c-format
msgid "In our example, your personal branch had a relatively short lifetime: you may have created it to fix a bug or implement a new feature. When your task is done, so is the branch. In software development, though, it's also common to have two <quote>main</quote> branches running side-by-side for very long periods. For example, suppose it's time to release a stable version of the <filename>calc</filename> project to the public, and you know it's going to take a couple of months to shake bugs out of the software. You don't want people to add new features to the project, but you don't want to tell all developers to stop programming either. So instead, you create a <quote>stable</quote> branch of the software that won't change much:"
msgstr "私たちの例では個人的なブランチは比較的短い生存時間を持ちます。バグを 直したり新しい機能を追加するのに利用したからです。作業が終われば、 ブランチの種ｴ幔ｽもそこで終わりです。しかし、開発内容によっては 非常に長い時間にわたって二つの<quote>主要な</quote>ブランチが並行して生きつづけることも あります。たとえば、安定版の<filename>calc</filename>プロジェクトを 公にリリースするときがやってきて、そのソフトのバグをとるのには 何ヶ月かかかるとします。リリースバージョンに新しい機能を追加させたくは ありませんが、すべてのメンバーに開発を中止するように言いたくもありま せん。そこでかわりに、あなたはそれほど大きな修正は発生しない <quote>安定版</quote>のブランチを作ります:"

#. Tag: screen
#: ch04-branching-and-merging.xml:1815
#, no-c-format
msgid ""
"$ svn copy http://svn.example.com/repos/calc/trunk \\\n"
"         http://svn.example.com/repos/calc/branches/stable-1.0 \\\n"
"         -m \"Creating stable branch of calc project.\"\n"
"\n"
"Committed revision 377."
msgstr ""
"$ svn copy http://svn.example.com/repos/calc/trunk ¥\n"
"         http://svn.example.com/repos/calc/branches/stable-1.0 ¥\n"
"         -m \"Creating stable branch of calc project.\"\n"
"\n"
"Committed revision 377."

#. Tag: para
#: ch04-branching-and-merging.xml:1817
#, no-c-format
msgid "And now developers are free to continue adding cutting-edge (or experimental) features to <filename>/calc/trunk</filename>, and you can declare a project policy that only bug fixes are to be committed to <filename>/calc/branches/stable-1.0</filename>. That is, as people continue to work on the trunk, a human selectively ports bug fixes over to the stable branch. Even after the stable branch has shipped, you'll probably continue to maintain the branch for a long time&mdash;that is, as long as you continue to support that release for customers."
msgstr "これで開発者は最先端の機能(あるいは実験的な機能)を <filename>/calc/trunk</filename>に追加し続けることが でき、バグフィックスだけを<filename>/calc/branches/stable-1.0</filename> にコミットするようなポリシーで進めることができます。 つまり、メンバーがtrunk上で作業し続けるときに、バグフィックスに ついては安定版ブランチ上に持っていくことができます。安定版ブランチ が出荷されたあとでも、そのブランチを長い時間かけて保守し続ける でしょう&mdash;つまり、顧客に対してそのリリースをサポートし続ける 限り。"

#. Tag: title
#: ch04-branching-and-merging.xml:1837
#, no-c-format
msgid "Vendor branches"
msgstr "ベンダーブランチ"

#. Tag: para
#: ch04-branching-and-merging.xml:1839
#, no-c-format
msgid "As is especially the case when developing software, the data that you maintain under version control is often closely related to, or perhaps dependent upon, someone else's data. Generally, the needs of your project will dictate that you stay as up-to-date as possible with the data provided by that external entity without sacrificing the stability of your own project. This scenario plays itself out all the time&mdash;anywhere that the information generated by one group of people has a direct effect on that which is generated by another group."
msgstr "ソフトウェアを開発する場合が典型的な例ですが、バージョン管理で保守しているデータが しばしば誰かのほかのデータに密接に関係しているか、あるいは依存している ことがあります。一般的にプロジェクトで要求されることは、プロジェクトの 安定性を損なうことなく、外部の資源によって提供されるデータをできる限り 最新に保つことです。この考え方は、あるグループによって作られた情報が もう1つのグループによって作られるものに影響を与える場合、常に成り立ちます。"

#. Tag: para
#: ch04-branching-and-merging.xml:1849
#, no-c-format
msgid "For example, software developers might be working on an application which makes use of a third-party library. Subversion has just such a relationship with the Apache Portable Runtime library (see <xref linkend=\"svn.developer.usingapi.apr\"/>). The Subversion source code depends on the APR library for all its portability needs. In earlier stages of Subversion's development, the project closely tracked APR's changing API, always sticking to the <quote>bleeding edge</quote> of the library's code churn. Now that both APR and Subversion have matured, Subversion attempts to synchronize with APR's library API only at well-tested, stable release points."
msgstr "たとえば、ソフトウェア開発者がサードパーティー製のライブラリを利用する アプリケーションの開発に取り組んでいるとします。SubversionはApache ポータブル 実行時ライブラリと、ちょうどそのような関係を持っています。 (<xref linkend=\"svn.developer.usingapi.apr\"/>参照)。Subversionのソースコードは すべての可搬性の要求を満たすために、APRライブラリに依存しています。 Subversionの開発の初期の段階では、プロジェクトはAPR のAPIの変更を非常に 正確に追いかけていました。常に、ライブラリコードの荒波の、<quote> 最先端</quote>についていきました。いまではAPRもSubversionも開発が落ち着い てきたので、Subversionはよくテストされ、安定したリリース状態にある バージョンのAPRライブラリAPIとのみ同期をとっています。"

#. Tag: para
#: ch04-branching-and-merging.xml:1861
#, no-c-format
msgid "Now, if your project depends on someone else's information, there are several ways that you could attempt to synchronize that information with your own. Most painfully, you could issue oral or written instructions to all the contributors of your project, telling them to make sure that they have the specific versions of that third-party information that your project needs. If the third-party information is maintained in a Subversion repository, you could also use Subversion's externals definitions to effectively <quote>pin down</quote> specific versions of that information to some location in your own working copy directory (see <xref linkend=\"svn.advanced.externals\"/>)."
msgstr "もしプロジェクトが他の人の情報に依存しているなら、その情報と自分の ものとを同期させるためのいくつかの方法があります。 一番大変な方法ですが、自分のプロジェクトのすべての貢献者に対して 口頭または文書で手続きを伝えることができます。プロジェクトに必要な サードパーティーの情報の特定のバージョンを確実に手に入れることを 伝えます。もしサードパーティーの情報がSubversionリポジトリで管理 されているなら、Subversionの外部定義を使ってその情報の特定のバージョンを 作業コピーディレクトリ中のある場所へ効果的に<quote>結びつける</quote>こと ができるでしょう (<xref linkend=\"svn.advanced.externals\"/>参照)。"

#. Tag: para
#: ch04-branching-and-merging.xml:1873
#, no-c-format
msgid "But sometimes you want to maintain custom modifications to third-party data in your own version control system. Returning to the software development example, programmers might need to make modifications to that third-party library for their own purposes. These modifications might include new functionality or bug fixes, maintained internally only until they become part of an official release of the third-party library. Or the changes might never be relayed back to the library maintainers, existing solely as custom tweaks to make the library further suit the needs of the software developers."
msgstr "しかし、ときどき自分のバージョン管理システムでサードパーティーのデータ に加えた独自の変更を管理したいこともあります。ソフトウェア開発の 例に戻って説明すると、プログラマは自分自身の目的のために、サードパーティー のライブラリに変更を加える必要があるかも知れません。このような修正は 新しい機能の追加であったりバグフィックスであったりするかも知れませんが、 それはサードパーティーのライブラリの醐ｷｺ�なリリースの一部になるまでに 限り管理すべきものです。あるいは、変更は決してライブラリ保守担当には 伝えられず、ソフトウェア開発者の特殊な要求に合うようなライブラリを 作り上げるための独自の修正点としてずっと残り続けるかも知れません。"

#. Tag: para
#: ch04-branching-and-merging.xml:1884
#, no-c-format
msgid "Now you face an interesting situation. Your project could house its custom modifications to the third-party data in some disjointed fashion, such as using patch files or full-fledged alternate versions of files and directories. But these quickly become maintenance headaches, requiring some mechanism by which to apply your custom changes to the third-party data, and necessitating regeneration of those changes with each successive version of the third-party data that you track."
msgstr "ここで、面白い状況に直面します。あなたのプロジェクトは、パッチファイルを 適用したりファイルやディレクトリーを完全に別のものに置き換えるような、若干 バラバラな方法でサードパーティーのデータへ独自の修正を加えることができました。 しかし、このようなやり方ではすぐに保守する上で頭痛の種になるので、 あなたの独自の変更をサードパーティーのデータに適用する仕組みが必要となります。 さらにあなたが追跡するサードパーティーのデータのそれぞれの連続したバージョンに それらの変更を再生する仕組みも必要となります。"

#. Tag: para
#: ch04-branching-and-merging.xml:1893
#, no-c-format
msgid "The solution to this problem is to use <firstterm>vendor branches</firstterm>. A vendor branch is a directory tree in your own version control system that contains information provided by a third-party entity, or vendor. Each version of the vendor's data that you decide to absorb into your project is called a <firstterm>vendor drop</firstterm>."
msgstr "この問題に対する解決は、<firstterm>ベンダーブランチ</firstterm>を 使うことです。ベンダーブランチはサードパーティーあるいはベンダー よって提供された情報を含んでいる、こちらのバージョン管理 システム中のディレクトリツリーです。それぞれの バージョンのベンダーのデータで、自分のプロジェクトに取り込もうと 考えているもののことを、<firstterm>ベンダードロップ</firstterm>と いいます。"

#. Tag: para
#: ch04-branching-and-merging.xml:1900
#, fuzzy, no-c-format
msgid "Vendor branches provide two benefits. First, by storing the currently supported vendor drop in your own version control system, the members of your project never need to question whether they have the right version of the vendor's data. They simply receive that correct version as part of their regular working copy updates. Secondly, because the data lives in your own Subversion repository, you can store your custom changes to it in-place&mdash;you have no more need of an automated (or worse, manual) method for swapping in your customizations."
msgstr "ベンダーブランチは二つの鍵となる利点があります。まず、 自分のバージョン管理システムに、現時点でサポートされている ベンダードロップを格納することによって、プロジェクトのメンバーは 正しいバージョンのベンダーデータを使っているかどうかの心配をする 必要がなくなります。彼らはいつもの作業コピーの更新の一環として、 簡単に正しいバージョンを受け取ります。 次に、データは自分たちのSubversionリポジトリに あるので、それに対する独自の修正を決まった場所に格納することができます。&mdash; 自分たちの独自の修正で置き換えるような自動化された(あるいは最悪の 場合、手でやる)方法を用意する必要がなくなります。"

#. Tag: title
#: ch04-branching-and-merging.xml:1912
#, no-c-format
msgid "General Vendor Branch Management Procedure"
msgstr "一般的な、ベンダーブランチを管理する方法"

#. Tag: para
#: ch04-branching-and-merging.xml:1914
#, no-c-format
msgid "Managing vendor branches generally works like this. You create a top-level directory (such as <filename>/vendor</filename>) to hold the vendor branches. Then you import the third party code into a subdirectory of that top-level directory. You then copy that subdirectory into your main development branch (for example, <filename>/trunk</filename>) at the appropriate location. You always make your local changes in the main development branch. With each new release of the code you are tracking you bring it into the vendor branch and merge the changes into <filename>/trunk</filename>, resolving whatever conflicts occur between your local changes and the upstream changes."
msgstr "ベンダーブランチの管理は一般的にはこんな感じでやります。 最上位ディレクトリを作り(<filename>/vendor</filename>のようなもの) そこにベンダーのブランチを置きます。それから最上位ディレクトリの サブディレトクリにサードパーティーのコードをインポートします。 それからそのサブディレトクリを、適当な場所にある、自分の主系開発の ブランチにコピーします(たとえば<filename>/trunk</filename>など)。 ローカルな変更は常に主系開発ブランチに対して行います。 追いかけているコードの新しいリリースのたびに、それをベンダーブランチに 持っていき、変更点を<filename>/trunk</filename>にマージします。そして、 ローカルの変更と、ベンダーの変更の間の衝突を解消します。"

#. Tag: para
#: ch04-branching-and-merging.xml:1928
#, no-c-format
msgid "Perhaps an example will help to clarify this algorithm. We'll use a scenario where your development team is creating a calculator program that links against a third-party complex number arithmetic library, libcomplex. We'll begin with the initial creation of the vendor branch, and the import of the first vendor drop. We'll call our vendor branch directory <filename>libcomplex</filename>, and our code drops will go into a subdirectory of our vendor branch called <filename>current</filename>. And since <command>svn import</command> creates all the intermediate parent directories it needs, we can actually accomplish both of these steps with a single command."
msgstr "多分、例をあげると、このステップをはっきりさせることができるかも 知れません。あなたの開発チームがサードパーティーの複素数値計算 ライブラリ libcomplex を使った計算プログラムを作っているとします。 まず、ベンダーブランチの初期生成をし、それから最初のベンダードロップ をインポートします。ここではベンダーブランチのディレクトリを <filename>libcomplex</filename>と呼び、私たちのコードドロップは <filename>current</filename>と呼ばれる私たちのベンダーブランチの サブディレクトリの中に置かれます。<command>svn import</command>は 必要なすべての中間的な親ディレクトリを作るので、このような複数の ステップを実際には一つのコマンドで実行することができます。"

#. Tag: screen
#: ch04-branching-and-merging.xml:1941
#, no-c-format
msgid ""
"$ svn import /path/to/libcomplex-1.0 \\\n"
"             http://svn.example.com/repos/vendor/libcomplex/current \\\n"
"             -m 'importing initial 1.0 vendor drop'\n"
"&hellip;"
msgstr ""
"$ svn import /path/to/libcomplex-1.0 ¥\n"
"             http://svn.example.com/repos/vendor/libcomplex/current ¥\n"
"             -m 'importing initial 1.0 vendor drop'\n"
"&hellip;"

#. Tag: para
#: ch04-branching-and-merging.xml:1943
#, no-c-format
msgid "We now have the current version of the libcomplex source code in <filename>/vendor/libcomplex/current</filename>. Now, we tag that version (see <xref linkend=\"svn.branchmerge.tags\"/>) and then copy it into the main development branch. Our copy will create a new directory called <filename>libcomplex</filename> in our existing <filename>calc</filename> project directory. It is in this copied version of the vendor data that we will make our customizations."
msgstr "これで、libcomplexのソースコードを<filename>/vendor/libcomplex/current</filename> に持ってくることができました。このバージョンにタグ付けし、 (<xref linkend=\"svn.branchmerge.tags\"/>参照)、主系開発ブランチにコピーしま す。私たちのコピーは既存の<filename>calc</filename>プロジェクトディレクトリ 中の<filename>libcomplex</filename>という新しいディレクトリを作ります。 これが新たに独自の修正を加えるためのベンダーデータのコピーになります。"

#. Tag: screen
#: ch04-branching-and-merging.xml:1953
#, no-c-format
msgid ""
"$ svn copy http://svn.example.com/repos/vendor/libcomplex/current  \\\n"
"           http://svn.example.com/repos/vendor/libcomplex/1.0      \\\n"
"           -m 'tagging libcomplex-1.0'\n"
"&hellip;\n"
"$ svn copy http://svn.example.com/repos/vendor/libcomplex/1.0  \\\n"
"           http://svn.example.com/repos/calc/libcomplex        \\\n"
"           -m 'bringing libcomplex-1.0 into the main branch'\n"
"&hellip;"
msgstr ""
"$ svn copy http://svn.example.com/repos/vendor/libcomplex/current  ¥\n"
"           http://svn.example.com/repos/vendor/libcomplex/1.0      ¥\n"
"           -m 'tagging libcomplex-1.0'\n"
"&hellip;\n"
"$ svn copy http://svn.example.com/repos/vendor/libcomplex/1.0  ¥\n"
"           http://svn.example.com/repos/calc/libcomplex        ¥\n"
"           -m 'bringing libcomplex-1.0 into the main branch'\n"
"&hellip;"

#. Tag: para
#: ch04-branching-and-merging.xml:1955
#, no-c-format
msgid "We check out our project's main branch&mdash;which now includes a copy of the first vendor drop&mdash;and we get to work customizing the libcomplex code. Before we know it, our modified version of libcomplex is now completely integrated into our calculator program."
msgstr "プロジェクトの主系のブランチをチェックアウトします。これは最初の ベンダードロップのコピーを含んでいます&mdash;そして、libcomplex コードの修正に入ります。もう知っているように、これで修正されたlibcomplex は、私たちの計算プログラムに完全に統合されています。"

#. Tag: para
#: ch04-branching-and-merging.xml:1961
#, no-c-format
msgid "And entirely bug-free, of course!"
msgstr "そして、もちろんあなたのことですから、バグも完全になくなっている、と。"

#. Tag: para
#: ch04-branching-and-merging.xml:1965
#, no-c-format
msgid "A few weeks later, the developers of libcomplex release a new version of their library&mdash;version 1.1&mdash;which contains some features and functionality that we really want. We'd like to upgrade to this new version, but without losing the customizations we made to the existing version. What we essentially would like to do is to replace our current baseline version of libcomplex 1.0 with a copy of libcomplex 1.1, and then re-apply the custom modifications we previously made to that library to the new version. But we actually approach the problem from the other direction, applying the changes made to libcomplex between versions 1.0 and 1.1 to our modified copy of it."
msgstr "何週間かたって、libcomplexの開発者はライブラリの新しいバージョンを リリースしました&mdash;バージョン1.1としましょう&mdash;それは われわれがほしかったいくつかの機能と関数を含んでいます。この新しい バージョンにアップグレードしたいものですが、既に手元にあるバージョンに 対する修正を失いたくはありません。既に示唆したように、 本質的にわれわれがやらなくてはならないのは、libcomplex1.1 のコピー でlibcomplex1.0 を置き換え、前にやった独自の修正を、新しいライブラリ のバージョンにも再び適用することです。しかし実際には私たちはこの問題に 対して別の方法で対処したいのですが、それはバージョン1.0 と 1.1 の間 にlibcomplexにおきた変更点を私たちの修正されたコピー上に適用するという ものです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1978
#, fuzzy, no-c-format
msgid "To perform this upgrade, we check out a copy of our vendor branch, and replace the code in the <filename>current</filename> directory with the new libcomplex 1.1 source code. We quite literally copy new files on top of existing files, perhaps exploding the libcomplex 1.1 release tarball atop our existing files and directories. The goal here is to make our <filename>current</filename> directory contain only the libcomplex 1.1 code, and to ensure that all that code is under version control. Oh, and we want to do this with as little version control history disturbance as possible."
msgstr "このアップグレードをやるのに、わたしたちはベンダーブランチのコピー をチェックアウトし、<filename>current</filename>ディレクトリにある ソースコードを、新しい libcomplex 1.1 のソースコードで置き換えます。 文字通り完全に新しいファイルで既存のファイルを上書きしますが、多分 それは既存のファイルやディレクトリの上に libcomplex 1.1 のリリース用 tarball を展開することになるでしょう。ここでの目的は私たちの <filename>current</filename>ディレクトリ中に libcomplex 1.1 のコードの みを含むようにすることであり、同時にすべてのコードをバージョン管理下に あることを保証するということです。あ、もちろんバージョン管理の履歴に 対しての混乱を最小にとどめるような方法でそうしたいのです。"

#. Tag: para
#: ch04-branching-and-merging.xml:1990
#, no-c-format
msgid "After replacing the 1.0 code with 1.1 code, <command>svn status</command> will show files with local modifications as well as, perhaps, some unversioned or missing files. If we did what we were supposed to do, the unversioned files are only those new files introduced in the 1.1 release of libcomplex&mdash;we run <command>svn add</command> on those to get them under version control. The missing files are files that were in 1.0 but not in 1.1, and on those paths we run <command>svn delete</command>. Finally, once our <filename>current</filename> working copy contains only the libcomplex 1.1 code, we commit the changes we made to get it looking that way."
msgstr "1.0 のコードを 1.1 のコードに置き換えた後では、 <command>svn status</command> はローカルな修正を加えたファイルの一覧と バージョン化されていないファイル、あるいは失われたファイルも表示 するでしょう。いままで述べたような手順を実行していたのなら、バージョン 化されていないファイルは libcomplex の 1.1 のリリースで新しく導入され たようなものだけのはずです&mdash;そのようなファイルをバージョン管理下 に置くのに<command>svn add</command>を実行します。失われたファイルは 1.0 では存在していたが、1.1 では存在しないようなものに対応しているので <command>svn delete</command>を実行します。最後に、私たちの <filename>current</filename>作業コピーが libcomplex 1.1 のコードのみ を含むようになれば、いまの変更をコミットして、つじつまを合わせます。"

#. Tag: para
#: ch04-branching-and-merging.xml:2003
#, no-c-format
msgid "Our <filename>current</filename> branch now contains the new vendor drop. We tag the new version (in the same way we previously tagged the version 1.0 vendor drop), and then merge the differences between the tag of the previous version and the new current version into our main development branch."
msgstr "私たちの<filename>current</filename>ブランチはこれで新しい ベンダードロップを含むようになります。新しいバージョンに(バージョン 1.0のベンダードロップに対して前にしたのと同じ方法で)タグづけをして、 それから前のバージョンのタグと新しい現在のバージョンとの間の差分を 私たちの開発ブランチにマージします。"

#. Tag: screen
#: ch04-branching-and-merging.xml:2010
#, no-c-format
msgid ""
"$ cd working-copies/calc\n"
"$ svn merge http://svn.example.com/repos/vendor/libcomplex/1.0      \\\n"
"            http://svn.example.com/repos/vendor/libcomplex/current  \\\n"
"            libcomplex\n"
"&hellip; # resolve all the conflicts between their changes and our changes\n"
"$ svn commit -m 'merging libcomplex-1.1 into the main branch'\n"
"&hellip;"
msgstr ""
"$ cd working-copies/calc\n"
"$ svn merge http://svn.example.com/repos/vendor/libcomplex/1.0      ¥\n"
"            http://svn.example.com/repos/vendor/libcomplex/current  ¥\n"
"            libcomplex\n"
"&hellip; # resolve all the conflicts between their changes and our changes\n"
"$ svn commit -m 'merging libcomplex-1.1 into the main branch'\n"
"&hellip;"

#. Tag: para
#: ch04-branching-and-merging.xml:2012
#, no-c-format
msgid "In the trivial use case, the new version of our third-party tool would look, from a files-and-directories point of view, just like the previous version. None of the libcomplex source files would have been deleted, renamed or moved to different locations&mdash;the new version would contain only textual modifications against the previous one. In a perfect world, our modifications would apply cleanly to the new version of the library, with absolutely no complications or conflicts."
msgstr "簡単な場合だと、この新しいバージョンのサードパーティーツールは、 ファイルとディレクトリの観点から見ると、前のバージョンと同じように 見えます。libcomplex のどのソースファイルも削除されたり名称変更された り別の場所に移動されたりはしません&mdash;新しいバージョンは単に前の ものからテキストの内容の修正を受けただけに見えます。理想的な状況では 私たちの修正は新しいライブラリのバージョンに対してきれいに適用され、 複雑なことや、衝突は一切起きません。"

#. Tag: para
#: ch04-branching-and-merging.xml:2022
#, no-c-format
msgid "But things aren't always that simple, and in fact it is quite common for source files to get moved around between releases of software. This complicates the process of ensuring that our modifications are still valid for the new version of code, and can quickly degrade into a situation where we have to manually recreate our customizations in the new version. Once Subversion knows about the history of a given source file&mdash;including all its previous locations&mdash;the process of merging in the new version of the library is pretty simple. But we are responsible for telling Subversion how the source file layout changed from vendor drop to vendor drop."
msgstr "しかし、ものごとというものは常に単純であるとは限りません。 実際、ソースファイルはソフトウェアのリリース間であちこち 動くのが普通です。これはわたしたちの修正が新しいバージョンのコード でも正しいということを確認する作業を複雑にしますし、新しいバージョン での修正を手でもう一度やる必要がある状況に、簡単に落ち込んでしまう ことがあります。Subversionが、与えられたソースファイルの（以前の位置を含めての） 履歴について知っていればライブラリの新しいバージョンのマージのステップは とても単純になります。しかし、わたしたちは、Subversionに ソースファイルのレイアウトがベンダードロップ間でどんな風に 変わったかを教えてやる責任があります。"

#. Tag: command
#: ch04-branching-and-merging.xml:2044
#, no-c-format
msgid "svn_load_dirs.pl"
msgstr "svn_load_dirs.pl"

#. Tag: para
#: ch04-branching-and-merging.xml:2046
#, no-c-format
msgid "Vendor drops that contain more than a few deletes, additions and moves complicate the process of upgrading to each successive version of the third-party data. So Subversion supplies the <command>svn_load_dirs.pl</command> script to assist with this process. This script automates the importing steps we mentioned in the general vendor branch management procedure to make sure that mistakes are minimized. You will still be responsible for using the merge commands to merge the new versions of the third-party data into your main development branch, but <command>svn_load_dirs.pl</command> can help you more quickly and easily arrive at that stage."
msgstr "いくつかのファイルの削除、追加、移動があったベンダードロップは サードパーティーデータのアップグレードの手順を複雑にします。 それでSubversionはこの手続きを支援するために <command>svn_load_dirs.pl</command>スクリプトを用意しています。 このスクリプトは一般的なベンダーブランチの管理手続きで言ったような インポートのステップを自動化し、間違いを最小にすることができます。 サードパーティーデータの新しいバージョンを主系開発ブランチにマージする ためのマージコマンドを使う責任はまだ残っているものの、 <command>svn_load_dirs.pl</command>はより早く簡単にこの処理まで 到達する助けになります。"

#. Tag: para
#: ch04-branching-and-merging.xml:2059
#, no-c-format
msgid "In short, <command>svn_load_dirs.pl</command> is an enhancement to <command>svn import</command> that has several important characteristics:"
msgstr "簡単に言って、<command>svn_load_dirs.pl</command> は <command>svn import</command> の拡張で、いくつかの重要な 特徴を持っています:"

#. Tag: para
#: ch04-branching-and-merging.xml:2065
#, no-c-format
msgid "It can be run at any point in time to bring an existing directory in the repository to exactly match an external directory, performing all the necessary adds and deletes, and optionally performing moves, too."
msgstr "いつでも、このプログラムを実行して、 リポジトリにあるディレクトリを、完全にそれに一致した外部 ディレクトリに持って行き、必要なすべての追加、削除を実行し、 さらにオプションで移動処理も行います。"

#. Tag: para
#: ch04-branching-and-merging.xml:2071
#, no-c-format
msgid "It takes care of complicated series of operations between which Subversion requires an intermediate commit&mdash;such as before renaming a file or directory twice."
msgstr "このプログラムは、Subversionが必要とする中間的なコミット間で 必要な複雑な一連の処理を注意深く実行します&mdash;たとえば ファイルやディレクトリの名称変更を二回やる前など。"

#. Tag: para
#: ch04-branching-and-merging.xml:2076
#, no-c-format
msgid "It will optionally tag the newly imported directory."
msgstr "それは、オプションで新しいインポートされたディレクトリを タグ付けします。"

#. Tag: para
#: ch04-branching-and-merging.xml:2079
#, no-c-format
msgid "It will optionally add arbitrary properties to files and directories that match a regular expression."
msgstr "それはオプションで、正規表現にマッチするファイルとディレクトリ に任意の属性を追加します。"

#. Tag: para
#: ch04-branching-and-merging.xml:2084
#, no-c-format
msgid "<command>svn_load_dirs.pl</command> takes three mandatory arguments. The first argument is the URL to the base Subversion directory to work in. This argument is followed by the URL&mdash;relative to the first argument&mdash;into which the current vendor drop will be imported. Finally, the third argument is the local directory to import. Using our previous example, a typical run of <command>svn_load_dirs.pl</command> might look like:"
msgstr "<command>svn_load_dirs.pl</command> は三つの必須パラメータを とります。最初の引数は作業対象となるベースになるSubversionディレクトリのURL です。この引数のあとにはURLが続きます&mdash;最初の引数に相対的な 形で&mdash;ベンダードロップはそこにインポートされます。最後に 三番目の引数はインポートするローカルディレクトリです。前の例を 使うと、典型的な<command>svn_load_dirs.pl</command>の実行は こんな感じになります:"

#. Tag: screen
#: ch04-branching-and-merging.xml:2093
#, no-c-format
msgid ""
"$ svn_load_dirs.pl http://svn.example.com/repos/vendor/libcomplex \\\n"
"                   current                                        \\\n"
"                   /path/to/libcomplex-1.1\n"
"&hellip;"
msgstr ""
"$ svn_load_dirs.pl http://svn.example.com/repos/vendor/libcomplex ¥\n"
"                   current                                        ¥\n"
"                   /path/to/libcomplex-1.1\n"
"&hellip;"

#. Tag: para
#: ch04-branching-and-merging.xml:2095
#, no-c-format
msgid "You can indicate that you'd like <command>svn_load_dirs.pl</command> to tag the new vendor drop by passing the <option>-t</option> command-line option and specifying a tag name. This tag is another URL relative to the first program argument."
msgstr "<option>-t</option> オプションにタグ名称を指定して、新しいベンダードロップ をタグ付けするように<command>svn_load_dirs.pl</command> に指示することが できます。"

#. Tag: screen
#: ch04-branching-and-merging.xml:2101
#, no-c-format
msgid ""
"$ svn_load_dirs.pl -t libcomplex-1.1                              \\\n"
"                   http://svn.example.com/repos/vendor/libcomplex \\\n"
"                   current                                        \\\n"
"                   /path/to/libcomplex-1.1\n"
"&hellip;"
msgstr ""
"$ svn_load_dirs.pl -t libcomplex-1.1                              ¥\n"
"                   http://svn.example.com/repos/vendor/libcomplex ¥\n"
"                   current                                        ¥\n"
"                   /path/to/libcomplex-1.1\n"
"&hellip;"

#. Tag: para
#: ch04-branching-and-merging.xml:2103
#, fuzzy, no-c-format
msgid "When you run <command>svn_load_dirs.pl</command>, it examines the contents of your existing <quote>current</quote> vendor drop, and compares them with the proposed new vendor drop. In the trivial case, there will be no files that are in one version and not the other, and the script will perform the new import without incident. If, however, there are discrepancies in the file layouts between versions, <command>svn_load_dirs.pl</command> will ask you how to resolve those differences. For example, you will have the opportunity to tell the script that you know that the file <filename>math.c</filename> in version 1.0 of libcomplex was renamed to <filename>arithmetic.c</filename> in libcomplex 1.1. Any discrepancies not explained by moves are treated as regular additions and deletions."
msgstr "<command>svn_load_dirs.pl</command>を実行するとき、それは 既に存在している<quote>現在の</quote>ベンダードロップの内容を調べて それを指定された新しいベンダードロップの内容と比較します。 簡単な場合、片方のバージョンにあってもう一方にはないようなファイル はなく、スクリプトは新しいインポートを特に問題なく実行します。 しかし、もし、バージョン間でファイルレイアウトに違いがある場合、 <command>svn_load_dirs.pl</command> はこの違いをどうやって解決するか たずねてきます。たとえば、libcomplexのバージョン1.0で<filename>math.c</filename> だったファイルはlibcomplex1.1では<filename>arithmetic.c</filename> に 名称変更になったことを知っていることをスクリプトに教えてやることが できます。移動によって説明できないような相違点は、通常の 追加と削除として扱われます。"

#. Tag: para
#: ch04-branching-and-merging.xml:2118
#, no-c-format
msgid "The script also accepts a separate configuration file for setting properties on files and directories matching a regular expression that are <emphasis>added</emphasis> to the repository. This configuration file is specified to <command>svn_load_dirs.pl</command> using the <option>-p</option> command-line option. Each line of the configuration file is a whitespace-delimited set of two or four values: a Perl-style regular expression to match the added path against, a control keyword (either <literal>break</literal> or <literal>cont</literal>), and then optionally a property name and value."
msgstr "このスクリプトはまたリポジトリに<emphasis>追加される</emphasis> （正規表現にマッチするような）ファイルとディレクトリの属性を設定する ために、別の設定ファイルを受け付けることができます。 この設定ファイルは<command>svn_load_dirs.pl</command> で <option>-p</option> オプションを使って指定されます。 設定ファイルの各行は空白で区切られた二つまたは四つの値です: 追加されるパスに対してマッチさせるPerlスタイルの正規表現、 制御キーワード(<literal>break</literal> または <literal>cont</literal>)、そして、オプションで属性名と 属性値がきます。"

#. Tag: screen
#: ch04-branching-and-merging.xml:2130
#, no-c-format
msgid ""
"\\.png$              break   svn:mime-type   image/png\n"
"\\.jpe?g$            break   svn:mime-type   image/jpeg\n"
"\\.m3u$              cont    svn:mime-type   audio/x-mpegurl\n"
"\\.m3u$              break   svn:eol-style   LF\n"
".*                  break   svn:eol-style   native"
msgstr ""
"¥.png$              break   svn:mime-type   image/png\n"
"¥.jpe?g$            break   svn:mime-type   image/jpeg\n"
"¥.m3u$              cont    svn:mime-type   audio/x-mpegurl\n"
"¥.m3u$              break   svn:eol-style   LF\n"
".*                  break   svn:eol-style   native"

#. Tag: para
#: ch04-branching-and-merging.xml:2132
#, no-c-format
msgid "For each added path, the configured property changes whose regular expression matches the path are applied in order, unless the control specification is <literal>break</literal> (which means that no more property changes should be applied to that path). If the control specification is <literal>cont</literal>&mdash;an abbreviation for <literal>continue</literal>&mdash;then matching will continue with the next line of the configuration file."
msgstr "追加されるパスが正規表現にマッチしたとき、その行の属性 がマッチしたパスに追加されていきます。ただし制御の指定が<literal>break</literal> の場合は属性の追加はその行で打ち止めになります(これはそれ以上の属性変更はこのパスに 行わないことを意味しています)。もし制御指定が<literal>cont</literal> &mdash;<literal>continue</literal>の省略形ですが&mdash;の場合は マッチング処理は設定ファイルの次の行に続いていきます。"

#. Tag: para
#: ch04-branching-and-merging.xml:2141
#, no-c-format
msgid "Any whitespace in the regular expression, property name, or property value must be surrounded by either single or double quote characters. You can escape quote characters that are not used for wrapping whitespace by preceding them with a backslash (<literal>\\</literal>) character. The backslash escapes only quotes when parsing the configuration file, so do not protect any other characters beyond what is necessary for the regular expression."
msgstr "正規表現中のすべての空白、属性名、属性値はシングルまたはダブルクオート でくくる必要があります。空白を囲むために利用しているわけではない クオート文字はバックスラッシュ文字(<literal>¥</literal>) を前に付ける ことでエスケープできます。バックスラッシュは設定ファイルを解析するとき だけクオートするので、正規表現中で必要なもの以外のほかの文字には 使わないでください。"

#. Tag: para
#: ch04-branching-and-merging.xml:2159
#, no-c-format
msgid "We've covered a lot of ground in this chapter. We've discussed the concepts of tags and branches, and demonstrated how Subversion implements these concepts by copying directories with the <command>svn copy</command> command. We've shown how to use <command>svn merge</command> to copy changes from one branch to another, or roll back bad changes. We've gone over the use of <command>svn switch</command> to create mixed-location working copies. And we've talked about how one might manage the organization and lifetimes of branches in a repository."
msgstr "この章では、いろいろな基本に触れました。タグとブランチの概念を議論し、 Subversionが<command>svn copy</command>でディレクトリをコピーする ことによってこれらの概念を実装していることを説明しました。 <command>svn merge</command>であるブランチから別のブランチに変更点 をコピーしたり、間違った変更を戻したりする方法をお見せしました。 <command>svn switch</command>を使って、混合状態の作業コピーを 作ってみせました。そして、どのようにしてリポジトリ内のブランチの 編成と種ｴ幔ｽを管理するかについて話しました。"

#. Tag: para
#: ch04-branching-and-merging.xml:2170
#, no-c-format
msgid "Remember the Subversion mantra: branches and tags are cheap. So use them liberally! At the same time, don't forget to use good merging habits. Cheap copies are only useful when you're careful about tracking your merging actions."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:2
#, no-c-format
msgid "Repository Administration"
msgstr "リポジトリの管理"

#. Tag: para
#: ch05-repository-admin.xml:4
#, fuzzy, no-c-format
msgid "The Subversion repository is the central storehouse of all your versioned data. As such, it becomes an obvious candidate for all the love and attention an administrator can offer. While the repository is generally a low-maintenance item, it is important to understand how to properly configure and care for it so that potential problems are avoided, and actual problems are safely resolved."
msgstr "Subversionのリポジトリは複数のプロジェクトのためのバージョン管理 されたデータを格納する中心的な場所です。こんなわけで、リポジトリは 管理する人間にとってはたまらない魅力のある場所になるかも知れません。 リポジトリは一般的にはそれほど複雑な管理が必要なものではありません が、正しく設定し、潜在的な問題を避け、実際に起こる問題を安全に解決する ためにはどうすれば良いかを理解することは重要です。"

#. Tag: para
#: ch05-repository-admin.xml:12
#, fuzzy, no-c-format
msgid "In this chapter, we'll discuss how to create and configure a Subversion repository. We'll also talk about repository maintenance, providing examples of how and when to use the <command>svnlook</command> and <command>svnadmin</command> tools provided with Subversion. We'll address some common questions and mistakes, and give some suggestions on how to arrange the data in the repository."
msgstr "この章では、Subversionのリポジトリをどうやって作成し設定するかについて 議論します。リポジトリ管理についても述べますが、 これには <command>svnlook</command>と <command>svnadmin</command> (この二つはSubversionが提供するツールです)の利用も含まれています。 よくある質問と間違いをとりあげ、リポジトリ中でどのようにデータを 配置するのか良いかについてアドバイスします。"

#. Tag: para
#: ch05-repository-admin.xml:20
#, fuzzy, no-c-format
msgid "If you plan to access a Subversion repository only in the role of a user whose data is under version control (that is, via a Subversion client), you can skip this chapter altogether. However, if you are, or wish to become, a Subversion repository administrator, <footnote> <para>This may sound really prestigious and lofty, but we're just talking about anyone who is interested in that mysterious realm beyond the working copy where everyone's data hangs out.</para> </footnote> this chapter is for you."
msgstr "もし、Subversionのリポジトリのバージョン管理下にあるデータに ユーザとしてアクセスするだけなら、(つまり、Subversionのクライアント としてだけ利用するなら)この章は読み飛ばすことができます。しかし、 Subversionのリポジトリ管理者か、そうなろうと思っている人は <footnote> <para> こう書くと、なんだかとても高尚なことのように思えますが、 みんなのデータがある作業コピーの背後で起きている神秘の領域に 興味を持つ人なら、誰でも、という意味です。 </para> </footnote> この章に特別の注意を払ってください。"

#. Tag: title
#: ch05-repository-admin.xml:38
#, fuzzy, no-c-format
msgid "The Subversion Repository, Defined"
msgstr "Subversion リポジトリの URL"

#. Tag: para
#: ch05-repository-admin.xml:40
#, fuzzy, no-c-format
msgid "Before jumping into the broader topic of repository administration, let's further define what a repository is. How does it look? How does it feel? Does it take its tea hot or iced, sweetened, and with lemon? As an administrator, you'll be expected to understand the composition of a repository both from a literal, OS-level perspective&mdash;how a repository looks and acts with respect to non-Subversion tools&mdash;and from a logical perspective&mdash;dealing with how data is represented <emphasis>inside</emphasis> the repository."
msgstr "リポジトリ管理についての広範囲な話題に飛び込む前に、リポジト リとはいったい何であるかをもう少し突っ込んで定義しておきましょう。それ はどんな風に見えるのでしょうか? いったいどんなコなんでしょう? 飲み物の好みは? ホット? アイス? 砂糖はいくつ? レモンは? 管理者としては、論理的な見え方 &mdash;つまり、リポジトリ内でデータがどのように表現されているか&mdash; から物理的な細部に到るまで&mdash;つまり Subversion 以外のツールから リポジトリはどう見え、どう振舞うか&mdash;の両方について理解している ことが期待されます。以下の節は非常に高レベルの基本的な概念のいくつか について説明します。"

#. Tag: para
#: ch05-repository-admin.xml:50
#, no-c-format
msgid "Seen through the eyes of a typical file browser application (such as the Windows Explorer) or command-line based filesystem navigation tools, the Subversion repository is just another directory full of stuff. There are some subdirectories with human-readable configuration files in them, some subdirectories with some not-so-human-readable data files, and so on. As in other areas of the Subversion design, modularity is given high regard, and hierarchical organization is preferred to cluttered chaos. So a shallow glance into a typical repository from a nuts-and-bolts perspective is sufficient to reveal the basic components of the repository:"
msgstr ""

#. Tag: screen
#: ch05-repository-admin.xml:62
#, no-c-format
msgid ""
"$ ls repos\n"
"conf/  dav/  db/  format  hooks/  locks/  README.txt"
msgstr ""
"$ ls repos\n"
"conf/  dav/  db/  format  hooks/  locks/  README.txt"

#. Tag: para
#: ch05-repository-admin.xml:64
#, no-c-format
msgid "Here's a quick fly-by overview of what exactly you're seeing in this directory listing. (Don't get bogged down in the terminology&mdash;detailed coverage of these components exists elsewhere in this and other chapters.)"
msgstr ""

#. Tag: term
#: ch05-repository-admin.xml:71
#, no-c-format
msgid "conf"
msgstr "conf"

#. Tag: para
#: ch05-repository-admin.xml:73
#, no-c-format
msgid "A directory containing repository configuration files."
msgstr "リポジトリ設定ファイルのあるディレクトリです。"

#. Tag: term
#: ch05-repository-admin.xml:77
#, no-c-format
msgid "<term>dav</term>"
msgstr "<term>dav</term>"

#. Tag: para
#: ch05-repository-admin.xml:79
#, fuzzy, no-c-format
msgid "A directory provided to mod_dav_svn for its private housekeeping data."
msgstr "Apacheと、内部データ管理用 mod_dav_svn の ためのディレクトリです。"

#. Tag: term
#: ch05-repository-admin.xml:84
#, no-c-format
msgid "<term>db</term>"
msgstr "<term>db</term>"

#. Tag: para
#: ch05-repository-admin.xml:86
#, no-c-format
msgid "The data store for all of your versioned data."
msgstr ""

#. Tag: term
#: ch05-repository-admin.xml:90
#, no-c-format
msgid "format"
msgstr "format"

#. Tag: para
#: ch05-repository-admin.xml:92
#, fuzzy, no-c-format
msgid "A file that contains a single integer that indicates the version number of the repository layout."
msgstr "一つの整数値が書いてあるファイルで、この整数はリポジトリレイアウトの バージョン番号になります。"

#. Tag: para
#: ch05-repository-admin.xml:99
#, no-c-format
msgid "A directory full of hook script templates (and hook scripts themselves, once you've installed some)."
msgstr "フックスクリプトテンプレート全体が格納されたディレクトリです (また、インストールされたフックスクリプト自身も)。"

#. Tag: term
#: ch05-repository-admin.xml:104
#, no-c-format
msgid "locks"
msgstr "locks"

#. Tag: para
#: ch05-repository-admin.xml:106
#, fuzzy, no-c-format
msgid "A directory for Subversion's repository lock files, used for tracking accessors to the repository."
msgstr "Subversionリポジトリのロックされたデータのためのディレクトリで リポジトリにアクセスしている人を記録するのに使われます。"

#. Tag: term
#: ch05-repository-admin.xml:111
#, no-c-format
msgid "README.txt"
msgstr "README.txt"

#. Tag: para
#: ch05-repository-admin.xml:113
#, fuzzy, no-c-format
msgid "A file whose contents merely inform its readers that they are looking at a Subversion repository."
msgstr "Subversionリポジトリを見る人のための情報が書かれている だけのファイルです。"

#. Tag: para
#: ch05-repository-admin.xml:119
#, no-c-format
msgid "Of course, when accessed via the Subversion libraries, this otherwise unremarkable collection of files and directories suddenly becomes an implementation of a virtual, versioned filesystem, complete with customizable event triggers. This filesystem has its own notions of directories and files, very similar to the notions of such things held by real filesystems (such as NTFS, FAT32, ext3, and so on). But this is a special filesystem&mdash;it hangs these directories and files from revisions, keeping all the changes you've ever made to them safely stored and forever accessible. This is where the entirety of your versioned data lives."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:137
#, fuzzy, no-c-format
msgid "Strategies for Repository Deployment"
msgstr "リポジトリレイアウトの開始"

#. Tag: para
#: ch05-repository-admin.xml:139
#, no-c-format
msgid "Due largely to the simplicity of the overall design of the Subversion repository and the technologies on which it relies, creating and configuring a repository are fairly straightforward tasks. There are a few preliminary decisions you'll want to make, but the actual work involved in any given setup of a Subversion repository is pretty straightforward, tending towards mindless repetition if you find yourself setting up multiples of these things."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:148
#, no-c-format
msgid "Some things you'll want to consider up front, though, are:"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:152
#, no-c-format
msgid "What data do you expect to live in your repository (or repositories), and how will that data be organized?"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:156
#, no-c-format
msgid "Where will your repository live, and how will it be accessed?"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:160
#, no-c-format
msgid "What types of access control and repository event reporting do you need?"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:164
#, no-c-format
msgid "Which of the available types of data store do you want to use?"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:169
#, fuzzy, no-c-format
msgid "In this section, we'll try to help you answer those questions."
msgstr "次の節ではこの技法の例を実際にお見せします。"

#. Tag: title
#: ch05-repository-admin.xml:174
#, no-c-format
msgid "Planning Your Repository Organization"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:176
#, fuzzy, no-c-format
msgid "While Subversion allows you to move around versioned files and directories without any loss of information, and even provides ways of moving whole sets of versioned history from one repository to another, doing so can greatly disrupt the workflow of those who access the repository often and come to expect things to be at certain locations. So before creating a new repository, try to peer into the future a bit; plan ahead before placing your data under version control. By conscientiously <quote>laying out</quote> your repository or repositories and their versioned contents ahead of time, you can prevent many future headaches."
msgstr "Subversionを使うと、あなたは情報を失うことなしにバージョン化されたファイルや ディレクトリをあちこちに移動することができますが、そうすることは、 データが特定の場所にあることを期待している、ときどきリポジトリにアクセス する人たちの作業を中断させてしまうかも知れません。先のこともちょっとは 考えてください。バージョン管理下にデータを置く前に、前もって計画を たててください。リポジトリの内容を、最初にうまく<quote>レイアウト</quote> しておけば、あとで頭を抱えることがなくなります。"

#. Tag: para
#: ch05-repository-admin.xml:188
#, fuzzy, no-c-format
msgid "Let's assume that as repository administrator, you will be responsible for supporting the version control system for several projects. Your first decision is whether to use a single repository for multiple projects, or to give each project its own repository, or some compromise of these two."
msgstr "Subversionリポジトリを設定するときに考えておくと良いことがいくつか あります。あなたが、リポジトリ管理者としていくつかのプロジェクトのバージョン 管理システムのサポート責任者になったとしましょう。最初の判断は 複数プロジェクトに対して一つのリポジトリを使うか、プロジェクトごとに リポジトリを用意するか、その両者の折衷案でいくかです。"

#. Tag: para
#: ch05-repository-admin.xml:195
#, fuzzy, no-c-format
msgid "There are benefits to using a single repository for multiple projects, most obviously the lack of duplicated maintenance. A single repository means that there is one set of hook programs, one thing to routinely backup, one thing to dump and load if Subversion releases an incompatible new version, and so on. Also, you can move data between projects easily, and without losing any historical versioning information."
msgstr "複数プロジェクトのために一つのリポジトリを使うことにはいくつか 利点があまりす。一番はっきりしているのは、重複した保守作業が不要だと いうことです。一つのリポジトリは、一組のフックスクリプト、一つの 定期バックアップ、Subversionのリリースが両立不可能な新しいバージョンに なったときの、一回のダンプとロード、しか必要ありません。 また、プロジェクト間のデータ移動は簡単ですし、履歴バージョン情報を 失うことなしにやることができます。"

#. Tag: para
#: ch05-repository-admin.xml:204
#, fuzzy, no-c-format
msgid "The downside of using a single repository is that different projects may have different requirements in terms of the repository event triggers, such as needing to send commit notification emails to different mailing lists, or having different definitions about what does and does not constitute a legitimate commit. These aren't insurmountable problems, of course&mdash;it just means that all of your hook scripts have to be sensitive to the layout of your repository rather than assuming that the whole repository is associated with a single group of people. Also, remember that Subversion uses repository-global revision numbers. While those numbers don't have any particular magical powers, some folks still don't like the fact that even though no changes have been made to their project lately, the youngest revision number for the repository keeps climbing because other projects are actively adding new revisions."
msgstr "一つのリポジトリを使うデメリットは、異なるプロジェクトは異なる コミットメーリングリストを持っていたり、異なる認証、許可などが 必要であるかも知れないことです。 また、Subversionはリポジトリグローバルなリビジョン番号を使っている ことに注意してください。人によっては、変更が自分のプロジェクトに 何もないのに、他のプロジェクトが活発に新しいリビジョンを追加する ことによって、最新リビジョン番号がカウントアップされていくのが 好きではないかも知れません。"

#. Tag: para
#: ch05-repository-admin.xml:221
#, no-c-format
msgid "Whether founded in ignorance or in poorly considered concepts about how to derive legitimate software development metrics, global revision numbers are a silly thing to fear, and <emphasis>not</emphasis> the kind of thing you should weigh when deciding how to arrange your projects and repositories."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:230
#, no-c-format
msgid "A middle-ground approach can be taken, too. For example, projects can be grouped by how well they relate to each other. You might have a few repositories with a handful of projects in each repository. That way, projects that are likely to want to share data can do so easily, and as new revisions are added to the repository, at least the developers know that those new revisions are at least remotely related to everyone who uses that repository."
msgstr "折衷策をとることもできます。たとえば、お互いに どの程度深く関係しているかによってプロジェクトをグループ化する ことができます。それぞれのリポジトリにいくつかのプロジェクトを持たせる ことで、少ない数のリポジトリを管理することもできます。この方法では データを共有したいプロジェクトは簡単にそうすることができますし、 新しいリビジョンがリポジトリに追加されると、開発者は そのような新しいリビジョンは、自分のプロジェクトか、少なくともそれに 関係しているプロジェクトの誰かがやったものだということがわかります。"

#. Tag: para
#: ch05-repository-admin.xml:239
#, fuzzy, no-c-format
msgid "After deciding how to organize your projects with respect to repositories, you'll probably want to think about directory hierarchies within the repositories themselves. Because Subversion uses regular directory copies for branching and tagging (see <xref linkend=\"svn.branchmerge\"/>), the Subversion community recommends that you choose a repository location for each <firstterm>project root</firstterm>&mdash;the <quote>top-most</quote> directory which contains data related to that project&mdash;and then create three subdirectories beneath that root: <filename>trunk</filename>, meaning the directory under which the main project development occurs; <filename>branches</filename>, which is a directory in which to create various named branches of the main development line; <filename>tags</filename>, which is a collection of tree snapshots that are created, and perhaps destroyed, but never changed."
msgstr "リポジトリに関係してどのようにプロジェクトを編成するかを決めたあとは 多分、リポジトリ自身のディレクトリ構成を考えたいと思うでしょう。 Subversionは普通のディレクトリコピーをブランチ化にもタグ付けにも 使うので(<xref linkend=\"svn.branchmerge\"/>参照)、Subversionのコミュニティ では、以下のようなディレクトリ構成を推奨しています; <firstterm>プロジェクトルート</firstterm>&mdash;プロジェクトに関連 したデータのある<quote>最上位</quote>ディレクトリのこと&mdash;ごとに リポジトリの場所を選択します; 次いでそのルートの 下に三つのサブディレクトリを作ります: <filename>trunk</filename> これはプロジェクトの主な開発が行われるディレクトリです; <filename>branches</filename> これは主な開発ラインから分岐したさまざまな名前の付いたブランチを作る ための場所です; <filename>tags</filename>これは作成され、削除される かも知れませんが、決して修正はされないようなブランチを入れるための ディレクトリです。"

#. Tag: para
#: ch05-repository-admin.xml:257
#, no-c-format
msgid "The <filename>trunk</filename>, <filename>tags</filename>, and <filename>branches</filename> trio are sometimes referred to as <quote>the TTB directories</quote>."
msgstr "<filename>trunk</filename>, <filename>tags</filename>, <filename>branches</filename> の三つのファイルの全体を <quote>TTB ディレクトリ</quote> と呼ぶことがあります。"

#. Tag: para
#: ch05-repository-admin.xml:263
#, no-c-format
msgid "For example, your repository might look like:"
msgstr "たとえば、リポジトリが以下のようであるとして:"

#. Tag: screen
#: ch05-repository-admin.xml:265
#, no-c-format
msgid ""
"/\n"
"   calc/\n"
"      trunk/\n"
"      tags/\n"
"      branches/\n"
"   calendar/\n"
"      trunk/\n"
"      tags/\n"
"      branches/\n"
"   spreadsheet/\n"
"      trunk/\n"
"      tags/\n"
"      branches/\n"
"   &hellip;"
msgstr ""
"/\n"
"   calc/\n"
"      trunk/\n"
"      tags/\n"
"      branches/\n"
"   calendar/\n"
"      trunk/\n"
"      tags/\n"
"      branches/\n"
"   spreadsheet/\n"
"      trunk/\n"
"      tags/\n"
"      branches/\n"
"   &hellip;"

#. Tag: para
#: ch05-repository-admin.xml:267
#, no-c-format
msgid "Note that it doesn't matter where in your repository each project root is. If you have only one project per repository, the logical place to put each project root is at the root of that project's respective repository. If you have multiple projects, you might want to arrange them in groups inside the repository, perhaps putting projects with similar goals or shared code in the same subdirectory, or maybe just grouping them alphabetically. Such an arrangement might look like:"
msgstr "それぞれのプロジェクトルートがリポジトリ中のどこにあるかは問題には なりません。もしリポジトリに唯一のプロジェクトがある場合は それぞれのプロジェクトルートを置くための論理的な場所はプロジェクト ごとのリポジトリのルートになります。もし複数のプロジェクトが ある場合は、リポジトリ内部のグループ中にそれを配置したいかも知れません、 おそらく同じサブディレクトリ中の似たような目標や共有するコードと 一緒にプロジェクトを置くか、あるいは名前の辞書順にグループ化するか、 などです。配置は以下のようになるでしょう:"

#. Tag: screen
#: ch05-repository-admin.xml:277
#, no-c-format
msgid ""
"/\n"
"   utils/\n"
"      calc/\n"
"         trunk/\n"
"         tags/\n"
"         branches/\n"
"      calendar/\n"
"         trunk/\n"
"         tags/\n"
"         branches/\n"
"      &hellip;\n"
"   office/\n"
"      spreadsheet/\n"
"         trunk/\n"
"         tags/\n"
"         branches/\n"
"      &hellip;"
msgstr ""
"/\n"
"   utils/\n"
"      calc/\n"
"         trunk/\n"
"         tags/\n"
"         branches/\n"
"      calendar/\n"
"         trunk/\n"
"         tags/\n"
"         branches/\n"
"      &hellip;\n"
"   office/\n"
"      spreadsheet/\n"
"         trunk/\n"
"         tags/\n"
"         branches/\n"
"      &hellip;"

#. Tag: para
#: ch05-repository-admin.xml:279
#, fuzzy, no-c-format
msgid "Lay out your repository in whatever way you see fit. Subversion does not expect or enforce a particular layout&mdash;in its eyes, a directory is a directory is a directory. Ultimately, you should choose the repository arrangement that meets the needs of the people who work on the projects that live there."
msgstr "良いと思われる方法でリポジトリをレイアウトしてください。 Subversionはレイアウトの構成について何も仮定しません&mdash; Subversionは、ディレクトリであってディレクトリ以外の何者でも ありません。結局、リポジトリのレイアウトは、それを利用する人々の 必要に応じたふさわしい方法を選んでください。"

#. Tag: para
#: ch05-repository-admin.xml:286
#, no-c-format
msgid "In the name of full disclosure, though, we'll mention another very common layout. In this layout, the <filename>trunk</filename>, <filename>tags</filename>, and <filename>branches</filename> directories live in the root directory of your repository, and your projects are in subdirectories beneath those, like:"
msgstr ""

#. Tag: screen
#: ch05-repository-admin.xml:293
#, fuzzy, no-c-format
msgid ""
"/\n"
"   trunk/\n"
"      calc/\n"
"      calendar/\n"
"      spreadsheet/\n"
"      &hellip;\n"
"   tags/\n"
"      calc/\n"
"      calendar/\n"
"      spreadsheet/\n"
"      &hellip;\n"
"   branches/\n"
"      calc/\n"
"      calendar/\n"
"      spreadsheet/\n"
"      &hellip;"
msgstr ""
"/\n"
"   utils/\n"
"      calc/\n"
"         trunk/\n"
"         tags/\n"
"         branches/\n"
"      calendar/\n"
"         trunk/\n"
"         tags/\n"
"         branches/\n"
"      &hellip;\n"
"   office/\n"
"      spreadsheet/\n"
"         trunk/\n"
"         tags/\n"
"         branches/\n"
"      &hellip;"

#. Tag: para
#: ch05-repository-admin.xml:295
#, no-c-format
msgid "There's nothing particularly incorrect about such a layout, but it may or may not seem as intuitive for your users. Especially in large, multi-project situations with many users, those users may tend to be familiar with only one or two of the projects in the repository. But the projects-as-branch-siblings tends to de-emphasize project individuality and focus on the entire set of projects as a single entity. That's a social issue though. We like our originally suggested arrangement for purely practical reasons&mdash;it's easier to ask about (or modify, or migrate elsewhere) the entire history of a single project when there's a single repository path that holds the entire history&mdash;past, present, tagged, and branched&mdash;for that project and that project alone."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:314
#, no-c-format
msgid "Deciding Where and How to Host Your Repository"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:316
#, no-c-format
msgid "Before creating your Subversion repository, an obvious question you'll need to answer is where the thing is going to live. This is strongly connected to a myriad of other questions involving how the repository will be accessed (via a Subversion server or directly), by whom (users behind your corporate firewall or the whole world out on the open Internet), what other services you'll be providing around Subversion (repository browsing interfaces, e-mail based commit notification, etc.), your data backup strategy, and so on."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:327
#, no-c-format
msgid "We cover server choice and configuration in <xref linkend=\"svn.serverconfig\"/>, but the point we'd like to briefly make here is simply that the answers to some of these other questions might have implications that force your hand when deciding where your repository will live. For example, certain deployment scenarios might require accessing the repository via a remote filesystem from multiple computers, in which case (as you'll read in the next section) your choice of a repository back-end data store turns out not to be a choice at all because only one of the available back-ends will work in this scenario."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:339
#, no-c-format
msgid "Addressing each possible way to deploy Subversion is both impossible, and outside the scope of this book. We simply encourage you to evaluate your options using these pages and other sources as your reference material, and plan ahead."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:349
#, fuzzy, no-c-format
msgid "Choosing a Data Store"
msgstr "リポジトリの保存形式"

#. Tag: para
#: ch05-repository-admin.xml:351
#, fuzzy, no-c-format
msgid "As of version 1.1, Subversion provides two options for the type of underlying data store&mdash;often referred to as <quote>the back-end</quote> or, somewhat confusingly, <quote>the (versioned) filesystem</quote>&mdash;that each repository uses. One type of data store keeps everything in a Berkeley DB (or BDB) database environment; repositories that use this type are often referred to as being <quote>BDB-backed</quote>. The other type stores data in ordinary flat files, using a custom format. Subversion developers have adopted the habit of referring to this latter data storage mechanism as <firstterm>FSFS</firstterm> <footnote> <para>Often pronounced <quote>fuzz-fuzz</quote>, if Jack Repenning has anything to say about it. (This book, however, assumes that the reader is thinking <quote>eff-ess-eff-ess</quote>.)</para> </footnote> &mdash;a versioned filesystem implementation that uses the native OS filesystem directly&mdash;rather than via a database library or some other abstraction layer&mdash;to store data."
msgstr "Subversion 1.1 からは、Subversion リポジトリに二つの保存形 式が選べます。一つはすべてのデータを Berkeley DB データベースに保存 する方法です; もう一つは、独自の形式で構成した通常のフラットファイルの 形にデータを保存する方法です。Subversion 開発者はリポジトリを、 <quote>(バージョン化された) ファイルシステム</quote> という名前でよく言い表すので、 この習慣に合うように後者のリポジトリを<firstterm>FSFS</firstterm> <footnote> <para>Jack Repenning が何も文句を言わないのなら<quote>fuzz-fuzz</quote> と発音することになっています。</para> </footnote> と呼びますが&mdash;それは最初から OS がもっているファイルシステムを使っ てバージョン化されたファイルシステムを作る方法です。"

#. Tag: para
#: ch05-repository-admin.xml:372
#, fuzzy, no-c-format
msgid "gives a comparative overview of Berkeley DB and FSFS repositories."
msgstr "に Berkeley DB と FSFS リポジトリの比較表があります。 詳細についてはは次の節を見てください。"

#. Tag: title
#: ch05-repository-admin.xml:377
#, no-c-format
msgid "Repository Data Store Comparison"
msgstr "Repository 保存形式の比較"

#. Tag: entry
#: ch05-repository-admin.xml:381
#, no-c-format
msgid "Category"
msgstr "分類"

#. Tag: entry
#: ch05-repository-admin.xml:383
#, no-c-format
msgid "<entry>Berkeley DB</entry>"
msgstr "<entry>Berkeley DB</entry>"

#. Tag: entry
#: ch05-repository-admin.xml:384
#, no-c-format
msgid "<entry>FSFS</entry>"
msgstr "<entry>FSFS</entry>"

#. Tag: entry
#: ch05-repository-admin.xml:389
#, fuzzy, no-c-format
msgid "Reliability"
msgstr "拡張性"

#. Tag: entry
#: ch05-repository-admin.xml:390
#, no-c-format
msgid "Data integrity"
msgstr ""

#. Tag: entry
#: ch05-repository-admin.xml:391
#, no-c-format
msgid "when properly deployed, extremely reliable; Berkeley DB 4.4 brings auto-recovery"
msgstr ""

#. Tag: entry
#: ch05-repository-admin.xml:393
#, no-c-format
msgid "older versions had some rarely demonstrated, but data-destroying bugs"
msgstr ""

#. Tag: entry
#: ch05-repository-admin.xml:397
#, no-c-format
msgid "Sensitivity to interruptions"
msgstr "リポジトリの壊れやすさ"

#. Tag: entry
#: ch05-repository-admin.xml:398
#, fuzzy, no-c-format
msgid "very; crashes and permission problems can leave the database <quote>wedged</quote>, requiring journaled recovery procedures"
msgstr "非常に壊れやすい; リポジトリが壊れたりパーミッショ ンの問題が起こった場合にはデータベースは<quote>中途半 端な</quote>状態になり、ジャーナル復帰処理が必要にな ります。"

#. Tag: entry
#: ch05-repository-admin.xml:401
#, fuzzy, no-c-format
msgid "quite insensitive"
msgstr "それほどでもない"

#. Tag: entry
#: ch05-repository-admin.xml:404
#, fuzzy, no-c-format
msgid "Accessibility"
msgstr "拡張性"

#. Tag: entry
#: ch05-repository-admin.xml:405
#, no-c-format
msgid "Usable from a read-only mount"
msgstr "リードオンリーでマウントできるか"

#. Tag: entry
#: ch05-repository-admin.xml:406
#: ch05-repository-admin.xml:411
#, no-c-format
msgid "<entry>no</entry>"
msgstr "<entry>いいえ</entry>"

#. Tag: entry
#: ch05-repository-admin.xml:407
#: ch05-repository-admin.xml:412
#: ch05-repository-admin.xml:417
#, no-c-format
msgid "<entry>yes</entry>"
msgstr "<entry>はい</entry>"

#. Tag: entry
#: ch05-repository-admin.xml:410
#, no-c-format
msgid "Platform-independent storage"
msgstr "プラットフォームに独立した保存形式か"

#. Tag: entry
#: ch05-repository-admin.xml:415
#, no-c-format
msgid "Usable over network filesystems"
msgstr "ネットワークファイルシステムでも使えるか"

#. Tag: entry
#: ch05-repository-admin.xml:416
#, no-c-format
msgid "generally, no"
msgstr ""

#. Tag: entry
#: ch05-repository-admin.xml:420
#, no-c-format
msgid "Group permissions handling"
msgstr "グループパーミッション制御"

#. Tag: entry
#: ch05-repository-admin.xml:421
#, fuzzy, no-c-format
msgid "sensitive to user umask problems; best if accessed by only one user"
msgstr "umask の問題に敏感; ひとつのユーザによってアクセ スされるのが一番よい。"

#. Tag: entry
#: ch05-repository-admin.xml:423
#, no-c-format
msgid "works around umask problems"
msgstr "umask の問題を回避できる"

#. Tag: entry
#: ch05-repository-admin.xml:426
#, fuzzy, no-c-format
msgid "Scalability"
msgstr "拡張しやすさ"

#. Tag: entry
#: ch05-repository-admin.xml:427
#, fuzzy, no-c-format
msgid "Repository disk usage"
msgstr "リポジトリサイズ"

#. Tag: entry
#: ch05-repository-admin.xml:428
#, no-c-format
msgid "larger (especially if logfiles aren't purged)"
msgstr ""

#. Tag: entry
#: ch05-repository-admin.xml:429
#, fuzzy, no-c-format
msgid "smaller"
msgstr "<entry>遅い</entry>"

#. Tag: entry
#: ch05-repository-admin.xml:432
#, fuzzy, no-c-format
msgid "Number of revision trees"
msgstr "スケール性: リビジョンツリーの数が増えるとどうな るか"

#. Tag: entry
#: ch05-repository-admin.xml:433
#, no-c-format
msgid "database; no problems"
msgstr "データベースなので問題なし"

#. Tag: entry
#: ch05-repository-admin.xml:434
#, fuzzy, no-c-format
msgid "some older native filesystems don't scale well with thousands of entries in a single directory"
msgstr "OS のファイルシステムが古い場合、一つのディ レクトリ中に数千のエントリがあるとうまく動かなくなるこ とがある。"

#. Tag: entry
#: ch05-repository-admin.xml:438
#, fuzzy, no-c-format
msgid "Directories with many files"
msgstr "スケール性: たくさんのファイルのあるディレクトリ"

#. Tag: entry
#: ch05-repository-admin.xml:439
#, no-c-format
msgid "slower"
msgstr ""

#. Tag: entry
#: ch05-repository-admin.xml:440
#, no-c-format
msgid "faster"
msgstr ""

#. Tag: entry
#: ch05-repository-admin.xml:443
#, fuzzy, no-c-format
msgid "Performance"
msgstr "序"

#. Tag: entry
#: ch05-repository-admin.xml:444
#, fuzzy, no-c-format
msgid "Checking out latest revision"
msgstr "スピード: 最新コードのチェックアウト"

#. Tag: entry
#: ch05-repository-admin.xml:445
#: ch05-repository-admin.xml:446
#, no-c-format
msgid "no meaningful difference"
msgstr ""

#. Tag: entry
#: ch05-repository-admin.xml:449
#, fuzzy, no-c-format
msgid "Large commits"
msgstr "スピード: 大きなコミット"

#. Tag: entry
#: ch05-repository-admin.xml:450
#, no-c-format
msgid "slower overall, but cost is amortized across the lifetime of the commit"
msgstr ""

#. Tag: entry
#: ch05-repository-admin.xml:452
#, fuzzy, no-c-format
msgid "faster overall, but finalization delay may cause client timeouts"
msgstr "速いが、最終処理はクライアントのタイムアウトにつ ながるかも知れない"

#. Tag: para
#: ch05-repository-admin.xml:459
#, no-c-format
msgid "There are advantages and disadvantages to each of these two back-end types. Neither of them is more <quote>official</quote> than the other, though the newer FSFS is the default data store as of Subversion 1.2. Both are reliable enough to trust with your versioned data. But as you can see in <xref linkend=\"svn.reposadmin.basics.backends.tbl-1\"/>, the FSFS backend provides quite a bit more flexibility in terms of its supported deployment scenarios. More flexibility means you have to work a little harder to find ways to deploy it incorrectly. Those reasons&mdash;plus the fact that not using Berkeley DB means there's one fewer component in the system&mdash;largely explain why today almost everyone uses the FSFS backend when creating new repositories."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:474
#, no-c-format
msgid "Fortunately, most programs which access Subversion repositories are blissfully ignorant of which back-end data store is in use. And you aren't even necessarily stuck with your first choice of a data store&mdash;in the event that you change your mind later, Subversion provides ways of migrating your repository's data into another repository that uses a different back-end data store. We talk more about that later in this chapter."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:483
#, no-c-format
msgid "The following subsections provide a more detailed look at the available data store types."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:488
#, no-c-format
msgid "<title>Berkeley DB</title>"
msgstr "<title>Berkeley DB</title>"

#. Tag: para
#: ch05-repository-admin.xml:490
#, no-c-format
msgid "When the initial design phase of Subversion was in progress, the developers decided to use Berkeley DB for a variety of reasons, including its open-source license, transaction support, reliability, performance, API simplicity, thread-safety, support for cursors, and so on."
msgstr "Subversion の最初の 設計段階で、開発者はさまざまな理由で Berkeley DB を利用することに決めました。 その理由にはそのオープンソースライセンス、トランザクションのサポート、 信頼性、パフォーマンス、API の公開、スレッドの安全性、カーソルのサポート などが含まれていました。"

#. Tag: para
#: ch05-repository-admin.xml:497
#, no-c-format
msgid "Berkeley DB provides real transaction support&mdash;perhaps its most powerful feature. Multiple processes accessing your Subversion repositories don't have to worry about accidentally clobbering each other's data. The isolation provided by the transaction system is such that for any given operation, the Subversion repository code sees a static view of the database&mdash;not a database that is constantly changing at the hand of some other process&mdash;and can make decisions based on that view. If the decision made happens to conflict with what another process is doing, the entire operation is rolled back as if it never happened, and Subversion gracefully retries the operation against a new, updated (and yet still static) view of the database."
msgstr "Berkeley DB は本当のトランザクション機能をサポートしています&mdash;おそらく 上であげた理由の中で最も強力な機能です。Subversion リポジトリにアクセスする 複数のプロセスはそれぞれ他のデータを間違って破壊することを心配する必要はありません。 トランザクションシステムによって提供されている分離機能はどんな操作においても Subversion リポジトリのコードにデータベースを静的に見せることができるように するものです&mdash;他のプロセスによってときどき変更を受けているように見えるのを 防ぐものです&mdash; そしてそのような静的な見え方に基づいて、何を実行するか を決めることができるのです。もしその決定が他のプロセスがやったことと衝突 した場合、操作全体は、それがまったく実行されなかったかのようにロールバック され、Subversion はもう一度、新しく更新された(そしてやはりまた静的に見える ような状態での)データベースに対してその処理を再実行することができます。"

#. Tag: para
#: ch05-repository-admin.xml:512
#, no-c-format
msgid "Another great feature of Berkeley DB is <firstterm>hot backups</firstterm>&mdash;the ability to backup the database environment without taking it <quote>offline</quote>. We'll discuss how to backup your repository in <xref linkend=\"svn.reposadmin.maint.backup\"/>, but the benefits of being able to make fully functional copies of your repositories without any downtime should be obvious."
msgstr "Berkeley DB のほかのすばらしい機能は<firstterm>ホットバックアップ</firstterm> &mdash; <quote>オフライン</quote>にせずにデータベース環境をバックアップできる 能力です。リポジトリのバックアップ方法については<xref linkend=\"svn.reposadmin.maint.backup\"/>で議論しますが、オフラインに せずにリポジトリの完全なコピーをとることができる利点は明白でしょう。"

#. Tag: para
#: ch05-repository-admin.xml:520
#, fuzzy, no-c-format
msgid "Berkeley DB is also a very reliable database system when properly used. Subversion uses Berkeley DB's logging facilities, which means that the database first writes to on-disk log files a description of any modifications it is about to make, and then makes the modification itself. This is to ensure that if anything goes wrong, the database system can back up to a previous <firstterm>checkpoint</firstterm>&mdash;a location in the log files known not to be corrupt&mdash;and replay transactions until the data is restored to a usable state. See <xref linkend=\"svn.reposadmin.maint.diskspace\"/> for more about Berkeley DB log files."
msgstr "Berkeley DB はまた非常に信頼性の高いデータベースシステムです。Subversion は Berkeley DB のログ機能を利用しますが、これはまず最初にこれからやろうと する操作内容をいったんディスク上のログファイルに書き込み、それからその 修正を実際に行うものです。これは何かまずいことが起きた場合にデータベースシステム が直前の<firstterm>チェックポイント</firstterm>&mdash; ログファイル中の最後の 問題のない地点&mdash; をバックアップすることと、データが利用可能な 状態に復元されるまでトランザクションを再実行することを保証するものです。 Berkeley DB ログファイルについての詳細は<xref linkend=\"svn.reposadmin.maint.diskspace\"/>を 見てください。"

#. Tag: para
#: ch05-repository-admin.xml:533
#, fuzzy, no-c-format
msgid "But every rose has its thorn, and so we must note some known limitations of Berkeley DB. First, Berkeley DB environments are not portable. You cannot simply copy a Subversion repository that was created on a Unix system onto a Windows system and expect it to work. While much of the Berkeley DB database format is architecture independent, there are other aspects of the environment that are not. Secondly, Subversion uses Berkeley DB in a way that will not operate on Windows 95/98 systems&mdash;if you need to house a BDB-backed repository on a Windows machine, stick with Windows 2000 or newer."
msgstr "しかしどんなバラにもトゲがあるわけであり、Berkeley DB についてわかっている 制約を記しておく必要があります。まず Berkeley DB 環境は可搬性がありません。 Unix システムで作った Subversion リポジトリをWindowsシステムに単にコピー して動作することを期待してはいけません。ほとんどの Berkeley DB データベース 形式はプラットフォーム独立ですが、環境中にはそうではない部分もあります。 次にSubversion では Berkeley DB を Windows 95/98 システム上で利用できません &mdash; ウィンドウズマシン上でリポジトリを管理しなくてはならない のであれば Windows 2000 か Windows XP 上に構築してください。また Berkeley DB リポジトリをネットワーク共有上には決して置かないでください。Berkeley DB は 仕様の一部に合致するようなネットワーク共有上での正しい動作を保証していますが、 現在実際に利用されているネットワーク共有方式で、そのすべての仕様を満たすよう なものは知られていません。"

#. Tag: para
#: ch05-repository-admin.xml:545
#, fuzzy, no-c-format
msgid "While Berkeley DB promises to behave correctly on network shares that meet a particular set of specifications, <footnote> <para>Berkeley DB requires that the underlying filesystem implement strict POSIX locking semantics, and more importantly, the ability to map files directly into process memory.</para> </footnote> most networked filesystem types and appliances do <emphasis>not</emphasis> actually meet those requirements. And in no case can you allow a BDB-backed repository that resides on a network share to be accessed by multiple clients of that share at once (which quite often is the whole point of having the repository live on a network share in the first place)."
msgstr "ネットワーク上で共有された Berkeley DB リポジトリを<emphasis>作らないで</emphasis> ください&mdash;NFS, AFS あるいは Windows の SMB のようなリモートファイルシステム 上にリポジトリを置くことは<emphasis>できません</emphasis>。Berkeley DB は利用する ファイルシステムが POSIX のロックの方式に厳密に従っていること、そしてさらに 重要なことは、ファイルをプロセスメモリに直接マップできること、を要求します。 ネットワークファイルシステムでこの性質を持っているものはほとんどありません。 ネットワーク上で共有された場所の上で Berkeley DB を利用した結果については予測できません&mdash; すぐに正体不明のエラーが起きるかも知れませんし、自分のデータベースがわずかに 壊れてしまったことに気づくのに何ヶ月もかかるかも知れません。"

#. Tag: para
#: ch05-repository-admin.xml:562
#, no-c-format
msgid "If you attempt to use Berkeley DB on a non-compliant remote filesystem, the results are unpredictable&mdash;you may see mysterious errors right away, or it may be months before you discover that your repository database is subtly corrupted. You should strongly consider using the FSFS data store for repositories that need to live on a network share."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:571
#, fuzzy, no-c-format
msgid "Finally, because Berkeley DB is a library linked directly into Subversion, it's more sensitive to interruptions than a typical relational database system. Most SQL systems, for example, have a dedicated server process that mediates all access to tables. If a program accessing the database crashes for some reason, the database daemon notices the lost connection and cleans up any mess left behind. And because the database daemon is the only process accessing the tables, applications don't need to worry about permission conflicts. These things are not the case with Berkeley DB, however. Subversion (and programs using Subversion libraries) access the database tables directly, which means that a program crash can leave the database in a temporarily inconsistent, inaccessible state. When this happens, an administrator needs to ask Berkeley DB to restore to a checkpoint, which is a bit of an annoyance. Other things can cause a repository to <quote>wedge</quote> besides crashed processes, such as programs conflicting over ownership and permissions on the database files."
msgstr "最後に、Berkeley DB は Subversion に直接リンクされたライブラリな ので典型的なリレーショナルデータベースよりも割り込みに関して敏感です。 例えばほとんどの SQL システムでは、テーブルに対するアクセス全体を取り持つサー バプロセスがあります。何かの理由でデータベースにアクセスするプログラム に異常があった場合でもデータベースデーモンは接続が中断したことを検知し て問題のある中間的な状態をきれいにします。またデータベースデーモンはテー ブルにアクセスする唯一のプロセスなのでアプリケーションはパーミッション の衝突に関して心配する必要はありません。このような性質は Berkeley DB にはありません。Subversion (と Subversion ライブラリを使うプログラム) はデータベーステーブルに直接アクセスしますが、これはプログラムで異常が あると、データベースが中間的な矛盾のある状態、アクセスできない状態のま ま残ってしまうことを意味します。このようなことがおこると、管理者は Berkeley DB に問い合わせてチェックポイントを回復する必要がありますが、 これは少し面倒な作業です。リポジトリが <quote>中途半端な</quote>状態に なるのはプログラムの異常のほかにも、データベースファイルに対して与えら れたオーナーやパーミッションに関係することもあります。このように、 Berkeley DB は非常に速くスケール性にも富んでいますが、一つのサーバプロ セスを一つのユーザで実行する&mdash;たとえば Apache's <command>httpd</command> や <command>svnserve</command> (<xref linkend=\"svn.serverconfig\"/> を見てください。)&mdash; のが最善の利用 方法であり、<literal>file:///</literal> や <literal>svn+ssh://</literal> のような URL を使ってたくさん の異なるユーザがアクセスするのは避けたほうがよいでしょう。複数ユーザか ら直接 Berkeley DB をアクセスする場合には、かならず<xref linkend=\"svn.serverconfig.multimethod\"/>を読むようにしてください。"

#. Tag: para
#: ch05-repository-admin.xml:592
#, no-c-format
msgid "Berkeley DB 4.4 brings (to Subversion 1.4 and better) the ability for Subversion to automatically and transparently recover Berkeley DB environments in need of such recovery. When a Subversion process attaches to a repository's Berkeley DB environment, it uses some process accounting mechanisms to detect any unclean disconnections by previous processes, performs any necessary recovery, and then continues on as if nothing happened. This doesn't completely eliminate instances of repository wedging, but it does drastically reduce the amount of human interaction required to recover from them."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:605
#, no-c-format
msgid "So while a Berkeley DB repository is quite fast and scalable, it's best used by a single server process running as one user&mdash;such as Apache's <command>httpd</command> or <command>svnserve</command> (see <xref linkend=\"svn.serverconfig\"/>)&mdash;rather than accessing it as many different users via <literal>file://</literal> or <literal>svn+ssh://</literal> URLs. If using a Berkeley DB repository directly as multiple users, be sure to read <xref linkend=\"svn.serverconfig.multimethod\"/>."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:619
#, no-c-format
msgid "<title>FSFS</title>"
msgstr "<title>FSFS</title>"

#. Tag: para
#: ch05-repository-admin.xml:621
#, fuzzy, no-c-format
msgid "In mid-2004, a second type of repository storage system&mdash;one which doesn't use a database at all&mdash;came into being. An FSFS repository stores the changes associated with a revision in a single file, and so all of a repository's revisions can be found in a single subdirectory full of numbered files. Transactions are created in separate subdirectories as individual files. When complete, the transaction file is renamed and moved into the revisions directory, thus guaranteeing that commits are atomic. And because a revision file is permanent and unchanging, the repository also can be backed up while <quote>hot</quote>, just like a BDB-backed repository."
msgstr "2004年の半ばから、第二のリポジトリ保存形式が使えるようになりまし た: これはデータベースをまったく利用しないものです。FSFS リポジトリは リビジョンツリーを単一のファイルに保存し、すべてのリポジトリリビジョン は単一のサブディレクトリの下の複数ファイルになります。トランザクション は分離されたサブディレクトリに作られます。トランザクションが完了すると 単一のトランザクションファイルが作られ、それがリビジョンディレクトリに 移動されます。このためコミットの不分割性が保証されます。そして、リビジョ ンファイルは永続的なものであり、それ以上変更されないのでリポジトリは Berkeley DB リポジトリのように<quote>ホット</quote>バックアップするこ とができます。"

#. Tag: para
#: ch05-repository-admin.xml:635
#, fuzzy, no-c-format
msgid "The FSFS revision files describe a revision's directory structure, file contents, and deltas against files in other revision trees. Unlike a Berkeley DB database, this storage format is portable across different operating systems and isn't sensitive to CPU architecture. Because there's no journaling or shared-memory files being used, the repository can be safely accessed over a network filesystem and examined in a read-only environment. The lack of database overhead also means that the overall repository size is a bit smaller."
msgstr "リビジョンファイルの形式は、そのリビジョンのディレクトリ構造、ファ イル内容、そして他のリビジョンツリーのファイルに対する差分を表現したも のです。Berkeley DB データベースとは違いこの保存形式は異なるオペレーティ ングシステム間でもそのまま利用することができ、CPU のアーキテクチャには 依存しません。ジャーナリングのしくみや共有メモリーを使っていないので、 リポジトリはネットワークファイルシステムごしに安全にアクセスすることが でき、リードオンリーな環境を作ることもできます。またデータベース保存形式特 有のオーバーヘッドがないので、リポジトリの大きさは比較的小さくなります。"

#. Tag: para
#: ch05-repository-admin.xml:646
#, fuzzy, no-c-format
msgid "FSFS has different performance characteristics too. When committing a directory with a huge number of files, FSFS is able to more quickly append directory entries. On the other hand, FSFS writes the latest version of a file as a delta against an earlier version, which means that checking out the latest tree is a bit slower than fetching the fulltexts stored in a Berkeley DB HEAD revision. FSFS also has a longer delay when finalizing a commit, which could in extreme cases cause clients to time out while waiting for a response."
msgstr "FSFS はパフォーマンスの特性にも独自の性質があります。非常にたく さんのファイルのあるディレクトリをコミットすると、FSFS は O(N) アルゴ リズムを使ってエントリーを追加しますが、Berkeley DB は O(N^2) のアルゴ リズムを使ってディレクトリ全体を書き換えます。いっぽう FSFS は以前の バージョンと、今回の最新バージョンのファイルの差分を書き込みます。 これは最新ツリーをチェックアウトする場合 Berkeley DB の HEAD リビジョンに保管されている完全な内容にアクセスするよりも少し遅くなる ことを意味しています。FSFS はコミットの最終処理でも相対的に長い遅延が 起こりますが、これは極端な場合には応答を待つ クライアントプログラムをタイムアウトさせてしまうかも知れません。"

#. Tag: para
#: ch05-repository-admin.xml:657
#, fuzzy, no-c-format
msgid "The most important distinction, however, is FSFS's imperviousness to <quote>wedging</quote> when something goes wrong. If a process using a Berkeley DB database runs into a permissions problem or suddenly crashes, the database can be left in an unusable state until an administrator recovers it. If the same scenarios happen to a process using an FSFS repository, the repository isn't affected at all. At worst, some transaction data is left behind."
msgstr "しかし一番大きな違いは FSFS では何かおかしなことが起こったときで も、<quote>中途半端な</quote>状態にはならないところです。Berkeley DB データベースを使ったプロセスがパーミッションの問題や突然異常終了したよ うな場合だと、データベースは管理者が復帰処理をしない限り利用できない状態に とどまります。もし同じことが FSFS リポジトリに起きても、リポジトリはまっ たく影響を受けません。せいぜいトランザクションデータが見えない場所に取 り残されてしまうだけです。"

#. Tag: para
#: ch05-repository-admin.xml:666
#, no-c-format
msgid "The only real argument against FSFS is its relative immaturity compared to Berkeley DB. Unlike Berkeley DB, which has years of history, its own dedicated development team and, now, Oracle's mighty name attached to it, <footnote> <para>Oracle bought Sleepycat and its flagship software, Berkeley DB, on Valentine's Day in 2006.</para> </footnote> FSFS is a much newer bit of engineering. Prior to Subversion 1.4, it was still shaking out some pretty serious data integrity bugs which, while only triggered in very rare cases, nonetheless did occur. That said, FSFS has quickly become the back-end of choice for some of the largest public and private Subversion repositories, and promises a lower barrier to entry for Subversion across the board."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:691
#, fuzzy, no-c-format
msgid "Creating and Configuring Your Repository"
msgstr "Subversionリポジトリを新規に作成します。"

#. Tag: para
#: ch05-repository-admin.xml:693
#, no-c-format
msgid "In <xref linkend=\"svn.reposadmin.planning\"/>, we looked at some of the important decisions that should be made before creating and configuring your Subversion repository. Now, we finally get to get our hands dirty! In this section, we'll see how to actually create a Subversion repository and configure it to perform custom actions when special repository events occur."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:703
#, fuzzy, no-c-format
msgid "Creating the Repository"
msgstr "リポジトリの移行"

#. Tag: para
#: ch05-repository-admin.xml:705
#, fuzzy, no-c-format
msgid "Subversion repository creation is an incredibly simple task. The <command>svnadmin</command> utility that comes with Subversion provides a subcommand (<literal>create</literal>) for doing just that."
msgstr "Subversionリポジトリの作成は非常に簡単な作業です。 Subversion付属の<command>svnadmin</command> ユーティリティー にそれをやるサブコマンドがあります。新しいリポジトリを作るには 単に:"

#. Tag: screen
#: ch05-repository-admin.xml:710
#, no-c-format
msgid "$ svnadmin create /path/to/repos"
msgstr "$ svnadmin create /path/to/repos"

#. Tag: para
#: ch05-repository-admin.xml:712
#, no-c-format
msgid "This creates a new repository in the directory <filename>/path/to/repos</filename>, and with the default filesystem data store. Prior to Subversion 1.2, the default was to use Berkeley DB; the default is now FSFS. You can explicitly choose the filesystem type using the <option>--fs-type</option> argument, which accepts as a parameter either <literal>fsfs</literal> or <literal>bdb</literal>."
msgstr ""

#. Tag: screen
#: ch05-repository-admin.xml:721
#, fuzzy, no-c-format
msgid ""
"$ # Create an FSFS-backed repository\n"
"$ svnadmin create --fs-type fsfs /path/to/repos\n"
"$"
msgstr ""
"$ svnadmin create --fs-type fsfs /path/to/repos\n"
"$ svnadmin create --fs-type bdb /path/to/other/repos"

#. Tag: screen
#: ch05-repository-admin.xml:723
#, fuzzy, no-c-format
msgid ""
"# Create a Berkeley-DB-backed repository\n"
"$ svnadmin create --fs-type bdb /path/to/repos\n"
"$"
msgstr ""
"$ svnadmin create --fs-type fsfs /path/to/repos\n"
"$ svnadmin create --fs-type bdb /path/to/other/repos"

#. Tag: para
#: ch05-repository-admin.xml:725
#, fuzzy, no-c-format
msgid "After running this simple command, you have a Subversion repository."
msgstr "Subversionリポジトリには9種類のフックが実装されています:"

#. Tag: para
#: ch05-repository-admin.xml:729
#, fuzzy, no-c-format
msgid "The path argument to <command>svnadmin</command> is just a regular filesystem path and not a URL like the <command>svn</command> client program uses when referring to repositories. Both <command>svnadmin</command> and <command>svnlook</command> are considered server-side utilities&mdash;they are used on the machine where the repository resides to examine or modify aspects of the repository, and are in fact unable to perform tasks across a network. A common mistake made by Subversion newcomers is trying to pass URLs (even <quote>local</quote> <literal>file://</literal> ones) to these two programs."
msgstr "<command>svnadmin</command> の引数であるパスは単なるファイルシステム パスであって<command>svn</command> クライアントプログラムがリポジトリ を参照するときのようなURLではないことに注意してください。 <command>svnadmin</command> も <command>svnlook</command> も、 サーバ側のユーティリティーだと考えてください&mdash; この二つはリポジトリを調べたり状態を変更するため、リポジトリがある マシン上で利用され、ネットワーク越しに実行することはできません。 Subversion初心者によくある間違いは、二つのプログラムに、URLを 渡してしまうことです。(あるいは、<quote>local</quote>なURLとして <literal>file:</literal> のように指定してしまうことです。)"

#. Tag: para
#: ch05-repository-admin.xml:742
#, fuzzy, no-c-format
msgid "Present in the <filename>db/</filename> subdirectory of your repository is the implementation of the versioned filesystem. Your new repository's versioned filesystem begins life at revision 0, which is defined to consist of nothing but the top-level root (<filename>/</filename>) directory. Initially, revision 0 also has a single revision property, <literal>svn:date</literal>, set to the time at which the repository was created."
msgstr "これで<filename>/path/to/repos</filename>ディレクトリに 新しいリポジトリが作成されます。この新しいリポジトリはリビジョン0 で誕生しますが、これは最上位のルート(<filename>/</filename>) ファイル システムディレクトリに中身が空の状態で存在しているだけです。 初期状態でリビジョン0はリビジョン属性を一つ持っていて、 <literal>svn:date</literal>は、リポジトリが作られた時刻が設定 されています。"

#. Tag: para
#: ch05-repository-admin.xml:751
#, no-c-format
msgid "Now that you have a repository, it's time to customize it."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:755
#, fuzzy, no-c-format
msgid "While some parts of a Subversion repository&mdash;such as the configuration files and hook scripts&mdash;are meant to be examined and modified manually, you shouldn't (and shouldn't need to) tamper with the other parts of the repository <quote>by hand</quote>. The <command>svnadmin</command> tool should be sufficient for any changes necessary to your repository, or you can look to third-party tools (such as Berkeley DB's tool suite) for tweaking relevant subsections of the repository. Do <emphasis>not</emphasis> attempt manual manipulation of your version control history by poking and prodding around in your repository's data store files!"
msgstr "一般的に、<quote>手で</quote>リポジトリをいじるべきではありません。 <command>svnadmin</command> ツールはリポジトリに対するどのような 変更にも十分対応できますし、サードパーティーのツール(たとえば Berkeley DBツールスイート)でリポジトリの関連した部分を調整する ことができます。いくつかの例外もあるので、それについては後で触れます。"

#. Tag: title
#: ch05-repository-admin.xml:773
#, fuzzy, no-c-format
msgid "Implementing Repository Hooks"
msgstr "リポジトリとリポジトリの比較"

#. Tag: para
#: ch05-repository-admin.xml:775
#, no-c-format
msgid "A <firstterm>hook</firstterm> is a program triggered by some repository event, such as the creation of a new revision or the modification of an unversioned property. Some hooks (the so-called <quote>pre hooks</quote>) run in advance of a repository operation and provide a means by which to both report what is about to happen and to prevent it from happening at all. Other hooks (the <quote>post hooks</quote>) run after the completion of a repository event, and are useful for performing tasks that examine&mdash;but don't modify&mdash;the repository. Each hook is handed enough information to tell what that event is (or was), the specific repository changes proposed (or completed), and the username of the person who triggered the event."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:789
#, no-c-format
msgid "The <filename>hooks</filename> subdirectory is, by default, filled with templates for various repository hooks."
msgstr "<filename>hooks</filename> サブディレクトリには、デフォルトでは さまざまなリポジトリフックのテンプレートがあります。"

#. Tag: screen
#: ch05-repository-admin.xml:793
#, fuzzy, no-c-format
msgid ""
"$ ls repos/hooks/\n"
"post-commit.tmpl          post-unlock.tmpl  pre-revprop-change.tmpl\n"
"post-lock.tmpl                  pre-commit.tmpl   pre-unlock.tmpl\n"
"post-revprop-change.tmpl  pre-lock.tmpl     start-commit.tmpl"
msgstr ""
"$ ls repos/hooks/\n"
"post-commit.tmpl          post-unlock.tmpl          pre-revprop-change.tmpl\n"
"post-lock.tmpl            pre-commit.tmpl           pre-unlock.tmpl\n"
"post-revprop-change.tmpl  pre-lock.tmpl             start-commit.tmpl"

#. Tag: para
#: ch05-repository-admin.xml:795
#, fuzzy, no-c-format
msgid "There is one template for each hook that the Subversion repository supports, and by examining the contents of those template scripts, you can see what triggers each script to run and what data is passed to that script. Also present in many of these templates are examples of how one might use that script, in conjunction with other Subversion-supplied programs, to perform common useful tasks. To actually install a working hook, you need only place some executable program or script into the <filename>repos/hooks</filename> directory which can be executed as the name (like <command>start-commit</command> or <command>post-commit</command>) of the hook."
msgstr "Subversionが実装しているフックごとに一つのテンプレートがあり、 テンプレートスクリプトの内容を見ればどんなトリガーを実行し、 どんなデータがそのスクリプトに渡されるかがわかります。 またこれらたくさんのテンプレートはスクリプトを書こうとする人の例 になっていて、他のSubversion付属のプログラムと協調して、よく出くわす 作業を実行します。 動作するフックをインストールするには、何かの実行ファイルかスクリプト を<filename>repos/hooks</filename> ディレクトリに置くだけで良く、 そのフックの名前で実行されます。(<command>start-commit</command> とか <command>post-commit</command>とかいう感じです。)"

#. Tag: para
#: ch05-repository-admin.xml:808
#, fuzzy, no-c-format
msgid "On Unix platforms, this means supplying a script or program (which could be a shell script, a Python program, a compiled C binary, or any number of other things) named exactly like the name of the hook. Of course, the template files are present for more than just informational purposes&mdash;the easiest way to install a hook on Unix platforms is to simply copy the appropriate template file to a new file that lacks the <literal>.tmpl</literal> extension, customize the hook's contents, and ensure that the script is executable. Windows, however, uses file extensions to determine whether or not a program is executable, so you would need to supply a program whose basename is the name of the hook, and whose extension is one of the special extensions recognized by Windows for executable programs, such as <filename>.exe</filename> for programs, and <filename>.bat</filename> for batch files."
msgstr "Unixでは、これは正確にフックの名前を持つスクリプトやプログラムを 置いてやる必要があるという意味です(シェルスクリプトでもいいし、 Python, コンパイルされた Cのプログラム、などなどです。) もちろんテンプレートファイルはそういう情報を与えるためだけに あるわけではありません&mdash;Unixで一番簡単にフックをインストール するにはテンプレートファイルを<literal>.tmpl</literal> の拡張子を とった新しいファイルにコピーして、内容をカスタマイズし、スクリプトに 実行権限を与えるだけです。Windowsでは、ファイルが実行できるかどうか は拡張子によって決まるので、ベース名がフックの名前で、拡張子がWindows で実行形式として認識される拡張子のどれかにしてやればOKです。 たとえば、プログラムなら<filename>.exe</filename> か <filename>.com</filename> ですし、バッチファイルなら<filename>.bat</filename> です。"

#. Tag: para
#: ch05-repository-admin.xml:826
#, fuzzy, no-c-format
msgid "For security reasons, the Subversion repository executes hook programs with an empty environment&mdash;that is, no environment variables are set at all, not even <literal>$PATH</literal> (or <literal>%PATH%</literal>, under Windows). Because of this, many administrators are baffled when their hook program runs fine by hand, but doesn't work when run by Subversion. Be sure to explicitly set any necessary environment variables in your hook program and/or use absolute paths to programs."
msgstr "セキュリティー上の理由で、Subversion リポジトリはフックスクリプト を空の環境で実行します&mdash; つまり<literal>$PATH</literal> や <literal>%PATH%</literal>を含め、環境変数は全く設定されない 状態で実行します。このため多くの管理者は手でフックスクリプトを実行 するとうまくいくのに、Subversion によって実行されたときにはうまくいかな いことに困惑します。環境変数を明示的に設定するか、実行するプログラム を絶対パスで参照していることを確認してください。"

#. Tag: para
#: ch05-repository-admin.xml:837
#, fuzzy, no-c-format
msgid "Subversion executes hooks as the same user who owns the process which is accessing the Subversion repository. In most cases, the repository is being accessed via a Subversion server, so this user is the same user as which that server runs on the system. The hooks themselves will need to be configured with OS-level permissions that allow that user to execute them. Also, this means that any file or programs (including the Subversion repository itself) accessed directly or indirectly by the hook will be accessed as the same user. In other words, be alert to potential permission-related problems that could prevent the hook from performing the tasks it is designed to perform."
msgstr "SubversionはSubversionリポジトリにアクセスしているプロセス の所有者としてフックを実行しようとします。ほとんどの場合 リポジトリはApache HTTPサーバとmod_dav_svn越しにアクセスされる ので、このユーザはApacheを実行しているユーザと同じになります。 フックは、実行しようとするユーザに対するOSレベルでの実行権限 が必要です。また、これはフックが直接的に、間接的にアクセスする ファイルやディレクトリ(これにはSubversionのリポジトリ自身も 含みますが)もそうでなくてはならないことを意味します。 言い換えるとフックを実行する際に、このようなファイル権限に 関係した問題に注意してください。"

#. Tag: para
#: ch05-repository-admin.xml:850
#, no-c-format
msgid "There are nine hooks implemented by the Subversion repository, and you can get details about each of them in <xref linkend=\"svn.ref.reposhooks\"/>. As a repository administrator, you'll need to decide which of hooks you wish to implement (by way of providing an appropriately named and permissioned hook program), and how. When you make this decision, keep in mind the big picture of how your repository is deployed. For example, if you are using server configuration to determine which users are permitted to commit changes to your repository, then you don't need to do this sort of access control via the hook system."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:863
#, no-c-format
msgid "There is no shortage of Subversion hook programs and scripts freely available either from the Subversion community itself or elsewhere. These scripts cover a wide range of utility&mdash;basic access control, policy adherence checking, issue tracker integration, email- or syndication-based commit notification, and beyond. See <xref linkend=\"svn.3rdparty\"/> for discussion of some of the most commonly used hook programs. Or, if you wish to write your own, see <xref linkend=\"svn.developer\"/>."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:874
#, no-c-format
msgid "While hook scripts can do almost anything, there is one dimension in which hook script authors should show restraint: do <emphasis>not</emphasis> modify a commit transaction using hook scripts. While it might be tempting to use hook scripts to automatically correct errors or shortcomings or policy violations present in the files being committed, doing so can cause problems. Subversion keeps client-side caches of certain bits of repository data, and if you change a commit transaction in this way, those caches become indetectably stale. This inconsistency can lead to surprising and unexpected behavior. Instead of modifying the transaction, you should simply <emphasis>validate</emphasis> the transaction in the <filename>pre-commit</filename> hook and reject the commit if it does not meet the desired requirements. As a bonus, your users will learn the value of careful, compliance-minded work habits."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:897
#, no-c-format
msgid "Berkeley DB Configuration"
msgstr "Berkeley DB の設定"

#. Tag: para
#: ch05-repository-admin.xml:899
#, fuzzy, no-c-format
msgid "A Berkeley DB environment is an encapsulation of one or more databases, log files, region files and configuration files. The Berkeley DB environment has its own set of default configuration values for things like the number of database locks allowed to be taken out at any given time, or the maximum size of the journaling log files, etc. Subversion's filesystem logic additionally chooses default values for some of the Berkeley DB configuration options. However, sometimes your particular repository, with its unique collection of data and access patterns, might require a different set of configuration option values."
msgstr "Bkerlekey DB 環境は一つあるいはそれ以上のデータベース、ログファイル、 領域ファイル、設定ファイルを一つにまとめたものです。 Berkeley DB 環境には、一度にいくつのロックが許されるか、 とか、ジャーナルログファイルの一つの大きさについて、固有のデフォルト 値があります。Subversionのファイルシステムコードはこれに追加して Berkeley DB 設定値のデフォルト値を選んであります。しかし、 ときどき特定のリポジトリが特徴的なデータやアクセスパターンを 持っているために別のオプション設定値を持つのが望ましいことがあります。"

#. Tag: para
#: ch05-repository-admin.xml:911
#, fuzzy, no-c-format
msgid "The producers of Berkeley DB understand that different applications and database environments have different requirements, and so they have provided a mechanism for overriding at runtime many of the configuration values for the Berkeley DB environment: BDB checks for the presence of a file named <filename>DB_CONFIG</filename> in the environment directory (namely, the repository's <filename>db</filename> subdirectory), and parses the options found in that file . Subversion itself creates this file when it creates the rest of the repository. The file initially contains some default options, as well as pointers to the Berkeley DB online documentation so you can read about what those options do. Of course, you are free to add any of the supported Berkeley DB options to your <filename>DB_CONFIG</filename> file. Just be aware that while Subversion never attempts to read or interpret the contents of the file, and makes no direct use of the option settings in it, you'll want to avoid any configuration changes that may cause Berkeley DB to behave in a fashion that is at odds with what Subversion might expect. Also, changes made to <filename>DB_CONFIG</filename> won't take effect until you recover the database environment (using <command>svnadmin recover</command>)."
msgstr "あなたのリポジトリ用のBerkeley設定ファイルは <filename>repos/db/DB_CONFIG</filename>の中の、 <filename>db</filename>環境ディレクトリにあります。 Subversion自身はこのファイルをリポジトリの残りの部分を作るときに 作ります。ファイルは初期状態でいくつかのデフォルト値と、Berkeley DB のオンラインドキュメントへの場所があるので、どのオプションが 何をするかについて読んでおくことができます。もちろんどのような Berkeley DBオプションも<filename>DB_CONFIG</filename> に追加 することができます。Subversionはこのファイルの内容を読んだり 解釈したりすることはありませんし、その中にオプション値を設定 したりすることもありませんが、Subversionの残りのコードに 予測できないような影響を与える設定変更は避けてください。 同様に<filename>DB_CONFIG</filename>に対する変更はデータベース 環境を復旧するまで効果を持ちません(<command>svnadmin recover </command>)。"

#. Tag: title
#: ch05-repository-admin.xml:942
#, no-c-format
msgid "Repository Maintenance"
msgstr "リポジトリの保守"

#. Tag: para
#: ch05-repository-admin.xml:944
#, fuzzy, no-c-format
msgid "Maintaining a Subversion repository can be daunting, mostly due to the complexities inherent in systems which have a database backend. Doing the task well is all about knowing the tools&mdash;what they are, when to use them, and how to use them. This section will introduce you to the repository administration tools provided by Subversion, and how to wield them to accomplish tasks such as repository data migration, upgrades, backups and cleanups."
msgstr "Subversion リポジトリの管理はぞっとするような仕事になること もあります。大部分はデータベースバックエンドのもつシステムから引き継い だ複雑さによります。作業をうまくこなすには、とにかくツールについて深く理解する ことです&mdash;そのようなツールがいったい何であり、いつ使えば、またど うやって使えばよいのかを知ることです。この節ではSubversionによって提供 されるリポジトリ管理用ツールを紹介し、リポジトリの移行、更新、バックアッ プ、クリーンアップのような作業でどうやって使いこなせばよいかを説明しま す。"

#. Tag: title
#: ch05-repository-admin.xml:955
#, no-c-format
msgid "An Administrator's Toolkit"
msgstr "管理者用ツールキット"

#. Tag: para
#: ch05-repository-admin.xml:957
#, no-c-format
msgid "Subversion provides a handful of utilities useful for creating, inspecting, modifying and repairing your repository. Let's look more closely at each of those tools. Afterward, we'll briefly examine some of the utilities included in the Berkeley DB distribution that provide functionality specific to your repository's database backend not otherwise provided by Subversion's own tools."
msgstr "Subversion はリポジトリの作成、調査、修正、修復に便利なユー ティリティーをいくつも提供しています。それぞれについてもっと詳し く見てみましょう。その後 Berkeley DB のディストリビューションに含 まれるユーティリティーのいくつかを簡単にためしてみます。 Berkeley DB は Subversion 自身のツールとしては提供していないリポ ジトリデータベースバックエンドに特化した機能を提供しています。"

#. Tag: para
#: ch05-repository-admin.xml:969
#, fuzzy, no-c-format
msgid "The <command>svnadmin</command> program is the repository administrator's best friend. Besides providing the ability to create Subversion repositories, this program allows you to perform several maintenance operations on those repositories. The syntax of <command>svnadmin</command> is similar to that of other Subversion command-line programs:"
msgstr "<command>svnadmin</command> プログラムはリポジトリ管理者によって 一番よく利用されます。Subversionリポジトリを作成することのほか このプログラムはリポジトリに対してさまざまな保守操作をします。 <command>svnadmin</command> の構文は、<command>svnlook</command> のものとよく似ています:"

#. Tag: screen
#: ch05-repository-admin.xml:977
#, fuzzy, no-c-format
msgid ""
"$ svnadmin help\n"
"general usage: svnadmin SUBCOMMAND REPOS_PATH  [ARGS &amp; OPTIONS ...]\n"
"Type 'svnadmin help &lt;subcommand&gt;' for help on a specific subcommand.\n"
"Type 'svnadmin --version' to see the program version and FS modules.\n"
"\n"
"Available subcommands:\n"
"   crashtest\n"
"   create\n"
"   deltify\n"
"&hellip;"
msgstr ""
"$ svnadmin help\n"
"general usage: svnadmin SUBCOMMAND REPOS_PATH  [ARGS &amp; OPTIONS ...]\n"
"Type \"svnadmin help &lt;subcommand&gt;\" for help on a specific subcommand.\n"
"\n"
"Available subcommands:\n"
"   create\n"
"   deltify\n"
"   dump\n"
"   help (?, h)\n"
"&hellip;"

#. Tag: para
#: ch05-repository-admin.xml:979
#, fuzzy, no-c-format
msgid "We've already mentioned <command>svnadmin</command>'s <literal>create</literal> subcommand (see <xref linkend=\"svn.reposadmin.basics.creating\"/>). Most of the others we will cover later in this chapter. And you can consult <xref linkend=\"svn.ref.svnadmin\"/> for a full rundown of subcommands and what each of them offers."
msgstr "既に<command>svnadmin</command>の<literal>create</literal> サブコマンドを見てきました(<xref linkend=\"svn.reposadmin.create\"/>参照)。 他のサブコマンドのほとんどをこの章の後のほうで説明します。いまは 利用可能なサブコマンドの全体を軽く見ておきます。"

#. Tag: para
#: ch05-repository-admin.xml:993
#, fuzzy, no-c-format
msgid "<command>svnlook</command> is a tool provided by Subversion for examining the various revisions and <firstterm>transactions</firstterm> (which are revisions in-the-making) in a repository. No part of this program attempts to change the repository. <command>svnlook</command> is typically used by the repository hooks for reporting the changes that are about to be committed (in the case of the <command>pre-commit</command> hook) or that were just committed (in the case of the <command>post-commit</command> hook) to the repository. A repository administrator may use this tool for diagnostic purposes."
msgstr "<command>svnlook</command>はSubversionが提供するツールで リポジトリ中のいろいろなリビジョンやトランザクションを調査 するのに使われます。このプログラムのどの部分もリポジトリを 変更することはありません&mdash;これは単なる<quote>読み出し専用 </quote>のツールです。 <command>svnlook</command>は典型的には、まさにコミットされようとして いる変更を報告したり(<command>pre-commit</command> フック)、 コミット直後の報告(<command>post-commit</command>フック)のために リポジトリフックによって使われます。リポジトリ管理者は診断のために このツールを使うこともできます。"

#. Tag: para
#: ch05-repository-admin.xml:1005
#, no-c-format
msgid "<command>svnlook</command> has a straightforward syntax:"
msgstr "<command>svnlook</command> は単純な構文です:"

#. Tag: screen
#: ch05-repository-admin.xml:1008
#, fuzzy, no-c-format
msgid ""
"$ svnlook help\n"
"general usage: svnlook SUBCOMMAND REPOS_PATH [ARGS &amp; OPTIONS ...]\n"
"Note: any subcommand which takes the '--revision' and '--transaction'\n"
"      options will, if invoked without one of those options, act on\n"
"      the repository's youngest revision.\n"
"Type 'svnlook help &lt;subcommand&gt;' for help on a specific subcommand.\n"
"Type 'svnlook --version' to see the program version and FS modules.\n"
"&hellip;"
msgstr ""
"$ svnlook help\n"
"general usage: svnlook SUBCOMMAND REPOS_PATH [ARGS &amp; OPTIONS ...]\n"
"Note: any subcommand which takes the '--revision' and '--transaction'\n"
"      options will, if invoked without one of those options, act on\n"
"      the repository's youngest revision.\n"
"Type \"svnlook help &lt;subcommand&gt;\" for help on a specific subcommand.\n"
"&hellip;"

#. Tag: para
#: ch05-repository-admin.xml:1010
#, fuzzy, no-c-format
msgid "Nearly every one of <command>svnlook</command>'s subcommands can operate on either a revision or a transaction tree, printing information about the tree itself, or how it differs from the previous revision of the repository. You use the <option>--revision (-r)</option> and <option>--transaction (-t)</option> options to specify which revision or transaction, respectively, to examine. In the absence of both the <option>--revision (-r)</option> and <option>--transaction (-t)</option> options, <command>svnlook</command> will examine the youngest (or <quote>HEAD</quote>) revision in the repository. So the following two commands do exactly the same thing when 19 is the youngest revision in the repository located at <filename>/path/to/repos</filename>:"
msgstr "ほとんどの<command>svnlook</command>のサブコマンドは リビジョンかトランザクションツリーのどちらかに対して働き、 ツリー自身の情報か、以前のリポジトリのリビジョンとの違いを 表示します。<option>--revision</option> と <option>--transaction</option> オプションを使ってどの リビジョンまたはトランザクションについて調査するかを指定する ことができます。リビジョン番号は自然数として表示されますが、 トランザクション名称は英数字の文字列だということに注意してください。 ファイルシステムはコミットされていないトランザクションのみを表示 できることを憶えておいてください(新しいリビジョンを作れなかった トランザクション)。ほとんどのリポジトリにはそのようなトランザクション はありません。トランザクションは普通、コミットされる(そうすると 見えなくなります)か、中断後、削除されるからです。"

#. Tag: screen
#: ch05-repository-admin.xml:1025
#, fuzzy, no-c-format
msgid ""
"$ svnlook info /path/to/repos\n"
"$ svnlook info /path/to/repos -r 19"
msgstr ""
"$ svnlook info /path/to/repos\n"
"$ svnlook info /path/to/repos --revision 19"

#. Tag: para
#: ch05-repository-admin.xml:1027
#, fuzzy, no-c-format
msgid "The only exception to these rules about subcommands is the <command>svnlook youngest</command> subcommand, which takes no options, and simply prints out the repository's youngest revision number."
msgstr "サブコマンドに関する唯一の例外は<command>svnlook youngest</command> で、これはオプションをとらず、単に、<literal>HEAD</literal>リビジョンの番号を表示します。"

#. Tag: screen
#: ch05-repository-admin.xml:1032
#, no-c-format
msgid ""
"$ svnlook youngest /path/to/repos\n"
"19"
msgstr ""
"$ svnlook youngest /path/to/repos\n"
"19"

#. Tag: para
#: ch05-repository-admin.xml:1035
#, no-c-format
msgid "Keep in mind that the only transactions you can browse are uncommitted ones. Most repositories will have no such transactions, because transactions are usually either committed (in which case, you should access them as revision with the <option>--revision (-r)</option> option) or aborted and removed."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:1043
#, no-c-format
msgid "Output from <command>svnlook</command> is designed to be both human- and machine-parsable. Take as an example the output of the <literal>info</literal> subcommand:"
msgstr "<command>svnlook</command> の出力は人間にも マシンにも理解できるように設計されています。 <literal>info</literal> サブコマンドを例にします:"

#. Tag: screen
#: ch05-repository-admin.xml:1047
#, no-c-format
msgid ""
"$ svnlook info /path/to/repos\n"
"sally\n"
"2002-11-04 09:29:13 -0600 (Mon, 04 Nov 2002)\n"
"27\n"
"Added the usual\n"
"Greek tree."
msgstr ""
"$ svnlook info /path/to/repos\n"
"sally\n"
"2002-11-04 09:29:13 -0600 (Mon, 04 Nov 2002)\n"
"27\n"
"Added the usual\n"
"Greek tree."

#. Tag: para
#: ch05-repository-admin.xml:1049
#, no-c-format
msgid "The output of the <literal>info</literal> subcommand is defined as:"
msgstr "<literal>info</literal> サブコマンドの 出力は、以下のように定義されています:"

#. Tag: para
#: ch05-repository-admin.xml:1054
#, no-c-format
msgid "The author, followed by a newline."
msgstr "作業者、改行"

#. Tag: para
#: ch05-repository-admin.xml:1057
#, no-c-format
msgid "The date, followed by a newline."
msgstr "日付、改行"

#. Tag: para
#: ch05-repository-admin.xml:1060
#, no-c-format
msgid "The number of characters in the log message, followed by a newline."
msgstr "ログメッセージの長さ、改行"

#. Tag: para
#: ch05-repository-admin.xml:1064
#, no-c-format
msgid "The log message itself, followed by a newline."
msgstr "ログメッセージ自身、改行"

#. Tag: para
#: ch05-repository-admin.xml:1068
#, fuzzy, no-c-format
msgid "This output is human-readable, meaning items like the datestamp are displayed using a textual representation instead of something more obscure (such as the number of nanoseconds since the Tasty Freeze guy drove by). But the output is also machine-parsable&mdash;because the log message can contain multiple lines and be unbounded in length, <command>svnlook</command> provides the length of that message before the message itself. This allows scripts and other wrappers around this command to make intelligent decisions about the log message, such as how much memory to allocate for the message, or at least how many bytes to skip in the event that this output is not the last bit of data in the stream."
msgstr "この出力は人間が読むことができます。日付のタイムスタンプ などは、何かバイナリ表現のようなものではなく、テキスト形式になっています。 しかし、これはまたマシンも解析できる形式のものです&mdash; ログメッセージは複数行にわたることができ、長さの制限がないので、 <command>svnlook</command> はメッセージ自身の前にその長さを 表示します。これで、このコマンドのスクリプトやほかのラッパープログラムは 賢い判断ができるようになります。たとえば、メッセージにどれだけの メモリを割り当てれば良いか、とか、イベント中で少なくとも何バイト スキップしてもデータストリームの終わりにならないか、などを知ることが できます。"

#. Tag: para
#: ch05-repository-admin.xml:1082
#, fuzzy, no-c-format
msgid "<command>svnlook</command> can perform a variety of other queries: displaying subsets of bits of information we've mentioned previously, recursively listing versioned directory trees, reporting which paths were modified in a given revision or transaction, showing textual and property differences made to files and directories, and so on. See <xref linkend=\"svn.ref.svnlook\"/> for a full reference of <command>svnlook</command>'s features."
msgstr "<command>svnlook</command> は他にもいろいろな問い合わせをしたり、 いままで説明した情報の一部を表示したり、指定したリビジョンや トランザクションのどのパスが修正されたかを報告したり、ファイルや ディレクトリに対するテキストや属性の相違点を表示したり、などなど ができます。以下は<command>svnlook</command>が理解できる現時点 でのサブコマンドの簡単な説明の一覧と、その出力です:"

#. Tag: para
#: ch05-repository-admin.xml:1097
#, fuzzy, no-c-format
msgid "While it won't be the most commonly used tool at the administrator's disposal, <command>svndumpfilter</command> provides a very particular brand of useful functionality&mdash;the ability to quickly and easily modify streams of Subversion repository history data by acting as a path-based filter."
msgstr "管理者が自由にしたい場合に最もよく利用されるツールというわけでは ありませんが、 <command>svndumpfilter</command>は非常に特殊な 役に立つ機能を提供しています&mdash;パスベースのフィルタとして 実行することによってそのダンプデータをすばやく簡単に修正することが できるのです。保存したいと思うパスのリストか、保存したくないパスの リストを単に与えてこのフィルタにリポジトリのダンプデータをパイプで 入力するだけです。結果は、あなたが(明示的、あるいは暗黙に)要求した バージョン化されたパスのみを含むような修正済みダンプデータになります。"

#. Tag: para
#: ch05-repository-admin.xml:1104
#, no-c-format
msgid "The syntax of <command>svndumpfilter</command> is as follows:"
msgstr "<command>svndumpfilter</command> の構文は以下のものです:"

#. Tag: screen
#: ch05-repository-admin.xml:1107
#, fuzzy, no-c-format
msgid ""
"$ svndumpfilter help\n"
"general usage: svndumpfilter SUBCOMMAND [ARGS &amp; OPTIONS ...]\n"
"Type \"svndumpfilter help &lt;subcommand&gt;\" for help on a specific subcommand.\n"
"Type 'svndumpfilter --version' to see the program version.\n"
"  \n"
"Available subcommands:\n"
"   exclude\n"
"   include\n"
"   help (?, h)"
msgstr ""
"$ svndumpfilter help\n"
"general usage: svndumpfilter SUBCOMMAND [ARGS &amp; OPTIONS ...]\n"
"Type \"svndumpfilter help &lt;subcommand&gt;\" for help on a specific subcommand.\n"
"\n"
"Available subcommands:\n"
"   exclude\n"
"   include\n"
"   help (?, h)"

#. Tag: para
#: ch05-repository-admin.xml:1109
#, no-c-format
msgid "There are only two interesting subcommands. They allow you to make the choice between explicit or implicit inclusion of paths in the stream:"
msgstr "興味深いサブコマンドは二つだけです。これらのサブコマンドを使って、 ストリーム中で明示的に、あるいは暗黙に取得するパスを選ぶことができます。:"

#. Tag: literal
#: ch05-repository-admin.xml:1115
#, no-c-format
msgid "exclude"
msgstr "exclude"

#. Tag: para
#: ch05-repository-admin.xml:1117
#, no-c-format
msgid "Filter out a set of paths from the dump data stream."
msgstr "ダンプデータストリームから特定のパスを排除します。"

#. Tag: literal
#: ch05-repository-admin.xml:1123
#, no-c-format
msgid "include"
msgstr "include"

#. Tag: para
#: ch05-repository-admin.xml:1125
#, no-c-format
msgid "Allow only the requested set of paths to pass through the dump data stream."
msgstr "ダンプデータストリームから、指定したパスだけを 出力するようにします。"

#. Tag: para
#: ch05-repository-admin.xml:1131
#, fuzzy, no-c-format
msgid "You can learn more about these subcommands and <command>svndumpfilter</command>'s unique purpose in <xref linkend=\"svn.reposadmin.maint.filtering\"/>."
msgstr "<command>svn status</command>に関する詳細は<xref linkend=\"svn.tour.cycle.examine.status\"/> を参照してください。"

#. Tag: para
#: ch05-repository-admin.xml:1141
#, no-c-format
msgid "The <command>svnsync</command> program, which is new to the 1.4 release of Subversion, provides all the functionality required for maintaining a read-only mirror of a Subversion repository. The program really has one job&mdash;to transfer one repository's versioned history into another repository. And while there are few ways to do that, its primary strength is that it can operate remotely&mdash;the <quote>source</quote> and <quote>sink</quote> <footnote> <para>Or is that, the <quote>sync</quote>?</para> </footnote> repositories may be on different computers from each other and from <command>svnsync</command> itself."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:1156
#, no-c-format
msgid "As you might expect, <command>svnsync</command> has a syntax that looks very much like every other program we've mentioned in this chapter:"
msgstr ""

#. Tag: screen
#: ch05-repository-admin.xml:1160
#, fuzzy, no-c-format
msgid ""
"$ svnsync help\n"
"general usage: svnsync SUBCOMMAND DEST_URL  [ARGS &amp; OPTIONS ...]\n"
"Type 'svnsync help &lt;subcommand&gt;' for help on a specific subcommand.\n"
"Type 'svnsync --version' to see the program version and RA modules.\n"
"\n"
"Available subcommands:\n"
"   initialize (init)\n"
"   synchronize (sync)\n"
"   copy-revprops\n"
"   help (?, h)\n"
"$"
msgstr ""
"$ svnadmin help\n"
"general usage: svnadmin SUBCOMMAND REPOS_PATH  [ARGS &amp; OPTIONS ...]\n"
"Type \"svnadmin help &lt;subcommand&gt;\" for help on a specific subcommand.\n"
"\n"
"Available subcommands:\n"
"   create\n"
"   deltify\n"
"   dump\n"
"   help (?, h)\n"
"&hellip;"

#. Tag: para
#: ch05-repository-admin.xml:1162
#, fuzzy, no-c-format
msgid "We talk more about replication repositories with <command>svnsync</command> in <xref linkend=\"svn.reposadmin.maint.replication\"/>."
msgstr "未解決のトランザクションをリポジトリから削除します。 これは、<xref linkend=\"svn.reposadmin.maint.cleanup\"/>で詳しく触れられています。"

#. Tag: title
#: ch05-repository-admin.xml:1170
#, no-c-format
msgid "Berkeley DB Utilities"
msgstr "Berkeley DB ユーティリティー"

#. Tag: para
#: ch05-repository-admin.xml:1172
#, fuzzy, no-c-format
msgid "If you're using a Berkeley DB repository, then all of your versioned filesystem's structure and data live in a set of database tables within the <filename>db/</filename> subdirectory of your repository. This subdirectory is a regular Berkeley DB environment directory, and can therefore be used in conjunction with any of the Berkeley database tools, typically provided as part of the Berkeley DB distribution."
msgstr "Berkeley DB リポジトリを使っている場合は、バージョン化されたファイルシ ステム構造とデータ全体はリポジトリの <filename>db</filename> サブディレクトリにあるいくつかのデータベーステーブルに保存されています。 このサブディレクトリは通常の Berkeley DB 環境ディレクトリで、どのよう な Berkeley データベースツールとも組み合わせて使うことができます(これ らのツールに関するドキュメントはSleepyCat のウェブサイト<ulink url=\"http://www.sleepycat.com/\"></ulink>にあります)。"

#. Tag: para
#: ch05-repository-admin.xml:1181
#, no-c-format
msgid "For day-to-day Subversion use, these tools are unnecessary. Most of the functionality typically needed for Subversion repositories has been duplicated in the <command>svnadmin</command> tool. For example, <command>svnadmin list-unused-dblogs</command> and <command>svnadmin list-dblogs</command> perform a subset of what is provided by the Berkeley <command>db_archive</command> command, and <command>svnadmin recover</command> reflects the common use cases of the <command>db_recover</command> utility."
msgstr "通常のSubversion の利用ではこれらのツールは不要です。Subversion リポジトリ に必要なほとんどの機能は<command>svnadmin</command>を使って実行する ことができます。たとえば<command>svnadmin list-unused-dblogs</command>と <command>svnadmin list-dblogs</command>は Berkeley の <command>db_archive</command>で提供されている機能のサブセットであり、 <command>svnadmin recover</command>は <command>db_recover</command> ユーティリティーの普通の状況での利用の仕方を反映したコマンドです。"

#. Tag: para
#: ch05-repository-admin.xml:1192
#, fuzzy, no-c-format
msgid "However, there are still a few Berkeley DB utilities that you might find useful. The <command>db_dump</command> and <command>db_load</command> programs write and read, respectively, a custom file format which describes the keys and values in a Berkeley DB database. Since Berkeley databases are not portable across machine architectures, this format is a useful way to transfer those databases from machine to machine, irrespective of architecture or operating system. As we describe later in this chapter, you can also use <command>svnadmin dump</command> and <command>svnadmin load</command> for similar purposes, but <command>db_dump</command> and <command>db_load</command> can do certain jobs just as well and much faster. They can also be useful if the experienced Berkeley DB hacker needs to do in-place tweaking of the data in a BDB-backed repository for some reason, which is something Subversion's utilities won't allow. Also, the <command>db_stat</command> utility can provide useful information about the status of your Berkeley DB environment, including detailed statistics about the locking and storage subsystems."
msgstr "それでもいくつかの Berkeley DB ユーティリティーは知っていると便利です。 <command>db_dump</command> と <command>db_load</command> プログラムはBerkeley DB データベース のキーと値を表現するカスタム形式ファイルの読み書きを実行します。 Berkeley データベースはマシンアーキテクチャをまたいだ互換性 があるので、この形式はアーキテクチャやOSの違いを意識せずに データベースマシン間で転送するのに便利な方法です。また、 <command>db_stat</command>ユーティリティーは Berkeley DB 環境の 状態についての有用な情報を表示します。これにはサブシステムの ロックやデータ保存についての詳細統計情報が含まれます。"

#. Tag: para
#: ch05-repository-admin.xml:1213
#, no-c-format
msgid "For more information on the Berkeley DB tool chain, visit the documentation section of the Berkeley DB section of Oracle's website, located at <ulink url=\"http://www.oracle.com/technology/documentation/berkeley-db/db/\"></ulink>."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:1222
#, fuzzy, no-c-format
msgid "Commit Log Message Correction"
msgstr "トランザクションのコミット"

#. Tag: para
#: ch05-repository-admin.xml:1224
#, fuzzy, no-c-format
msgid "Sometimes a user will have an error in her log message (a misspelling or some misinformation, perhaps). If the repository is configured (using the <literal>pre-revprop-change</literal> hook; see <xref linkend=\"svn.reposadmin.create.hooks\"/>) to accept changes to this log message after the commit is finished, then the user can <quote>fix</quote> her log message remotely using the <command>svn</command> program's <literal>propset</literal> command (see <xref linkend=\"svn.ref.svn.c.propset\"/>). However, because of the potential to lose information forever, Subversion repositories are not, by default, configured to allow changes to unversioned properties&mdash;except by an administrator."
msgstr "ときどきユーザはログメッセージに間違いを見つけます(スペルミスや 間違った情報など)。もしリポジトリが( <literal>pre-revprop-change</literal> と <literal>post-revprop-change</literal> フックを使って。 <xref linkend=\"svn.reposadmin.create.hooks\"/>参照) コミット完了後このログメッセージの変更を受け付けるとすると ユーザは、<command>svn</command> プログラムの <literal>propset</literal>コマンドを使ってログメッセージを ネットワーク越しに<quote>修正</quote> することができます。 (<xref linkend=\"svn.ref\"/>参照) しかし、情報が永久に失われてしまうことを防ぐため、Subversion リポジトリはデフォルトではそれをさせません。デフォルトは、 バージョン化されない属性は、管理者のみが変更することが できます。"

#. Tag: para
#: ch05-repository-admin.xml:1238
#, no-c-format
msgid "If a log message needs to be changed by an administrator, this can be done using <command>svnadmin setlog</command>. This command changes the log message (the <literal>svn:log</literal> property) on a given revision of a repository, reading the new value from a provided file."
msgstr "もしログメッセージを管理者が変更する必要がある場合、 <command>svnadmin setlog</command>を使います。このコマンドは リポジトリの指定したリビジョンのログメッセージ(<literal>svn:log</literal> 属性 )を、用意したファイルから新しい値を読み出し形で変更します"

#. Tag: screen
#: ch05-repository-admin.xml:1244
#, no-c-format
msgid ""
"$ echo \"Here is the new, correct log message\" &gt; newlog.txt\n"
"$ svnadmin setlog myrepos newlog.txt -r 388"
msgstr ""
"$ echo \"Here is the new, correct log message\" &gt; newlog.txt\n"
"$ svnadmin setlog myrepos newlog.txt -r 388"

#. Tag: para
#: ch05-repository-admin.xml:1246
#, fuzzy, no-c-format
msgid "The <command>svnadmin setlog</command> command, by default, is still bound by the same protections against modifying unversioned properties as a remote client is&mdash;the <literal>pre-</literal> and <literal>post-revprop-change</literal> hooks are still triggered, and therefore must be set up to accept changes of this nature. But an administrator can get around these protections by passing the <option>--bypass-hooks</option> option to the <command>svnadmin setlog</command> command."
msgstr "<command>svnadmin setlog</command> コマンドだけでは、リモートクライアント としてバージョン化されていない属性を修正する場合と同じ制約を 受けます&mdash;つまり<literal>pre-</literal>と<literal>post-revprop-change</literal> フックはやはり実行され、この仕組みで変更される修正点は反映されて しまいます。しかし管理者はこのような保護機能を<command>svnadmin setlog</command> コマンドに<option>--bypass-hooks</option>を指定することで回避できます。"

#. Tag: para
#: ch05-repository-admin.xml:1258
#, no-c-format
msgid "Remember, though, that by bypassing the hooks, you are likely avoiding such things as email notifications of property changes, backup systems which track unversioned property changes, and so on. In other words, be very careful about what you are changing, and how you change it."
msgstr "しかしフックを回避すると、属性変更、バージョン化されていない属性変更 を追うためのバックアップシステム、などなどに関係した通知 メール も 回避されてしまうことに注意してください。言い換えると、何を、どのように 修正するかについて、非常に注意して実行してください。"

#. Tag: title
#: ch05-repository-admin.xml:1271
#, no-c-format
msgid "Managing Disk Space"
msgstr "ディスク領域の管理"

#. Tag: para
#: ch05-repository-admin.xml:1273
#, fuzzy, no-c-format
msgid "While the cost of storage has dropped incredibly in the past few years, disk usage is still a valid concern for administrators seeking to version large amounts of data. Every bit of version history information stored in the live repository needs to be backed up elsewhere, perhaps multiple times as part of rotating backup schedules. It is useful to know what pieces of Subversion's repository data need to remain on the live site, which need to be backed up, and which can be safely removed."
msgstr "ここ数年で記憶装置のコストは非常に低くなってきた一方で、ディスクの利用方法 は、大量のデータをバージョン管理するために、システム管理者にとっては、やはり 依然として考慮すべきことです。動作中のリポジトリによって消費される追加の 領域はオフラインでバックアップすることが必要な領域でもあり、バックアップ のスケジュール管理を考えると、何倍かになるでしょう。Berkeley DB リポジ トリを使う場合には、データ保管の仕組みは複雑なデータベースシステムである ので、データのどの部分をオンラインのままに残し、どの部分にバックアップが 必要で、どの部分を安全に削除できるか、ということについて理解しておくことには 意味があります。 この節は Berkeley DB だけに関係しています。FSFS リポジトリには削除したり、 調整が必要な特殊な追加データはありません。"

#. Tag: title
#: ch05-repository-admin.xml:1285
#, no-c-format
msgid "How Subversion saves disk space"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:1287
#, fuzzy, no-c-format
msgid "To keep the repository small, Subversion uses <firstterm>deltification</firstterm> (or, <quote>deltified storage</quote>) within the repository itself. Deltification involves encoding the representation of a chunk of data as a collection of differences against some other chunk of data. If the two pieces of data are very similar, this deltification results in storage savings for the deltified chunk&mdash;rather than taking up space equal to the size of the original data, it takes up only enough space to say, <quote>I look just like this other piece of data over here, except for the following couple of changes</quote>. The result is that most of the repository data that tends to be bulky&mdash;namely, the contents of versioned files&mdash;is stored at a much smaller size than the original <quote>fulltext</quote> representation of that data. And for repositories created with Subversion 1.4 or later, the space savings are even better&mdash;now those fulltext representations of file contents are themselves compressed."
msgstr "リポジトリのデータサイズをできるだけ小さくするために Subversion は リポジトリに対して<firstterm>差分化</firstterm>(あるいは<quote> 差分記憶</quote>) の処理をします。差分化は別のデータの部分に対する 差分の集まりをひとつのデータの塊として表現するものです。二つのデータ が非常に似ていればこの差分化は差分化されたデータの記憶領域を節約します &mdash;もとのデータサイズと同じだけの領域を確保するのにくらべて小さく なります。いわば、<quote>以下の変更点をのぞけば、他の点についてはここに あるデータのままですよ</quote>という表現に必要なだけの領域で済みます。 具体的に言うと、ファイルの新しいバージョンがリポジトリにコミットされる たび、Subversion は前のバージョン(実際には前のバージョンのいくつか)を この新しいバージョンに対する差分として表現します。その結果、大きくなり がちなリポジトリデータ&mdash;つまりバージョン化されたファイルの内容 &mdash;の大部分を、もとの<quote>完全なテキスト</quote>として 保存するよりはずっと小さなサイズで格納することができます。"

#. Tag: para
#: ch05-repository-admin.xml:1308
#, fuzzy, no-c-format
msgid "Because all of the data that is subject to deltification in a BDB-backed repository is stored in a single Berkeley DB database file, reducing the size of the stored values will not immediately reduce the size of the database file itself. Berkeley DB will, however, keep internal records of unused areas of the database file, and consume those areas first before growing the size of the database file. So while deltification doesn't produce immediate space savings, it can drastically slow future growth of the database."
msgstr "差分化の対象となるすべての Subversion リポジトリデータは単一の Berkeley DB データベースファイルに保存されるので保存されているデータのサイズを 小さくしたからといって必ずしもデータベースファイル自身のサイズを減らす ことにはなりません。しかし Berkeley DB はデータベースファイル中の未使用 領域の内部的な記録を保存しておりデータベースファイルのサイズを拡張する 前にそのような領域をまず利用します。そのため差分化は直接に空間の節約につな がりはしなくても今後のデータベースサイズが拡大するスピードを有効に押える ことができます。"

#. Tag: title
#: ch05-repository-admin.xml:1324
#, fuzzy, no-c-format
msgid "Removing dead transactions"
msgstr "死んだトランザクションの削除。"

#. Tag: para
#: ch05-repository-admin.xml:1326
#, fuzzy, no-c-format
msgid "Though they are uncommon, there are circumstances in which a Subversion commit process might fail, leaving behind in the repository the remnants of the revision-to-be that wasn't&mdash;an uncommitted transaction and all the file and directory changes associated with it. This could happen for several reasons: perhaps the client operation was inelegantly terminated by the user, or a network failure occurred in the middle of an operation. Regardless of the reason, dead transactions can happen. They don't do any real harm, other than consuming disk space. A fastidious administrator may nonetheless wish to remove them."
msgstr "別のよくある <command>svnadmin</command> の使い方は終了していない &mdash;多分死んでしまった&mdash;Subversionトランザクションに関する リポジトリへの問い合わせです。コミットが失敗したとき、普通 トランザクションはきれいに消去されます。つまりトランザクション はリポジトリから削除され、そのトランザクションに(だけに)関連した データも同様に削除されます。 しかし、しばしばトランザクションの掃除が起こらずに失敗することが あります。これにはいくつかの理由が考えられます: 多分クライアントの 操作がユーザによって乱暴に終了されたか、ネットワークの異常などが 処理の途中で起こった場合です。理由にかかわらず、死んだままの トランザクションが残ることはありえます。ディスクをわずかに食うことを のぞけば、このようなトランザクションは全く無害です。それでも 潔癖な管理者はこのようなトランザクションを削除したいと思うかも 知れません。"

#. Tag: para
#: ch05-repository-admin.xml:1339
#, no-c-format
msgid "You can use <command>svnadmin</command>'s <literal>lstxns</literal> command to list the names of the currently outstanding transactions."
msgstr "<command>svnadmin</command>の<literal>lstxns</literal> コマンド を使って、その時点での未完了のトランザクションの名前の一覧表示 することができます。"

#. Tag: screen
#: ch05-repository-admin.xml:1343
#, no-c-format
msgid ""
"$ svnadmin lstxns myrepos\n"
"19\n"
"3a1\n"
"a45\n"
"$"
msgstr ""
"$ svnadmin lstxns myrepos\n"
"19\n"
"3a1\n"
"a45\n"
"$"

#. Tag: para
#: ch05-repository-admin.xml:1345
#, fuzzy, no-c-format
msgid "Each item in the resultant output can then be used with <command>svnlook</command> (and its <option>--transaction (-t)</option> option) to determine who created the transaction, when it was created, what types of changes were made in the transaction&mdash;information that is helpful in determining whether or not the transaction is a safe candidate for removal! If you do indeed want to remove a transaction, its name can be passed to <command>svnadmin rmtxns</command>, which will perform the cleanup of the transaction. In fact, the <literal>rmtxns</literal> subcommand can take its input directly from the output of <literal>lstxns</literal>!"
msgstr "出力結果のそれぞれの項目は<command>svnlook</command> (とその<option>--transaction</option> オプション)で 使うことができ、誰がトランザクションを作り、それは いつで、どのような変更がトランザクションに起きたか、を 知ることができます。 &mdash;言い換えると、そのトランザクションは削除対象として 安全な候補なのかどうか、ということをです。もしそうなら、 トランザクションの名前を<command>svnadmin rmtxns</command> に渡すことができ、そのトランザクションはきれいに削除 されます。<literal>rmtxns</literal> サブコマンドは、 <literal>lstxns</literal>の出力をそのまま入力として とることもできます!"

#. Tag: screen
#: ch05-repository-admin.xml:1359
#, no-c-format
msgid ""
"$ svnadmin rmtxns myrepos `svnadmin lstxns myrepos`\n"
"$"
msgstr ""
"$ svnadmin rmtxns myrepos `svnadmin lstxns myrepos`\n"
"$"

#. Tag: para
#: ch05-repository-admin.xml:1361
#, fuzzy, no-c-format
msgid "If you use these two subcommands like this, you should consider making your repository temporarily inaccessible to clients. That way, no one can begin a legitimate transaction before you start your cleanup. <xref linkend=\"svn.reposadmin.maint.diskspace.deadtxns.ex-1\"/> contains a bit of shell-scripting that can quickly generate information about each outstanding transaction in your repository."
msgstr "このような二つのサブコマンドを使う場合、リポジトリを一時的に クライアントからアクセスできなくする必要があります。 これで誰もあなたがクリーンアップを始める前に正しいトランザクション を開始できなくなります。以下は、リポジトリ内の未解決のトランザクション のそれぞれについての情報をすばやく生成するためのちょっとした スクリプトです:"

#. Tag: title
#: ch05-repository-admin.xml:1371
#, no-c-format
msgid "txn-info.sh (Reporting Outstanding Transactions)"
msgstr "txn-info.sh (未解決トランザクションの表示)"

#. Tag: programlisting
#: ch05-repository-admin.xml:1373
#, fuzzy, no-c-format
msgid ""
"#!/bin/sh\n"
"\n"
"### Generate informational output for all outstanding transactions in\n"
"### a Subversion repository.\n"
"\n"
"REPOS=\"${1}\"\n"
"if [ \"x$REPOS\" = x ] ; then\n"
"  echo \"usage: $0 REPOS_PATH\"\n"
"  exit\n"
"fi\n"
"\n"
"for TXN in `svnadmin lstxns ${REPOS}`; do \n"
"  echo \"---[ Transaction ${TXN} ]-------------------------------------------\"\n"
"  svnlook info \"${REPOS}\" -t \"${TXN}\"\n"
"done"
msgstr ""
"#!/bin/sh\n"
"\n"
"### Generate informational output for all outstanding transactions in\n"
"### a Subversion repository.\n"
"\n"
"REPOS=\"${1}\"\n"
"if [ \"x$REPOS\" = x ] ; then\n"
"  echo \"usage: $0 REPOS_PATH\"\n"
"  exit\n"
"fi\n"
"\n"
"for TXN in `svnadmin lstxns ${REPOS}`; do \n"
"  echo \"---[ Transaction ${TXN} ]-------------------------------------------\"\n"
"  svnlook info \"${REPOS}\" --transaction \"${TXN}\"\n"
"done"

#. Tag: para
#: ch05-repository-admin.xml:1376
#, fuzzy, no-c-format
msgid "The output of the script is basically a concatenation of several chunks of <command>svnlook info</command> output (see <xref linkend=\"svn.reposadmin.maint.tk.svnlook\"/>), and will look something like:"
msgstr "このスクリプトを <command>/path/to/txn-info.sh /path/to/repos</command>のように して実行できます。出力は基本的には<command>svnlook info</command> 出力のいろいろな断片をつないだようなものになります。 (<xref linkend=\"svn.reposadmin.maint.tk.svnlook\"/>参照), 以下のような 感じです:"

#. Tag: screen
#: ch05-repository-admin.xml:1381
#, no-c-format
msgid ""
"$ txn-info.sh myrepos\n"
"---[ Transaction 19 ]-------------------------------------------\n"
"sally\n"
"2001-09-04 11:57:19 -0500 (Tue, 04 Sep 2001)\n"
"0\n"
"---[ Transaction 3a1 ]-------------------------------------------\n"
"harry\n"
"2001-09-10 16:50:30 -0500 (Mon, 10 Sep 2001)\n"
"39\n"
"Trying to commit over a faulty network.\n"
"---[ Transaction a45 ]-------------------------------------------\n"
"sally\n"
"2001-09-12 11:09:28 -0500 (Wed, 12 Sep 2001)\n"
"0\n"
"$"
msgstr ""
"$ txn-info.sh myrepos\n"
"---[ Transaction 19 ]-------------------------------------------\n"
"sally\n"
"2001-09-04 11:57:19 -0500 (Tue, 04 Sep 2001)\n"
"0\n"
"---[ Transaction 3a1 ]-------------------------------------------\n"
"harry\n"
"2001-09-10 16:50:30 -0500 (Mon, 10 Sep 2001)\n"
"39\n"
"Trying to commit over a faulty network.\n"
"---[ Transaction a45 ]-------------------------------------------\n"
"sally\n"
"2001-09-12 11:09:28 -0500 (Wed, 12 Sep 2001)\n"
"0\n"
"$"

#. Tag: para
#: ch05-repository-admin.xml:1383
#, no-c-format
msgid "A long-abandoned transaction usually represents some sort of failed or interrupted commit. A transaction's datestamp can provide interesting information&mdash;for example, how likely is it that an operation begun nine months ago is still active?"
msgstr "長く放置されているトランザクションは普通は何かに失敗したか、コミットを 中断されたかのどちらかです。トランザクションの日付スタンプは 役に立つ情報を与えてくれます &mdash; たとえば 9 ヵ月も前に始まった 操作がいまだに有効である可能性など、いったいどの程度あるのでしょうか?"

#. Tag: para
#: ch05-repository-admin.xml:1389
#, fuzzy, no-c-format
msgid "In short, transaction cleanup decisions need not be made unwisely. Various sources of information&mdash;including Apache's error and access logs, Subversion's operational logs, Subversion revision history, and so on&mdash;can be employed in the decision-making process. And of course, an administrator can often simply communicate with a seemingly dead transaction's owner (via email, for example) to verify that the transaction is, in fact, in a zombie state."
msgstr "簡単に言って、トランザクションのクリーンアップの決定は、無分別に やる必要はありません。いろいろな情報源&mdash;Apacheのエラーログや アクセスログ、成醐ｻ駈ｵたSubversionのコミットログ、などなど&mdash;が どうしたら良いかを決める上で役に立ちます。最後に、管理者はしばしば 死んだトランザクションの所有者と思われる人と、(メールなどで)その 死にかかったトランザクションの状態を確認することができます。"

#. Tag: title
#: ch05-repository-admin.xml:1402
#, fuzzy, no-c-format
msgid "Purging unused Berkeley DB logfiles"
msgstr "利用していないBerkeley DB ログを削除します。"

#. Tag: para
#: ch05-repository-admin.xml:1404
#, fuzzy, no-c-format
msgid "Until recently, the largest offender of disk space usage with respect to BDB-backed Subversion repositories was the log files in which Berkeley DB performs its pre-writes before modifying the actual database files. These files capture all the actions taken along the route of changing the database from one state to another&mdash;while the database files, at any given time, reflect a particular state, the log files contain all the many changes along the way <emphasis>between</emphasis> states. Thus, they can grow and accumulate quite rapidly."
msgstr "最近まで、Subversion リポジトリに関して最も多くディスクを消費する部分は Berkeley DB が実際にデータベースファイルを修正する前に前もっと書き込むための ログファイルの領域でした。これらのファイルはデータベースのある状態から 別の状態への変化の経緯にそったすべての操作を記録します&mdash; データベース ファイルはある特定の時刻にその状態を反映される一方でログファイルはその前後 の状態のすべての本稿を含んでいます。そのようなわけでログファイルは非常に 早いスピードでサイズを増やします。"

#. Tag: para
#: ch05-repository-admin.xml:1415
#, fuzzy, no-c-format
msgid "Fortunately, beginning with the 4.2 release of Berkeley DB, the database environment has the ability to remove its own unused log files automatically. Any repositories created using an <command>svnadmin</command> which is compiled against Berkeley DB version 4.2 or greater will be configured for this automatic log file removal. If you don't want this feature enabled, simply pass the <option>--bdb-log-keep</option> option to the <command>svnadmin create</command> command. If you forget to do this, or change your mind at a later time, simply edit the <filename>DB_CONFIG</filename> file found in your repository's <filename>db</filename> directory, comment out the line which contains the <literal>set_flags DB_LOG_AUTOREMOVE</literal> directive, and then run <command>svnadmin recover</command> on your repository to force the configuration changes to take effect. See <xref linkend=\"svn.reposadmin.create.bdb\"/> for more information about database configuration."
msgstr "ありがたいことに、Berkeley DB のリリース 4.2 からデータベース環境は 特に外部操作することなしに未使用のログファイルを削除する能力を持つ ようになりました。Berkeley DB バージョン 4.2 かそれ以降でコンパイルされた <command>svnadmin</command>はこの自動的なログファイルの削除が設定 されています。この機能を有効にしたくない場合には単に <command>svnadmin create</command>コマンドで<option>--bdb-log-keep</option> を渡してください。これを忘れたり、後で変更したい場合には、単に リポジトリの<filename>db</filename>ディレクトリ中にある<filename>DB_CONFIG</filename> を編集して、<literal>set_flags DB_LOG_AUTOREMOVE</literal>ディレクティブをコメントアウトしてから この変更を強制的に有効にするためにそのリポジトリに対して<command>svnadmin recover</command> を実行してください。データベースの設定についての詳細は <xref linkend=\"svn.reposadmin.create.bdb\"/>を参照してください。"

#. Tag: para
#: ch05-repository-admin.xml:1434
#, no-c-format
msgid "Without some sort of automatic log file removal in place, log files will accumulate as you use your repository. This is actually somewhat of a feature of the database system&mdash;you should be able to recreate your entire database using nothing but the log files, so these files can be useful for catastrophic database recovery. But typically, you'll want to archive the log files that are no longer in use by Berkeley DB, and then remove them from disk to conserve space. Use the <command>svnadmin list-unused-dblogs</command> command to list the unused log files:"
msgstr "このような自動ログファイル削除の仕組みを利用しなければ、 リポジトリを利用するにつれてログファイルは蓄積されていきます。 それてこれは実際にデータベースシステムであれば当然付いている機能です&mdash; ログファイル以外に何も残っていないような状況でデータベース全体を再構成する ことができるようになっていなくてはならず、そのようなログファイルは データベースの壊滅的な破壊からの復旧で利用できなければならないからです。 しかし普通は Berkeley DB で既に利用されていないログファイルをアーカイブし、 その後ディスクから削除することで領域を広げようとするでしょう。利用していない ログファイルの一覧を見るには<command>svnadmin list-unused-dblogs</command>コマンドを使ってください:"

#. Tag: screen
#: ch05-repository-admin.xml:1446
#, fuzzy, no-c-format
msgid ""
"$ svnadmin list-unused-dblogs /path/to/repos\n"
"/path/to/repos/log.0000000031\n"
"/path/to/repos/log.0000000032\n"
"/path/to/repos/log.0000000033\n"
"&hellip;\n"
"$ rm `svnadmin list-unused-dblogs /path/to/repos`\n"
"## disk space reclaimed!"
msgstr ""
"$ svnadmin list-unused-dblogs /path/to/repos\n"
"/path/to/repos/log.0000000031\n"
"/path/to/repos/log.0000000032\n"
"/path/to/repos/log.0000000033\n"
"\n"
"$ svnadmin list-unused-dblogs /path/to/repos | xargs rm\n"
"## disk space reclaimed!"

#. Tag: para
#: ch05-repository-admin.xml:1449
#, no-c-format
msgid "BDB-backed repositories whose log files are used as part of a backup or disaster recovery plan should <emphasis>not</emphasis> make use of the log file autoremoval feature. Reconstruction of a repository's data from log files can only be accomplished when <emphasis>all</emphasis> the log files are available. If some of the log files are removed from disk before the backup system has a chance to copy them elsewhere, the incomplete set of backed-up log files is essentially useless."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:1466
#, fuzzy, no-c-format
msgid "Berkeley DB Recovery"
msgstr "Berkeley DB ユーティリティー"

#. Tag: para
#: ch05-repository-admin.xml:1468
#, no-c-format
msgid "As mentioned in <xref linkend=\"svn.reposadmin.basics.backends.bdb\"/>, a Berkeley DB repository can sometimes be left in frozen state if not closed properly. When this happens, an administrator needs to rewind the database back into a consistent state. This is unique to BDB-backed repositories, though&mdash;if you are using FSFS-backed ones instead, this won't apply to you. And for those of you using Subversion 1.4 with Berkeley DB 4.4 or better, you should find that Subversion has become much more resilient in these types of situations. Still, wedged Berkeley DB repositories do occur, and an administrator needs to know how to safely deal with this circumstance."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:1481
#, fuzzy, no-c-format
msgid "In order to protect the data in your repository, Berkeley DB uses a locking mechanism. This mechanism ensures that portions of the database are not simultaneously modified by multiple database accessors, and that each process sees the data in the correct state when that data is being read from the database. When a process needs to change something in the database, it first checks for the existence of a lock on the target data. If the data is not locked, the process locks the data, makes the change it wants to make, and then unlocks the data. Other processes are forced to wait until that lock is removed before they are permitted to continue accessing that section of the database. (This has nothing to do with the locks that you, as a user, can apply to versioned files within the repository; we try to clear up the confusion caused by this terminology collision in <xref linkend=\"svn.advanced.locking.meanings\"/>.)"
msgstr "リポジトリ中のデータを保護するため Berkeley DB はロックのしくみ を利用しています。このしくみはデータベースの特定のが同時に複数のデータベー スアクセスによって修正されないことを保証するためのもので、それぞれのプ ロセスから見たときには、読み込み時にはデータは正しい状態にあるように見 えます。データベース中のどこかを変更する必要ある場合にはまず対象となる データがロックされていないかどうかを確認します。もしロックされていなけ ればそのプロセスはデータをロックし、必要な修正を加え、そのデータに対す るロックを外します。他のプロセスはデータベースの内部に引き続きアクセス できるようになる前にロックファイルが削除されるまで待たされます。"

#. Tag: para
#: ch05-repository-admin.xml:1498
#, fuzzy, no-c-format
msgid "In the course of using your Subversion repository, fatal errors or interruptions can prevent a process from having the chance to remove the locks it has placed in the database. The result is that the back-end database system gets <quote>wedged</quote>. When this happens, any attempts to access the repository hang indefinitely (since each new accessor is waiting for a lock to go away&mdash;which isn't going to happen)."
msgstr "Subversionリポジトリを使う上で、致命的なエラー(ディスクがいっぱいに なったり、メモリがなくなったり)や、割り込みによって、データベースに かけたロックを削除する機会をなくしてしまうことがあります。その結果 バックエンドのデータベースは<quote>固まって</quote>しまいます。 こうなったときには、リポジトリへのどのようなアクセスも永久に待たされる ことになってしまいます。(というのは、すべての新しいアクセスはロック が解除されるのを待ちますが、それは決してやってこないからです)"

#. Tag: para
#: ch05-repository-admin.xml:1507
#, fuzzy, no-c-format
msgid "If this happens to your repository, don't panic. The Berkeley DB filesystem takes advantage of database transactions and checkpoints and pre-write journaling to ensure that only the most catastrophic of events <footnote> <para>E.g.: hard drive + huge electromagnet = disaster.</para> </footnote> can permanently destroy a database environment. A sufficiently paranoid repository administrator will have made off-site backups of the repository data in some fashion, but don't head off to the tape backup storage closet just yet."
msgstr "まず、そういうことがリポジトリに起こっても、悲鳴をあげないで ください。Berkeley DBのファイルシステムはデータベーストランザクション とチェックポイント、それに事前ジャーナル書き込みの仕組みをうまく 利用していて、本当に破滅的な出来事以外は <footnote> <para>たとえば: ハードディスク + 強い電磁場 = 破滅。</para> </footnote> データベース環境を永久に葬り去ることはできないことを保証します。 十分神経質なリポジトリ管理者は何んらかの方法でリポジトリデータの オフラインバックアップをとっているかも知れませんが、バックアップテープを リストアしてくれとシステム管理者を呼ぶのはまだです。"

#. Tag: para
#: ch05-repository-admin.xml:1519
#, fuzzy, no-c-format
msgid "Instead, use the following recipe to attempt to <quote>unwedge</quote> your repository:"
msgstr "次に、以下の手順を使って、リポジトリの<quote>復旧</quote> を試してみてください:"

#. Tag: para
#: ch05-repository-admin.xml:1524
#, fuzzy, no-c-format
msgid "Make sure that there are no processes accessing (or attempting to access) the repository. For networked repositories, this means shutting down the Apache HTTP Server or svnserve daemon, too."
msgstr "リポジトリにアクセスしている(あるいはしようとしている)プロセスが 一つもないことを確認してください。ネットワークアクセス可能な リポジトリでは、これは Apache HTTP サーバをシャットダウンする ことも意味します。"

#. Tag: para
#: ch05-repository-admin.xml:1530
#, no-c-format
msgid "Become the user who owns and manages the repository. This is important, as recovering a repository while running as the wrong user can tweak the permissions of the repository's files in such a way that your repository will still be inaccessible even after it is <quote>unwedged</quote>."
msgstr "リポジトリを所有し、管理しているユーザになってください。 これは重要ですが、実行時と同様、復旧時に間違ったユーザで作業する ことによってもリポジトリファイルのパーミッションが変更されて しまうかも知れないからです。これによって実際には<quote>復旧</quote> したのにアクセス不能のままになってしまう可能性があります。"

#. Tag: para
#: ch05-repository-admin.xml:1538
#, no-c-format
msgid "Run the command <command>svnadmin recover /path/to/repos</command>. You should see output like this:"
msgstr "<command>svnadmin recover /path/to/repos</command>コマンドを 実行してください。以下のような出力が表示されると思います:"

#. Tag: screen
#: ch05-repository-admin.xml:1542
#, no-c-format
msgid ""
"Repository lock acquired.\n"
"Please wait; recovering the repository may take some time...\n"
"\n"
"Recovery completed.\n"
"The latest repos revision is 19."
msgstr ""
"Repository lock acquired.\n"
"Please wait; recovering the repository may take some time...\n"
"\n"
"Recovery completed.\n"
"The latest repos revision is 19."

#. Tag: para
#: ch05-repository-admin.xml:1543
#, no-c-format
msgid "This command may take many minutes to complete."
msgstr "このコマンドは完了までに数分かかることもあります。"

#. Tag: para
#: ch05-repository-admin.xml:1546
#, fuzzy, no-c-format
msgid "Restart the server process."
msgstr "Subversionサーバの再起動"

#. Tag: para
#: ch05-repository-admin.xml:1550
#, no-c-format
msgid "This procedure fixes almost every case of repository lock-up. Make sure that you run this command as the user that owns and manages the database, not just as <literal>root</literal>. Part of the recovery process might involve recreating from scratch various database files (shared memory regions, for example). Recovering as <literal>root</literal> will create those files such that they are owned by <literal>root</literal>, which means that even after you restore connectivity to your repository, regular users will be unable to access it."
msgstr "この方法はほとんどのリポジトリロックを解消します。このコマンドは 単に <literal>root</literal>になるのではなく、データベース を所有し、管理しているユーザで実行することに注意してください。 復旧作業は、傷を負ったいろいろなデータベースファイル からの再作成の作業も含みます。(たとえば共有メモリ領域などです) <literal>root</literal> での復旧は、<literal>root</literal> が 所有しているファイルを作成することで、これはリポジトリへの 接続状況が復旧した後でも通常のユーザはこれに対してアクセスする ことができないことを意味します。"

#. Tag: para
#: ch05-repository-admin.xml:1561
#, fuzzy, no-c-format
msgid "If the previous procedure, for some reason, does not successfully unwedge your repository, you should do two things. First, move your broken repository directory aside (perhaps by renaming it to something like <filename>repos.BROKEN</filename>) and then restore your latest backup of it. Then, send an email to the Subversion user list (at <email>users@subversion.tigris.org</email>) describing your problem in detail. Data integrity is an extremely high priority to the Subversion developers."
msgstr "もしいま述べた作業が、何かの理由でうまくリポジトリを正常に 戻せない場合、二つのことをすべきです。まず、壊れたリポジトリを どけて、最後のバックアップをリストアします。それからSubversion のユーザリストにメールします。(これは、 <email>users@subversion.tigris.org</email>です)このとき問題点を詳しく 説明してください。データの一貫性は、Subversion開発者にとって 非常に高いプライオリティです。"

#. Tag: title
#: ch05-repository-admin.xml:1575
#, fuzzy, no-c-format
msgid "Migrating Repository Data Elsewhere"
msgstr "リポジトリの移行"

#. Tag: para
#: ch05-repository-admin.xml:1577
#, fuzzy, no-c-format
msgid "A Subversion filesystem has its data spread throughout files in the repository, in a fashion generally understood by (and of interest to) only the Subversion developers themselves. However, circumstances may arise that call for all, or some subset, of that data to be copied or moved into another repository."
msgstr "Subversionファイルシステムはさまざまなデータベーステーブルに分散された データを持ちますが、これは一般的にはSubversion開発者だけが知っている (て、興味のある)ことです。しかし、すべての、あるいは一部のデータを 一つの、持ち運びに便利な単純なファイル形式にまとめたいことがあります。 Subversion はそのような仕組みを<command>svnadmin</command> サブコマンド の組によって実装しています: <literal>dump</literal> と <literal>load</literal>です。"

#. Tag: para
#: ch05-repository-admin.xml:1584
#, no-c-format
msgid "Subversion provides such functionality by way of repository dump streams. A repository dump stream (often referred to as a <quote>dumpfile</quote> when stored as a file on disk) is a portable, flat file format that describes the various revisions in your repository&mdash;what was changed, by whom, when, and so on. This dump stream is the primary mechanism used to marshal versioned history&mdash;in whole or in part, with or without modification&mdash;between repositories. And Subversion provides the tools necessary for creating and loading these dump streams&mdash;the <command>svnadmin dump</command> and <command>svnadmin load</command> subcommands, respectively."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:1598
#, no-c-format
msgid "While the Subversion repository dump format contains human-readable portions and a familiar structure (it resembles an RFC-822 format, the same type of format used for most email), it is <emphasis>not</emphasis> a plaintext file format. It is a binary file format, highly sensitive to meddling. For example, many text editors will corrupt the file by automatically converting line endings."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:1607
#, no-c-format
msgid "There are many reasons for dumping and loading Subversion repository data. Early in Subversion's life, the most common reason was due to the evolution of Subversion itself. As Subversion matured, there were times when changes made to the back-end database schema caused compatibility issues with previous versions of the repository, so users had to dump their repository data using the previous version of Subversion, and load it into a freshly created repository with the new version of Subversion. Now, these types of schema changes haven't occurred since Subversion's 1.0 release, and the Subversion developers promise not to force users to dump and load their repositories when upgrading between minor versions (such as from 1.3 to 1.4) of Subversion. But there are still other reasons for dumping and loading, including re-deploying a Berkeley DB repository on a new OS or CPU architecture, switching between the Berkeley DB and FSFS back-ends, or (as we'll cover in <xref linkend=\"svn.reposadmin.maint.filtering\"/>) purging versioned data from repository history."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:1627
#, fuzzy, no-c-format
msgid "Whatever your reason for migrating repository history, using the <command>svnadmin dump</command> and <command>svnadmin load</command> subcommands is straightforward. <command>svnadmin dump</command> will output a range of repository revisions that are formatted using Subversion's custom filesystem dump format. The dump format is printed to the standard output stream, while informative messages are printed to the standard error stream. This allows you to redirect the output stream to a file while watching the status output in your terminal window. For example:"
msgstr "<command>svnadmin dump</command> は、リポジトリリビジョンのある 範囲を出力しますが、それはSubversionのカスタムファイルシステム ダンプ形式になっているものです。ダンプ形式は標準出力に表示され、 進行状況などのメッセージは標準エラー出力に表示されます。これで 出力をファイルにリダイレクトすることができ、その一方でステータス の出力については端末ウィンドウ上で見ることができます。たとえば:"

#. Tag: screen
#: ch05-repository-admin.xml:1639
#, no-c-format
msgid ""
"$ svnlook youngest myrepos\n"
"26\n"
"$ svnadmin dump myrepos &gt; dumpfile\n"
"* Dumped revision 0.\n"
"* Dumped revision 1.\n"
"* Dumped revision 2.\n"
"&hellip;\n"
"* Dumped revision 25.\n"
"* Dumped revision 26."
msgstr ""
"$ svnlook youngest myrepos\n"
"26\n"
"$ svnadmin dump myrepos &gt; dumpfile\n"
"* Dumped revision 0.\n"
"* Dumped revision 1.\n"
"* Dumped revision 2.\n"
"&hellip;\n"
"* Dumped revision 25.\n"
"* Dumped revision 26."

#. Tag: para
#: ch05-repository-admin.xml:1641
#, fuzzy, no-c-format
msgid "At the end of the process, you will have a single file (<filename>dumpfile</filename> in the previous example) that contains all the data stored in your repository in the requested range of revisions. Note that <command>svnadmin dump</command> is reading revision trees from the repository just like any other <quote>reader</quote> process would (<command>svn checkout</command>, for example), so it's safe to run this command at any time."
msgstr "処理の最後で、指定した範囲のリポジトリリビジョンのデータすべて が保存された一つのファイル(前の例では、<filename>dumpfile</filename>) を手に入れることができます。 <command>svnadmin dump</command>は他の<quote>読み出し</quote>プロセス(たとえば<command>svn checkout</command> など)がやるのと同じような 方法でリポジトリからリビジョンツリーを読み出すことに 注意してください。そのため、このコマンドはいつでも安全に実行できます。"

#. Tag: para
#: ch05-repository-admin.xml:1650
#, no-c-format
msgid "The other subcommand in the pair, <command>svnadmin load</command>, parses the standard input stream as a Subversion repository dump file, and effectively replays those dumped revisions into the target repository for that operation. It also gives informative feedback, this time using the standard output stream:"
msgstr "組になったもう一方のサブコマンドである<command>svnadmin load</command>は、標準入力を、Subversionリポジトリのダンプファイルと して解析し、ダンプされたリビジョンを目的のリポジトリに再現します。 それはまた経過情報などを返しますが、こちらは標準出力に 表示します:"

#. Tag: screen
#: ch05-repository-admin.xml:1657
#, no-c-format
msgid ""
"$ svnadmin load newrepos &lt; dumpfile\n"
"&lt;&lt;&lt; Started new txn, based on original revision 1\n"
"     * adding path : A ... done.\n"
"     * adding path : A/B ... done.\n"
"     &hellip;\n"
"------- Committed new rev 1 (loaded from original rev 1) &gt;&gt;&gt;\n"
"\n"
"&lt;&lt;&lt; Started new txn, based on original revision 2\n"
"     * editing path : A/mu ... done.\n"
"     * editing path : A/D/G/rho ... done.\n"
"\n"
"------- Committed new rev 2 (loaded from original rev 2) &gt;&gt;&gt;\n"
"\n"
"&hellip;\n"
"\n"
"&lt;&lt;&lt; Started new txn, based on original revision 25\n"
"     * editing path : A/D/gamma ... done.\n"
"\n"
"------- Committed new rev 25 (loaded from original rev 25) &gt;&gt;&gt;\n"
"\n"
"&lt;&lt;&lt; Started new txn, based on original revision 26\n"
"     * adding path : A/Z/zeta ... done.\n"
"     * editing path : A/mu ... done.\n"
"\n"
"------- Committed new rev 26 (loaded from original rev 26) &gt;&gt;&gt;"
msgstr ""
"$ svnadmin load newrepos &lt; dumpfile\n"
"&lt;&lt;&lt; Started new txn, based on original revision 1\n"
"     * adding path : A ... done.\n"
"     * adding path : A/B ... done.\n"
"     &hellip;\n"
"------- Committed new rev 1 (loaded from original rev 1) &gt;&gt;&gt;\n"
"\n"
"&lt;&lt;&lt; Started new txn, based on original revision 2\n"
"     * editing path : A/mu ... done.\n"
"     * editing path : A/D/G/rho ... done.\n"
"\n"
"------- Committed new rev 2 (loaded from original rev 2) &gt;&gt;&gt;\n"
"\n"
"&hellip;\n"
"\n"
"&lt;&lt;&lt; Started new txn, based on original revision 25\n"
"     * editing path : A/D/gamma ... done.\n"
"\n"
"------- Committed new rev 25 (loaded from original rev 25) &gt;&gt;&gt;\n"
"\n"
"&lt;&lt;&lt; Started new txn, based on original revision 26\n"
"     * adding path : A/Z/zeta ... done.\n"
"     * editing path : A/mu ... done.\n"
"\n"
"------- Committed new rev 26 (loaded from original rev 26) &gt;&gt;&gt;"

#. Tag: para
#: ch05-repository-admin.xml:1659
#, fuzzy, no-c-format
msgid "The result of a load is new revisions added to a repository&mdash;the same thing you get by making commits against that repository from a regular Subversion client. And just as in a commit, you can use hook programs to perform actions before and after each of the commits made during a load process. By passing the <option>--use-pre-commit-hook</option> and <option>--use-post-commit-hook</option> options to <command>svnadmin load</command>, you can instruct Subversion to execute the pre-commit and post-commit hook programs, respectively, for each loaded revision. You might use these, for example, to ensure that loaded revisions pass through the same validation steps that regular commits pass through. Of course, you should use these options with care&mdash;if your post-commit hook sends emails to a mailing list for each new commit, you might not want to spew hundreds or thousands of commit emails in rapid succession at that list! You can read more about the use of hook scripts in <xref linkend=\"svn.reposadmin.create.hooks\"/>."
msgstr "load の結果、新しいリビジョンがリポジトリに追加されます&mdash;これは 通常の Subversion クライアントからリポジトリに対してコミットをする のと同じ効果があります。またやはりコミットと同様に load 処理中に おきるそれぞれのコミットの前後で実行するフックスクリプトを使うことも できます。 <command>svnadmin load</command> に <option>--use-pre-commit-hook</option> と <option>--use-post-commit-hook</option> オプションを渡すことでロードされるリビジョンごとに Subversion に 対してそれぞれ pre-commit と post-commitのフックスクリプトを実行する ように指示できます。これで例えば、通常のコミット時と同様の妥当性チェック のようなステップをロードされるリビジョンごとに保障するような使い方が できます。もちろんこのようなオプションの利用には注意が必要です&mdash; post-commit フックスクリプトで新しいコミットごとにメーリングリストに対して email を送信するようになっていた場合、リビジョンがロードされるたびに リストに数え切れないくらいの email を流したいとは思わないでしょう ! フックスクリプトについては <xref linkend=\"svn.reposadmin.create.hooks\"/> により詳しい情報があります。"

#. Tag: para
#: ch05-repository-admin.xml:1679
#, no-c-format
msgid "Note that because <command>svnadmin</command> uses standard input and output streams for the repository dump and load process, people who are feeling especially saucy can try things like this (perhaps even using different versions of <command>svnadmin</command> on each side of the pipe):"
msgstr "<command>svnadmin</command> は標準入力と標準出力をリポジトリのダンプ とロード処理に使うので、気の利いた人は、以下のようなやり方を試す こともできます(おそらく、パイプの両側の<command>svnadmin</command> は、異なるバージョンであるかも知れません):"

#. Tag: screen
#: ch05-repository-admin.xml:1685
#, fuzzy, no-c-format
msgid ""
"$ svnadmin create newrepos\n"
"$ svnadmin dump oldrepos | svnadmin load newrepos"
msgstr ""
"$ svnadmin create newrepos\n"
"$ svnadmin dump myrepos | svnadmin load newrepos"

#. Tag: para
#: ch05-repository-admin.xml:1687
#, fuzzy, no-c-format
msgid "By default, the dump file will be quite large&mdash;much larger than the repository itself. That's because by default every version of every file is expressed as a full text in the dump file. This is the fastest and simplest behavior, and nice if you're piping the dump data directly into some other process (such as a compression program, filtering program, or into a loading process). But if you're creating a dump file for longer-term storage, you'll likely want to save disk space by using the <option>--deltas</option> option. With this option, successive revisions of files will be output as compressed, binary differences&mdash;just as file revisions are stored in a repository. This option is slower, but results in a dump file much closer in size to the original repository."
msgstr "デフォルトではダンプファイルは非常に大きくなります&mdash;リポジトリ 自体よりもずっと大きくなるでしょう。理由はすべてのファイルのすべての バージョンは、ダンプファイル中では完全なテキストとして表現される からです。これはダンプデータをパイプ経由で他のプロセス(圧縮プログラム や、フィルタープログラム、あるいはロードプロセスのようなもの)に送る場合には もっとも早く単純な方法です。しかし長期保存用にダンプファイルを作成する のであれば <option>--deltas</option>スイッチを使ってディスク領域を節約 したほうが良いでしょう。このオプションを使うと引き続くリビジョン間の ファイルは圧縮された形のバイナリ差分として出力されます&mdash;これはちょ うどリポジトリ中に保存されたリビジョンファイルと同じような形になります。 このオプションを使うと処理は遅くなりますが結果のダンプファイルは 元のリポジトリにかなり近いサイズにまでなります。"

#. Tag: para
#: ch05-repository-admin.xml:1702
#, fuzzy, no-c-format
msgid "We mentioned previously that <command>svnadmin dump</command> outputs a range of revisions. Use the <option>--revision (-r)</option> option to specify a single revision to dump, or a range of revisions. If you omit this option, all the existing repository revisions will be dumped."
msgstr "前に注意したように<command>svnadmin dump</command> はリビジョンの範囲を出力します。 <option>--revision</option> オプションを使えば、一つの リビジョンのダンプや、リビジョン範囲のダンプができます。 このオプションを省略すれば、すべての存在するリポジトリ リビジョンがダンプされます。"

#. Tag: screen
#: ch05-repository-admin.xml:1709
#, fuzzy, no-c-format
msgid ""
"$ svnadmin dump myrepos -r 23 &gt; rev-23.dumpfile\n"
"$ svnadmin dump myrepos -r 100:200 &gt; revs-100-200.dumpfile"
msgstr ""
"$ svnadmin dump myrepos --revision 23 &gt; rev-23.dumpfile\n"
"$ svnadmin dump myrepos --revision 100:200 &gt; revs-100-200.dumpfile"

#. Tag: para
#: ch05-repository-admin.xml:1711
#, no-c-format
msgid "As Subversion dumps each new revision, it outputs only enough information to allow a future loader to re-create that revision based on the previous one. In other words, for any given revision in the dump file, only the items that were changed in that revision will appear in the dump. The only exception to this rule is the first revision that is dumped with the current <command>svnadmin dump</command> command."
msgstr "Subversionはそれぞれの新しいリビジョンをダンプするのでその出力には 後で実行されるローダが前のリビジョンを元にしてそのリビジョンを再 作成するのに必要な十分な情報があります。 言い換えると、ダンプファイル中でどのようなリビジョンが指定されても リビジョン中で変更のあったアイテムのみがダンプに現れるということ です。この規則の唯一の例外は、現在の<command>svnadmin dump</command> がダンプする最初のリビジョンです。"

#. Tag: para
#: ch05-repository-admin.xml:1720
#, fuzzy, no-c-format
msgid "By default, Subversion will not express the first dumped revision as merely differences to be applied to the previous revision. For one thing, there is no previous revision in the dump file! And secondly, Subversion cannot know the state of the repository into which the dump data will be loaded (if it ever is). To ensure that the output of each execution of <command>svnadmin dump</command> is self-sufficient, the first dumped revision is by default a full representation of every directory, file, and property in that revision of the repository."
msgstr "デフォルトでは、Subversionは前のリビジョンに対する単なる差分として 最初のダンプリビジョンを表現することはありません。この理由の一つは 、ダンプファイルには直前のリビジョンがないからです! 二番目にSubversion はダンプデータがロードされるリポジトリの状態について何も知らない からです。(もしロードが起こるとすれば、ですが。) <command>svnadmin dump</command> の個別の実行の出力が自己充足して いるのを保証するため、最初のダンプリビジョンはデフォルトでは すべてのディレクトリ、ファイル、リポジトリにあるそのリビジョンの属性 の完全な表現になっています。"

#. Tag: para
#: ch05-repository-admin.xml:1731
#, no-c-format
msgid "However, you can change this default behavior. If you add the <option>--incremental</option> option when you dump your repository, <command>svnadmin</command> will compare the first dumped revision against the previous revision in the repository, the same way it treats every other revision that gets dumped. It will then output the first revision exactly as it does the rest of the revisions in the dump range&mdash;mentioning only the changes that occurred in that revision. The benefit of this is that you can create several small dump files that can be loaded in succession, instead of one large one, like so:"
msgstr "しかし、このデフォルトの振る舞いを変えることもできます。リポジトリを ダンプするときに<option>--incremental</option> オプションを追加すると <command>svnadmin</command> は最初のダンプリビジョンとリポジトリ中の 直前リビジョンとの差分をとろうとします。残りのすべてのダンプ されるリビジョンにも同じ方法で扱います。 それからダンプ範囲にある残りのリビジョンが出力するのと同じように 最初のリビジョンを&mdash;リビジョン中に起こる変更だけを 考慮して出力します。 この利点は大きな一つのダンプファイルのかわりに、ロードに成醐ｻ駈ｷるような 小さないくつものダンプファイルを作ることができることです。 こんな感じです :"

#. Tag: screen
#: ch05-repository-admin.xml:1743
#, fuzzy, no-c-format
msgid ""
"$ svnadmin dump myrepos -r 0:1000 &gt; dumpfile1\n"
"$ svnadmin dump myrepos -r 1001:2000 --incremental &gt; dumpfile2\n"
"$ svnadmin dump myrepos -r 2001:3000 --incremental &gt; dumpfile3"
msgstr ""
"$ svnadmin dump myrepos --revision 0:1000 > dumpfile1\n"
"$ svnadmin dump myrepos --revision 1001:2000 --incremental > dumpfile2\n"
"$ svnadmin dump myrepos --revision 2001:3000 --incremental > dumpfile3"

#. Tag: para
#: ch05-repository-admin.xml:1745
#, no-c-format
msgid "These dump files could be loaded into a new repository with the following command sequence:"
msgstr "これらのダンプファイルは以下のようなコマンドの流れで 新しいリポジトリ中にロードされます:"

#. Tag: screen
#: ch05-repository-admin.xml:1748
#, no-c-format
msgid ""
"$ svnadmin load newrepos &lt; dumpfile1\n"
"$ svnadmin load newrepos &lt; dumpfile2\n"
"$ svnadmin load newrepos &lt; dumpfile3"
msgstr ""
"$ svnadmin load newrepos &lt; dumpfile1\n"
"$ svnadmin load newrepos &lt; dumpfile2\n"
"$ svnadmin load newrepos &lt; dumpfile3"

#. Tag: para
#: ch05-repository-admin.xml:1750
#, fuzzy, no-c-format
msgid "Another neat trick you can perform with this <option>--incremental</option> option involves appending to an existing dump file a new range of dumped revisions. For example, you might have a <literal>post-commit</literal> hook that simply appends the repository dump of the single revision that triggered the hook. Or you might have a script that runs nightly to append dump file data for all the revisions that were added to the repository since the last time the script ran. Used like this, <command>svnadmin dump</command> can be one way to back up changes to your repository over time in case of a system crash or some other catastrophic event."
msgstr "<option>--incremental</option> オプションを使った別の かっこいい方法は、既に存在しているダンプファイルに 新しいダンプリビジョン範囲を追加することです。たとえば <literal>post-commit</literal> フックがあり、それは単に フックをトリガーするような一つのリビジョンのリポジトリ ダンプを追加するものです。あるいは最後にスクリプトを実行した時点より 後にリポジトリに追加されたすべてのリビジョンに対してのダンプファイルを追加する ようなスクリプトを実行するかも知れません。このように利用することで <command>svnadmin</command>の <literal>dump</literal> と <literal>load</literal> コマンドは 価値のある手段となりますが、これによって、リポジトリの変更を 時間をかけてバックアップして、システムクラッシュや、他の壊滅的な出来事に そなえるというわけです。"

#. Tag: para
#: ch05-repository-admin.xml:1762
#, no-c-format
msgid "The dump format can also be used to merge the contents of several different repositories into a single repository. By using the <option>--parent-dir</option> option of <command>svnadmin load</command>, you can specify a new virtual root directory for the load process. That means if you have dump files for three repositories, say <filename>calc-dumpfile</filename>, <filename>cal-dumpfile</filename>, and <filename>ss-dumpfile</filename>, you can first create a new repository to hold them all:"
msgstr "ダンプ形式はまたさまざまな異なるリポジトリの 内容を単一のリポジトリにマージするために利用することもできます。 <command>svnadmin load</command>の <option>--parent-dir</option>オプションを使って ロードプロセス用の新たな仮想ルートディレクトリを指定することが できます。これは、もし<filename>calc-dumpfile</filename>, <filename>cal-dumpfile</filename>, そして <filename>ss-dumpfile</filename>という三つのリポジトリ のダンプファイルがある場合、最初にそれらすべてを保持するような 新しいリポジトリを作ることができることを意味します:"

#. Tag: screen
#: ch05-repository-admin.xml:1773
#, no-c-format
msgid ""
"$ svnadmin create /path/to/projects\n"
"$"
msgstr ""
"$ svnadmin create /path/to/projects\n"
"$"

#. Tag: para
#: ch05-repository-admin.xml:1775
#, no-c-format
msgid "Then, make new directories in the repository which will encapsulate the contents of each of the three previous repositories:"
msgstr "それから三つの以前のリポジトリのそれぞれの内容を含んだ 新しいディレクトリをリポジトリ中に作ります:"

#. Tag: screen
#: ch05-repository-admin.xml:1779
#, no-c-format
msgid ""
"$ svn mkdir -m \"Initial project roots\" \\\n"
"      file:///path/to/projects/calc \\\n"
"      file:///path/to/projects/calendar \\\n"
"      file:///path/to/projects/spreadsheet\n"
"Committed revision 1.\n"
"$"
msgstr ""
"$ svn mkdir -m \"Initial project roots\" ¥\n"
"      file:///path/to/projects/calc ¥\n"
"      file:///path/to/projects/calendar ¥\n"
"      file:///path/to/projects/spreadsheet\n"
"Committed revision 1.\n"
"$"

#. Tag: para
#: ch05-repository-admin.xml:1781
#, no-c-format
msgid "Lastly, load the individual dump files into their respective locations in the new repository:"
msgstr "最後に個々のダンプファイルを新しいリポジトリのそれぞれの 場所にロードします:"

#. Tag: screen
#: ch05-repository-admin.xml:1784
#, no-c-format
msgid ""
"$ svnadmin load /path/to/projects --parent-dir calc &lt; calc-dumpfile\n"
"&hellip;\n"
"$ svnadmin load /path/to/projects --parent-dir calendar &lt; cal-dumpfile\n"
"&hellip;\n"
"$ svnadmin load /path/to/projects --parent-dir spreadsheet &lt; ss-dumpfile\n"
"&hellip;\n"
"$"
msgstr ""
"$ svnadmin load /path/to/projects --parent-dir calc &lt; calc-dumpfile\n"
"&hellip;\n"
"$ svnadmin load /path/to/projects --parent-dir calendar &lt; cal-dumpfile\n"
"&hellip;\n"
"$ svnadmin load /path/to/projects --parent-dir spreadsheet &lt; ss-dumpfile\n"
"&hellip;\n"
"$"

#. Tag: para
#: ch05-repository-admin.xml:1786
#, fuzzy, no-c-format
msgid "We'll mention one final way to use the Subversion repository dump format&mdash;conversion from a different storage mechanism or version control system altogether. Because the dump file format is, for the most part, human-readable, it should be relatively easy to describe generic sets of changes&mdash;each of which should be treated as a new revision&mdash;using this file format. In fact, the <command>cvs2svn</command> utility (see <xref linkend=\"svn.forcvs.convert\"/>) uses the dump format to represent the contents of a CVS repository so that those contents can be copied into a Subversion repository."
msgstr "Subversion リポジトリダンプ形式の利用方法について最後にもう一つだけ 触れます&mdash; 異なる保存の仕組みやバージョン管理システムから データを変換する方法です。これができる理由はダンプファイル形式は ほとんどの部分が可読であるためです。 <footnote> <para> Subversionのリポジトリダンプ形式は、RFC 822形式によく 似ていて、ほとんどのメール で利用されているのと同じ形式です。 </para> </footnote> このファイル形式を 使うと、比較的簡単に一般的な変更点のセットを表現することができます&mdash; それぞれの変更は新しいリビジョンとして扱われます。 事実、<command>cvs2svn</command>ユーティリティー(<xref linkend=\"svn.forcvs.convert\"/>参照)は、CVS リポジトリの内容を表現するのに ダンプ形式を使うので、その内容を Subversion リポジトリに取り込むことができます。"

#. Tag: title
#: ch05-repository-admin.xml:1802
#, fuzzy, no-c-format
msgid "Filtering Repository History"
msgstr "リポジトリとリポジトリの比較"

#. Tag: para
#: ch05-repository-admin.xml:1804
#, fuzzy, no-c-format
msgid "Since Subversion stores your versioned history using, at the very least, binary differencing algorithms and data compression (optionally in a completely opaque database system), attempting manual tweaks is unwise, if not quite difficult, and at any rate strongly discouraged. And once data has been stored in your repository, Subversion generally doesn't provide an easy way to remove that data. <footnote> <para>That's rather the reason you use version control at all, right?</para> </footnote> But inevitably, there will be times when you would like to manipulate the history of your repository. You might need to strip out all instances of a file that was accidentally added to the repository (and shouldn't be there for whatever reason). <footnote> <para>Conscious, cautious removal of certain bits of versioned data is actually supported by real use-cases. That's why an <quote>obliterate</quote> feature has been one of the most highly requested Subversion features, and one which the Subversion developers hope to soon provide.</para> </footnote> Or, perhaps you have multiple projects sharing a single repository, and you decide to split them up into their own repositories. To accomplish tasks like this, administrators need a more manageable and malleable representation of the data in their repositories&mdash;the Subversion repository dump format."
msgstr "Subversion は非公開のデータベースシステムにすべてのデータを格納 しますが、簡単には手で修正することができないようにするためです。 実際にはそれほど難しいことでもないのですが。そしてデータがリポジトリに いったん格納されてしまうと、Subversion はそのようなデータを削除する ための簡単な機能を提供してはいません。 <footnote> <para> ところで、そのような設計は<emphasis>意図したものです</emphasis>。バグ ではありません。 </para> </footnote> しかし、時にはどうしてもリポジトリの履歴を操作したいことがあります。 リポジトリに間違って追加してしまったすべてのファイル(あるいはどんな 理由であれとにかくそこにあるべきではないファイル)を削除したいと思う かも知れません。あるいは一つのリポジトリを共有する複数のプロジェクト があって、それぞれを固有のリポジトリに分割することに決めたのかも 知れません。このような作業のためには、管理者はリポジトリ中のデータ のより柔軟に管理可能で柔軟な表現形式が必要です&mdash;それは Subversion のリポジトリダンプフォーマットです。"

#. Tag: para
#: ch05-repository-admin.xml:1835
#, fuzzy, no-c-format
msgid "As we described in <xref linkend=\"svn.reposadmin.maint.migrate\"/>, the Subversion repository dump format is a human-readable representation of the changes that you've made to your versioned data over time. You use the <command>svnadmin dump</command> command to generate the dump data, and <command>svnadmin load</command> to populate a new repository with it (see <xref linkend=\"svn.reposadmin.maint.migrate\"/>). The great thing about the human-readability aspect of the dump format is that, if you aren't careless about it, you can manually inspect and modify it. Of course, the downside is that if you have three years' worth of repository activity encapsulated in what is likely to be a very large dump file, it could take you a long, long time to manually inspect and modify it."
msgstr "Subversion のリポジトリダンプフォーマットは時間とともにバージョン化 されたデータに加えた変更点に対する可読な形の表現形式です。ダンプ データを生成するには<command>svnadmin dump</command>を使い、 新たらしいリポジトリにそれをロードするには<command>svnadmin load</command> を使います(<xref linkend=\"svn.reposadmin.maint.migrate\"/>参照)。ダンプ形式が可読な形で あることの大きな利点は、注意して扱えばそれを調べたり修正したりできること です。もちろん、欠点としては、もし二年分のリポジトリ内容が一つの巨大な ダンプファイルに保存されているような場合には特定の場所を見つけて修正 するには非常に、非常に長い時間がかかるであろうことです。"

#. Tag: para
#: ch05-repository-admin.xml:1852
#, fuzzy, no-c-format
msgid "That's where <command>svndumpfilter</command> becomes useful. This program acts as path-based filter for repository dump streams. Simply give it either a list of paths you wish to keep, or a list of paths you wish to not keep, then pipe your repository dump data through this filter. The result will be a modified stream of dump data that contains only the versioned paths you (explicitly or implicitly) requested."
msgstr "管理者が自由にしたい場合に最もよく利用されるツールというわけでは ありませんが、 <command>svndumpfilter</command>は非常に特殊な 役に立つ機能を提供しています&mdash;パスベースのフィルタとして 実行することによってそのダンプデータをすばやく簡単に修正することが できるのです。保存したいと思うパスのリストか、保存したくないパスの リストを単に与えてこのフィルタにリポジトリのダンプデータをパイプで 入力するだけです。結果は、あなたが(明示的、あるいは暗黙に)要求した バージョン化されたパスのみを含むような修正済みダンプデータになります。"

#. Tag: para
#: ch05-repository-admin.xml:1861
#, no-c-format
msgid "Let's look a realistic example of how you might use this program. We discuss elsewhere (see <xref linkend=\"svn.reposadmin.projects.chooselayout\"/>) the process of deciding how to choose a layout for the data in your repositories&mdash;using one repository per project or combining them, arranging stuff within your repository, and so on. But sometimes after new revisions start flying in, you rethink your layout and would like to make some changes. A common change is the decision to move multiple projects which are sharing a single repository into separate repositories for each project."
msgstr "このプログラムが実際にどのように動作するか例を見てみましょう。 別の場所でリポジトリ中でどのようにレイアウトを選ぶかを決める手順について 議論しました(<xref linkend=\"svn.reposadmin.projects.chooselayout\"/>)&mdash;プロジェクトごとの リポジトリ、あるいはそれらをまとめたものを使って、リポジトリ中で構成を 変更し、などの手法です。しかし、新しいリポジトリが運用されたあとで、 よくレイアウトを再編成していくつかの修正をしたいということもあります。 一番多いのは一つのリポジトリを共有していた複数のプロジェクトを プロジェクトごとの別々のリポジトリに分離したい、という場合です。"

#. Tag: para
#: ch05-repository-admin.xml:1873
#, no-c-format
msgid "Our imaginary repository contains three projects: <literal>calc</literal>, <literal>calendar</literal>, and <literal>spreadsheet</literal>. They have been living side-by-side in a layout like this:"
msgstr "私たちの架空のリポジトリは三つのプロジェクトを含んでいます: <literal>calc</literal>, <literal>calendar</literal>, そして <literal>spreadsheet</literal>です。 それらは以下のようなレイアウトになっています:"

#. Tag: screen
#: ch05-repository-admin.xml:1878
#, no-c-format
msgid ""
"/\n"
"   calc/\n"
"      trunk/\n"
"      branches/\n"
"      tags/\n"
"   calendar/\n"
"      trunk/\n"
"      branches/\n"
"      tags/\n"
"   spreadsheet/\n"
"      trunk/\n"
"      branches/\n"
"      tags/"
msgstr ""
"/\n"
"   calc/\n"
"      trunk/\n"
"      branches/\n"
"      tags/\n"
"   calendar/\n"
"      trunk/\n"
"      branches/\n"
"      tags/\n"
"   spreadsheet/\n"
"      trunk/\n"
"      branches/\n"
"      tags/"

#. Tag: para
#: ch05-repository-admin.xml:1880
#, no-c-format
msgid "To get these three projects into their own repositories, we first dump the whole repository:"
msgstr "これら三つのプロジェクトごとの固有のリポジトリを手に入れるには、 まずリポジトリ全体をダンプします:"

#. Tag: screen
#: ch05-repository-admin.xml:1883
#, no-c-format
msgid ""
"$ svnadmin dump /path/to/repos &gt; repos-dumpfile\n"
"* Dumped revision 0.\n"
"* Dumped revision 1.\n"
"* Dumped revision 2.\n"
"* Dumped revision 3.\n"
"&hellip;\n"
"$"
msgstr ""
"$ svnadmin dump /path/to/repos &gt; repos-dumpfile\n"
"* Dumped revision 0.\n"
"* Dumped revision 1.\n"
"* Dumped revision 2.\n"
"* Dumped revision 3.\n"
"&hellip;\n"
"$"

#. Tag: para
#: ch05-repository-admin.xml:1885
#, no-c-format
msgid "Next, run that dump file through the filter, each time including only one of our top-level directories, and resulting in three new dump files:"
msgstr "次に結果のダンプファイルをフィルタに通しますが、各実行時で ただ一つの最上位ディレクトリを含むように指定することで、 三つの新しいダンプファイルを生成することができます:"

#. Tag: screen
#: ch05-repository-admin.xml:1889
#, fuzzy, no-c-format
msgid ""
"$ svndumpfilter include calc &lt; repos-dumpfile &gt; calc-dumpfile\n"
"&hellip;\n"
"$ svndumpfilter include calendar &lt; repos-dumpfile &gt; cal-dumpfile\n"
"&hellip;\n"
"$ svndumpfilter include spreadsheet &lt; repos-dumpfile &gt; ss-dumpfile\n"
"&hellip;\n"
"$"
msgstr ""
"$ cat repos-dumpfile | svndumpfilter include calc &gt; calc-dumpfile\n"
"&hellip;\n"
"$ cat repos-dumpfile | svndumpfilter include calendar &gt; cal-dumpfile\n"
"&hellip;\n"
"$ cat repos-dumpfile | svndumpfilter include spreadsheet &gt; ss-dumpfile\n"
"&hellip;\n"
"$"

#. Tag: para
#: ch05-repository-admin.xml:1891
#, no-c-format
msgid "At this point, you have to make a decision. Each of your dump files will create a valid repository, but will preserve the paths exactly as they were in the original repository. This means that even though you would have a repository solely for your <literal>calc</literal> project, that repository would still have a top-level directory named <filename>calc</filename>. If you want your <filename>trunk</filename>, <filename>tags</filename>, and <filename>branches</filename> directories to live in the root of your repository, you might wish to edit your dump files, tweaking the <literal>Node-path</literal> and <literal>Node-copyfrom-path</literal> headers to no longer have that first <filename>calc/</filename> path component. Also, you'll want to remove the section of dump data that creates the <filename>calc</filename> directory. It will look something like:"
msgstr "この時点で、判断しなくてはなりません。上でできた三つのダンプファイルは 正しいリポジトリですが、元のリポジトリ中にあった通りのパス構成で保存されて います。これは<literal>calc</literal>プロジェクト単独のリポジトリを 取得したにもかかわらず、リポジトリはあいかわらず<filename>calc</filename> という名前の最上位ディレクトリ名称を持っていることを意味します。 もし<filename>trunk</filename>, <filename>tags</filename>, そして <filename>branches</filename>ディレクトリそれぞれをリポジトリ のルートディレクトリとしたければダンプファイルを編集して<literal>Node-path</literal> と <literal>Copyfrom-path</literal>ヘッダがもうこれからは先頭に <filename>calc/</filename>というパス部分を持たないようにしなくてはなりません。 同様に<filename>calc</filename>ディレクトリを作ったダンプデータのセクションを 削除したいでしょう。それは何か以下のような感じになっています:"

#. Tag: screen
#: ch05-repository-admin.xml:1908
#, no-c-format
msgid ""
"Node-path: calc\n"
"Node-action: add\n"
"Node-kind: dir\n"
"Content-length: 0"
msgstr ""
"Node-path: calc\n"
"Node-action: add\n"
"Node-kind: dir\n"
"Content-length: 0"

#. Tag: para
#: ch05-repository-admin.xml:1911
#, fuzzy, no-c-format
msgid ""
"If you do plan on manually editing the dump file to remove a top-level directory, make sure that your editor is not set to automatically convert end-of-line characters to the native format (e.g. \\r\\n"
" to \\n"
"), as the content will then not agree with the metadata. This will render the dump file useless."
msgstr "もし最上位ディレクトリを削除するためにダンプファイルを手で編集しようと 考えているなら、利用するエディタが改行文字を自動的にマシン固有の形式に 変換してしまわないことを確認してください(たとえば ¥r¥n を ¥n などに)。 この変換が起きるとダンプファイルの内容はメタデータと一致しなくなり、使 い物にならなくなってしまいます。"

#. Tag: para
#: ch05-repository-admin.xml:1919
#, no-c-format
msgid "All that remains now is to create your three new repositories, and load each dump file into the right repository:"
msgstr "この修正後に残ったファイルを使って新しい三つのリポジトリを作成する ことができ、それぞれのダンプファイルを正しいリポジトリにロード することができます:"

#. Tag: screen
#: ch05-repository-admin.xml:1923
#, no-c-format
msgid ""
"$ svnadmin create calc; svnadmin load calc &lt; calc-dumpfile\n"
"&lt;&lt;&lt; Started new transaction, based on original revision 1\n"
"     * adding path : Makefile ... done.\n"
"     * adding path : button.c ... done.\n"
"&hellip;\n"
"$ svnadmin create calendar; svnadmin load calendar &lt; cal-dumpfile\n"
"&lt;&lt;&lt; Started new transaction, based on original revision 1\n"
"     * adding path : Makefile ... done.\n"
"     * adding path : cal.c ... done.\n"
"&hellip;\n"
"$ svnadmin create spreadsheet; svnadmin load spreadsheet &lt; ss-dumpfile\n"
"&lt;&lt;&lt; Started new transaction, based on original revision 1\n"
"     * adding path : Makefile ... done.\n"
"     * adding path : ss.c ... done.\n"
"&hellip;\n"
"$"
msgstr ""
"$ svnadmin create calc; svnadmin load calc &lt; calc-dumpfile\n"
"&lt;&lt;&lt; Started new transaction, based on original revision 1\n"
"     * adding path : Makefile ... done.\n"
"     * adding path : button.c ... done.\n"
"&hellip;\n"
"$ svnadmin create calendar; svnadmin load calendar &lt; cal-dumpfile\n"
"&lt;&lt;&lt; Started new transaction, based on original revision 1\n"
"     * adding path : Makefile ... done.\n"
"     * adding path : cal.c ... done.\n"
"&hellip;\n"
"$ svnadmin create spreadsheet; svnadmin load spreadsheet &lt; ss-dumpfile\n"
"&lt;&lt;&lt; Started new transaction, based on original revision 1\n"
"     * adding path : Makefile ... done.\n"
"     * adding path : ss.c ... done.\n"
"&hellip;\n"
"$"

#. Tag: para
#: ch05-repository-admin.xml:1925
#, no-c-format
msgid "Both of <command>svndumpfilter</command>'s subcommands accept options for deciding how to deal with <quote>empty</quote> revisions. If a given revision contained only changes to paths that were filtered out, that now-empty revision could be considered uninteresting or even unwanted. So to give the user control over what to do with those revisions, <command>svndumpfilter</command> provides the following command-line options:"
msgstr "<command>svndumpfilter</command>の両方のサブコマンドとも <quote>空の</quote>リビジョンをどのように扱うかを決めることが できます。パスの変更のみを含んでいるようなリビジョンを除外 すれば、空のリビジョンは興味がないか、不要なものであると 考えることができます。<command>svndumpfilter</command>は 以下のコマンドラインオプションを用意しています:"

#. Tag: option
#: ch05-repository-admin.xml:1936
#, no-c-format
msgid "--drop-empty-revs"
msgstr "--drop-empty-revs"

#. Tag: para
#: ch05-repository-admin.xml:1938
#, no-c-format
msgid "Do not generate empty revisions at all&mdash;just omit them."
msgstr "空のリビジョンを生成しません&mdash; 単に無視します。"

#. Tag: option
#: ch05-repository-admin.xml:1943
#, no-c-format
msgid "--renumber-revs"
msgstr "--renumber-revs"

#. Tag: para
#: ch05-repository-admin.xml:1945
#, no-c-format
msgid "If empty revisions are dropped (using the <option>--drop-empty-revs</option> option), change the revision numbers of the remaining revisions so that there are no gaps in the numeric sequence."
msgstr "空のリビジョンが削除された場合に(<option>--drop-empty-revs</option>を 利用することによって)、残っているリビジョンのリビジョン番号を変更して リビジョン番号が飛ばないようにします。"

#. Tag: option
#: ch05-repository-admin.xml:1952
#, no-c-format
msgid "--preserve-revprops"
msgstr "--preserve-revprops"

#. Tag: para
#: ch05-repository-admin.xml:1954
#, no-c-format
msgid "If empty revisions are not dropped, preserve the revision properties (log message, author, date, custom properties, etc.) for those empty revisions. Otherwise, empty revisions will only contain the original datestamp, and a generated log message that indicates that this revision was emptied by <command>svndumpfilter</command>."
msgstr "空のリビジョンが削除されない場合に、それら空のリビジョンに関する リビジョン属性(ログメッセージ、変更者、日付、カスタム属性、など)を 保存します。そうでなければ、空のリビジョンは元のタイムスタンプと、 このリビジョンは<command>svndumpfilter</command>によって空にされた ということを示す自動生成されたログメッセージのみを含むことになります。"

#. Tag: para
#: ch05-repository-admin.xml:1965
#, no-c-format
msgid "While <command>svndumpfilter</command> can be very useful, and a huge timesaver, there are unfortunately a couple of gotchas. First, this utility is overly sensitive to path semantics. Pay attention to whether paths in your dump file are specified with or without leading slashes. You'll want to look at the <literal>Node-path</literal> and <literal>Node-copyfrom-path</literal> headers."
msgstr "<command>svndumpfilter</command> は非常に便利で、作業を省力化して くれますが、残念なことにいろいろな問題もあります。まずこのユーティリティー はパスの構文に極端に敏感です。ダンプファイル中のパスが先頭にスラッシュ を含んでいるかどうかに注意してください。<literal>Node-path</literal> と <literal>Copyfrom-path</literal>ヘッダを確認する必要がある かも知れません。"

#. Tag: screen
#: ch05-repository-admin.xml:1973
#, no-c-format
msgid ""
"&hellip;\n"
"Node-path: spreadsheet/Makefile\n"
"&hellip;"
msgstr ""
"&hellip;\n"
"Node-path: spreadsheet/Makefile\n"
"&hellip;"

#. Tag: para
#: ch05-repository-admin.xml:1975
#, no-c-format
msgid "If the paths have leading slashes, you should include leading slashes in the paths you pass to <command>svndumpfilter include</command> and <command>svndumpfilter exclude</command> (and if they don't, you shouldn't). Further, if your dump file has an inconsistent usage of leading slashes for some reason, <footnote> <para>While <command>svnadmin dump</command> has a consistent leading slash policy&mdash;to not include them&mdash;other programs which generate dump data might not be so consistent.</para> </footnote> you should probably normalize those paths so they all have, or lack, leading slashes."
msgstr "パスの先頭にスラッシュがある場合、<command>svndumpfilter include</command> と <command>svndumpfilter exclude</command>に渡す パスの先頭にスラッシュを含める必要があります(そして、逆にスラッシュが ないなら含めてはいけません)。さらにダンプファイルの先頭のス ラッシュが何かの理由で矛盾している場合には <footnote> <para> <command>svnadmin dump</command> は先頭スラッシュに関して一貫した ポリシーがありますが&mdash; 付けないようにするというものです&mdash; データをダンプするほかのプログラムはそれほど一貫していません。</para> </footnote> おそらく、すべてをスラッシュ付きにするか、その逆にするような正規化を パスに対して施す必要があります。"

#. Tag: para
#: ch05-repository-admin.xml:1990
#, fuzzy, no-c-format
msgid "Also, copied paths can give you some trouble. Subversion supports copy operations in the repository, where a new path is created by copying some already existing path. It is possible that at some point in the lifetime of your repository, you might have copied a file or directory from some location that <command>svndumpfilter</command> is excluding, to a location that it is including. In order to make the dump data self-sufficient, <command>svndumpfilter</command> needs to still show the addition of the new path&mdash;including the contents of any files created by the copy&mdash;and not represent that addition as a copy from a source that won't exist in your filtered dump data stream. But because the Subversion repository dump format only shows what was changed in each revision, the contents of the copy source might not be readily available. If you suspect that you have any copies of this sort in your repository, you might want to rethink your set of included/excluded paths, perhaps including the paths that served as sources of your troublesome copy operations, too."
msgstr "また、コピーされたパスは問題を起こすかも知れません。Subversionは リポジトリ中のコピー操作をサポートしていて、ここでは新しいパスは 既に存在するパスからコピーすることによって作成されます。リポジトリの 生存中のどこかでファイルあるいはディレクトリを<command>svndumpfilter</command> が排除するようなどこかの場所からコピーし、<command>svndumpfilter</command> が含めるような場所にコピーしたかも知れません。ダンプデータに自己一貫性を 保証するため<command>svndumpfilter</command>は新しいパス&mdash; コピーによって作られた任意のファイルの内容を含むような&mdash; を表示 する必要がありますが、それはダンプデータストリームから排除された 存在しないようなソースからのコピーの追加としては表示されません。 しかし Subversion のリポジトリダンプ形式はそれぞれのリビジョンで何が変更 されたかを示すだけなので、コピー元の内容は利用不可能です。もし リポジトリ中でこのようなコピーがある可能性がある場合にはもう一度 <command>svndumpfilter</command>に含めるパスと排除するパスを 再考する必要があるかも知れません。"

#. Tag: para
#: ch05-repository-admin.xml:2011
#, no-c-format
msgid "Finally, <command>svndumpfilter</command> takes path filtering quite literally. If you are trying to copy the history of a project rooted at <filename>trunk/my-project</filename> and move it into a repository of its own, you would, of course, use the <command>svndumpfilter include</command> command to keep all the changes in and under <filename>trunk/my-project</filename>. But the resulting dump file makes no assumptions about the repository into which you plan to load this data. Specifically, the dump data might begin with the revision which added the <filename>trunk/my-project</filename> directory, but it will <emphasis>not</emphasis> contain directives which would create the <filename>trunk</filename> directory itself (because <filename>trunk</filename> doesn't match the include filter). You'll need to make sure that any directories which the new dump stream expect to exist actually do exist in the target repository before trying to load the stream into that repository."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:2035
#, fuzzy, no-c-format
msgid "Repository Replication"
msgstr "リポジトリの復旧"

#. Tag: para
#: ch05-repository-admin.xml:2037
#, no-c-format
msgid "There are several scenarios in which it is quite handy to have a Subversion repository whose version history is exactly the same as some other repository's. Perhaps the most obvious one is the maintenance of a simple backup repository, used when the primary repository has become inaccessible due to a hardware failure, network outage, or other such annoyance. Other scenarios include deploying mirror repositories to distribute heavy Subversion load across multiple servers, use as a soft-upgrade mechanism, and so on."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2047
#, no-c-format
msgid "As of version 1.4, Subversion provides a program for managing scenarios like these&mdash;<command>svnsync</command>. <command>svnsync</command> works by essentially asking the Subversion server to <quote>replay</quote> revisions, one at a time. It then uses that revision information to mimic a commit of the same to another repository. Neither repository needs to be locally accessible to machine on which <command>svnsync</command> is running&mdash;its parameters are repository URLs, and it does all its work through Subversion's repository access (RA) interfaces. All it requires is read access to the source repository and read/write access to the destination repository."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2062
#, no-c-format
msgid "When using <command>svnsync</command> against a remote source repository, the Subversion server for that repository must be running Subversion version 1.4 or better."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2067
#, no-c-format
msgid "Assuming you already have a source repository that you'd like to mirror, the next thing you need is an empty target repository which will actually serve as that mirror. This target repository can use either of the available filesystem data-store back-ends (see <xref linkend=\"svn.reposadmin.basics.backends\"/>), but it must not yet have any version history in it. The protocol via which <command>svnsync</command> communicates revision information is highly sensitive to mismatches between the versioned histories contained in the source and target repositories. For this reason, while <command>svnsync</command> cannot <emphasis>demand</emphasis> that the target repository be read-only, <footnote> <para>In fact, it can't truly be read-only, or <command>svnsync</command> itself would have a tough time copying revision history into it.</para> </footnote> allowing the revision history in the target repository to change by any mechanism other than the mirroring process is a recipe for disaster."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2090
#, no-c-format
msgid "Do <emphasis>not</emphasis> modify a mirror repository in such a way as to cause its version history to deviate from that of the repository it mirrors. The only commits and revision property modifications that ever occur on that mirror repository should be those performed by the <command>svnsync</command> tool."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2098
#, no-c-format
msgid "Another requirement of the target repository is that the <command>svnsync</command> process be allowed to modify certain revision properties. <command>svnsync</command> stores its bookkeeping information in special revision properties on revision 0 of the destination repository. Because <command>svnsync</command> works within the framework of that repository's hook system, the default state of the repository (which is to disallow revision property changes; see <xref linkend=\"svn.ref.reposhooks.pre-revprop-change\"/>) is insufficient. You'll need to explicitly implement the pre-revprop-change hook, and your script must allow <command>svnsync</command> to set and change its special properties. With those provisions in place, you are ready to start mirroring repository revisions."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2114
#, no-c-format
msgid "It's a good idea to implement authorization measures which allow your repository replication process to perform its tasks while preventing other users from modifying the contents of your mirror repository at all."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2120
#, no-c-format
msgid "Let's walk through the use of <command>svnsync</command> in a somewhat typical mirroring scenario. We'll pepper this discourse with practical recommendations which you are free to disregard if they aren't required by or suitable for your environment."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2126
#, no-c-format
msgid "As a service to the fine developers of our favorite version control system, we will be mirroring the public Subversion source code repository and exposing that mirror publicly on the Internet, hosted on a different machine than the one on which the original Subversion source code repository lives. This remote host has a global configuration which permits anonymous users to read the contents of repositories on the host, but requires users to authenticate in order to modify those repositories. (Please forgive us for glossing over the details of Subversion server configuration for the moment&mdash;those are covered thoroughly in <xref linkend=\"svn.serverconfig\"/>.) And for no other reason than that it makes for a more interesting example, we'll be driving the replication process from a third machine, the one which we currently find ourselves using."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2142
#, no-c-format
msgid "First, we'll create the repository which will be our mirror. This and the next couple of steps do require shell access to the machine on which the mirror repository will live. Once the repository is all configured, though, we shouldn't need to touch it directly again."
msgstr ""

#. Tag: screen
#: ch05-repository-admin.xml:2148
#, no-c-format
msgid ""
"$ ssh admin@svn.example.com \\\n"
"      \"svnadmin create /path/to/repositories/svn-mirror\"\n"
"admin@svn.example.com's password: ********\n"
"$"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2150
#, no-c-format
msgid "At this point, we have our repository, and due to our server's configuration, that repository is now <quote>live</quote> on the Internet. Now, because we don't want anything modifying the repository except our replication process, we need a way to distinguish that process from other would-be committers. To do so, we use a dedicated username for our process. Only commits and revision property modifications performed by the special username <literal>syncuser</literal> will be allowed."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2160
#, no-c-format
msgid "We'll use the repository's hook system both to allow the replication process to do what it needs to do, and to enforce that only it is doing those things. We accomplish this by implementing two of the repository event hooks&mdash;pre-revprop-change and start-commit. Our <filename>pre-revprop-change</filename> hook script is found in <xref linkend=\"svn.reposadmin.maint.replication.pre-revprop-change\"/>, and basically verifies that the user attempting the property changes is our <literal>syncuser</literal> user. If so, the change is allowed; otherwise, it is denied."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:2172
#, no-c-format
msgid "Mirror repository's pre-revprop-change hook script"
msgstr ""

#. Tag: programlisting
#: ch05-repository-admin.xml:2174
#, no-c-format
msgid ""
"#!/bin/sh \n"
"\n"
"USER=\"$3\"\n"
"\n"
"if [ \"$USER\" = \"syncuser\" ]; then exit 0; fi\n"
"\n"
"echo \"Only the syncuser user may change revision properties\" >&amp;2\n"
"exit 1"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2177
#, no-c-format
msgid "That covers revision property changes. Now we need to ensure that only the <literal>syncuser</literal> user is permitted to commit new revisions to the repository. We do this using a <filename>start-commit</filename> hook scripts like the one in <xref linkend=\"svn.reposadmin.maint.replication.start-commit\"/>."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:2185
#, no-c-format
msgid "Mirror repository's start-commit hook script"
msgstr ""

#. Tag: programlisting
#: ch05-repository-admin.xml:2187
#, no-c-format
msgid ""
"#!/bin/sh \n"
"\n"
"USER=\"$2\"\n"
"\n"
"if [ \"$USER\" = \"syncuser\" ]; then exit 0; fi\n"
"\n"
"echo \"Only the syncuser user may commit new revisions\" >&amp;2\n"
"exit 1"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2190
#, no-c-format
msgid "After installing our hook scripts and ensuring that they are executable by the Subversion server, we're finished with the setup of the mirror repository. Now, we get to actually do the mirroring."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2195
#, no-c-format
msgid "The first thing we need to do with <command>svnsync</command> is to register in our target repository the fact that it will be a mirror of the source repository. We do this using the <command>svnsync initialize</command> subcommand. Note that the various <command>svnsync</command> subcommands provide several of the same authentication-related options that <command>svn</command> does: <option>--username</option>, <option>--password</option>, <option>--non-interactive</option>, <option>--config-dir</option>, and <option>--no-auth-cache</option>."
msgstr ""

#. Tag: screen
#: ch05-repository-admin.xml:2208
#, no-c-format
msgid ""
"$ svnsync help init\n"
"initialize (init): usage: svnsync initialize DEST_URL SOURCE_URL\n"
"\n"
"Initialize a destination repository for synchronization from\n"
"another repository.\n"
"\n"
"The destination URL must point to the root of a repository with\n"
"no committed revisions.  The destination repository must allow\n"
"revision property changes.\n"
"\n"
"You should not commit to, or make revision property changes in,\n"
"the destination repository by any method other than 'svnsync'.\n"
"In other words, the destination repository should be a read-only\n"
"mirror of the source repository.\n"
"\n"
"Valid options:\n"
"  --non-interactive        : do no interactive prompting\n"
"  --no-auth-cache          : do not cache authentication tokens\n"
"  --username arg           : specify a username ARG\n"
"  --password arg           : specify a password ARG\n"
"  --config-dir arg         : read user configuration files from directory ARG\n"
"\n"
"$ svnsync initialize http://svn.example.com/svn-mirror \\\n"
"                     http://svn.collab.net/repos/svn \\\n"
"                     --username syncuser --password syncpass\n"
"Copied properties for revision 0.\n"
"$"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2210
#, no-c-format
msgid "Our target repository will now remember that it is a mirror of the public Subversion source code repository. Notice that we provided a username and password as arguments to <command>svnsync</command>&mdash;that was required by the pre-revprop-change hook on our mirror repository."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2217
#, no-c-format
msgid "The URLs provided to <command>svnsync</command> must point to the root directories of the target and source repositories, respectively. The tool does not handle mirroring of repository subtrees."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2224
#, no-c-format
msgid "The initial release of <command>svnsync</command> (in Subversion 1.4) has a small shortcoming&mdash;the values given to the <option>--username</option> and <option>--password</option> command-line options get used for authentication against both the source and destination repositories. Obviously, there's no guarantee that the synchronizing user's credentials are the same in both places. In the event that they are not the same, users trying to run <command>svnsync</command> in non-interactive mode (with the <option>--non-interactive</option> option) might experience problems."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2237
#, no-c-format
msgid "And now comes the fun part. With a single subcommand, we can tell <command>svnsync</command> to copy all the as-yet-unmirrored revisions from the source repository to the target. <footnote> <para>Be forewarned that while it will take only a few seconds for the average reader to parse this paragraph and the sample output which follows it, the actual time required to complete such a mirroring operation is, shall we say, quite a bit longer.</para> </footnote> The <command>svnsync synchronize</command> subcommand will peek into the special revision properties previously stored on the target repository, and determine what repository it is mirroring and that the most recently mirrored revision was revision 0. Then it will query the source repository and determine what the latest revision in that repository is. Finally, it asks the source repository's server to start replaying all the revisions between 0 and that latest revision. As <command>svnsync</command> get the resulting response from the source repository's server, it begins forwarding those revisions to the target repository's server as new commits."
msgstr ""

#. Tag: screen
#: ch05-repository-admin.xml:2261
#, no-c-format
msgid ""
"$ svnsync help synchronize\n"
"synchronize (sync): usage: svnsync synchronize DEST_URL\n"
"\n"
"Transfer all pending revisions from source to destination.\n"
"&hellip;\n"
"$ svnsync synchronize http://svn.example.com/svn-mirror \\\n"
"                      --username syncuser --password syncpass\n"
"Committed revision 1.\n"
"Copied properties for revision 1.\n"
"Committed revision 2.\n"
"Copied properties for revision 2.\n"
"Committed revision 3.\n"
"Copied properties for revision 3.\n"
"&hellip;\n"
"Committed revision 23406.\n"
"Copied properties for revision 23406.\n"
"Committed revision 23407.\n"
"Copied properties for revision 23407.\n"
"Committed revision 23408.\n"
"Copied properties for revision 23408."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2263
#, no-c-format
msgid "Of particular interest here is that for each mirrored revision, there is first a commit of that revision to the target repository, and then property changes follow. This is because the initial commit is performed by (and attributed to) the user <literal>syncuser</literal>, and datestamped with the time as of that revision's creation. Also, Subversion's underlying repository access interfaces don't provide a mechanism for setting arbitrary revision properties as part of a commit. So <command>svnsync</command> follows up with an immediate series of property modifications which copy all the revision properties found for that revision in the source repository into the target repository. This also has the effect of fixing the author and datestamp of the revision to match that of the source repository."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2278
#, no-c-format
msgid "Also noteworthy is that <command>svnsync</command> performs careful bookkeeping that allows it to be safely interrupted and restarted without ruining the integrity of the mirrored data. If a network glitch occurs while mirroring a repository, simply repeat the <command>svnsync synchronize</command> command and it will happily pick up right where it left off. In fact, as new revisions appear in the source repository, this is exactly what you to do in order to keep your mirror up-to-date."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2288
#, no-c-format
msgid "There is, however, one bit of inelegance in the process. Because Subversion revision properties can be changed at any time throughout the lifetime of the repository, and don't leave an audit trail that indicates when they were changed, replication processes have to pay special attention to them. If you've already mirrored the first 15 revisions of a repository and someone then changes a revision property on revision 12, <command>svnsync</command> won't know to go back and patch up its copy of revision 12. You'll need to tell it to do so manually by using (or with some additionally tooling around) the <command>svnsync copy-revprops</command> subcommand, which simply re-replicates all the revision properties for a particular revision."
msgstr ""

#. Tag: screen
#: ch05-repository-admin.xml:2302
#, no-c-format
msgid ""
"$ svnsync help copy-revprops\n"
"copy-revprops: usage: svnsync copy-revprops DEST_URL REV\n"
"\n"
"Copy all revision properties for revision REV from source to\n"
"destination.\n"
"&hellip;\n"
"$ svnsync copy-revprops http://svn.example.com/svn-mirror 12 \\\n"
"                        --username syncuser --password syncpass\n"
"Copied properties for revision 12.\n"
"$"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2304
#, no-c-format
msgid "That's repository replication in a nutshell. You'll likely want some automation around such a process. For example, while our example was a pull-and-push setup, you might wish to have your primary repository push changes to one or more blessed mirrors as part of its post-commit and post-revprop-change hook implementations. This would enable the mirror to be up-to-date in as near to realtime as is likely possible."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2313
#, no-c-format
msgid "Also, while it isn't very commonplace to do so, <command>svnsync</command> does gracefully mirror repositories in which the user as whom it authenticates only has partial read access. It simply copies only the bits of the repository that it is permitted to see. Obviously such a mirror is not useful as a backup solution."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2320
#, no-c-format
msgid "As far as user interaction with repositories and mirrors goes, it <emphasis>is</emphasis> possible to have a single working copy that interacts with both, but you'll have to jump through some hoops to make it happen. First, you need to ensure that both the primary and mirror repositories have the same repository UUID (which is not the case by default). You can set the mirror repository's UUID by loading a dump file stub into it which contains the UUID of the primary repository, like so:"
msgstr ""

#. Tag: screen
#: ch05-repository-admin.xml:2330
#, no-c-format
msgid ""
"$ cat - &lt;&lt;EOF | svnadmin load --force-uuid dest\n"
"SVN-fs-dump-format-version: 2\n"
"\n"
"UUID: 65390229-12b7-0310-b90b-f21a5aa7ec8e\n"
"EOF\n"
"$"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2332
#, no-c-format
msgid "Now that the two repositories have the same UUID, you can use <command>svn switch --relocate</command> to point your working copy to whichever of the repositories you wish to operate against, a process which is described in <xref linkend=\"svn.ref.svn.c.switch\"/>. There is a possible danger here, though, in that if the primary and mirror repositories aren't in close synchronization, a working copy up-to-date with, and pointing to, the primary repository will, if relocated to point to an out-of-date mirror, become confused about the apparent sudden loss of revisions it fully expects to be present, and throws errors to that effect. If this occurs, you can relocate your working copy back to the primary repository and then either wait until the mirror repository is up-to-date, or backdate your working copy to a revision you know is present in the sync repository and then retry the relocation."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2349
#, no-c-format
msgid "Finally, be aware that the revision-based replication provided by <command>svnsync</command> is only that&mdash;replication of revisions. It does not include such things as the hook implementations, repository or server configuration data, uncommitted transactions, or information about user locks on repository paths. Only information carried by the Subversion repository dump file format is available for replication."
msgstr ""

#. Tag: title
#: ch05-repository-admin.xml:2362
#, no-c-format
msgid "Repository Backup"
msgstr "リポジトリのバックアップ"

#. Tag: para
#: ch05-repository-admin.xml:2364
#, no-c-format
msgid "Despite numerous advances in technology since the birth of the modern computer, one thing unfortunately rings true with crystalline clarity&mdash;sometimes, things go very, very awry. Power outages, network connectivity dropouts, corrupt RAM and crashed hard drives are but a taste of the evil that Fate is poised to unleash on even the most conscientious administrator. And so we arrive at a very important topic&mdash;how to make backup copies of your repository data."
msgstr "現代的なコンピュータが生まれてから技術的には非常に発展してきたものの、 残念なことに、一つのことだけは間違いなく真実です&mdash;ときどき、ものごとは まったく台無しになってしまう、ということです。停電、ネットワーク切断、 RAMの破壊、ハードディスクのクラッシュは、魔物以外の何者でもありません。 運命は最も優れた管理者にさえ降りかかるのです。それで、とても重要な トピックに行き着きます&mdash;どうやってリポジトリのバックアップを とるか、です。"

#. Tag: para
#: ch05-repository-admin.xml:2374
#, no-c-format
msgid "There are two types of backup methods available for Subversion repository administrators&mdash;full and incremental. A full backup of the repository involves squirreling away in one sweeping action all the information required to fully reconstruct that repository in the event of a catastrophe. Usually, it means, quite literally, the duplication of the entire repository directory (which includes either a Berkeley DB or FSFS environment). Incremental backups are lesser things, backups of only the portion of the repository data that has changed since the previous backup."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2386
#, no-c-format
msgid "As far as full backups go, the naive approach might seem like a sane one, but unless you temporarily disable all other access to your repository, simply doing a recursive directory copy runs the risk of generating a faulty backup. In the case of Berkeley DB, the documentation describes a certain order in which database files can be copied that will guarantee a valid backup copy. A similar ordering exists for FSFS data. But you don't have to implement these algorithms yourself, because the Subversion development team has already done so. The <command>svnadmin hotcopy</command> command takes care of the minutia involved in making a hot backup of your repository. And its invocation is as trivial as Unix's <command>cp</command> or Windows' <command>copy</command> operations:"
msgstr ""

#. Tag: screen
#: ch05-repository-admin.xml:2401
#, fuzzy, no-c-format
msgid "$ svnadmin hotcopy /path/to/repos /path/to/repos-backup"
msgstr "$ svnadmin create /path/to/repos"

#. Tag: para
#: ch05-repository-admin.xml:2403
#, no-c-format
msgid "The resulting backup is a fully functional Subversion repository, able to be dropped in as a replacement for your live repository should something go horribly wrong."
msgstr "結果のバックアップは、完全に機能するSubversionリポジトリで、現行の リポジトリが何かひどいことになったときには、置き換えて使うことが できるものです。"

#. Tag: para
#: ch05-repository-admin.xml:2407
#, no-c-format
msgid "When making copies of a Berkeley DB repository, you can even instruct <command>svnadmin hotcopy</command> to purge any unused Berkeley DB logfiles (see <xref linkend=\"svn.reposadmin.maint.diskspace.bdblogs\"/>) from the original repository upon completion of the copy. Simply provide the <option>--clean-logs</option> option on the command-line."
msgstr ""

#. Tag: screen
#: ch05-repository-admin.xml:2415
#, no-c-format
msgid "$ svnadmin hotcopy --clean-logs /path/to/bdb-repos /path/to/bdb-repos-backup"
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2417
#, no-c-format
msgid "Additional tooling around this command is available, too. The <filename>tools/backup/</filename> directory of the Subversion source distribution holds the <command>hot-backup.py</command> script. This script adds a bit of backup management atop <command>svnadmin hotcopy</command>, allowing you to keep only the most recent configured number of backups of each repository. It will automatically manage the names of the backed-up repository directories to avoid collisions with previous backups, and will <quote>rotate off</quote> older backups, deleting them so only the most recent ones remain. Even if you also have an incremental backup, you might want to run this program on a regular basis. For example, you might consider using <command>hot-backup.py</command> from a program scheduler (such as <command>cron</command> on Unix systems) which will cause it to run nightly (or at whatever granularity of Time you deem safe)."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2435
#, no-c-format
msgid "Some administrators use a different backup mechanism built around generating and storing repository dump data. We described in <xref linkend=\"svn.reposadmin.maint.migrate\"/> how to use <command>svnadmin dump --incremental</command> to perform an incremental backup of a given revision or range of revisions. And of course, there is a full backup variation of this achieved by omitting the <option>--incremental</option> option to that command. There is some value in these methods, in that the format of your backed-up information is flexible&mdash;it's not tied to a particular platform, versioned filesystem type, or release of Subversion or Berkeley DB. But that flexibility comes at a cost, namely that restoring that data can take a long time&mdash;longer with each new revision committed to your repository. Also, as is the case with so many of the various backup methods, revision property changes made to already-backed-up revisions won't get picked up by a non-overlapping, incremental dump generation. For these reasons, we recommend against relying solely on dump-based backup approaches."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2455
#, fuzzy, no-c-format
msgid "As you can see, each of the various backup types and methods has its advantages and disadvantages. The easiest is by far the full hot backup, which will always result in a perfect working replica of your repository. Should something bad happen to your live repository, you can restore from the backup with a simple recursive directory copy. Unfortunately, if you are maintaining multiple backups of your repository, these full copies will each eat up just as much disk space as your live repository. Incremental backups, by contrast, tend to be quicker to generate and smaller to store. But the restoration process can be a pain, often involving applying multiple incremental backups. And other methods have their own peculiarities. Administrators need to find the balance between the cost of making the backup and the cost of restoring it."
msgstr "両方のバックアップ方法にはそれぞれ利点があります。一番簡単なのは フルバックアップで、それは常に現行リポジトリの完全なコピーです。 繰り返しになりますが、何かまずいことが動作中のリポジトリに起きた 時には、単純な再帰的なディレクトリコピーでこのバックアップを 復元することができます。残念なことに、もしリポジトリの複数のバックアップ を管理している場合、このようなフルコピーは、実行中のリポジトリと 同じくらい、それぞれがディスクを食うということです。"

#. Tag: para
#: ch05-repository-admin.xml:2471
#, no-c-format
msgid "The <command>svnsync</command> program (see <xref linkend=\"svn.reposadmin.maint.replication\"/>) actually provides a rather handy middle-ground approach. If you are regularly synchronizing a read-only mirror with your main repository, then in a pinch, your read-only mirror is probably a good candidate for replacing that main repository if it falls over. The primary disadvantage of this method is that only the versioned repository data gets synchronized&mdash;repository configuration files, user-specified repository path locks, and other items which might live in the physical repository directory but not <emphasis>inside</emphasis> the repository's virtual versioned filesystem are not handled by svnsync."
msgstr ""

#. Tag: para
#: ch05-repository-admin.xml:2485
#, fuzzy, no-c-format
msgid "In any backup scenario, repository administrators need to be aware of how modifications to unversioned revision properties affect their backups. Since these changes do not themselves generate new revisions, they will not trigger post-commit hooks, and may not even trigger the pre-revprop-change and post-revprop-change hooks. <footnote> <para><command>svnadmin setlog</command> can be called in a way that bypasses the hook interface altogether.</para> </footnote> And since you can change revision properties without respect to chronological order&mdash;you can change any revision's properties at any time&mdash;an incremental backup of the latest few revisions might not catch a property modification to a revision that was included as part of a previous backup."
msgstr "どちらのバックアップの場合も、リポジトリ管理者は どのようにしてバージョン化されない属性への変更がバックアップに影響を 与えるかに注意する必要があります。このような変更は新しいリビジョンを それ自体で作り出すわけではないので、post-commitフックを呼び出すきっかけ にはならず、pre-revprop-chage や post-revprop-change フックのきっかけ にすらならないでしょう。 <footnote> <para>たとえば<command>svnadmin setlog</command>は、 とにかくフックインターフェースを迂回するような方法で呼び出されるのでした。 </para> </footnote> そして、時間の順序に沿わないでリビジョン属性を変更することができる &mdash;いつでも、どのリビジョン属性を変更することができます&mdash; ので、最後のいくつかのリビジョンの差分バックアップはそれ以前の バックアップの一部として行われたリビジョン属性の修正は取り入れる ことができません。"

#. Tag: para
#: ch05-repository-admin.xml:2502
#, fuzzy, no-c-format
msgid "Generally speaking, only the truly paranoid would need to backup their entire repository, say, every time a commit occurred. However, assuming that a given repository has some other redundancy mechanism in place with relatively fine granularity (like per-commit emails or incremental dumps), a hot backup of the database might be something that a repository administrator would want to include as part of a system-wide nightly backup. It's your data&mdash;protect it as much as you'd like."
msgstr "一般的に言って、本当に人間離れした潔癖さを持った人だけが完全なリポジトリ のバックアップを必要とするのでしょう。つまり、コミットが起こるたびに バックアップをとるわけです。しかし、そのリポジトリが相対的に細かい 粒度(コミットごとのメールなど)と共に、何か別の冗長性の仕組みを持って いるのであれば、データベースのホットバックアップはリポジトリ管理者が システム全体の日次バックアップの一環として導入したいと考えるものかも知れません。 ほとんどのリポジトリでは、コミット メール をアーカイブするだけで復旧元 データとしての十分な冗長性を持っています。少なくとも最近のいくつかのコミット についてはそうです。しかしデータはとにかくあなたのものです&mdash; 必要なだけ保護するのに越したことはありません。"

#. Tag: para
#: ch05-repository-admin.xml:2512
#, fuzzy, no-c-format
msgid "Often, the best approach to repository backups is a diversified one which leverages combinations of the methods described here. The Subversion developers, for example, back up the Subversion source code repository nightly using <command>hot-backup.py</command> and an offsite <command>rsync</command> of those full backups; keep multiple archives of all the commit and property change notification emails; and have repository mirrors maintained by various volunteers using <command>svnsync</command>. Your solution might be similar, but should be catered to your needs and that delicate balance of convenience with paranoia. And whatever you do, validate your backups from time to time&mdash;what good is a spare tire that has a hole in it? While all of this might not save your hardware from the iron fist of Fate, <footnote> <para>You know&mdash;the collective term for all of her <quote>fickle fingers</quote>.</para> </footnote> it should certainly help you recover from those trying times."
msgstr "しばしば、リポジトリのバックアップに対する最良の方法は、分散 させることです。フルバックアップと差分バックアップに、コミット メールのアーカイブを追加することができます。たとえばSubversion 開発者は、Subversionソースコードリポジトリを、新しいリビジョン が作られるたびにバックアップします。そして、すべてのコミットと 属性変更の通知メールをアーカイブしてとっておきます。同様の方法を とってください。ただし、必要な範囲で、便利さと安全性の被ｼ夬ｽなバラ ンスをとってください。そして、このようなことを全部やっても、運命 の鉄拳からハードウェアを守ることはできないことに注意してください。 <footnote> <para>ご存知でしょうか&mdash; 彼女のすべての<quote>きまぐれ</quote>をあらわす集合名詞です。</para> </footnote> バックアップは確かにそのような試練の時からあなたを救うはずです。"

#. Tag: para
#: ch05-repository-admin.xml:2543
#, no-c-format
msgid "By now you should have a basic understanding of how to create, configure, and maintain Subversion repositories. We've introduced you to the various tools that will assist you with this task. Throughout the chapter, we've noted common administration pitfalls, and suggestions for avoiding them."
msgstr "ここまでで、あなたは、どうやってSubversionリポジトリを作成し、設定するか についての基本的な理解ができたはずです。この作業を助けるさまざまなツール を紹介しました。そして、章全体を通じて、管理者がよくハマりそうなことをあげ、 どうやってそれを避けるかを議論しました。"

#. Tag: para
#: ch05-repository-admin.xml:2550
#, no-c-format
msgid "All that remains is for you to decide what exciting data to store in your repository, and finally, how to make it available over a network. The next chapter is all about networking."
msgstr "あとは、リポジトリに、どのようなデータを入れ、それをネットワーク越しに 利用できる形にするかを考えるだけです。次の章ではネットワーク利用について 詳述します。"

#. Tag: title
#: ch06-server-configuration.xml:2
#, no-c-format
msgid "Server Configuration"
msgstr "サーバの設定"

#. Tag: para
#: ch06-server-configuration.xml:4
#, fuzzy, no-c-format
msgid "A Subversion repository can be accessed simultaneously by clients running on the same machine on which the repository resides using the <literal>file://</literal> method. But the typical Subversion setup involves a single server machine being accessed from clients on computers all over the office&mdash;or, perhaps, all over the world."
msgstr "Subversion リポジトリは<literal>file:///</literal>方式でリポジトリのある 同じマシン上で実行されている複数のクライアントから同時にアクセスすること ができます。しかし典型的なSubversion の設定はオフィス全体&mdash;あるいは 全世界にあるコンピュータ上のクライアントからアクセスされる一台のサーバ上 で行います。"

#. Tag: para
#: ch06-server-configuration.xml:11
#, fuzzy, no-c-format
msgid "This chapter describes how to get your Subversion repository exposed outside its host machine for use by remote clients. We will cover Subversion's currently available server mechanisms, discussing the configuration and use of each. After reading this section, you should be able to decide which networking setup is right for your needs, and understand how to enable such a setup on your host computer."
msgstr "この章ではリモートクライアントを使ってホストマシンの外部にさらされる 形のSubversionリポジトリの作り方についての説明です。ここでは現在 Subversion で利用することのできるサーバの仕組みを説明し、その設定方法と 利用方法について説明します。この章を読んだ後であればどのタイプのネットワーク 設定が自分のニーズとって正しいものであるかを決め、どうやれば自分のホスト コンピュータ上でその設定が有効になるかについて理解できるはずです。"

#. Tag: title
#: ch06-server-configuration.xml:25
#, no-c-format
msgid "Overview"
msgstr "概観"

#. Tag: para
#: ch06-server-configuration.xml:27
#, fuzzy, no-c-format
msgid "Subversion was designed with an abstract network layer. This means that a repository can be programmatically accessed by any sort of server process, and the client <quote>repository access</quote> API allows programmers to write plugins that speak relevant network protocols. In theory, Subversion can use an infinite number of network implementations. In practice, there are only two servers at the time of this writing."
msgstr "Subversion は抽象的なネットワーク層の設計を含んでいます。これはリポジトリ に対してどのようなタイプのサーバプロセスからもアクセスできるようにプログラムを 作ることができ、クライアントの<quote>リポジトリアクセス</quote>API を使えば、プログラマは それに関連したネットワークプロトコルで通信することのできるプラグインを書くこと ができる、ということを意味します。理論的には Subversion は無数のネットワーク 実装が可能なはずです。ただしこれを書いている現時点では実際には二つの サーバがあるだけです。"

#. Tag: para
#: ch06-server-configuration.xml:35
#, fuzzy, no-c-format
msgid "Apache is an extremely popular webserver; using the <command>mod_dav_svn</command> module, Apache can access a repository and make it available to clients via the WebDAV/DeltaV protocol, which is an extension of HTTP. Because Apache is an extremely extensible web server, it provides a number of features <quote>for free</quote>, such as encrypted SSL communication, logging, integration with a number of third-party authentication systems, and limited built-in web browsing of repositories."
msgstr "Apache は非常に有名なウェブサーバです; <command>mod_dav_svn</command>モジュール を使えば Apache はリポジトリにアクセスすることができ、WebDAV/DeltaV プロトコル 経由でクライアントにもリポジトリを利用させることができます。これは HTTP の 拡張の一つです。もう一つの方法は <command>svnserve</command>です: これは 非常に小さい、スタンドアロンのサーバプログラムでクライアントとの間で独自の プロトコルを使って通信します。Table 6-1 に二つのサーバの比較をのせまし た。"

#. Tag: para
#: ch06-server-configuration.xml:45
#, no-c-format
msgid "In the other corner is <command>svnserve</command>: a small, lightweight server program that speaks a custom protocol with clients. Because its protocol is explicitly designed for Subversion and is stateful (unlike HTTP), it provides significantly faster network operations&mdash;but at the cost of some features as well. It only understands CRAM-MD5 authentication, has no logging, no web-browsing, and no option to encrypt network traffic. It is, however, extremely easy to set up and is often the best option for small teams just starting out with Subversion."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:56
#, no-c-format
msgid "A third option is to use <command>svnserve</command> tunneled over an SSH connection. Even though this scenario still uses <command>svnserve</command>, it differs quite a bit in features from a traditional <command>svnserve</command> deployment. SSH is used to encrypt all communication. SSH is also used exclusively to authenticate, so real system accounts are required on the server host (unlike vanilla <command>svnserve</command>, which has its own private user accounts.) Finally, because this setup requires that each user spawn a private, temporary <command>svnserve</command> process, it's equivalent (from a permissions point of view) to allowing a group of local users to all access the repository via <literal>file://</literal> URLs. Path-based access control has no meaning, since each user is accessing the repository database files directly."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:72
#, no-c-format
msgid "Here's a quick summary of the three typical server deployments."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:76
#, no-c-format
msgid "Comparison of Subversion Server Options"
msgstr ""

#. Tag: entry
#: ch06-server-configuration.xml:81
#, no-c-format
msgid "Apache + mod_dav_svn"
msgstr "Apache + mod_dav_svn"

#. Tag: entry
#: ch06-server-configuration.xml:83
#, no-c-format
msgid "svnserve over SSH"
msgstr "svnserve over SSH"

#. Tag: entry
#: ch06-server-configuration.xml:88
#, no-c-format
msgid "Authentication options"
msgstr "認証オプション"

#. Tag: entry
#: ch06-server-configuration.xml:89
#, no-c-format
msgid "HTTP(S) basic auth, X.509 certificates, LDAP, NTLM, or any other mechanism available to Apache httpd"
msgstr "HTTP(S) 基本認証, X.509 認証, LDAP, NTLM, その他 Apache httpd で利用可能な方法"

#. Tag: entry
#: ch06-server-configuration.xml:91
#, no-c-format
msgid "CRAM-MD5"
msgstr "CRAM-MD5"

#. Tag: entry
#: ch06-server-configuration.xml:92
#, no-c-format
msgid "<entry>SSH</entry>"
msgstr "<entry>SSH</entry>"

#. Tag: entry
#: ch06-server-configuration.xml:96
#, no-c-format
msgid "User account options"
msgstr "ユーザアカウントオプション"

#. Tag: entry
#: ch06-server-configuration.xml:97
#: ch06-server-configuration.xml:98
#, no-c-format
msgid "private 'users' file"
msgstr "固有の 'users' ファイル"

#. Tag: entry
#: ch06-server-configuration.xml:99
#, fuzzy, no-c-format
msgid "system accounts"
msgstr "ユーザアカウントオプション"

#. Tag: entry
#: ch06-server-configuration.xml:103
#, no-c-format
msgid "Authorization options"
msgstr "認可のオプション"

#. Tag: entry
#: ch06-server-configuration.xml:104
#: ch06-server-configuration.xml:106
#, no-c-format
msgid "read/write access can be granted over whole repository, or specified per-path."
msgstr ""

#. Tag: entry
#: ch06-server-configuration.xml:108
#, no-c-format
msgid "read/write access only grantable over whole repository"
msgstr ""

#. Tag: entry
#: ch06-server-configuration.xml:113
#, no-c-format
msgid "Encryption"
msgstr "暗号化"

#. Tag: entry
#: ch06-server-configuration.xml:114
#, no-c-format
msgid "via optional SSL"
msgstr "オプションのSSLを経由することで"

#. Tag: entry
#: ch06-server-configuration.xml:115
#, fuzzy, no-c-format
msgid "none"
msgstr "なし"

#. Tag: entry
#: ch06-server-configuration.xml:116
#, no-c-format
msgid "SSH tunneled"
msgstr ""

#. Tag: entry
#: ch06-server-configuration.xml:120
#, fuzzy, no-c-format
msgid "Logging"
msgstr "ロック"

#. Tag: entry
#: ch06-server-configuration.xml:121
#, no-c-format
msgid "full Apache logs of each HTTP request, with optional <quote>high-level</quote> logging of general client operations"
msgstr ""

#. Tag: entry
#: ch06-server-configuration.xml:124
#: ch06-server-configuration.xml:125
#, no-c-format
msgid "no logging"
msgstr ""

#. Tag: entry
#: ch06-server-configuration.xml:129
#, no-c-format
msgid "Interoperability"
msgstr "相互運用性"

#. Tag: entry
#: ch06-server-configuration.xml:130
#, no-c-format
msgid "partially usable by other WebDAV clients"
msgstr "部分的に他の WebDAVクライアントからも利用可能"

#. Tag: entry
#: ch06-server-configuration.xml:131
#: ch06-server-configuration.xml:132
#, no-c-format
msgid "only talks to svn clients"
msgstr ""

#. Tag: entry
#: ch06-server-configuration.xml:136
#, no-c-format
msgid "Web viewing"
msgstr "ウェブによる参照"

#. Tag: entry
#: ch06-server-configuration.xml:137
#, no-c-format
msgid "limited built-in support, or via 3rd-party tools such as ViewVC"
msgstr "制限された組み込みサポート機能、あるいは ViewCVS のような サードパーティーのツール経由"

#. Tag: entry
#: ch06-server-configuration.xml:139
#: ch06-server-configuration.xml:140
#, fuzzy, no-c-format
msgid "only via 3rd-party tools such as ViewVC"
msgstr "ViewCVS のようなサードパーティーツール経由"

#. Tag: entry
#: ch06-server-configuration.xml:144
#, no-c-format
msgid "Speed"
msgstr "スピード"

#. Tag: entry
#: ch06-server-configuration.xml:145
#, no-c-format
msgid "somewhat slower"
msgstr "やや遅い"

#. Tag: entry
#: ch06-server-configuration.xml:146
#: ch06-server-configuration.xml:147
#, no-c-format
msgid "somewhat faster"
msgstr "やや速い"

#. Tag: entry
#: ch06-server-configuration.xml:151
#, no-c-format
msgid "<entry>Initial setup</entry>"
msgstr "<entry>初期設定</entry>"

#. Tag: entry
#: ch06-server-configuration.xml:152
#, no-c-format
msgid "somewhat complex"
msgstr "やや複雑"

#. Tag: entry
#: ch06-server-configuration.xml:153
#, fuzzy, no-c-format
msgid "extremely simple"
msgstr "かなり簡単"

#. Tag: entry
#: ch06-server-configuration.xml:154
#, fuzzy, no-c-format
msgid "moderately simple"
msgstr "かなり簡単"

#. Tag: title
#: ch06-server-configuration.xml:165
#, fuzzy, no-c-format
msgid "Choosing a Server Configuration"
msgstr "サーバの設定"

#. Tag: para
#: ch06-server-configuration.xml:167
#, no-c-format
msgid "So, which server should you use? Which is best?"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:169
#, no-c-format
msgid "Obviously, there's no right answer to that question. Every team has different needs, and the different servers all represent different sets of tradeoffs. The Subversion project itself doesn't endorse one server or another, or consider either server more <quote>official</quote> than another."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:175
#, no-c-format
msgid "Here are some reasons why you might choose one deployment over another, as well as reasons you might <emphasis>not</emphasis> choose one."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:181
#, fuzzy, no-c-format
msgid "The <command>svnserve</command> Server"
msgstr "<command>svnserve</command> スイッチ"

#. Tag: term
#: ch06-server-configuration.xml:185
#: ch06-server-configuration.xml:236
#: ch06-server-configuration.xml:284
#, no-c-format
msgid "Why you might want to use it:"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:189
#, no-c-format
msgid "Quick and easy to set up."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:192
#: ch06-server-configuration.xml:240
#, no-c-format
msgid "Network protocol is stateful and noticeably faster than WebDAV."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:195
#: ch06-server-configuration.xml:292
#, no-c-format
msgid "No need to create system accounts on server."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:198
#, no-c-format
msgid "Password is not passed over the network."
msgstr ""

#. Tag: term
#: ch06-server-configuration.xml:206
#: ch06-server-configuration.xml:254
#: ch06-server-configuration.xml:316
#, no-c-format
msgid "Why you might want to avoid it:"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:210
#, no-c-format
msgid "Network protocol is not encrypted."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:213
#: ch06-server-configuration.xml:258
#, fuzzy, no-c-format
msgid "Only one choice of authentication method."
msgstr "認証要求に正しく答えます。"

#. Tag: para
#: ch06-server-configuration.xml:216
#, fuzzy, no-c-format
msgid "Password is stored in the clear on the server."
msgstr "サーバにはアイテムのもっと新しいバージョンが 存在します。"

#. Tag: para
#: ch06-server-configuration.xml:219
#: ch06-server-configuration.xml:261
#, no-c-format
msgid "No logging of any kind, not even errors."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:232
#, fuzzy, no-c-format
msgid "<command>svnserve</command> over SSH"
msgstr "<command>svnserve</command> スイッチ"

#. Tag: para
#: ch06-server-configuration.xml:243
#, no-c-format
msgid "You can take advantage of existing ssh accounts and user infrastructure."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:246
#, no-c-format
msgid "All network traffic is encrypted."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:264
#, no-c-format
msgid "Requires users to be in same system group, or use a shared ssh key."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:267
#, no-c-format
msgid "If used improperly, can lead to file permissions problems."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:280
#, no-c-format
msgid "The Apache HTTP Server"
msgstr "Apache HTTP サーバ"

#. Tag: para
#: ch06-server-configuration.xml:288
#, no-c-format
msgid "Allows Subversion to use any of the numerous authentication systems already integrated with Apache."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:295
#, no-c-format
msgid "Full Apache logging."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:297
#, no-c-format
msgid "Network traffic can be encrypted via SSL."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:300
#, no-c-format
msgid "HTTP(S) can usually go through corporate firewalls."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:303
#, no-c-format
msgid "Built-in repository browsing via web browser."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:306
#, fuzzy, no-c-format
msgid "Repository can be mounted as a network drive for transparent version control. (See <xref linkend=\"svn.webdav.autoversioning\"/>.)"
msgstr "If present, the revision was created via the autoversioning feature. See <xref linkend=\"svn.webdav.autoversioning\"/>."

#. Tag: para
#: ch06-server-configuration.xml:320
#, no-c-format
msgid "Noticeably slower than svnserve, because HTTP is a stateless protocol and requires more turnarounds."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:324
#, no-c-format
msgid "Initial setup can be complex."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:336
#, fuzzy, no-c-format
msgid "Recommendations"
msgstr "ロックのコミュニケーション"

#. Tag: para
#: ch06-server-configuration.xml:338
#, no-c-format
msgid "In general, the authors of this book recommend a vanilla <command>svnserve</command> installation for small teams just trying to get started with a Subversion server; it's the simplest to set up, and has the fewest maintenance issues. You can always switch to a more complex server deployment as your needs change."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:345
#, no-c-format
msgid "Here are some general recommendations and tips, based on years of supporting users:"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:350
#, no-c-format
msgid "If you're trying to set up the simplest possible server for your group, then a vanilla <command>svnserve</command> installation is the easiest, fastest route. Note, however, that your repository data will be transmitted in the clear over the network. If your deployment is entirely within your company's LAN or VPN, this isn't an issue. If the repository is exposed to the wide-open internet, then you might want to make sure the repository's contents aren't sensitive (e.g. it contains only open-source code.)"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:363
#, no-c-format
msgid "If you need to integrate with existing identity systems (LDAP, Active Directory, NTLM, X.509, etc.), then an Apache-based server is your only real option. Similarly, if you absolutely need server-side logs of either server errors or client activities, then an Apache-based server is required."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:372
#, no-c-format
msgid "If you've decided to use either Apache or stock <command>svnserve</command>, create a single <literal>svn</literal> user on your system and run the server process as that user. Be sure to make the repository directory wholly owned by the <literal>svn</literal> user as well. From a security point of view, this keeps the repository data nicely siloed and protected by operating system filesystem permissions, changeable by only the Subversion server process itself."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:385
#, no-c-format
msgid "If you have an existing infrastructure heavily based on SSH accounts, and if your users already have system accounts on your server machine, then it makes sense to deploy an svnserve-over-ssh solution. Otherwise, we don't widely recommend this option to the public. It's generally considered safer to have your users access the repository via (imaginary) accounts managed by <command>svnserve</command> or Apache, rather than by full-blown system accounts. If your deep desire for encrypted communication still draws you to this option, we recommend using Apache with SSL instead."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:399
#, no-c-format
msgid "Do <emphasis>not</emphasis> be seduced by the simple idea of having all of your users access a repository directly via <literal>file://</literal> URLs. Even if the repository is readily available to everyone via network share, this is a bad idea. It removes any layers of protection between the users and the repository: users can accidentally (or intentionally) corrupt the repository database, it becomes hard to take the repository offline for inspection or upgrade, and it can lead to a mess of file-permissions problems (see <xref linkend=\"svn.serverconfig.multimethod\"/>.) Note that this is also one of the reasons we warn against accessing repositories via <literal>svn+ssh://</literal> URLs&mdash;from a security standpoint, it's effectively the same as local users accessing via <literal>file://</literal>, and can entail all the same problems if the administrator isn't careful."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:428
#, no-c-format
msgid "svnserve, a custom server"
msgstr "svnserve, 専用サーバ"

#. Tag: para
#: ch06-server-configuration.xml:430
#, fuzzy, no-c-format
msgid "The <command>svnserve</command> program is a lightweight server, capable of speaking to clients over TCP/IP using a custom, stateful protocol. Clients contact an <command>svnserve</command> server by using URLs that begin with the <literal>svn://</literal> or <literal>svn+ssh://</literal> scheme. This section will explain the different ways of running <command>svnserve</command>, how clients authenticate themselves to the server, and how to configure appropriate access control to your repositories."
msgstr "<command>svnserve</command> プログラムは軽量なサーバで専用の状態プロトコル によって TCP/IP 上でクライアントと通信することができます。クライアントは <literal>svn://</literal>または<literal>svn+ssh://</literal> で始まる URL によって <command>svnserve</command>サーバと通信します。この節 では <command>svnserve</command>を実行する別の方法を説明しクライアントが どうやってサーバに認証するか、またリポジトリに適切なアクセス制御を設定 するにはどうしたら良いかについて説明します。"

#. Tag: title
#: ch06-server-configuration.xml:442
#, no-c-format
msgid "Invoking the Server"
msgstr "サーバの起動"

#. Tag: para
#: ch06-server-configuration.xml:444
#, fuzzy, no-c-format
msgid "There are a few different ways to run the <command>svnserve</command> program:"
msgstr "これは、<command>svn revert</command>を使うことの できるとても良い機会です。"

#. Tag: para
#: ch06-server-configuration.xml:448
#, no-c-format
msgid "Run <command>svnserve</command> as a standalone daemon, listening for requests."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:451
#, no-c-format
msgid "Have the Unix <command>inetd</command> daemon temporarily spawn <command>svnserve</command> whenever a request comes in on a certain port."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:454
#, no-c-format
msgid "Have SSH invoke a temporary <command>svnserve</command> over an encrypted tunnel."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:457
#, fuzzy, no-c-format
msgid "Run <command>svnserve</command> as a Windows service."
msgstr "<command>svnserve</command> スイッチ"

#. Tag: title
#: ch06-server-configuration.xml:463
#, fuzzy, no-c-format
msgid "<command>svnserve</command> as Daemon"
msgstr "<command>svnserve</command> スイッチ"

#. Tag: para
#: ch06-server-configuration.xml:465
#, fuzzy, no-c-format
msgid "The easiest option is to run <command>svnserve</command> as a standalone <quote>daemon</quote> process. Use the <option>-d</option> option for this:"
msgstr "第二の方法は<command>svnserve</command>を単独の<quote>デーモン</quote>プロセスとして 起動する方法です。これには<option>-d</option>オプションを使って ください:"

#. Tag: screen
#: ch06-server-configuration.xml:469
#, no-c-format
msgid ""
"$ svnserve -d\n"
"$               # svnserve is now running, listening on port 3690"
msgstr ""
"$ svnserve -d\n"
"$               # svnserve is now running, listening on port 3690"

#. Tag: para
#: ch06-server-configuration.xml:471
#, no-c-format
msgid "When running <command>svnserve</command> in daemon mode, you can use the <option>--listen-port=</option> and <option>--listen-host=</option> options to customize the exact port and hostname to <quote>bind</quote> to."
msgstr "デーモンモードで<command>svnserve</command>を実行するときには <option>--listen-port=</option>と <option>--listen-host=</option>オプションで待ち受けポートとホスト 名を<quote>指定</quote>することができます。"

#. Tag: para
#: ch06-server-configuration.xml:476
#, fuzzy, no-c-format
msgid "Once we successfully start <command>svnserve</command> as above, it makes every repository on your system available to the network. A client needs to specify an <emphasis>absolute</emphasis> path in the repository URL. For example, if a repository is located at <filename>/usr/local/repositories/project1</filename>, then a client would reach it via <uri>svn://host.example.com/usr/local/repositories/project1</uri>. To increase security, you can pass the <option>-r</option> option to <command>svnserve</command>, which restricts it to exporting only repositories below that path. For example:"
msgstr "一度<command>svnserve</command>プログラムが実行されるとネットワーク越しに システム上のすべてのリポジトリが利用可能になります。クライアントは リポジトリ URL の<emphasis>絶対</emphasis>パスを指定する必要があります。 たとえば、リポジトリが<filename>/usr/local/repositories/project1</filename> にあるならクライアントは <systemitem class=\"url\">svn://host.example.com/usr/local/repositories/project1 </systemitem>によってそこにアクセスするでしょう。セキュリティー を高めるため <command>svnserve</command>に <option>-r</option> オプションを渡すこともできますが、これはそのパス以下のリポジトリだけを公開 するように制限します:"

#. Tag: screen
#: ch06-server-configuration.xml:488
#, no-c-format
msgid ""
"$ svnserve -d -r /usr/local/repositories\n"
"&hellip;"
msgstr ""
"$ svnserve -d -r /usr/local/repositories\n"
"&hellip;"

#. Tag: para
#: ch06-server-configuration.xml:490
#, no-c-format
msgid "Using the <option>-r</option> option effectively modifies the location that the program treats as the root of the remote filesystem space. Clients then use URLs that have that path portion removed from them, leaving much shorter (and much less revealing) URLs:"
msgstr "<option>-r</option>オプションの利用は リモートファイルシステム空間のルートとしてプログラムが扱う場所 を効果的に変更することができます。この場合クライアントはそのルート までの部分を除いたパスを指定することになり、もっと短い(そしてより情報制限された) URL を利用できます:"

#. Tag: screen
#: ch06-server-configuration.xml:496
#, no-c-format
msgid ""
"$ svn checkout svn://host.example.com/project1\n"
"&hellip;"
msgstr ""
"$ svn checkout svn://host.example.com/project1\n"
"&hellip;"

#. Tag: title
#: ch06-server-configuration.xml:502
#, fuzzy, no-c-format
msgid "<command>svnserve</command> via <command>inetd</command>"
msgstr "<command>svnserve</command> スイッチ"

#. Tag: para
#: ch06-server-configuration.xml:504
#, no-c-format
msgid "If you want <command>inetd</command> to launch the process, then you need to pass the <option>-i</option> (<option>--inetd</option>) option. In the example, we've shown the output from running <literal>svnserve -i</literal> at the command line, but note that isn't how you actually start the daemon; see the paragraphs following the example for how to configure <command>inetd</command> to start <command>svnserve</command>."
msgstr ""

#. Tag: screen
#: ch06-server-configuration.xml:513
#, no-c-format
msgid ""
"$ svnserve -i\n"
"( success ( 1 2 ( ANONYMOUS ) ( edit-pipeline ) ) )"
msgstr ""
"$ svnserve -i\n"
"( success ( 1 2 ( ANONYMOUS ) ( edit-pipeline ) ) )"

#. Tag: para
#: ch06-server-configuration.xml:515
#, no-c-format
msgid "When invoked with the <option>--inetd</option> option, <command>svnserve</command> attempts to speak with a Subversion client via <emphasis>stdin</emphasis> and <emphasis>stdout</emphasis> using a custom protocol. This is the standard behavior for a program being run via <command>inetd</command>. The IANA has reserved port 3690 for the Subversion protocol, so on a Unix-like system you can add lines to <filename>/etc/services</filename> like these (if they don't already exist):"
msgstr "<option>--inetd</option> オプション付きで起動すると <command>svnserve</command> はSubversion クライアントとの間 で、専用のプロトコルを使い、<emphasis>stdin</emphasis>と <emphasis>stdout</emphasis>チャンネル経由で通信しようとします。 これは<command>inetd</command>を経由して 実行されるプログラムの標準的な振る舞い方です。IANAはポート3690 をSubversion プロトコルのために予約しているため Unix風のシステム上 なら<filename>/etc/services</filename>ファイルに(もしまだ追加されていない のなら)以下の行を追加することができます:"

#. Tag: screen
#: ch06-server-configuration.xml:525
#, no-c-format
msgid ""
"svn           3690/tcp   # Subversion\n"
"svn           3690/udp   # Subversion"
msgstr ""
"svn           3690/tcp   # Subversion\n"
"svn           3690/udp   # Subversion"

#. Tag: para
#: ch06-server-configuration.xml:527
#, no-c-format
msgid "And if your system is using a classic Unix-like <command>inetd</command> daemon, you can add this line to <filename>/etc/inetd.conf</filename>:"
msgstr "そしてもし伝統的な Unix風の<command>inetd</command>デーモンを使って いるのなら <filename>/etc/inetd.conf</filename>に以下のような行を 追加することができます:"

#. Tag: screen
#: ch06-server-configuration.xml:531
#, no-c-format
msgid "svn stream tcp nowait svnowner /usr/bin/svnserve svnserve -i"
msgstr "svn stream tcp nowait svnowner /usr/bin/svnserve svnserve -i"

#. Tag: para
#: ch06-server-configuration.xml:533
#, fuzzy, no-c-format
msgid "Make sure <quote>svnowner</quote> is a user which has appropriate permissions to access your repositories. Now, when a client connection comes into your server on port 3690, <command>inetd</command> will spawn an <command>svnserve</command> process to service it. Of course, you may also want to add <option>-r</option> to the configuration line as well, to restrict which repositories are exported."
msgstr "<quote>svnowner</quote>はリポジトリにアクセスするのに適切な パーミッションをもったユーザであることを確認してください。 これでクライアントがサーバのポート3690に接続しにきた時点で <command>inetd</command>は<command>svnserve</command> プロセスを起動し、処理を任せます。"

#. Tag: title
#: ch06-server-configuration.xml:546
#, fuzzy, no-c-format
msgid "<command>svnserve</command> over a Tunnel"
msgstr "<command>svnserve</command> スイッチ"

#. Tag: para
#: ch06-server-configuration.xml:548
#, fuzzy, no-c-format
msgid "A third way to invoke <command>svnserve</command> is in <quote>tunnel mode</quote>, with the <option>-t</option> option. This mode assumes that a remote-service program such as <command>RSH</command> or <command>SSH</command> has successfully authenticated a user and is now invoking a private <command>svnserve</command> process <emphasis>as that user</emphasis>. (Note that you, the user, will rarely, if ever, have reason to invoke <command>svnserve</command> with the <option>-t</option> at the command line; instead, the <command>SSH</command> daemon does so for you.) The <command>svnserve</command> program behaves normally (communicating via <emphasis>stdin</emphasis> and <emphasis>stdout</emphasis>), and assumes that the traffic is being automatically redirected over some sort of tunnel back to the client. When <command>svnserve</command> is invoked by a tunnel agent like this, be sure that the authenticated user has full read and write access to the repository database files. It's essentially the same as a local user accessing the repository via <literal>file://</literal> URLs."
msgstr "さらに<command>svnserve</command>を起動する第三の方法があり、 それは<quote>トンネルモード</quote>と呼ばれますが、<option>-t</option>オプション を付けて起動します。このモードは <command>RSH</command>や <command>SSH</command>のようなリモートサービスプログラムがユーザを 正しく認証し<emphasis>そのユーザ</emphasis>でプライベートな <command>svnserve</command> サーバを起動している状況を仮定しています。 <command>svnserve</command> プログラムは普通に振る舞い(<emphasis>stdin</emphasis>と<emphasis>stdout</emphasis> を通じて)、通信データは自動的にクライアントの背後にいる何らかのトンネル にリダイレクトされると仮定しています。<command>svnserve</command>が このようなトンネルエージェントによって起動された場合は認証ユーザは リポジトリデータベースファイルに完全な読み書きアクセスを持つことに注意 してください。(<xref linkend=\"svn.serverconfig.svnserve.invoking.sb-1\"/>を参照してください)。 これは本質的には <literal>file:///</literal>URLを使ってリポジトリにアクセス するローカルユーザと同じになります。"

#. Tag: para
#: ch06-server-configuration.xml:569
#, no-c-format
msgid "This option is described in much more detail in <xref linkend=\"svn.serverconfig.svnserve.sshauth\"/>."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:576
#, fuzzy, no-c-format
msgid "<command>svnserve</command> as Windows Service"
msgstr "<command>svnserve</command> スイッチ"

#. Tag: para
#: ch06-server-configuration.xml:578
#, no-c-format
msgid "If your Windows system is a descendant of Windows NT (2000, 2003, XP, Vista), then you can run <command>svnserve</command> as a standard Windows service. This is typically a much nicer experience than running it as a standalone daemon with the <option>--daemon (-d)</option> option. Using daemon-mode requires launching a console, typing a command, and then leaving the console window running indefinitely. A Windows service, however, runs in the background, can start at boot time automatically, and can be started and stopped using the same consistent administration interface as other Windows services."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:591
#, no-c-format
msgid "You'll need to define the new service using the command-line tool <command>SC.EXE</command>. Much like the <command>inetd</command> configuration line, you must specify an exact invocation of <command>svnserve</command> for Windows to run at start-up time:"
msgstr ""

#. Tag: screen
#: ch06-server-configuration.xml:597
#, no-c-format
msgid ""
"C:\\&gt; sc create svn\n"
"        binpath= \"C:\\svn\\bin\\svnserve.exe --service -r C:\\repos\"\n"
"        displayname= \"Subversion Server\"\n"
"        depend= Tcpip\n"
"        start= auto"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:599
#, no-c-format
msgid "This defines a new Windows service named <quote>svn</quote>, and which executes a particular <command>svnserve.exe</command> command when started (in this case, rooted at <filename>C:\\repos</filename>.) There are a number of caveats in the prior example, however."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:606
#, no-c-format
msgid "First, notice that the <command>svnserve.exe</command> program must always be invoked with the <option>--service</option> option. Any other options to <command>svnserve</command> must then be specified on the same line, but you cannot add conflicting options such as <option>--daemon (-d)</option>, <option>--tunnel</option>, or <option>--inetd (-i)</option>. Options such as <option>-r</option> or <option>--listen-port</option> are fine, though. Second, be careful about spaces when invoking the <command>SC.EXE</command> command: the <literal>key= value</literal> patterns must have no spaces between <literal>key=</literal> and exactly one space before the <literal>value</literal>. Lastly, be careful about spaces in your command-line to be invoked. If a directory name contains spaces (or other characters that need escaping), place the entire inner value of <literal>binpath</literal> in double-quotes, by escaping them:"
msgstr ""

#. Tag: screen
#: ch06-server-configuration.xml:626
#, no-c-format
msgid ""
"C:\\&gt; sc create svn\n"
"        binpath= \"\\\"C:\\program files\\svn\\bin\\svnserve.exe\\\" --service -r C:\\repos\"\n"
"        displayname= \"Subversion Server\"\n"
"        depend= Tcpip\n"
"        start= auto"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:628
#, no-c-format
msgid "Also note that the word <literal>binpath</literal> is misleading&mdash;its value is a <emphasis>command line</emphasis>, not the path to an executable. That's why you need to surround it with quote marks if it contains embedded spaces."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:634
#, no-c-format
msgid "Once the service is defined, it can stopped, started, or queried using standard GUI tools (the Services administrative control panel), or at the command line as well:"
msgstr ""

#. Tag: screen
#: ch06-server-configuration.xml:639
#, no-c-format
msgid ""
"C:\\&gt; net stop svn\n"
"C:\\&gt; net start svn"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:641
#, no-c-format
msgid "The service can also be uninstalled (i.e. undefined) by deleting its definition: <literal>sc delete svn</literal>. Just be sure to stop the service first! The <command>SC.EXE</command> program has many other subcommands and options; run <literal>sc /?</literal> to learn more about it."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:654
#, no-c-format
msgid "Built-in authentication and authorization"
msgstr "組み込みの認証と認可"

#. Tag: para
#: ch06-server-configuration.xml:656
#, no-c-format
msgid "When a client connects to an <command>svnserve</command> process, the following things happen:"
msgstr "クライアントが<command>svnserve</command>プロセスに接続する とき、以下のことが起こります:"

#. Tag: para
#: ch06-server-configuration.xml:660
#, no-c-format
msgid "The client selects a specific repository."
msgstr "クライアントは特定のリポジトリを選択します。"

#. Tag: para
#: ch06-server-configuration.xml:663
#, no-c-format
msgid "The server processes the repository's <filename>conf/svnserve.conf</filename> file, and begins to enforce any authentication and authorization policies defined therein."
msgstr "サーバはリポジトリの <filename>conf/svnserve.conf</filename> ファイルを処理しその中に定義されている認証と認可の方式に強制的に 従います。"

#. Tag: para
#: ch06-server-configuration.xml:668
#, no-c-format
msgid "Depending on the situation and authorization policies,"
msgstr "そのときの状況と認可の方式により、以下のどれかになります。"

#. Tag: para
#: ch06-server-configuration.xml:672
#, no-c-format
msgid "the client may be allowed to make requests anonymously, without ever receiving an authentication challenge, OR"
msgstr "クライアントは要求を匿名で行うことができ、どのような認証確認も 要求されないか、"

#. Tag: para
#: ch06-server-configuration.xml:676
#, no-c-format
msgid "the client may be challenged for authentication at any time, OR"
msgstr "クライアントは常に認証許可を求められるか、"

#. Tag: para
#: ch06-server-configuration.xml:679
#, no-c-format
msgid "if operating in <quote>tunnel mode</quote>, the client will declare itself to be already externally authenticated."
msgstr "もし\"トンネルモード\"で実行されている場合であれば、クライアント は既に外部的に認証されたことを宣言するか、です。"

#. Tag: para
#: ch06-server-configuration.xml:687
#, fuzzy, no-c-format
msgid "At the time of writing, the server only knows how to send a CRAM-MD5 <footnote><para>See RFC 2195.</para></footnote> authentication challenge. In essence, the server sends a small amount of data to the client. The client uses the MD5 hash algorithm to create a fingerprint of the data and password combined, then sends the fingerprint as a response. The server performs the same computation with the stored password to verify that the result is identical. <emphasis>At no point does the actual password travel over the network.</emphasis>"
msgstr "これを書いている時点では、サーバはCRAM-MD5 <footnote><para>RFC 2195を参照してください</para></footnote> 認証確認の方法だけを知っています。本質的にサーバはクライアント に対して少しのデータを送ります。 クライアントはMD5ハッシュのアルゴリズムを使ってデータとパスワードを一 緒にしたデータについてのフィンガープリントを作成し、これを応答メッセー ジとして送信します。サーバは同じ計算を保存してあるパスワードについて おこない結果が同じであることを確認します。<emphasis>いかなる場合でも ネットワーク上に実際のパスワードが流れることはありません。 </emphasis>"

#. Tag: para
#: ch06-server-configuration.xml:698
#, no-c-format
msgid "It's also possible, of course, for the client to be externally authenticated via a tunnel agent, such as <command>SSH</command>. In that case, the server simply examines the user it's running as, and uses it as the authenticated username. For more on this, see <xref linkend=\"svn.serverconfig.svnserve.sshauth\"/>."
msgstr "もちろんクライアントはトンネルエージェント、たとえば <command>SSH</command>のようなものを経由して外部的に 認証することもできます。この場合サーバは単に実行している ユーザを確認し、それを認証されたユーザ名であるとして 利用します。より詳しくは <xref linkend=\"svn.serverconfig.svnserve.sshauth\"/>を見てください。"

#. Tag: para
#: ch06-server-configuration.xml:705
#, fuzzy, no-c-format
msgid "As you've already guessed, a repository's <filename>svnserve.conf</filename> file is the central mechanism for controlling authentication and authorization policies. The file has the same format as other configuration files (see <xref linkend=\"svn.advanced.confarea\"/>): section names are marked by square brackets (<literal>[</literal> and <literal>]</literal>), comments begin with hashes (<literal>#</literal>), and each section contains specific variables that can be set (<literal>variable = value</literal>). Let's walk through these files and learn how to use them."
msgstr "もうおわかりだと思いますが、リポジトリの<filename>svnserve.conf</filename> ファイルは認証と認可の方式を制御する中心的な仕組みです。このファイルは他の 設定ファイルと同じ形式をしています。(<xref linkend=\"svn.advanced.confarea\"/> 参照): セクション名は角かっこ(<literal>[</literal> and <literal>]</literal>) で示され、コメントはハッシュ文字(<literal>#</literal>)で始まり、セクションの それぞれには設定可能な特定の変数が含まれています。(<literal>variable = value</literal>)。 このファイルを見てどのように利用されているか理解してください。"

#. Tag: title
#: ch06-server-configuration.xml:719
#, no-c-format
msgid "Create a 'users' file and realm"
msgstr "ユーザファイルと認証範囲の作成"

#. Tag: para
#: ch06-server-configuration.xml:721
#, fuzzy, no-c-format
msgid "For now, the <literal>[general]</literal> section of the <filename>svnserve.conf</filename> has all the variables you need. Begin by changing the values of those variables: choose a name for a file which will contain your usernames and passwords, and choose an authentication realm:"
msgstr "ここでは <filename>svnserve.conf</filename>の <literal>[general]</literal> セクションに必要な変数のすべてがあります。 ユーザ名とパスワードを含むファイルの定義で始まり、認証範囲を設定 しています:"

#. Tag: screen
#: ch06-server-configuration.xml:727
#, no-c-format
msgid ""
"[general]\n"
"password-db = userfile\n"
"realm = example realm"
msgstr ""
"[general]\n"
"password-db = userfile\n"
"realm = example realm"

#. Tag: para
#: ch06-server-configuration.xml:729
#, no-c-format
msgid "The <literal>realm</literal> is a name that you define. It tells clients which sort of <quote>authentication namespace</quote> they're connecting to; the Subversion client displays it in the authentication prompt, and uses it as a key (along with the server's hostname and port) for caching credentials on disk (see <xref linkend=\"svn.serverconfig.netmodel.credcache\"/>). The <literal>password-db</literal> variable points to a separate file that contains a list of usernames and passwords, using the same familiar format. For example:"
msgstr "<literal>realm</literal> は自分で定義できる名前です。 それはクライアントに接続先の<quote>認証用の名前空間</quote>の種別を伝えます; Subversion クライアントは認証プロンプトでそれを表示し、ディスク上の キャッシュされた証明のキーとして(サーバのホスト名、ポートと共に) 利用します。(<xref linkend=\"svn.serverconfig.netmodel.credcache\"/>参照。) <literal>password-db</literal>変数はユーザ名称とパスワードのリスト を含む個別のファイルを指す変数で、やはり同じ形式が利用されます。 たとえば:"

#. Tag: screen
#: ch06-server-configuration.xml:740
#, no-c-format
msgid ""
"[users]\n"
"harry = foopassword\n"
"sally = barpassword"
msgstr ""
"[users]\n"
"harry = foopassword\n"
"sally = barpassword"

#. Tag: para
#: ch06-server-configuration.xml:742
#, no-c-format
msgid "The value of <literal>password-db</literal> can be an absolute or relative path to the users file. For many admins, it's easy to keep the file right in the <filename>conf/</filename> area of the repository, alongside <filename>svnserve.conf</filename>. On the other hand, it's possible you may want to have two or more repositories share the same users file; in that case, the file should probably live in a more public place. The repositories sharing the users file should also be configured to have the same realm, since the list of users essentially defines an authentication realm. Wherever the file lives, be sure to set the file's read and write permissions appropriately. If you know which user(s) <command>svnserve</command> will run as, restrict read access to the user file as necessary."
msgstr "<literal>password-db</literal> の値はユーザファイルの相対または 絶対パスです。多くの管理者にとって、<filename>svnserve.conf</filename> に従ったリポジトリの <filename>conf/</filename>領域にファイルを 正しく保つのは容易なことです。一方、同じユーザファイルを共有するような 二つ以上のリポジトリがほしいこともあります; そのような場合は ファイルは多分もっと公開された場所に移動すべきでしょう。ユーザファイルを共有 するリポジトリは同じ認証範囲を持つよう設定されていなくてはならず、それは ユーザ全逸ｳ器ｺ本質的にただ一つの認証範囲を定義するためです。 ファイルがある場所であればどこでもファイルの読み書きパーミッション を正しく設定してください。もし <command>svnserve</command>を どのユーザが実行しているかわかるのであれば、必要に応じて ユーザファイルに対する読み出しアクセス制限をかけてください。"

#. Tag: title
#: ch06-server-configuration.xml:761
#, no-c-format
msgid "Set access controls"
msgstr "アクセス制御の設定"

#. Tag: para
#: ch06-server-configuration.xml:763
#, fuzzy, no-c-format
msgid "There are two more variables to set in the <filename>svnserve.conf</filename> file: they determine what unauthenticated (anonymous) and authenticated users are allowed to do. The variables <literal>anon-access</literal> and <literal>auth-access</literal> can be set to the values <literal>none</literal>, <literal>read</literal>, or <literal>write</literal>. Setting the value to <literal>none</literal> prohibits both reading and writing; <literal>read</literal> allows read-only access to the repository, and <literal>write</literal> allows complete read/write access to the repository. For example:"
msgstr "<filename>svnserve.conf</filename>ファイル中に、さらに二つの変数を 設定できます: それは認証されていない(匿名の)ユーザと、認証された ユーザに何を許すかを決めるものです。その変数<literal>anon-access</literal> と <literal>auth-access</literal>は<literal>none</literal>、<literal>read</literal>、 あるいは<literal>write</literal>に設定できます。 <literal>none</literal>はどのようなタイプのアクセスも制限します。 <literal>read</literal>はそのリポジトリに読み出し許可のみを与え、 <literal>write</literal>はリポジトリに完全な読み書きアクセスを許します。 たとえば:"

#. Tag: screen
#: ch06-server-configuration.xml:775
#, no-c-format
msgid ""
"[general]\n"
"password-db = userfile\n"
"realm = example realm\n"
"\n"
"# anonymous users can only read the repository\n"
"anon-access = read\n"
"\n"
"# authenticated users can both read and write\n"
"auth-access = write"
msgstr ""
"[general]\n"
"password-db = userfile\n"
"realm = example realm\n"
"\n"
"# anonymous users can only read the repository\n"
"anon-access = read\n"
"\n"
"# authenticated users can both read and write\n"
"auth-access = write"

#. Tag: para
#: ch06-server-configuration.xml:777
#, no-c-format
msgid "The example settings are, in fact, the default values of the variables, should you forget to define them. If you want to be even more conservative, you can block anonymous access completely:"
msgstr "この例としての設定は、実際にはこれらの変数のデフォルト値なので定義 しなくても問題ありません。もしさらに保守的に設定したいのなら、 匿名のアクセスを完全に遮断することもできます:"

#. Tag: screen
#: ch06-server-configuration.xml:782
#, no-c-format
msgid ""
"[general]\n"
"password-db = userfile\n"
"realm = example realm\n"
"\n"
"# anonymous users aren't allowed\n"
"anon-access = none\n"
"\n"
"# authenticated users can both read and write\n"
"auth-access = write"
msgstr ""
"[general]\n"
"password-db = userfile\n"
"realm = example realm\n"
"\n"
"# anonymous users aren't allowed\n"
"anon-access = none\n"
"\n"
"# authenticated users can both read and write\n"
"auth-access = write"

#. Tag: para
#: ch06-server-configuration.xml:784
#, no-c-format
msgid "The server process not only understands these <quote>blanket</quote> access controls to the repository, but also finer-grained access restrictions placed on specific files and directories within the repository. To make use of this feature, you need to define a file containing more detailed rules, and then set the <literal>authz-db</literal> variable to point to it:"
msgstr ""

#. Tag: screen
#: ch06-server-configuration.xml:792
#, fuzzy, no-c-format
msgid ""
"[general]\n"
"password-db = userfile\n"
"realm = example realm\n"
"\n"
"# Specific access rules for specific locations\n"
"authz-db = authzfile"
msgstr ""
"[general]\n"
"password-db = userfile\n"
"realm = example realm"

#. Tag: para
#: ch06-server-configuration.xml:794
#, no-c-format
msgid "The syntax of the <filename>authzfile</filename> file is discussed in detail in <xref linkend=\"svn.serverconfig.pathbasedauthz\"/>. Note that the <literal>authz-db</literal> variable isn't mutually exclusive with the <literal>anon-access</literal> and <literal>auth-access</literal> variables; if all the variables are defined at once, then <emphasis>all</emphasis> of the rules must be satisfied before access is allowed."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:808
#, no-c-format
msgid "Tunneling over SSH"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:810
#, no-c-format
msgid "<command>svnserve</command>'s built-in authentication can be very handy, because it avoids the need to create real system accounts. On the other hand, some administrators already have well-established SSH authentication frameworks in place. In these situations, all of the project's users already have system accounts and the ability to <quote>SSH into</quote> the server machine."
msgstr "<command>svnserve</command>の組み込み認証は非常に使いやすいものですが、 それは本当のシステム上のアカウントを作る必要がないからです。一方 管理者によっては既に確立された SSH 認証の仕組みを運用しているかも 知れません。そのような場合、プロジェクトユーザのすべてはシステムアカウント を持っており、サーバマシンに対して <quote>SSH による</quote> アクセスが可能なはず です。"

#. Tag: para
#: ch06-server-configuration.xml:818
#, fuzzy, no-c-format
msgid "It's easy to use SSH in conjunction with <command>svnserve</command>. The client simply uses the <literal>svn+ssh://</literal> URL scheme to connect:"
msgstr "SSH と<command>svnserve</command>の組み合わせは簡単なものです。クライアントは 単に<literal>svn+ssh://</literal>URLスキーマを使って接続することができます:"

#. Tag: screen
#: ch06-server-configuration.xml:822
#, no-c-format
msgid ""
"$ whoami\n"
"harry\n"
"\n"
"$ svn list svn+ssh://host.example.com/repos/project\n"
"harry@host.example.com's password:  *****\n"
"\n"
"foo\n"
"bar\n"
"baz\n"
"&hellip;"
msgstr ""
"$ whoami\n"
"harry\n"
"\n"
"$ svn list svn+ssh://host.example.com/repos/project\n"
"harry@host.example.com's password:  *****\n"
"\n"
"foo\n"
"bar\n"
"baz\n"
"&hellip;"

#. Tag: para
#: ch06-server-configuration.xml:824
#, fuzzy, no-c-format
msgid "In this example, the Subversion client is invoking a local <command>ssh</command> process, connecting to <literal>host.example.com</literal>, authenticating as the user <literal>harry</literal>, then spawning a private <command>svnserve</command> process on the remote machine running as the user <literal>harry</literal>. The <command>svnserve</command> command is being invoked in tunnel mode (<option>-t</option>) and its network protocol is being <quote>tunneled</quote> over the encrypted connection by <command>ssh</command>, the tunnel-agent. <command>svnserve</command> is aware that it's running as the user <literal>harry</literal>, and if the client performs a commit, the authenticated username will be used as the author of the new revision."
msgstr "この例では、Subversionクライアントはローカルな<command>ssh</command> プロセスを起動し <literal>host.example.com</literal>に接続し、ユーザ <literal>harry</literal>として認証し、そのあとプライベートな <command>svnserve</command>プロセスをリモートマシン上で、ユーザ <literal>harry</literal>として実行する、というものです。 <command>svnserve</command>コマンドはトンネルモード(<option>-t</option>) 起動され、そのネットワークプロトコルはトンネルエージェントである<command>ssh</command> によって暗号化された接続上で<quote>トンネル</quote>された形で動作します。 <command>svnserve</command>はユーザ<literal>harry</literal>で実行されていることを知って いるのでクライアントがコミットしようとすると、その認証済みのユーザ名は新しい リビジョンの変更者として利用されます。"

#. Tag: para
#: ch06-server-configuration.xml:839
#, no-c-format
msgid "The important thing to understand here is that the Subversion client is <emphasis>not</emphasis> connecting to a running <command>svnserve</command> daemon. This method of access doesn't require a daemon, nor does it notice one if present. It relies wholly on the ability of <command>ssh</command> to spawn a temporary <command>svnserve</command> process, which then terminates when the network connection is closed."
msgstr "ここで重要なのは Subversion クライアントは<command>svnserve</command> デーモンに接続するわけ<emphasis>ではない</emphasis>ということです。 このアクセス方法はデーモンは不要で、存在しているかどうかを知る必要も ありません。実際には <command>ssh</command>が一時的に起動する <command>svnserve</command> プロセスにだけ依存していて、ネットワーク接続が閉じるとそのプロセスも終了します。"

#. Tag: para
#: ch06-server-configuration.xml:848
#, no-c-format
msgid "When using <literal>svn+ssh://</literal> URLs to access a repository, remember that it's the <command>ssh</command> program prompting for authentication, and <emphasis>not</emphasis> the <command>svn</command> client program. That means there's no automatic password caching going on (see <xref linkend=\"svn.serverconfig.netmodel.credcache\"/>). The Subversion client often makes multiple connections to the repository, though users don't normally notice this due to the password caching feature. When using <literal>svn+ssh://</literal> URLs, however, users may be annoyed by <command>ssh</command> repeatedly asking for a password for every outbound connection. The solution is to use a separate SSH password-caching tool like <command>ssh-agent</command> on a Unix-like system, or <command>pageant</command> on Windows."
msgstr "<literal>svn+ssh://</literal>の URL を使ってリポジトリにアクセスする 場合、認証を要求するのは<command>ssh</command>プログラムであり <command>svn</command>クライアントプログラムではないことを思い出して ください。これは自動的なパスワードのキャッシュが起きないことを 意味します(<xref linkend=\"svn.serverconfig.netmodel.credcache\"/>を見てください)。 Subversion クライアントはリポジトリに複数の接続を張ることもよくあります がユーザはパスワードキャッシュの仕組みによって通常そのことに気づくことは ありません。しかし <literal>svn+ssh://</literal> URL を使う場合には ユーザは接続ごとに <command>ssh</command>が繰り返しパスワードをうながす ことに悩ませられるかも知れません。解決策は Unix 風のシステムなら <command>ssh-agent</command>、Windows なら <command>pageant</command> のような独立した SSH パスワードキャッシュツールを利用することです。"

#. Tag: para
#: ch06-server-configuration.xml:864
#, fuzzy, no-c-format
msgid "When running over a tunnel, authorization is primarily controlled by operating system permissions to the repository's database files; it's very much the same as if Harry were accessing the repository directly via a <literal>file://</literal> URL. If multiple system users are going to be accessing the repository directly, you may want to place them into a common group, and you'll need to be careful about umasks. (Be sure to read <xref linkend=\"svn.serverconfig.multimethod\"/>.) But even in the case of tunneling, the <filename>svnserve.conf</filename> file can still be used to block access, by simply setting <literal>auth-access = read</literal> or <literal>auth-access = none</literal>."
msgstr "トンネル上で実行する場合、認可は基本的にはリポジトリデータベースファイルに 対するオペレーティングシステムのパーミッションによって一義的には制御 されます; それはちょうど harry が直接<literal>file:///</literal> URLで リポジトリにアクセスした場合と同じことになります。 複数のシステムユーザがリポジトリに対して直接アクセスしようとしている場合 そのようなユーザを一つのグループにまとめ、umask を注意して設定する必要が あるでしょう。(<xref linkend=\"svn.serverconfig.multimethod\"/>をぜひ読んでください)。 しかしトンネルモードを利用する場合でも<literal>auth-access = read</literal> または<literal>auth-access = none</literal>と設定すれば、 <filename>svnserve.conf</filename>ファイルはやはりアクセス遮断のために 利用できます。"

#. Tag: para
#: ch06-server-configuration.xml:878
#, no-c-format
msgid "Note that using any sort of <command>svnserve</command>-enforced access control at all is a bit pointless; the user already has direct access to the repository database."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:885
#, fuzzy, no-c-format
msgid "You'd think that the story of SSH tunneling would end here, but it doesn't. Subversion allows you to create custom tunnel behaviors in your run-time <filename>config</filename> file (see <xref linkend=\"svn.advanced.confarea\"/>). For example, suppose you want to use RSH instead of SSH<footnote><para>We don't actually recommend this, since RSH is notably less secure than SSH.</para></footnote>. In the <literal>[tunnels]</literal> section of your <filename>config</filename> file, simply define it like this:"
msgstr "SSH トンネルの話はこれで終わりかと思うかも知れませんが、そうではありません。 Subversion では実行時<filename>config</filename>ファイル中に専用のトンネル モードに関する動作設定をすることができます。(<xref linkend=\"svn.advanced.confarea\"/> を見てください)。たとえば SSH のかわりに RSH を使いたいとします。<filename>config</filename> ファイルの<literal>[tunnels]</literal>セクションに以下のように指定してください:"

#. Tag: screen
#: ch06-server-configuration.xml:896
#, no-c-format
msgid ""
"[tunnels]\n"
"rsh = rsh"
msgstr ""
"[tunnels]\n"
"rsh = rsh"

#. Tag: para
#: ch06-server-configuration.xml:898
#, fuzzy, no-c-format
msgid "And now, you can use this new tunnel definition by using a URL scheme that matches the name of your new variable: <literal>svn+rsh://host/path</literal>. When using the new URL scheme, the Subversion client will actually be running the command <command>rsh host svnserve -t</command> behind the scenes. If you include a username in the URL (for example, <literal>svn+rsh://username@host/path</literal>) the client will also include that in its command (<command>rsh username@host svnserve -t</command>). But you can define new tunneling schemes to be much more clever than that:"
msgstr "これで新しい変数の名前にマッチする URL スキーマを使って この新しいトンネル定義を利用することができます: <literal>svn+rsh://host/path</literal>となります。 新しい URL スキーマを利用すると Subversion クライアントは実際には裏で <command>rsh host svnserve -t</command>コマンドを実行します。もしURL にユーザ名が含まれている場合(たとえば <literal>svn+rsh://username@host/path</literal>) クライアントはやはりそのコマンドに含めます(<command>rsh username@host svnserve -t</command>.) しかし、以下のようにもっと賢いトンネルスキーマを定義することもできます:"

#. Tag: screen
#: ch06-server-configuration.xml:909
#, no-c-format
msgid ""
"[tunnels]\n"
"joessh = $JOESSH /opt/alternate/ssh -p 29934"
msgstr ""
"[tunnels]\n"
"joessh = $JOESSH /opt/alternate/ssh -p 29934"

#. Tag: para
#: ch06-server-configuration.xml:911
#, no-c-format
msgid "This example demonstrates a couple of things. First, it shows how to make the Subversion client launch a very specific tunneling binary (the one located at <filename>/opt/alternate/ssh</filename>) with specific options. In this case, accessing a <literal>svn+joessh://</literal> URL would invoke the particular SSH binary with <option>-p 29934</option> as arguments&mdash;useful if you want the tunnel program to connect to a non-standard port."
msgstr "この例はいろいろなことの参考になります。まずそれはどのようにして Subversion クライアントが非常に特殊なトンネリングのためのプログラムを 特定のオプション付きで起動するかを示しています(この場合それは <filename>/opt/alternate/ssh</filename>にあります)。 この場合<literal>svn+joessh://</literal> URLにアクセスすると 引数として<option>-p 29934</option>の付いた特定のSSHプログラム が起動されるでしょう&mdash; もし標準ではないポートにトンネルプログラム を接続したいと考えているならこれは便利です。"

#. Tag: para
#: ch06-server-configuration.xml:921
#, no-c-format
msgid "Second, it shows how to define a custom environment variable that can override the name of the tunneling program. Setting the <literal>SVN_SSH</literal> environment variable is a convenient way to override the default SSH tunnel agent. But if you need to have several different overrides for different servers, each perhaps contacting a different port or passing a different set of options to SSH, you can use the mechanism demonstrated in this example. Now if we were to set the <literal>JOESSH</literal> environment variable, its value would override the entire value of the tunnel variable&mdash;<command>$JOESSH</command> would be executed instead of <command>/opt/alternate/ssh -p 29934</command>."
msgstr "次にそれはどのように してトンネルプログラムの名前を上書きする環境変数を定義してやれば 良いかを示しています。 <literal>SVN_SSH</literal>環境変数を設定するのはデフォルトの SSH トンネル エージェントを上書きする便利な方法です。 しかしもし異なるサーバ上でいくつもの異なる上書きが必要で、それぞれが 異なるポートや異なるオプションを SSH に渡しているような場合には、この例で 示すような仕組みを利用することができます。 もし<literal>JOESSH</literal>環境変数を設定 してあれば、その値はトンネル変数全体を上書きします&mdash; <command>$JOESSH</command>は <command>/opt/alternate/ssh -p 29934</command>のかわりに実行 されるでしょう。"

#. Tag: title
#: ch06-server-configuration.xml:939
#, no-c-format
msgid "SSH configuration tricks"
msgstr "SSH 設定の技法"

#. Tag: para
#: ch06-server-configuration.xml:941
#, no-c-format
msgid "It's not only possible to control the way in which the client invokes <command>ssh</command>, but also to control the behavior of <command>sshd</command> on your server machine. In this section, we'll show how to control the exact <command>svnserve</command> command executed by <command>sshd</command>, as well as how to have multiple users share a single system account."
msgstr "クライアントが <command>ssh</command>を起動する方法を制御できるだけ ではなく、サーバマシン上の <command>sshd</command>の動作の仕方も 制御することができます。この節では <command>sshd</command> によって起動される <command>svnserve</command>コマンドを正しく制御する 方法を示して、複数のユーザが単一システムアカウントをどのように共有すれば 良いかについて説明します。"

#. Tag: title
#: ch06-server-configuration.xml:951
#, no-c-format
msgid "<title>Initial setup</title>"
msgstr "<title>初期設定</title>"

#. Tag: para
#: ch06-server-configuration.xml:953
#, no-c-format
msgid "To begin, locate the home directory of the account you'll be using to launch <command>svnserve</command>. Make sure the account has an SSH public/private keypair installed, and that the user can log in via public-key authentication. Password authentication will not work, since all of the following SSH tricks revolve around using the SSH <filename>authorized_keys</filename> file."
msgstr "まず<command>svnserve</command>を起動するのに使うアカウントの ホームディレクトリを用意します。そのアカウントに SSH の公開鍵/秘密鍵 がインストールされていて、ユーザがその公開鍵でログインできることを 確認してください。パスワード認証は動作しなくなりますが、それは以下の SSH の技法を使うと、すべての処理に SSH <filename>authorized_keys</filename>ファイル を使うためです。"

#. Tag: para
#: ch06-server-configuration.xml:961
#, no-c-format
msgid "If it doesn't already exist, create the <filename>authorized_keys</filename> file (on Unix, typically <filename>~/.ssh/authorized_keys</filename>). Each line in this file describes a public key that is allowed to connect. The lines are typically of the form:"
msgstr "まだ存在していなければ<filename>authorized_keys</filename>ファイルを 作ってください(Unix では普通 <filename>‾/.ssh/authorized_keys</filename> になります)。このファイルの各行には接続を許す相手先の公開鍵の記述があります。 各行は普通以下のような形をしています:"

#. Tag: screen
#: ch06-server-configuration.xml:968
#, fuzzy, no-c-format
msgid "ssh-dsa AAAABtce9euch&hellip; user@example.com"
msgstr "ssh-dsa AAAABtce9euch.... user@example.com"

#. Tag: para
#: ch06-server-configuration.xml:970
#, fuzzy, no-c-format
msgid "The first field describes the type of key, the second field is the base64-encoded key itself, and the third field is a comment. However, it's a lesser known fact that the entire line can be preceded by a <literal>command</literal> field:"
msgstr "最初のフィールドはキーの型で、二番目のフィールドは uuencode された鍵そのもの であり、三番目のフィールドはコメントです。あまり知られていませんが、実は 行全体を <literal>command</literal> フィールドの後におくこともできます。"

#. Tag: screen
#: ch06-server-configuration.xml:976
#, fuzzy, no-c-format
msgid "command=\"program\" ssh-dsa AAAABtce9euch&hellip; user@example.com"
msgstr "command=\"program\" ssh-dsa AAAABtce9euch.... user@example.com"

#. Tag: para
#: ch06-server-configuration.xml:978
#, no-c-format
msgid "When the <literal>command</literal> field is set, the SSH daemon will run the named program instead of the typical <command>svnserve -t</command> invocation that the Subversion client asks for. This opens the door to a number of server-side tricks. In the following examples, we abbreviate the lines of the file as:"
msgstr "<literal>command</literal>フィールドが設定されると 通常の <command>svnserve -t</command> のかわりに SSH デーモンがその名前のプログラムを実行します。このプログラムが Subversion クライアントの接続先になります。これがサーバ上でのいろいろな技法を 可能にする鍵です。以下の例では、ファイル中で次のように行を省略して説明します:"

#. Tag: screen
#: ch06-server-configuration.xml:985
#, no-c-format
msgid "command=\"program\" TYPE KEY COMMENT"
msgstr "command=\"program\" TYPE KEY COMMENT"

#. Tag: title
#: ch06-server-configuration.xml:991
#, no-c-format
msgid "Controlling the invoked command"
msgstr "起動コマンドの制御"

#. Tag: para
#: ch06-server-configuration.xml:993
#, no-c-format
msgid "Because we can specify the executed server-side command, it's easy to name a specific <command>svnserve</command> binary to run and to pass it extra arguments:"
msgstr "実行されるサーバ側コマンドを指定することができるので、特定の <command>svnserve</command>バイナリを指定したり、追加の引数を 指定して実行することが簡単にできます:"

#. Tag: screen
#: ch06-server-configuration.xml:997
#, no-c-format
msgid "command=\"/path/to/svnserve -t -r /virtual/root\" TYPE KEY COMMENT"
msgstr "command=\"/path/to/svnserve -t -r /virtual/root\" TYPE KEY COMMENT"

#. Tag: para
#: ch06-server-configuration.xml:999
#, no-c-format
msgid "In this example, <filename>/path/to/svnserve</filename> might be a custom wrapper script around <command>svnserve</command> which sets the umask (see <xref linkend=\"svn.serverconfig.multimethod\"/>). It also shows how to anchor <command>svnserve</command> in a virtual root directory, just as one often does when running <command>svnserve</command> as a daemon process. This might be done either to restrict access to parts of the system, or simply to relieve the user of having to type an absolute path in the <literal>svn+ssh://</literal> URL."
msgstr "この例では <filename>/path/to/svnserve</filename>は <command>svnserve</command> に対するカスタマイズされたラッパースクリプ トで、umask を設定するようなものかも知れません(<xref linkend=\"svn.serverconfig.multimethod\"/>を見てください)。それはまた <command>svnserve</command>用の仮想ルートディレクトリをどのように設定 するかも示しています。これはデーモンプロセスとして <command>svnserve</command>する場合によく起こることです。たとえばシス テムの特定の部分にアクセス制限する場合や、単に <literal>svn+ssh://</literal> URL の絶対パス名を入力する手間を省くため であったりします。"

#. Tag: para
#: ch06-server-configuration.xml:1011
#, no-c-format
msgid "It's also possible to have multiple users share a single account. Instead of creating a separate system account for each user, generate a public/private keypair for each person. Then place each public key into the <filename>authorized_users</filename> file, one per line, and use the <option>--tunnel-user</option> option:"
msgstr "複数のユーザが単一アカウントを共有するようにもできます。それにはまずユー ザごとに独立したシステムアカウントを作るかわりに、メンバーごとに公開鍵 /秘密鍵のペアを生成します。つぎに一行に公開鍵をひとつづつ <filename>authorized_users</filename> ファイルにおきます。そして <option>--tunnel-user</option> オプションを使うとうまくいきます。"

#. Tag: screen
#: ch06-server-configuration.xml:1019
#, no-c-format
msgid ""
"command=\"svnserve -t --tunnel-user=harry\" TYPE1 KEY1 harry@example.com\n"
"  command=\"svnserve -t --tunnel-user=sally\" TYPE2 KEY2 sally@example.com"
msgstr ""
"command=\"svnserve -t --tunnel-user=harry\" TYPE1 KEY1 harry@example.com\n"
"  command=\"svnserve -t --tunnel-user=sally\" TYPE2 KEY2 sally@example.com"

#. Tag: para
#: ch06-server-configuration.xml:1021
#, no-c-format
msgid "This example allows both Harry and Sally to connect to the same account via public-key authentication. Each of them has a custom command that will be executed; the <option>--tunnel-user</option> option tells <command>svnserve -t</command> to assume that the named argument is the authenticated user. Without <option>--tunnel-user</option>, it would appear as though all commits were coming from the one shared system account."
msgstr "この例では Harry も Sally も公開鍵認証方式によって同じアカウントで接続する ように設定しています。どちらもそれぞれにカスタマイズされたコマンドが実行されます; <option>--tunnel-user</option>オプションは <command>svnserve -t</command> が名前つき引数が認証されたユーザであることを認めるように指示しています。 <option>--tunnel-user</option> がなければ、すべてのコミットはひとつの共有された システムアカウントから発行したように見えるようになります。"

#. Tag: para
#: ch06-server-configuration.xml:1031
#, no-c-format
msgid "A final word of caution: giving a user access to the server via public-key in a shared account might still allow other forms of SSH access, even if you've set the <literal>command</literal> value in <filename>authorized_keys</filename>. For example, the user may still get shell access through SSH, or be able to perform X11 or general port-forwarding through your server. To give the user as little permission as possible, you may want to specify a number of restrictive options immediately after the <literal>command</literal>:"
msgstr "最後の注意です: 共有アカウントにある公開鍵を経由してユーザにアクセス権を 与えても、他の形の SSH アクセスを禁止したことにはなりません。これは <filename>authorized_keys</filename> に<literal>command</literal>の 形の設定をした場合でもそうです。たとえば、ユーザは依然として SSH 経由で シェルを使ったアクセスができますし、あなたのサーバ経由で X11 や、より 一般的なポートフォワードを実行することもできます。ユーザにできるかぎり わずかな権限しか与えないようにするには <literal>command</literal>の すぐ後にそれぞれの制限オプションを指定する必要があります:"

#. Tag: screen
#: ch06-server-configuration.xml:1042
#, no-c-format
msgid ""
"command=\"svnserve -t --tunnel-user=harry\",no-port-forwarding,\\\n"
"           no-agent-forwarding,no-X11-forwarding,no-pty \\\n"
"           TYPE1 KEY1 harry@example.com"
msgstr ""
"command=\"svnserve -t --tunnel-user=harry\",no-port-forwarding,¥\n"
"           no-agent-forwarding,no-X11-forwarding,no-pty ¥\n"
"           TYPE1 KEY1 harry@example.com"

#. Tag: title
#: ch06-server-configuration.xml:1056
#, no-c-format
msgid "httpd, the Apache HTTP server"
msgstr "httpd, Apache HTTP サーバ"

#. Tag: para
#: ch06-server-configuration.xml:1058
#, no-c-format
msgid "The Apache HTTP Server is a <quote>heavy duty</quote> network server that Subversion can leverage. Via a custom module, <command>httpd</command> makes Subversion repositories available to clients via the WebDAV/DeltaV protocol, which is an extension to HTTP 1.1 (see <ulink url=\"http://www.webdav.org/\"></ulink> for more information). This protocol takes the ubiquitous HTTP protocol that is the core of the World Wide Web, and adds writing&mdash;specifically, versioned writing&mdash;capabilities. The result is a standardized, robust system that is conveniently packaged as part of the Apache 2.0 software, is supported by numerous operating systems and third-party products, and doesn't require network administrators to open up yet another custom port. <footnote> <para>They really hate doing that.</para> </footnote> While an Apache-Subversion server has more features than <command>svnserve</command>, it's also a bit more difficult to set up. With flexibility often comes more complexity."
msgstr "Apache HTTP Server は <quote>非常にいろいろなことをしてくれる</quote> ネットワークサーバ でSubversionの機能も上げることができます。カスタムモジュールを使って <command>httpd</command>はSubversion リポジトリをWebDAV/DeltaVプロトコル 経由でクライアントから利用可能にします。WebDAV/deltaVプロトコルは HTTP 1.1 の拡張です(<ulink url=\"http://www.webdav.org/\"></ulink> により詳しい情報が あります)。このプロトコルはワールドワイドウェブの核心である、 広く利用可能なHTTP プロトコルに対して、書き込み&mdash;特にバージョン化された 書き込み&mdash;機能を付け加えます。結果は標準化された、堅牢なシステム を構成することができ、それは Apache 2.0 の一部としてパッケージ化されて います。また Apache 2.0 はさまざまなオペレーティングシステムとサード パーティー性製品によってサポートされており、それを利用すればネットワーク 管理者は新たなカスタムポートを開く必要がありません。 <footnote> <para>彼らはそういう作業を本当に嫌います。</para> </footnote> Apache-Subversion サーバは<command>svnserve</command>よりも多くの 機能を持っていますが、セットアップは少し難しくなります。柔軟性には しばしば複雑さがともなうものです。"

#. Tag: para
#: ch06-server-configuration.xml:1078
#, no-c-format
msgid "Much of the following discussion includes references to Apache configuration directives. While some examples are given of the use of these directives, describing them in full is outside the scope of this chapter. The Apache team maintains excellent documentation, publicly available on their website at <ulink url=\"http://httpd.apache.org\"></ulink>. For example, a general reference for the configuration directives is located at <ulink url=\" http://httpd.apache.org/docs-2.0/mod/directives.html\"></ulink>."
msgstr "以下の議論の多くはApacheの設定ディレクティブへの参照を含んでいます。 いくつかの例はそのようなディレクティブの利用方法になっていますが、 その完全な説明はこの章の範囲外です。Apache チームは非常にすばらしい ドキュメントを管理していて<ulink url=\"http://httpd.apache.org\"></ulink> から自由に参照可能です。たとえば設定ディレクティブの一般的な リファレンスは<ulink url=\"http://httpd.apache.org/docs-2.0/mod/directives.html\"></ulink> にあります。"

#. Tag: para
#: ch06-server-configuration.xml:1087
#, no-c-format
msgid "Also, as you make changes to your Apache setup, it is likely that somewhere along the way a mistake will be made. If you are not already familiar with Apache's logging subsystem, you should become aware of it. In your <filename>httpd.conf</filename> file are directives that specify the on-disk locations of the access and error logs generated by Apache (the <literal>CustomLog</literal> and <literal>ErrorLog</literal> directives, respectively). Subversion's mod_dav_svn uses Apache's error logging interface as well. You can always browse the contents of those files for information that might reveal the source of a problem that is not clearly noticeable otherwise."
msgstr "また、Apache の設定を変更する場合、しばしば間違いが起こります。 Apache のログシステムにまだなじみがないのであれば、それに注意すると 良いでしょう。<filename>httpd.conf</filename>ファイルにはApache に よって生成されるアクセスログとエラーログのディスク上での場所を指定する ディレクティブがあります。(それぞれ<literal>CustomLog</literal>と <literal>ErrorLog</literal>という名前です)。Subversion の mod_dav_svn も Apache のエラーログインターフェースを利用しています。これらのファイルは 情報取得のために常に閲覧することができ、ほかの方法でははっきりしない 問題の原因を明らかにするかも知れません。"

#. Tag: title
#: ch06-server-configuration.xml:1101
#, no-c-format
msgid "Why Apache 2?"
msgstr "なぜ Apache 2 が必要なのか?"

#. Tag: para
#: ch06-server-configuration.xml:1103
#, no-c-format
msgid "If you're a system administrator, it's very likely that you're already running the Apache web server and have some prior experience with it. At the time of writing, Apache 1.3 is by far the most popular version of Apache. The world has been somewhat slow to upgrade to the Apache 2.X series for various reasons: some people fear change, especially changing something as critical as a web server. Other people depend on plug-in modules that only work against the Apache 1.3 API, and are waiting for a 2.X port. Whatever the reason, many people begin to worry when they first discover that Subversion's Apache module is written specifically for the Apache 2 API."
msgstr "もしあなたがシステム管理者なのであれば、既に Apache ウェブサーバを 実行しており、かなりの経験を持っているかも知れません。このドキュメント を書いている時点で Apache 1.3 はApache の最も有名なバージョンです。 いくつかの理由で、Apache 2.X 系へのアップグレードは世界的にはゆっくり としか進んでいません: 人によっては変更点、特にウェブサーバにとって 非常に重要な部分についての変更点を怖がります。また Apache 1.3 API で のみ動作するプラグインモジュールに依存していて、2.X 系への移植を待って いるような人もいるでしょう。どんな理由であれ、多くの人々はSubversion のApacheモジュールは Apache 2 API でのみ動作することを最初に知った とき、不安を感じます。"

#. Tag: para
#: ch06-server-configuration.xml:1115
#, no-c-format
msgid "The proper response to this problem is: don't worry about it. It's easy to run Apache 1.3 and Apache 2 side-by-side; simply install them to separate places, and use Apache 2 as a dedicated Subversion server that runs on a port other than 80. Clients can access the repository by placing the port number into the URL:"
msgstr "この問題に対する正しい反応は: 心配するな、です。Apache 1.3 と Apache 2 は同時に起動することができます: 単に別の場所にインストールし、Apache 2 を 80 以外のポートで実行する Subversion 用のサーバとすれば良いのです。 クライアントはURLにポート番号を指定することでリポジトリにアクセスできます:"

#. Tag: screen
#: ch06-server-configuration.xml:1122
#, no-c-format
msgid ""
"$ svn checkout http://host.example.com:7382/repos/project\n"
"&hellip;"
msgstr ""
"$ svn checkout http://host.example.com:7382/repos/project\n"
"&hellip;"

#. Tag: title
#: ch06-server-configuration.xml:1128
#, no-c-format
msgid "Prerequisites"
msgstr "必須要件"

#. Tag: para
#: ch06-server-configuration.xml:1130
#, no-c-format
msgid "To network your repository over HTTP, you basically need four components, available in two packages. You'll need Apache <command>httpd</command> 2.0, the <command>mod_dav</command> DAV module that comes with it, Subversion, and the <command>mod_dav_svn</command> filesystem provider module distributed with Subversion. Once you have all of those components, the process of networking your repository is as simple as:"
msgstr "HTTP 越しにリポジトリにアクセスする場合、基本的には二つのパッケージで利用 可能な四つの部品が必要になります。Apache <command>httpd</command> 2.0、 それに付属している<command>mod_dav</command> DAVモジュール、Subversion、 そしてそれに付属している<command>mod_dav_svn</command>ファイルシステム 提供モジュールです。すべての部品を手に入れてしまえばリポジトリのネットワーク 対応は以下のように簡単です:"

#. Tag: para
#: ch06-server-configuration.xml:1141
#, no-c-format
msgid "getting httpd 2.0 up and running with the mod_dav module,"
msgstr "httpd 2.0 を起動し、mod_dav モジュール付きで実行する。"

#. Tag: para
#: ch06-server-configuration.xml:1145
#, no-c-format
msgid "installing the mod_dav_svn plugin to mod_dav, which uses Subversion's libraries to access the repository, and"
msgstr "mod_dav_svn プラグインを mod_dav にインストールする。mod_dav_svn はリポジトリにアクセスするために Subversion のライブラリを利用 します。そして、"

#. Tag: para
#: ch06-server-configuration.xml:1150
#, no-c-format
msgid "configuring your <filename>httpd.conf</filename> file to export (or expose) the repository."
msgstr "<filename>httpd.conf</filename>ファイルを設定してリポジトリを 公開する。"

#. Tag: para
#: ch06-server-configuration.xml:1155
#, no-c-format
msgid "You can accomplish the first two items either by compiling <command>httpd</command> and Subversion from source code, or by installing pre-built binary packages of them on your system. For the most up-to-date information on how to compile Subversion for use with the Apache HTTP Server, as well as how to compile and configure Apache itself for this purpose, see the <filename>INSTALL</filename> file in the top level of the Subversion source code tree."
msgstr "最初の二つについては<command>httpd</command>とSubversion を ソースコードからコンパイルするか、自分のシステム用の既にコンパイル 済みのバイナリパッケージをインストールすることによって取得できます。 どのようにして Apache HTTP サーバと共に Subversion をコンパイルするか、 そしてこの目的のために Apache 自身をどのように設定すれば良いかに ついての最新情報は Subversion ソースコードツリーの最上位にある <filename>INSTALL</filename>ファイルを参照してください。"

#. Tag: title
#: ch06-server-configuration.xml:1168
#, no-c-format
msgid "Basic Apache Configuration"
msgstr "基本的な Apache の設定"

#. Tag: para
#: ch06-server-configuration.xml:1170
#, no-c-format
msgid "Once you have all the necessary components installed on your system, all that remains is the configuration of Apache via its <filename>httpd.conf</filename> file. Instruct Apache to load the mod_dav_svn module using the <literal>LoadModule</literal> directive. This directive must precede any other Subversion-related configuration items. If your Apache was installed using the default layout, your <command>mod_dav_svn</command> module should have been installed in the <filename>modules</filename> subdirectory of the Apache install location (often <filename>/usr/local/apache2</filename>). The <literal>LoadModule</literal> directive has a simple syntax, mapping a named module to the location of a shared library on disk:"
msgstr "システム上に必要なすべての部品をインストールしたあとは、<filename>httpd.conf</filename> によって Apache の設定をすることだけが残っています。 <literal>LoadModule</literal> ディレクティブを使って mod_dav_svn モジュールを Apache にロードしてください。この ディレクティブはほかの Subversion 関連の設定項目に先立って指定しなくてはなりません。 Apache がデフォルトレイアウトを使ってインストールされているなら、<command>mod_dav_svn</command> モジュールは Apache インストールディレクトリの<filename>modules</filename>サブディレクトリ 中になければなりません(たいていの場合、<filename>/usr/local/apache2</filename>の ようなディレクトリになります)。<literal>LoadModule</literal>ディレクティブは単純な 構文を持ち、名前の付いたモジュールをディスク上の共有ライブラリの場所に対応付けます:"

#. Tag: screen
#: ch06-server-configuration.xml:1185
#, no-c-format
msgid "LoadModule dav_svn_module     modules/mod_dav_svn.so"
msgstr "LoadModule dav_svn_module     modules/mod_dav_svn.so"

#. Tag: para
#: ch06-server-configuration.xml:1187
#, no-c-format
msgid "Note that if <command>mod_dav</command> was compiled as a shared object (instead of statically linked directly to the <command>httpd</command> binary), you'll need a similar <literal>LoadModule</literal> statement for it, too. Be sure that it comes before the <command>mod_dav_svn</command> line:"
msgstr "<command>mod_dav</command>が ( <command>httpd</command>プログラムに直接静的にリンクされるのではなく) 共有オブジェクトとしてコンパイルされた場合、それに対しても同様の <literal>LoadModule</literal>行が必要になります。 <command>mod_dav_svn</command> 行の前に設定することに注意してください:"

#. Tag: screen
#: ch06-server-configuration.xml:1193
#, no-c-format
msgid ""
"LoadModule dav_module         modules/mod_dav.so\n"
"LoadModule dav_svn_module     modules/mod_dav_svn.so"
msgstr ""
"LoadModule dav_module         modules/mod_dav.so\n"
"LoadModule dav_svn_module     modules/mod_dav_svn.so"

#. Tag: para
#: ch06-server-configuration.xml:1196
#, no-c-format
msgid "At a later location in your configuration file, you now need to tell Apache where you keep your Subversion repository (or repositories). The <literal>Location</literal> directive has an XML-like notation, starting with an opening tag, and ending with a closing tag, with various other configuration directives in the middle. The purpose of the <literal>Location</literal> directive is to instruct Apache to do something special when handling requests that are directed at a given URL or one of its children. In the case of Subversion, you want Apache to simply hand off support for URLs that point at versioned resources to the DAV layer. You can instruct Apache to delegate the handling of all URLs whose path portions (the part of the URL that follows the server's name and the optional port number) begin with <filename>/repos/</filename> to a DAV provider whose repository is located at <filename>/absolute/path/to/repository</filename> using the following <filename>httpd.conf</filename> syntax:"
msgstr "次に、設定ファイルの後の場所のどこかで Subversion リポジトリをどこに 置くかを Apache に伝える必要があります。<literal>Location</literal> ディレクティブは XML風の記述で、開始タグで始まり、終了タグで終わる間 にさまざまなほかの設定ディレクティブを書きます。 <literal>Location</literal>ディレクティブの目的は Apache に、指定した URL かそのサブディレクトリである特定の処理をするように指示するためにあります。 Subversion の場合、DAV層で管理するバージョン化された資源のある URL で 処理を単に引き渡すように Apache に指示するだけです。Apache に対して <filename>/repos/</filename>で始まる部分(つまり、URL のサーバ名と 場合によって付随するポート番号文字列の後に続く部分)を持ったすべての URL について、<filename>/absolute/path/to/repository</filename>にある リポジトリを管理する DAV 提供モジュールに引き渡すように指示することが できます。それには以下のような<filename>httpd.conf</filename>構文を使い ます:"

#. Tag: screen
#: ch06-server-configuration.xml:1215
#, no-c-format
msgid ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNPath /absolute/path/to/repository\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNPath /absolute/path/to/repository\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1217
#, fuzzy, no-c-format
msgid "If you plan to support multiple Subversion repositories that will reside in the same parent directory on your local disk, you can use an alternative directive, the <literal>SVNParentPath</literal> directive, to indicate that common parent directory. For example, if you know you will be creating multiple Subversion repositories in a directory <filename>/usr/local/svn</filename> that would be accessed via URLs like <uri>http://my.server.com/svn/repos1</uri>, <uri>http://my.server.com/svn/repos2</uri>, and so on, you could use the <filename>httpd.conf</filename> configuration syntax in the following example:"
msgstr "ローカルディスク上の同じ親ディレクトリにある複数の Subversion リポジトリ を提供する計画がある場合は、別のディレクティブ、 <literal>SVNParentPath</literal> を使って共通の親ディレクトリを示すこともできます。たとえば<systemitem class=\"url\">http://my.server.com/svn/repos1</systemitem>とか、 <systemitem class=\"url\">http://my.server.com/svn/repos2</systemitem>のような URL を経由してアクセスされる<filename>/usr/local/svn</filename>ディレクトリ 中に複数の Subversion リポジトリを作る場合であれば、以下の例の中にある <filename>httpd.conf</filename>の設定構文を使うことができます:"

#. Tag: screen
#: ch06-server-configuration.xml:1229
#, no-c-format
msgid ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"\n"
"  # any \"/svn/foo\" URL will map to a repository /usr/local/svn/foo\n"
"  SVNParentPath /usr/local/svn\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"\n"
"  # any \"/svn/foo\" URL will map to a repository /usr/local/svn/foo\n"
"  SVNParentPath /usr/local/svn\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1231
#, no-c-format
msgid "Using the previous syntax, Apache will delegate the handling of all URLs whose path portions begin with <filename>/svn/</filename> to the Subversion DAV provider, which will then assume that any items in the directory specified by the <literal>SVNParentPath</literal> directive are actually Subversion repositories. This is a particularly convenient syntax in that, unlike the use of the <literal>SVNPath</literal> directive, you don't have to restart Apache in order to create and network new repositories."
msgstr "この構文を使うと Apache は<filename>/svn/</filename>で始まるパス部分 を持つすべての URL を Subversion DAV モジュールに渡しますが、すると このモジュールは<literal>SVNParentPath</literal>によって指定される ディレクトリ中のすべてのアイテムは実際のSubversion リポジトリであると 仮定します。これは<literal>SVNPath</literal>ディレクティブを利用 するのとは違って新しいネットワーク公開用リポジトリを作るたびに Apache を再起動する必要がないのでとても便利です。"

#. Tag: para
#: ch06-server-configuration.xml:1242
#, fuzzy, no-c-format
msgid "Be sure that when you define your new <literal>Location</literal>, it doesn't overlap with other exported Locations. For example, if your main <literal>DocumentRoot</literal> is exported to <filename>/www</filename>, do not export a Subversion repository in <literal>&lt;Location /www/repos&gt;</literal>. If a request comes in for the URI <filename>/www/repos/foo.c</filename>, Apache won't know whether to look for a file <filename>repos/foo.c</filename> in the <literal>DocumentRoot</literal>, or whether to delegate <command>mod_dav_svn</command> to return <filename>foo.c</filename> from the Subversion repository. The result is often an error from the server of the form <literal>301 Moved Permanently</literal>."
msgstr "新しい<literal>Location</literal>を定義する場合は、他の公開された Location と重ならないように注意してください。たとえばメインの <literal>DocumentRoot</literal>が<filename>/www</filename>に 設定されている場合、Subversion リポジトリを<literal>&lt;Location /www/repos&gt;</literal>の中で公開しないでください。 URI <filename>/www/repos/foo.c</filename>が要求されても Apache は <literal>DocumentRoot</literal>中にある<filename>repos/foo.c</filename> を探せば良いのか、Subversion リポジトリから <filename>foo.c</filename> を返すために<command>mod_dav_svn</command>に取り次げば良いのか 判断できなくなります。"

#. Tag: title
#: ch06-server-configuration.xml:1258
#, no-c-format
msgid "Server Names and the COPY Request"
msgstr "サーバ名と COPY 要求"

#. Tag: para
#: ch06-server-configuration.xml:1260
#, no-c-format
msgid "Subversion makes use of the <literal>COPY</literal> request type to perform server-side copies of files and directories. As part of the sanity checking done by the Apache modules, the source of the copy is expected to be located on the same machine as the destination of the copy. To satisfy this requirement, you might need to tell mod_dav the name you use as the hostname of your server. Generally, you can use the <literal>ServerName</literal> directive in <filename>httpd.conf</filename> to accomplish this."
msgstr "Subversion はサーバ側でのファイルやディレクトリのコピーを するために<literal>COPY</literal>要求を利用します。Apache モジュール での信頼性チェックの一環として、コピー元はコピー先と同じマシン上に存在 していなくてはなりません。この要求を満足させるためにはサーバのホスト名 として利用する名前を mod_dav に伝える必要があります。通常これには <filename>httpd.conf</filename>中に<literal>ServerName</literal> ディレクティブを使うことができます。"

#. Tag: screen
#: ch06-server-configuration.xml:1270
#, no-c-format
msgid "ServerName svn.example.com"
msgstr "ServerName svn.example.com"

#. Tag: para
#: ch06-server-configuration.xml:1272
#, no-c-format
msgid "If you are using Apache's virtual hosting support via the <literal>NameVirtualHost</literal> directive, you may need to use the <literal>ServerAlias</literal> directive to specify additional names that your server is known by. Again, refer to the Apache documentation for full details."
msgstr "<literal>NameVirtualHost</literal>ディレクティブを使って Apache の仮想ホスト機能を利用している場合はサーバを特定するための 追加名称を指定するのに<literal>ServerAlias</literal>ディレクティブ を使う必要があるかも知れません。やはり詳細については Apache のドキュメントを参照してください。"

#. Tag: para
#: ch06-server-configuration.xml:1280
#, fuzzy, no-c-format
msgid "At this stage, you should strongly consider the question of permissions. If you've been running Apache for some time now as your regular web server, you probably already have a collection of content&mdash;web pages, scripts and such. These items have already been configured with a set of permissions that allows them to work with Apache, or more appropriately, that allows Apache to work with those files. Apache, when used as a Subversion server, will also need the correct permissions to read and write to your Subversion repository."
msgstr "この時点で、パーミッションがどうなるかというについて十分考慮する ことが必要になります。Apache をある程度の期間にわたって通常利用する Webサーバとしてきた場合、おそらく既にいろいろなコンテンツがある ことでしょう&mdash;ウェブページ、スクリプト、などなど。これらの アイテムは既に Apache と協調動作するようなパーミッションの組が設定 されている、あるいはもっと正確には、Apache にそのようなファイルを 扱うことを許可する設定になっています。Subversion サーバとして Apache が利用される場合も、Subversion リポジトリに対して正しい 読み書きのパーミッションを設定する必要があります。(詳しくは <xref linkend=\"svn.serverconfig.svnserve.invoking.sb-1\"/>を見てください)。"

#. Tag: para
#: ch06-server-configuration.xml:1291
#, no-c-format
msgid "You will need to determine a permission system setup that satisfies Subversion's requirements without messing up any previously existing web page or script installations. This might mean changing the permissions on your Subversion repository to match those in use by other things that Apache serves for you, or it could mean using the <literal>User</literal> and <literal>Group</literal> directives in <filename>httpd.conf</filename> to specify that Apache should run as the user and group that owns your Subversion repository. There is no single correct way to set up your permissions, and each administrator will have different reasons for doing things a certain way. Just be aware that permission-related problems are perhaps the most common oversight when configuring a Subversion repository for use with Apache."
msgstr "既に存在しているウェブページやスクリプトの設定に問題を起こさない ように Subversion の要求を満足させるためのパーミッションを決定しなくて なりません。これは Subversion リポジトリを、Apache が既に あなたに対して提供しているほかのサービスと協調するようなパーミッション に変更するか、あるいは<filename>httpd.conf</filename>の中で <literal>User</literal>や<literal>Group</literal>ディレクティブを 使ってSubversion リポジトリを所有しているユーザ・グループで Apache が実行されるべき状態に変更することを意味します。 このための唯一の正しい解法といったものはありませんし、個々の 管理者は正しいやり方をするための異なる理由を持っているはずです。 パーミッションに関連した問題はおそらく Apache を利用した Subversion リポジトリの設定時に一番よく見落とされることであるのに注意してください。"

#. Tag: title
#: ch06-server-configuration.xml:1311
#, no-c-format
msgid "Authentication Options"
msgstr "認証オプション"

#. Tag: para
#: ch06-server-configuration.xml:1313
#, no-c-format
msgid "At this point, if you configured <filename>httpd.conf</filename> to contain something like"
msgstr "この時点で <filename>httpd.conf</filename>を以下のような 感じで設定している場合"

#. Tag: screen
#: ch06-server-configuration.xml:1316
#, no-c-format
msgid ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1318
#, fuzzy, no-c-format
msgid "&hellip;then your repository is <quote>anonymously</quote> accessible to the world. Until you configure some authentication and authorization policies, the Subversion repositories you make available via the <literal>Location</literal> directive will be generally accessible to everyone. In other words,"
msgstr "あなたのリポジトリは<quote>匿名で</quote> 世界中からアクセス可能となります。何らかの 認証と認可の仕組みを設定するまで、あなたの作ったSubversion リポジトリは <literal>Location</literal>ディレクティブによって一般的に誰からも アクセスすることができてしまいます。言い換えると、"

#. Tag: para
#: ch06-server-configuration.xml:1327
#, fuzzy, no-c-format
msgid "anyone can use their Subversion client to check out a working copy of a repository URL (or any of its subdirectories),"
msgstr "誰でもリポジトリ URL(とその任意のサブディレクトリ) の作業コピーをチェックアウト するために Subversion クライアントを利用することができます,"

#. Tag: para
#: ch06-server-configuration.xml:1332
#, no-c-format
msgid "anyone can interactively browse the repository's latest revision simply by pointing their web browser to the repository URL, and"
msgstr "誰でもリポジトリ URL をブラウザで指定することによってリポジトリの最新 リビジョンを閲覧することができます。そして"

#. Tag: para
#: ch06-server-configuration.xml:1337
#, no-c-format
msgid "anyone can commit to the repository."
msgstr "誰でもそのリポジトリにコミットすることができます。"

#. Tag: para
#: ch06-server-configuration.xml:1341
#, no-c-format
msgid "Of course, you might have already set up a <filename>pre-commit</filename> hook script to prevent commits (see <xref linkend=\"svn.reposadmin.create.hooks\"/>). But as you read on, you'll see that it's also possible use Apache's built-in methods to restrict access in specific ways."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:1350
#, no-c-format
msgid "Basic HTTP Authentication"
msgstr "基本 HTTP 認証"

#. Tag: para
#: ch06-server-configuration.xml:1352
#, fuzzy, no-c-format
msgid "The easiest way to authenticate a client is via the HTTP Basic authentication mechanism, which simply uses a username and password to verify that a user is who she says she is. Apache provides an <command>htpasswd</command> utility for managing the list of acceptable usernames and passwords. Let's grant commit access to Sally and Harry. First, we need to add them to the password file."
msgstr "クライアントを認証する一番簡単な方法は HTTP の基本認証の仕組みを使うことで、 それは単純にユーザ名とパスワードを使って、ある人間が自分がその当人である と言っているのを確認します。Apache は<command>htpasswd</command>ユーティリティー を用意して、受け入れることのできるユーザ名とパスワードの一覧を管理 しますが、その人たちにだけあなたの Subversion リポジトリにアクセスする権利を 与えることができます。 Sarry と Harry にだけコミット権限を与えてみましょう。 まず彼らをパスワードファイルに追加する必要があります。"

#. Tag: screen
#: ch06-server-configuration.xml:1361
#, fuzzy, no-c-format
msgid ""
"$ ### First time: use -c to create the file\n"
"$ ### Use -m to use MD5 encryption of the password, which is more secure\n"
"$ htpasswd -cm /etc/svn-auth-file harry\n"
"New password: *****\n"
"Re-type new password: *****\n"
"Adding password for user harry\n"
"$ htpasswd -m /etc/svn-auth-file sally\n"
"New password: *******\n"
"Re-type new password: *******\n"
"Adding password for user sally\n"
"$"
msgstr ""
"$ ### First time: use -c to create the file\n"
"$ ### Use -m to use MD5 encryption of the password, which is more secure\n"
"$ htpasswd -cm /etc/svn-auth-file harry\n"
"New password: ***** \n"
"Re-type new password: *****\n"
"Adding password for user harry\n"
"$ htpasswd -m /etc/svn-auth-file sally\n"
"New password: *******\n"
"Re-type new password: *******\n"
"Adding password for user sally\n"
"$"

#. Tag: para
#: ch06-server-configuration.xml:1363
#, no-c-format
msgid "Next, you need to add some more <filename>httpd.conf</filename> directives inside your <literal>Location</literal> block to tell Apache what to do with your new password file. The <literal>AuthType</literal> directive specifies the type of authentication system to use. In this case, we want to specify the <literal>Basic</literal> authentication system. <literal>AuthName</literal> is an arbitrary name that you give for the authentication domain. Most browsers will display this name in the pop-up dialog box when the browser is querying the user for his name and password. Finally, use the <literal>AuthUserFile</literal> directive to specify the location of the password file you created using <command>htpasswd</command>."
msgstr "次に新しいパスワードファイルを何に利用するかというのを Apache に伝える ため、 <literal>Location</literal>ブロック内部で追加の <filename>httpd.conf</filename> ディレクティブが必要になります。 <literal>AuthType</literal>ディレクティブは 利用する認証システムのタイプを指定します。今回は<literal>Basic</literal> 認証システムを指定したいと思います。<literal>AuthName</literal>は 任意の名前で認証ドメインを与えるためのものです。ほとんどのブラウザは ユーザに名前とパスワードを問い合わせるときにこの名前をポップアップダイアログ ボックス中に表示します。最後に<literal>AuthUserFile</literal>ディレクティブは <command>htpasswd</command>で作ったパスワードファイルの場所を指定します。"

#. Tag: para
#: ch06-server-configuration.xml:1378
#, no-c-format
msgid "After adding these three directives, your <literal>&lt;Location&gt;</literal> block should look something like this:"
msgstr "三つのディレクティブを追加した後では、あなたの <literal>&lt;Location&gt;</literal> ブロックは以下のような感じになっていることでしょう:"

#. Tag: screen
#: ch06-server-configuration.xml:1382
#, no-c-format
msgid ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /etc/svn-auth-file\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /etc/svn-auth-file\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1384
#, no-c-format
msgid "This <literal>&lt;Location&gt;</literal> block is not yet complete, and will not do anything useful. It's merely telling Apache that whenever authorization is required, Apache should harvest a username and password from the Subversion client. What's missing here, however, are directives that tell Apache <emphasis>which</emphasis> sorts of client requests require authorization. Wherever authorization is required, Apache will demand authentication as well. The simplest thing to do is protect all requests. Adding <literal>Require valid-user</literal> tells Apache that all requests require an authenticated user:"
msgstr "この <literal>&lt;Location&gt;</literal> ブロックはまだ完成しておらず 役に立つことは何もしません。単に Apache に対して、認証が要求されるとき には常にSubversion クライアントからユーザ名とパスワードを取得するように 言うだけです。しかしここで欠けているのは Apache に対して<emphasis>どのような </emphasis>種類のクライアント要求が認証で必要とされるのかを言うための ディレクティブです。これをやるのに最も簡単な方法はすべてのリクエストを保護 するこです。<literal>Require valid-user</literal> の追加は Apache に対して すべてのリクエストは認証されたユーザであることを伝えます:"

#. Tag: screen
#: ch06-server-configuration.xml:1397
#, no-c-format
msgid ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /etc/svn-auth-file\n"
"  Require valid-user\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /etc/svn-auth-file\n"
"  Require valid-user\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1399
#, no-c-format
msgid "Be sure to read the next section (<xref linkend=\"svn.serverconfig.httpd.authz\"/>) for more detail on the <literal>Require</literal> directive and other ways to set authorization policies."
msgstr "認可のポリシーを設定する <literal>Require</literal>ディレクティブと、その他の方法についての 詳細については次の節(<xref linkend=\"svn.serverconfig.httpd.authz\"/>) を読んでください。"

#. Tag: para
#: ch06-server-configuration.xml:1404
#, fuzzy, no-c-format
msgid "One word of warning: HTTP Basic Auth passwords pass in very nearly plain-text over the network, and thus are extremely insecure. If you're worried about password snooping, it may be best to use some sort of SSL encryption, so that clients authenticate via <literal>https://</literal> instead of <literal>http://</literal>; at a bare minimum, you can configure Apache to use a self-signed server certificate. <footnote> <para>While self-signed server certificates are still vulnerable to a <quote>man in the middle</quote> attack, such an attack is much more difficult for a casual observer to pull off, compared to sniffing unprotected passwords.</para> </footnote> Consult Apache's documentation (and OpenSSL documentation) about how to do that."
msgstr "一点注意があります: HTTP の基本認証パスワードはほとんど平文のままネットワーク を流れるため、セキュリティー上は非常に弱いものです。もしパスワードの 盗聴が心配なら、SSL 暗号化のような仕組みを使うのが最良でしょう。これで クライアント認証は<literal>http://</literal>のかわりに <literal>https://</literal>を使って認証することになります; 最低限度の 処置として Apache に自己サイン付きサーバ証明書を設定することができます。 <footnote> <para> 自己サイン付きサーバ証明書は、<quote>中間偽装</quote>攻撃に対しては やはり脆弱ですが、そのような攻撃は、暗号化されていないパスワードを 盗聴するタイプのものに比べてはるかに困難です。 </para> </footnote> どうすれば良いかについては Apache のドキュメント(と、OpenSSL の ドキュメント)を見てください。"

#. Tag: title
#: ch06-server-configuration.xml:1427
#, no-c-format
msgid "SSL Certificate Management"
msgstr "SSL 証明書の管理"

#. Tag: para
#: ch06-server-configuration.xml:1429
#, no-c-format
msgid "Businesses that need to expose their repositories for access outside the company firewall should be conscious of the possibility that unauthorized parties could be <quote>sniffing</quote> their network traffic. SSL makes that kind of unwanted attention less likely to result in sensitive data leaks."
msgstr "リポジトリを自社ファイアウォールの外にさらす必要のあるビジネス は認可されていない他人が自分たちのネットワークデータを<quote>盗聴</quote> しているかも知れないということを意識すべきです。 SSL はこの手の望ましくない意図が重要なデータの流出に帰結する可能性を 小さなものにします。"

#. Tag: para
#: ch06-server-configuration.xml:1436
#, no-c-format
msgid "If a Subversion client is compiled to use OpenSSL, then it gains the ability to speak to an Apache server via <literal>https://</literal> URLs. The Neon library used by the Subversion client is not only able to verify server certificates, but can also supply client certificates when challenged. When the client and server have exchanged SSL certificates and successfully authenticated one another, all further communication is encrypted via a session key."
msgstr "Subversion クライアントが OpenSSL を使ってコンパイルされた場合、<literal>https://</literal> URL を使って Apache サーバと通信する能力を得ます。Subversion クライアントで 利用される Neon ライブラリはサーバ証明書を検証することができるだけ ではなく、確認要求を受けた場合には自分の証明書を提示する能力も持って います。クライアントとサーバが SSL 証明書を交換しお互いの認証に成功 すれば、その後のすべての通信はセッションキーによって暗号化されます。"

#. Tag: para
#: ch06-server-configuration.xml:1445
#, no-c-format
msgid "It's beyond the scope of this book to describe how to generate client and server certificates, and how to configure Apache to use them. Many other books, including Apache's own documentation, describe this task. But what <emphasis>can</emphasis> be covered here is how to manage server and client certificates from an ordinary Subversion client."
msgstr "どのようにしてクライアントとサーバ証明書を生成するか、またその証明書を 利用するようにどうやって Apache を設定するかについてはこの本の範囲外です。 Apache 自身のドキュメントを含め、さまざまな本でこの方法を説明しています。 ここでは通常の Subversion クライアントでのサーバとクライアント証明書を どのように管理するかについて説明します。"

#. Tag: para
#: ch06-server-configuration.xml:1453
#, no-c-format
msgid "When speaking to Apache via <literal>https://</literal>, a Subversion client can receive two different types of information:"
msgstr "<literal>https://</literal>経由で Apache と通信する場合、Subversion クライアントは二つの異なるタイプの情報を受け取ることができます:"

#. Tag: para
#: ch06-server-configuration.xml:1458
#, no-c-format
msgid "a server certificate"
msgstr "サーバ証明書"

#. Tag: para
#: ch06-server-configuration.xml:1459
#, no-c-format
msgid "a demand for a client certificate"
msgstr "クライアント証明書の提示要求"

#. Tag: para
#: ch06-server-configuration.xml:1462
#, no-c-format
msgid "If the client receives a server certificate, it needs to verify that it trusts the certificate: is the server really who it claims to be? The OpenSSL library does this by examining the signer of the server certificate, or <firstterm>certifying authority</firstterm> (CA). If OpenSSL is unable to automatically trust the CA, or if some other problem occurs (such as an expired certificate or hostname mismatch), the Subversion command-line client will ask you whether you want to trust the server certificate anyway:"
msgstr "クライアントがサーバ証明書を受け取った場合、それが信頼できるものであるか どうかの検証が必要になります: サーバは本当に名乗っているそのサーバなの でしょうか? OpenSSL ライブラリはサーバ証明書にサインした者、あるいは <firstterm>認証期間</firstterm> (CA)を調べることでこれを確認します。もし OpenSSL が自動的に CA を信用することができないか、他の問題が起きた 場合(たとえば、証明書の有効期間が過ぎていたり、ホスト名が一致していない 場合など)、Subversion コマンドラインクライアントはそのサーバ証明書を とにかく信用するかどうかをユーザに聞いてきます:"

#. Tag: screen
#: ch06-server-configuration.xml:1473
#, no-c-format
msgid ""
"$ svn list https://host.example.com/repos/project\n"
"\n"
"Error validating server certificate for 'https://host.example.com:443':\n"
" - The certificate is not issued by a trusted authority. Use the\n"
"   fingerprint to validate the certificate manually!\n"
"Certificate information:\n"
" - Hostname: host.example.com\n"
" - Valid: from Jan 30 19:23:56 2004 GMT until Jan 30 19:23:56 2006 GMT\n"
" - Issuer: CA, example.com, Sometown, California, US\n"
" - Fingerprint: 7d:e1:a9:34:33:39:ba:6a:e9:a5:c4:22:98:7b:76:5c:92:a0:9c:7b\n"
"\n"
"(R)eject, accept (t)emporarily or accept (p)ermanently?"
msgstr ""
"$ svn list https://host.example.com/repos/project\n"
"\n"
"Error validating server certificate for 'https://host.example.com:443':\n"
" - The certificate is not issued by a trusted authority. Use the\n"
"   fingerprint to validate the certificate manually!\n"
"Certificate information:\n"
" - Hostname: host.example.com\n"
" - Valid: from Jan 30 19:23:56 2004 GMT until Jan 30 19:23:56 2006 GMT\n"
" - Issuer: CA, example.com, Sometown, California, US\n"
" - Fingerprint: 7d:e1:a9:34:33:39:ba:6a:e9:a5:c4:22:98:7b:76:5c:92:a0:9c:7b\n"
"\n"
"(R)eject, accept (t)emporarily or accept (p)ermanently?"

#. Tag: para
#: ch06-server-configuration.xml:1475
#, fuzzy, no-c-format
msgid "This dialogue should look familiar; it's essentially the same question you've probably seen coming from your web browser (which is just another HTTP client like Subversion). If you choose the (p)ermanent option, the server certificate will be cached in your private run-time <filename>auth/</filename> area in just the same way your username and password are cached (see <xref linkend=\"svn.serverconfig.netmodel.credcache\"/>). If cached, Subversion will automatically trust this certificate in future negotiations."
msgstr "このダイアログはなじみ深いものだと思います; 本質的にはウェブブラウザで 見ることのできるのと同じ質問になっています(ブラウザは Subversion と 同じような HTTP クライアントの一種なんです!)。もし (p)ermanent、常に信用 する、というオプションを選ぶと、サーバはあなたのユーザ名とパスワードを キャッシュしたのとちょうど同じ方法であなたの実行時<filename>auth/</filename> 領域にそのサーバ証明書をキャッシュします。(<xref linkend=\"svn.serverconfig.netmodel.credcache\"/> を参照してください)。キャッシュされてしまえば、Subversion はそれ以降の やり取りについては自動的にこの証明書を信用します。"

#. Tag: para
#: ch06-server-configuration.xml:1486
#, no-c-format
msgid "Your run-time <filename>servers</filename> file also gives you the ability to make your Subversion client automatically trust specific CAs, either globally or on a per-host basis. Simply set the <literal>ssl-authority-files</literal> variable to a semicolon-separated list of PEM-encoded CA certificates:"
msgstr "実行時<filename>servers</filename>ファイルもSubversion クライアントが自動的に 特定の CA を信頼するように設定することができます。すべてのものについて そうすることもできますし、ホストごとにすることもできます。 単に<literal>ssl-authority-files</literal>を、 PEM で暗号化された CA 証明書をセミコロンで区切ったリストに設定してください:"

#. Tag: screen
#: ch06-server-configuration.xml:1493
#, no-c-format
msgid ""
"[global]\n"
"ssl-authority-files = /path/to/CAcert1.pem;/path/to/CAcert2.pem"
msgstr ""
"[global]\n"
"ssl-authority-files = /path/to/CAcert1.pem;/path/to/CAcert2.pem"

#. Tag: para
#: ch06-server-configuration.xml:1495
#, no-c-format
msgid "Many OpenSSL installations also have a pre-defined set of <quote>default</quote> CAs that are nearly universally trusted. To make the Subversion client automatically trust these standard authorities, set the <literal>ssl-trust-default-ca</literal> variable to <literal>true</literal>."
msgstr "多くの OpenSSL の設定ではほとんど無制限に信頼する <quote>default</quote> CA が、あらかじめ設定されています。Subversion クライアントにそのような 標準的な認証機関を信用させるためには<literal>ssl-trust-default-ca</literal> 変数を<literal>true</literal>に設定してください。"

#. Tag: para
#: ch06-server-configuration.xml:1502
#, no-c-format
msgid "When talking to Apache, a Subversion client might also receive a challenge for a client certificate. Apache is asking the client to identify itself: is the client really who it says it is? If all goes correctly, the Subversion client sends back a private certificate signed by a CA that Apache trusts. A client certificate is usually stored on disk in encrypted format, protected by a local password. When Subversion receives this challenge, it will ask you for both a path to the certificate and the password which protects it:"
msgstr "Apache と通信する際、Subversion クライアントはクライアント証明書の 確認要求を受けるかも知れません。Apache はクライアントに対して自分自身を 証明するようにたずねます: あんたは本当にあんたなのか? もしすべてが正し ければ Subversion クライアントはApache が信用している CA によってサイン されたプライベート証明書を送り返します。クライアント証明書は通常 暗号化された形式でディスク中に保管され、ローカルパスワードによって 保護されています。Subversion がこの確認要求を受けた場合、あなたは 証明書のパスと、それを保護しているパスワードについて聞かれます:"

#. Tag: screen
#: ch06-server-configuration.xml:1513
#, no-c-format
msgid ""
"$ svn list https://host.example.com/repos/project\n"
"\n"
"Authentication realm: https://host.example.com:443\n"
"Client certificate filename: /path/to/my/cert.p12\n"
"Passphrase for '/path/to/my/cert.p12':  ********\n"
"&hellip;"
msgstr ""
"$ svn list https://host.example.com/repos/project\n"
"\n"
"Authentication realm: https://host.example.com:443\n"
"Client certificate filename: /path/to/my/cert.p12\n"
"Passphrase for '/path/to/my/cert.p12':  ********\n"
"&hellip;"

#. Tag: para
#: ch06-server-configuration.xml:1515
#, no-c-format
msgid "Notice that the client certificate is a <quote>p12</quote> file. To use a client certificate with Subversion, it must be in PKCS#12 format, which is a portable standard. Most web browsers are already able to import and export certificates in that format. Another option is to use the OpenSSL command-line tools to convert existing certificates into PKCS#12."
msgstr "クライアント証明書は <quote>p12</quote>形式のファイル であることに注意してください。クライアント証明書を Subversion で利用する場合、それは標準的な PKCS#12 フォーマットでなければなりません。 ほとんどのウェブブラウザは既にその形式の証明書をインポートしたり エクスポートしたりすることができます。他の方法としては既存の証明書 をOpenSSLのコマンドラインツールによってPKCS#12形式に変換するという ものです:"

#. Tag: para
#: ch06-server-configuration.xml:1523
#, no-c-format
msgid "Again, the runtime <filename>servers</filename> file allows you to automate this challenge on a per-host basis. Either or both pieces of information can be described in runtime variables:"
msgstr "ここでも実行時<filename>servers</filename>ファイルはホスト単位で この確認要求を自動化することを認めています。そのような情報は 実行時変数で指定できます:"

#. Tag: screen
#: ch06-server-configuration.xml:1528
#, no-c-format
msgid ""
"[groups]\n"
"examplehost = host.example.com\n"
"\n"
"[examplehost]\n"
"ssl-client-cert-file = /path/to/my/cert.p12\n"
"ssl-client-cert-password = somepassword"
msgstr ""
"[groups]\n"
"examplehost = host.example.com\n"
"\n"
"[examplehost]\n"
"ssl-client-cert-file = /path/to/my/cert.p12\n"
"ssl-client-cert-password = somepassword"

#. Tag: para
#: ch06-server-configuration.xml:1530
#, no-c-format
msgid "Once you've set the <literal>ssl-client-cert-file</literal> and <literal>ssl-client-cert-password</literal> variables, the Subversion client can automatically respond to a client certificate challenge without prompting you."
msgstr "いったん<literal>ssl-client-cert-file</literal>と <literal>ssl-client-cert-password</literal>変数を 設定すれば、Subversion クライアントはユーザに問い合わせることなしに 自動的にクライアント証明書の確認要求に応答することができるようになります。"

#. Tag: para
#: ch06-server-configuration.xml:1536
#, no-c-format
msgid "More security-conscious folk might not want to store the client certificate password in the runtime <filename>servers</filename> file."
msgstr "セキュリティーにもっと神経質な人はクライアント証明書用パスワード を実行時<filename>servers</filename>ファイルに格納するのを嫌がる でしょう。"

#. Tag: title
#: ch06-server-configuration.xml:1548
#, no-c-format
msgid "Authorization Options"
msgstr "認可のオプション"

#. Tag: para
#: ch06-server-configuration.xml:1550
#, no-c-format
msgid "At this point, you've configured authentication, but not authorization. Apache is able to challenge clients and confirm identities, but it has not been told how to allow or restrict access to the clients bearing those identities. This section describes two strategies for controlling access to your repositories."
msgstr "ここまでのところで、すでに認証についての設定は完了しました が認可はまだです。Apache はクライアントを試し、本当のクライアン トであることを確認することができますが、これらの認証済みクライアントそれ ぞれにどのようなアクセスを許し、また制限するかについてはまだ説明 していません。この節ではリポジトリに対してアクセス制御するための 二つの方法について説明します。"

#. Tag: title
#: ch06-server-configuration.xml:1559
#, no-c-format
msgid "Blanket Access Control"
msgstr "全面的なアクセス制御"

#. Tag: para
#: ch06-server-configuration.xml:1561
#, no-c-format
msgid "The simplest form of access control is to authorize certain users for either read-only access to a repository, or read/write access to a repository."
msgstr "アクセス制御の一番簡単な方法は特定のユーザをリポジトリに対して読み出し 専用、あるいは読み書き可能として認可することです。"

#. Tag: para
#: ch06-server-configuration.xml:1565
#, no-c-format
msgid "You can restrict access on all repository operations by adding the <literal>Require valid-user</literal> directive to your <literal>&lt;Location&gt;</literal> block. Using our previous example, this would mean that only clients that claimed to be either <literal>harry</literal> or <literal>sally</literal>, and provided the correct password for their respective username, would be allowed to do anything with the Subversion repository:"
msgstr "<literal>&lt;Location&gt;</literal>ブロックに<literal>Require valid-user</literal> ディレクティブを追加することによってすべてのリポジトリ操作にアクセス制限を 設けることができます。前の例を使うと、これは<literal>harry</literal>、 <literal>sally</literal>、あるいはユーザごとの正しいパスワードを入力した 人だけに、Subversion リポジトリに対する任意の操作を許すというものです:"

#. Tag: screen
#: ch06-server-configuration.xml:1574
#, fuzzy, no-c-format
msgid ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"\n"
"  # how to authenticate a user\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /path/to/users/file\n"
"\n"
"  # only authenticated users may access the repository\n"
"  Require valid-user\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"\n"
"  # how to authenticate a user\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /path/to/users/file\n"
"  \n"
"  # only authenticated users may access the repository\n"
"  Require valid-user\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1576
#, no-c-format
msgid "Sometimes you don't need to run such a tight ship. For example, Subversion's own source code repository at <ulink url=\"http://svn.collab.net/repos/svn\"></ulink> allows anyone in the world to perform read-only repository tasks (like checking out working copies and browsing the repository with a web browser), but restricts all write operations to authenticated users. To do this type of selective restriction, you can use the <literal>Limit</literal> and <literal>LimitExcept</literal> configuration directives. Like the <literal>Location</literal> directive, these blocks have starting and ending tags, and you would nest them inside your <literal>&lt;Location&gt;</literal> block."
msgstr "しばしばそのような厳しい設定は不要です。たとえば Subversion 自身の ソースコードリポジトリは<ulink url=\"http://svn.collab.net/repos/svn\"></ulink> にありますが、世界中の誰でも読み出しアクセスすることが可能です( それはチェックアウトしたり、ウェブブラウザでリポジトリを閲覧する ような操作です)が、書き込み操作は認証されたユーザにのみ許されています。 この手の制限を付与するには <literal>Limit</literal>と <literal>LimitExcept</literal>設定ディレクティブを使うことができます。 <literal>Location</literal>ディレクティブのように、この二つの ブロックは開始タグと終了タグがあり、 <literal>&lt;Location&gt;</literal> ブロック中でネストすることができます。"

#. Tag: para
#: ch06-server-configuration.xml:1590
#, no-c-format
msgid "The parameters present on the <literal>Limit</literal> and <literal>LimitExcept</literal> directives are HTTP request types that are affected by that block. For example, if you wanted to disallow all access to your repository except the currently supported read-only operations, you would use the <literal>LimitExcept</literal> directive, passing the <literal>GET</literal>, <literal>PROPFIND</literal>, <literal>OPTIONS</literal>, and <literal>REPORT</literal> request type parameters. Then the previously mentioned <literal>Require valid-user</literal> directive would be placed inside the <literal>&lt;LimitExcept&gt;</literal> block instead of just inside the <literal>&lt;Location&gt;</literal> block."
msgstr "<literal>Limit</literal>と<literal>LimitExcept</literal>ディレクティブ に現れるパラメータは HTTP 要求タイプで、そのブロック全体に影響を 与えます。たとえば、現在サポートされている読み出しのみの操作を 除くすべてのリポジトリアクセスを禁止したい場合、<literal>LimitExcept</literal> ディレクティブが、<literal>GET</literal>、<literal>PROPFIND</literal>、 <literal>OPTIONS</literal>、そして<literal>REPORT</literal>要求タイプ パラメータを渡す形で利用できます。そして既に触れた<literal>Require valid-user</literal> ディレクティブを、単に<literal>&lt;Location&gt;</literal>ブロックの中に 置くかわりに、<literal>&lt;LimitExcept&gt;</literal>ブロックの中に置く形に なります。"

#. Tag: screen
#: ch06-server-configuration.xml:1604
#, no-c-format
msgid ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"\n"
"  # how to authenticate a user\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /path/to/users/file\n"
"\n"
"  # For any operations other than these, require an authenticated user.\n"
"  &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;\n"
"    Require valid-user\n"
"  &lt;/LimitExcept&gt;\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"\n"
"  # how to authenticate a user\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /path/to/users/file\n"
"\n"
"  # For any operations other than these, require an authenticated user.\n"
"  &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;\n"
"    Require valid-user\n"
"  &lt;/LimitExcept&gt;\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1606
#, no-c-format
msgid "These are only a few simple examples. For more in-depth information about Apache access control and the <literal>Require</literal> directive, take a look at the <literal>Security</literal> section of the Apache documentation's tutorials collection at <ulink url=\"http://httpd.apache.org/docs-2.0/misc/tutorials.html\"></ulink>."
msgstr "このようなことは単純な例にすぎません。Apache のアクセス制御と <literal>Require</literal>ディレクティブについてのさらに詳しい情報 は<ulink url=\"http://httpd.apache.org/docs-2.0/misc/tutorials.html\"></ulink> にある Apache ドキュメントチュートリアルの<literal>Security</literal> セクションを見てください。"

#. Tag: title
#: ch06-server-configuration.xml:1617
#, no-c-format
msgid "Per-Directory Access Control"
msgstr "ディレクトリごとのアクセス制御"

#. Tag: para
#: ch06-server-configuration.xml:1619
#, no-c-format
msgid "It's possible to set up finer-grained permissions using a second Apache httpd module, <command>mod_authz_svn</command>. This module grabs the various opaque URLs passing from client to server, asks <command>mod_dav_svn</command> to decode them, and then possibly vetoes requests based on access policies defined in a configuration file."
msgstr "第二の Apache httpd モジュールである <command>mod_authz_svn</command> を使うと、より詳細なパーミッションの設定が可能です。このモジュールは クライアントからサーバに送信されるさまざまな裸の URL を取得し、 <command>mod_dav_svn</command>にそれを解析するように要求し、設定ファイル で定義されたアクセス方式に基づき必要に応じてアクセスを拒否します。"

#. Tag: para
#: ch06-server-configuration.xml:1627
#, no-c-format
msgid "If you've built Subversion from source code, <command>mod_authz_svn</command> is automatically built and installed alongside <command>mod_dav_svn</command>. Many binary distributions install it automatically as well. To verify that it's installed correctly, make sure it comes right after <command>mod_dav_svn</command>'s <literal>LoadModule</literal> directive in <filename>httpd.conf</filename>:"
msgstr "Subversion をソースコードから構築した場合は<command>mod_authz_svn</command> は自動的に<command>mod_dav_svn</command>のそばにインストールされます。 多くのバイナリ配布でもやはり自動的にインストールします。正しくインストール されているかどうかを確認するには<filename>httpd.conf</filename> にある、<command>mod_dav_svn</command>の<literal>LoadModule</literal> ディレクティブのすぐ後に来ていることを確認してください:"

#. Tag: screen
#: ch06-server-configuration.xml:1636
#, no-c-format
msgid ""
"LoadModule dav_module         modules/mod_dav.so\n"
"LoadModule dav_svn_module     modules/mod_dav_svn.so\n"
"LoadModule authz_svn_module   modules/mod_authz_svn.so"
msgstr ""
"LoadModule dav_module         modules/mod_dav.so\n"
"LoadModule dav_svn_module     modules/mod_dav_svn.so\n"
"LoadModule authz_svn_module   modules/mod_authz_svn.so"

#. Tag: para
#: ch06-server-configuration.xml:1638
#, no-c-format
msgid "To activate this module, you need to configure your <literal>Location</literal> block to use the <literal>AuthzSVNAccessFile</literal> directive, which specifies a file containing the permissions policy for paths within your repositories. (In a moment, we'll discuss the format of that file.)"
msgstr "このモジュールを有効にするには <literal>AuthzSVNAccessFile</literal> ディレクティブを使うために<literal>Location</literal>ブロックを 設定する必要があります。このディレクティブはリポジトリにある パスのパーミッションが書かれたファイルを指定します。(すぐあとで このファイルの形式について議論します。)"

#. Tag: para
#: ch06-server-configuration.xml:1645
#, no-c-format
msgid "Apache is flexible, so you have the option to configure your block in one of three general patterns. To begin, choose one of these basic configuration patterns. (The examples below are very simple; look at Apache's own documentation for much more detail on Apache authentication and authorization options.)"
msgstr "Apache は柔軟なので三つの一般的なパターンのどれかにブロックを 設定することができます。まず基本的な設定パターンの一つを選びます。 (以下の例は非常に単純です; Apache の認証と認可の設定の詳細に ついては Apache 自身のドキュメントを参照してください。)"

#. Tag: para
#: ch06-server-configuration.xml:1652
#, no-c-format
msgid "The simplest block is to allow open access to everyone. In this scenario, Apache never sends authentication challenges, so all users are treated as <quote>anonymous</quote>."
msgstr "最も単純なブロックはすべての人に対して自由にアクセスすることを 許すものです。このやり方では Apache は認証要求を送信することは ないのですべてのユーザは<quote>匿名</quote>として扱われます。"

#. Tag: title
#: ch06-server-configuration.xml:1658
#, no-c-format
msgid "A sample configuration for anonymous access."
msgstr "匿名アクセスの設定例。"

#. Tag: programlisting
#: ch06-server-configuration.xml:1659
#, fuzzy, no-c-format
msgid ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"\n"
"  # our access control policy\n"
"  AuthzSVNAccessFile /path/to/access/file\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"\n"
"  # our access control policy\n"
"  AuthzSVNAccessFile /path/to/access/file\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1662
#, no-c-format
msgid "On the opposite end of the paranoia scale, you can configure your block to demand authentication from everyone. All clients must supply credentials to identify themselves. Your block unconditionally requires authentication via the <literal>Require valid-user</literal> directive, and defines a means to authenticate."
msgstr "この対極にある設定方法として、すべての人にたいして認証要求するための ブロックを設定することもできます。すべてのクライアントは自身を特定 するための証明を送る必要があります。ブロックは<literal>Require valid-user</literal> ディレクティブによって無条件に認証を要求し、またその方法を定義します。"

#. Tag: title
#: ch06-server-configuration.xml:1670
#, no-c-format
msgid "A sample configuration for authenticated access."
msgstr "認証つきアクセスの設定例。"

#. Tag: programlisting
#: ch06-server-configuration.xml:1671
#, fuzzy, no-c-format
msgid ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"\n"
"  # our access control policy\n"
"  AuthzSVNAccessFile /path/to/access/file\n"
"\n"
"  # only authenticated users may access the repository\n"
"  Require valid-user\n"
"\n"
"  # how to authenticate a user\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /path/to/users/file\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"\n"
"  # our access control policy\n"
"  AuthzSVNAccessFile /path/to/access/file\n"
"\n"
"  # only authenticated users may access the repository\n"
"  Require valid-user\n"
"\n"
"  # how to authenticate a user\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /path/to/users/file\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1674
#, no-c-format
msgid "A third very popular pattern is to allow a combination of authenticated and anonymous access. For example, many administrators want to allow anonymous users to read certain repository directories, but want only authenticated users to read (or write) more sensitive areas. In this setup, all users start out accessing the repository anonymously. If your access control policy demands a real username at any point, Apache will demand authentication from the client. To do this, you use both the <literal>Satisfy Any</literal> and <literal>Require valid-user</literal> directives together."
msgstr "三番目の非常に一般的な方法は認証つきアクセスと匿名アクセスの組合せ によるものです。たとえば多くの管理者はあるリポジトリのディレクトリを 誰でも読めるようにしたいが、もっと重要な場所については認証された ユーザのみが読めるように(あるいは書き込めるように)したいと考えます。 このような設定ではすべてのユーザはまずは匿名でリポジトリにアクセスし ます。ある時点で本当のユーザ名を要求しなくてはならないアクセスが 発生すると、Apache はクライアントから認証を要求します。このためには <literal>Satisfy Any</literal>ディレクティブと <literal>Require valid-user</literal>ディレクティブの両方を使います。"

#. Tag: title
#: ch06-server-configuration.xml:1687
#, no-c-format
msgid "A sample configuration for mixed authenticated/anonymous access."
msgstr "認証つき/匿名の両方でアクセスする場合の設定例。"

#. Tag: programlisting
#: ch06-server-configuration.xml:1689
#, fuzzy, no-c-format
msgid ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"\n"
"  # our access control policy\n"
"  AuthzSVNAccessFile /path/to/access/file\n"
"\n"
"  # try anonymous access first, resort to real\n"
"  # authentication if necessary.\n"
"  Satisfy Any\n"
"  Require valid-user\n"
"\n"
"  # how to authenticate a user\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /path/to/users/file\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"\n"
"  # our access control policy\n"
"  AuthzSVNAccessFile /path/to/access/file\n"
"\n"
"  # try anonymous access first, resort to real\n"
"  # authentication if necessary.\n"
"  Satisfy Any\n"
"  Require valid-user\n"
"\n"
"  # how to authenticate a user\n"
"  AuthType Basic\n"
"  AuthName \"Subversion repository\"\n"
"  AuthUserFile /path/to/users/file\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1692
#, no-c-format
msgid "Once you've settled on one of these three basic <filename>httpd.conf</filename> templates, you need to create your file containing access rules for particular paths within the repository. This is described in <xref linkend=\"svn.serverconfig.pathbasedauthz\"/>."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:1702
#, no-c-format
msgid "Disabling Path-based Checks"
msgstr "パス名にもとづいたチェックの禁止"

#. Tag: para
#: ch06-server-configuration.xml:1704
#, no-c-format
msgid "The <command>mod_dav_svn</command> module goes through a lot of work to make sure that data you've marked <quote>unreadable</quote> doesn't get accidentally leaked. This means that it needs to closely monitor all of the paths and file-contents returned by commands like <command>svn checkout</command> or <command>svn update</command> commands. If these commands encounter a path that isn't readable according to some authorization policy, then the path is typically omitted altogether. In the case of history or rename tracing&mdash;e.g. running a command like <command>svn cat -r OLD foo.c</command> on a file that was renamed long ago&mdash;the rename tracking will simply halt if one of the object's former names is determined to be read-restricted."
msgstr "<command>mod_dav_svn</command>モジュールには、<quote>読み込み禁止</quote> のしるし がついたデータが間違って外部に漏れないようにいろいろな工夫がしてありま す。これは、 <command>svn checkout</command> や <command>svn update</command> のようなコマンドからの戻り値となるすべてのパス名とファイルの内容を綿密に チェックする必要があることを意味します。このようなコマンドが認可のポリシーに よって読み込むべきではないファイルパス名に出会うと、通常は完全にそれを 無視します。履歴や名称変更を追うようなコマンドの場合&mdash; 例えばずっと 昔に名称変更されたファイルに対して <command>svn cat -r OLD foo.c</command> のようなコマンドを実行するような場合など&mdash; 名称変更の履歴は、その ようなファイルの以前の名前に読み込み制約がある場合には、単に異常終了して しまいます。"

#. Tag: para
#: ch06-server-configuration.xml:1719
#, fuzzy, no-c-format
msgid "All of this path-checking can sometimes be quite expensive, especially in the case of <command>svn log</command>. When retrieving a list of revisions, the server looks at every changed path in each revision and checks it for readability. If an unreadable path is discovered, then it's omitted from the list of the revision's changed paths (normally seen with the <option>--verbose</option> option), and the whole log message is suppressed. Needless to say, this can be time-consuming on revisions that affect a large number of files. This is the cost of security: even if you haven't configured a module like <command>mod_authz_svn</command> at all, the <command>mod_dav_svn</command> module is still asking Apache <command>httpd</command> to run authorization checks on every path. The <command>mod_dav_svn</command> module has no idea what authorization modules have been installed, so all it can do is ask Apache to invoke whatever might be present."
msgstr "このようなすべてのパス名に対するチェックは場合によっては非常に効率の悪 いものになり、特に<command>svn log</command>コマンドではそうです。リビ ジョンの一覧を取得する場合、サーバはすべてのリビジョンのすべての変更さ れたパスを見てそれらが読み込み許可されているかどうかを調べます。許可さ れていないパスが見つかるとリビジョンの変更のあったパスの一覧からは除外 され(これは通常<option>--verbose</option>オプションで見ることのできる ものです)、ログメッセージ全体が表示されなくなります。言うまでもありま せんが、たくさんのファイルのあるリビジョンでは多くの時間を消費します。 しかしこれはセキュリティーを保つための代償です: <command>mod_authz_svn</command>のようなモジュールをまったく設定してい ない場合でも、やはり <command>mod_dav_svn</command>モジュールがApache の <command>httpd</command> に対してすべてのパスについての認可チェック をするように要求します。<command>mod_dav_svn</command>モジュールは具体 的にどんな認可モジュールがインストールされているかは知らないので、単に Apache に対して、もしそのようなものがあるなら実行するようにと依頼する だけです。"

#. Tag: para
#: ch06-server-configuration.xml:1738
#, no-c-format
msgid "On the other hand, there's also an escape-hatch of sorts, one which allows you to trade security features for speed. If you're not enforcing any sort of per-directory authorization (i.e. not using <command>mod_authz_svn</command> or similar module), then you can disable all of this path-checking. In your <filename>httpd.conf</filename> file, use the <literal>SVNPathAuthz</literal> directive:"
msgstr "一方、これに関する逃げ道もやはりあって、セキュリティーよりも効率を重視 するようにも設定できます。ディレクトリごとの認可の仕組みをまったく利用 しないのなら(たとえば <command>mod_authz_svn</command> やそれに類似 のモジュールを使わないのなら)、このパス名に対するチェックを完全に無効に することもできます。<filename>httpd.conf</filename>ファイルで、 <literal>SVNPathAuthz</literal>ディレクティブを使ってください:"

#. Tag: title
#: ch06-server-configuration.xml:1748
#, no-c-format
msgid "Disabling path checks altogether"
msgstr "Disabling path checks altogether"

#. Tag: programlisting
#: ch06-server-configuration.xml:1749
#, fuzzy, no-c-format
msgid ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"\n"
"  SVNPathAuthz off\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /repos&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"            \n"
"  SVNPathAuthz off\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1752
#, no-c-format
msgid "The <literal>SVNPathAuthz</literal> directive is <quote>on</quote> by default. When set <quote>off</quote>, all path-based authorization checking is disabled; <command>mod_dav_svn</command> stops invoking authorization checks on every path it discovers."
msgstr "<literal>SVNPathAuthz</literal> ディレクティブはデフォルトでは <quote>on</quote> です。 <quote>off</quote> に設定するとすべてのパス名にもとづいた認可のチェックが禁止されます; <command>mod_dav_svn</command>はすべてのパスについて認可のチェックをしなく なります。"

#. Tag: title
#: ch06-server-configuration.xml:1764
#, no-c-format
msgid "Extra Goodies"
msgstr "おまけ"

#. Tag: para
#: ch06-server-configuration.xml:1766
#, no-c-format
msgid "We've covered most of the authentication and authorization options for Apache and mod_dav_svn. But there are a few other nice features that Apache provides."
msgstr "ここまで Apache と mod_dav_svn のための認証と認可のオプショ ンの大部分を説明してきました。しかし Apache が用意している、さらに いくつかのすばらしい機能があります。"

#. Tag: title
#: ch06-server-configuration.xml:1772
#, no-c-format
msgid "Repository Browsing"
msgstr "リポジトリ閲覧"

#. Tag: para
#: ch06-server-configuration.xml:1774
#, fuzzy, no-c-format
msgid "One of the most useful benefits of an Apache/WebDAV configuration for your Subversion repository is that the youngest revisions of your versioned files and directories are immediately available for viewing via a regular web browser. Since Subversion uses URLs to identify versioned resources, those URLs used for HTTP-based repository access can be typed directly into a Web browser. Your browser will issue an HTTP <literal>GET</literal> request for that URL, and based on whether that URL represents a versioned directory or file, mod_dav_svn will respond with a directory listing or with file contents."
msgstr "Subversion リポジトリでApache/WebDAVの設定による一番の恩恵は バージョン化されたファイルやディレクトリの最新リビジョンがウェブブラウザ から直接参照可能だということです。Subversion は URL をバージョン化された 資源を特定するために利用するので、そのような HTTPベースのリポジトリアクセス に利用される URL はウェブブラウザから直接入力することが可能です。ブラウザは その URLに対して<literal>GET</literal>要求を発行し、その URL がバージョン化 されたディレクトリであるかファイルであるかに応じてmod_dav_svnはディレクトリ の一覧またはファイルの内容を表示します。"

#. Tag: para
#: ch06-server-configuration.xml:1786
#, no-c-format
msgid "Since the URLs do not contain any information about which version of the resource you wish to see, mod_dav_svn will always answer with the youngest version. This functionality has the wonderful side-effect that you can pass around Subversion URLs to your peers as references to documents, and those URLs will always point at the latest manifestation of that document. Of course, you can even use the URLs as hyperlinks from other web sites, too."
msgstr "URL は見たいと思うリソースのバージョンについての情報は含まれていない ので mod_dav_svn は常に最新のバージョンで答えます。この機能は Subversion URL をドキュメントの参照先として渡すことができ、その URL は常にドキュメントの最新を指すことになる、というすばらしい効果も あります。もちろん他のウェブサイトからのハイパーリンクとして URL を 利用することもできます。"

#. Tag: title
#: ch06-server-configuration.xml:1796
#, no-c-format
msgid "Can I view older revisions?"
msgstr "古いリビジョンを表示することはできますか?"

#. Tag: para
#: ch06-server-configuration.xml:1798
#, no-c-format
msgid "With an ordinary web browser? In one word: nope. At least, not with <command>mod_dav_svn</command> as your only tool."
msgstr "普通のウェブブラウザを使って、ですか? それは、ノーです。少なくとも 唯一のツールである<command>mod_dav_svn</command>なしには。"

#. Tag: para
#: ch06-server-configuration.xml:1802
#, fuzzy, no-c-format
msgid "Your web browser only speaks ordinary HTTP. That means it only knows how to GET public URLs, which represent the latest versions of files and directories. According to the WebDAV/DeltaV specification, each server defines a private URL syntax for older versions of resources, and that syntax is opaque to clients. To find an older version of a file, a client must follow a specific procedure to <quote>discover</quote> the proper URL; the procedure involves issuing a series of WebDAV PROPFIND requests and understanding DeltaV concepts. This is something your web browser simply can't do."
msgstr "あなたのブラウザは普通の HTTP しか理解することができません。つまり 公開された URL を GET コマンドで取得する方法しか理解できず、これは ファイルとディレクトリの最新バージョンを意味するからです。 WebDAV/DeltaVの仕様によれば、それぞれのサーバは古いバージョンの リソースを取得るための固有の URL 構文を持ちその構文はクライアント には透過的に見えるというものです。古いバージョンのファイルを見つける にはクライアントは特定の手続きによって適切な URL を<quote>発見 </quote>しなくてはなりません; その手続きはいくつかのWebDAV PROPFIND 要求を発行することとと、DeltaVの概念を含んでいます。これは ウェブブラウザで簡単にできるようなことではありません。"

#. Tag: para
#: ch06-server-configuration.xml:1814
#, fuzzy, no-c-format
msgid "So to answer the question, one obvious way to see older revisions of files and directories is by passing the <option>--revision (-r)</option> argument to the <command>svn list</command> and <command>svn cat</command> commands. To browse old revisions with your web browser, however, you can use third-party software. A good example of this is ViewVC (<ulink url=\"http://viewvc.tigris.org/\"></ulink>). ViewVC was originally written to display CVS repositories through the web, <footnote> <para>Back then, it was called <quote>ViewCVS</quote>.</para> </footnote> and the latest releases are able to understand Subversion repositories as well."
msgstr "それで、最初の問に答えとしては、ファイルやディレクトリの古いバージョン を見るための明らかな方法の一つは、<command>svn list</command>と、 <command>svn cat</command>コマンドに <option>--revision</option> 引数を渡すことです。しかしウェブブラウザで古いリビジョンを参照 するには、サードパーティー製のソフトウェアが必要になります。良い例は ViewCVS(<ulink url=\"http://viewcvs.tigris.org/\"></ulink>) です。ViewCVS は最初ウェブサーバで CVS リポジトリを表示するために 書かれましたが最新の開発バージョンでは(この文書を書いている時点では) Subversion リポジトリも理解することができます。"

#. Tag: title
#: ch06-server-configuration.xml:1832
#, no-c-format
msgid "Proper MIME Type"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:1834
#, no-c-format
msgid "When browsing a Subversion repository, the web browser gets a clue about how to render a file's contents by looking at the <literal>Content-Type:</literal> header returned in Apache's response to the HTTP <literal>GET</literal> request. The value of this header is some sort of MIME type. By default, Apache will tell the web browsers that all repository files are of the <quote>default</quote> MIME type, typically <literal>text/plain</literal>. This can be frustrating, however, if a user wishes repository files to render as something more meaningful&mdash;for example, it might be nice to have a <filename>foo.html</filename> file in the repository actually render as HTML when browsing."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:1849
#, no-c-format
msgid "To make this happen, you only need to make sure that your files have the proper <literal>svn:mime-type</literal> set. This is discussed in more detail in <xref linkend=\"svn.advanced.props.special.mime-type\"/>, and you can even configure your client to automatically attach proper <literal>svn:mime-type</literal> properties to files entering the repository for the first time; see <xref linkend=\"svn.advanced.props.auto\"/>."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:1859
#, no-c-format
msgid "So in our example, if one were to set the <literal>svn:mime-type</literal> property to <literal>text/html</literal> on file <filename>foo.html</filename>, then Apache would properly tell your web browser to render the file as HTML. One could also attach proper <literal>image/*</literal> mime-type properties to images, and by doing this, ultimately get an entire web site to be viewable directly from a repository! There's generally no problem with doing this, as long as the website doesn't contain any dynamically-generated content."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:1875
#, no-c-format
msgid "Customizing the Look"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:1877
#, no-c-format
msgid "You generally will get more use out of URLs to versioned files&mdash;after all, that's where the interesting content tends to lie. But you might have occasion to browse a Subversion directory listing, where you'll quickly note that the generated HTML used to display that listing is very basic, and certainly not intended to be aesthetically pleasing (or even interesting). To enable customization of these directory displays, Subversion provides an XML index feature. A single <literal>SVNIndexXSLT</literal> directive in your repository's <literal>Location</literal> block of <filename>httpd.conf</filename> will instruct mod_dav_svn to generate XML output when displaying a directory listing, and to reference the XSLT stylesheet of your choice:"
msgstr "一般的には、(ディレクトリへのURLに比べて) バージョン化されたファイルへ のURLのほうをよく使うことになるでしょう&mdash;結局のところ、関心のある内容 がありそうな場所は、そこなのですから。 しかし、Subversion のディレクトリ一覧を参照する機会はあるかも知れず、 その場合すぐに一覧表示で生成される HTML は非常に基本的なもので、美の追求 (や、何か面白いことをやらかそうということ)を目的としているわけではないの に気づくでしょう。このディレクトリ一覧をカスタマイズするために、 Subversion は XML インデックス機能を用意しています。 <filename>httpd.conf</filename>中で、リポジトリの<literal>Location</literal> ブロック中で単一の<literal>SVNIndexXSLT</literal>ディレクティブを使うと mod_dav_svn に対して、ディレクトリ一覧表示時に XML 出力を生成し、 好きな XSLT スタイルシートを参照するように設定することができます:"

#. Tag: screen
#: ch06-server-configuration.xml:1893
#, no-c-format
msgid ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"  SVNIndexXSLT \"/svnindex.xsl\"\n"
"  &hellip;\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"  SVNIndexXSLT \"/svnindex.xsl\"\n"
"  &hellip;\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1895
#, no-c-format
msgid "Using the <literal>SVNIndexXSLT</literal> directive and a creative XSLT stylesheet, you can make your directory listings match the color schemes and imagery used in other parts of your website. Or, if you'd prefer, you can use the sample stylesheets provided in the Subversion source distribution's <filename>tools/xslt/</filename> directory. Keep in mind that the path provided to the <literal>SVNIndexXSLT</literal> directory is actually a URL path&mdash;browsers need to be able to read your stylesheets in order to make use of them!"
msgstr "<literal>SVNIndexXSLT</literal>ディレクティブとクールな XSLT スタイル シートを使ってディレクトリ一覧をウェブサイトのほかの部分で利用されている 色スキーマや画像に一致させることができます。あるいは、もし望むなら Subversion ソース配布中の<filename>tools/xslt/</filename>ディレクトリ にあるサンプルスタイルシートを使うこともできます。 <literal>SVNIndexXSLT</literal> ディレクトリで指定されるパスは実際の URL パスであることに注意してください &mdash; ブラウザはそれを利用するためにはスタイルシートが読める場所に なければなりません!"

#. Tag: title
#: ch06-server-configuration.xml:1909
#, fuzzy, no-c-format
msgid "Listing Repositories"
msgstr "リポジトリの移行"

#. Tag: para
#: ch06-server-configuration.xml:1911
#, no-c-format
msgid "If you're serving a collection of repositories from a single URL via the <literal>SVNParentPath</literal> directive, then it's also possible to have Apache display all available repositories to a web browser. Just activate the <literal>SVNListParentPath</literal> directive:"
msgstr ""

#. Tag: screen
#: ch06-server-configuration.xml:1918
#, fuzzy, no-c-format
msgid ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"  SVNListParentPath on\n"
"  &hellip;\n"
"&lt;/Location&gt;"
msgstr ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  SVNParentPath /usr/local/svn\n"
"  SVNIndexXSLT \"/svnindex.xsl\"\n"
"  &hellip;\n"
"&lt;/Location&gt;"

#. Tag: para
#: ch06-server-configuration.xml:1920
#, no-c-format
msgid "If a user now points her web browser to the URL <literal>http://host.example.com/svn/</literal>, she'll see list of all Subversion repositories sitting in <filename>/usr/local/svn</filename>. Obviously, this can be a security problem, so this feature is turned off by default."
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:1933
#, no-c-format
msgid "Apache Logging"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:1935
#, no-c-format
msgid "Because Apache is an HTTP server at heart, it contains fantastically flexible logging features. It's beyond the scope of this book to discuss all ways logging can be configured, but we should point out that even the most generic <filename>httpd.conf</filename> file will cause Apache to produce two logs: <filename>error_log</filename> and <filename>access_log</filename>. These logs may appear in different places, but are typically created in the logging area of your Apache installation. (On Unix, they often live in <filename>/usr/local/apache2/logs/</filename>.)"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:1948
#, no-c-format
msgid "The <filename>error_log</filename> describes any internal errors that Apache runs into as it works. The <filename>access_log</filename> file records every incoming HTTP request received by Apache. This makes it easy to see, for example, which IP addresses Subversion clients are coming from, how often particular clients use the server, which users are authenticating properly, and which requests succeed or fail."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:1957
#, no-c-format
msgid "Unfortunately, because HTTP is a stateless protocol, even the simplest Subversion client operation generates multiple network requests. It's very difficult to look at the <filename>access_log</filename> and deduce what the client was doing&mdash;most operations look like a series of cryptic <literal>PROPPATCH</literal>, <literal>GET</literal>, <literal>PUT</literal>, and <literal>REPORT</literal> requests. To make things worse, many client operations send nearly-identical series of requests, so it's even harder to tell them apart."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:1968
#, no-c-format
msgid "<literal>mod_dav_svn</literal>, however, can come to your aid. By activating an <quote>operational logging</quote> feature, you can ask <literal>mod_dav_svn</literal> to create a separate log file describing what sort of high-level operations your clients are performing."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:1975
#, no-c-format
msgid "To do this, you need to make use of Apache's <literal>CustomLog</literal> directive (which is explained in more detail in Apache's own documentation). Be sure to invoke this directive <emphasis>outside</emphasis> of your Subversion <literal>Location</literal> block:"
msgstr ""

#. Tag: screen
#: ch06-server-configuration.xml:1982
#, no-c-format
msgid ""
"&lt;Location /svn&gt;\n"
"  DAV svn\n"
"  &hellip;\n"
"&lt;/Location&gt;\n"
"\n"
"CustomLog logs/svn_logfile \"%t %u %{SVN-ACTION}e\" env=SVN-ACTION"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:1984
#, no-c-format
msgid "In this example, we're asking Apache to create a special logfile <filename>svn_logfile</filename> in the standard Apache <filename>logs</filename> directory. The <literal>%t</literal> and <literal>%u</literal> variables are replaced by the time and username of the request, respectively. The really important part are the two instances of <literal>SVN-ACTION</literal>. When Apache sees that variable, it substitutes the value of the <literal>SVN-ACTION</literal> environment variable, which is automatically set by <literal>mod_dav_svn</literal> whenever it detects a high-level client action."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:1996
#, no-c-format
msgid "So instead of having to interpret a traditional <filename>access_log</filename> like this:"
msgstr ""

#. Tag: screen
#: ch06-server-configuration.xml:2000
#, no-c-format
msgid ""
"[26/Jan/2007:22:25:29 -0600] \"PROPFIND /svn/calc/!svn/vcc/default HTTP/1.1\" 207 398\n"
"[26/Jan/2007:22:25:29 -0600] \"PROPFIND /svn/calc/!svn/bln/59 HTTP/1.1\" 207 449\n"
"[26/Jan/2007:22:25:29 -0600] \"PROPFIND /svn/calc HTTP/1.1\" 207 647\n"
"[26/Jan/2007:22:25:29 -0600] \"REPORT /svn/calc/!svn/vcc/default HTTP/1.1\" 200 607\n"
"[26/Jan/2007:22:25:31 -0600] \"OPTIONS /svn/calc HTTP/1.1\" 200 188\n"
"[26/Jan/2007:22:25:31 -0600] \"MKACTIVITY /svn/calc/!svn/act/e6035ef7-5df0-4ac0-b811-4be7c823f998 HTTP/1.1\" 201 227\n"
"&hellip;"
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:2002
#, no-c-format
msgid "&hellip; you can instead peruse a much more intelligible <filename>svn_logfile</filename> like this:"
msgstr ""

#. Tag: screen
#: ch06-server-configuration.xml:2005
#, no-c-format
msgid ""
"[26/Jan/2007:22:24:20 -0600] - list-dir '/'\n"
"[26/Jan/2007:22:24:27 -0600] - update '/'\n"
"[26/Jan/2007:22:25:29 -0600] - remote-status '/'\n"
"[26/Jan/2007:22:25:31 -0600] sally commit r60"
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:2011
#, no-c-format
msgid "Other Features"
msgstr "その他の機能"

#. Tag: para
#: ch06-server-configuration.xml:2013
#, fuzzy, no-c-format
msgid "Several of the features already provided by Apache in its role as a robust Web server can be leveraged for increased functionality or security in Subversion as well. Subversion communicates with Apache using Neon, which is a generic HTTP/WebDAV library with support for such mechanisms as SSL (the Secure Socket Layer, discussed earlier). If your Subversion client is built to support SSL, then it can access your Apache server using <literal>https://</literal>."
msgstr "堅牢なウェブサーバとして Apache で既に提供されている機能のいくつかは Subversion においても機能とセキュリティーの向上につながります。 Subversion は Neon というSSL(安全なソケット層。既に述べました)や 圧縮(<command>gzip</command>や <command>PKZIP</command>と同じような アルゴリズムを使ってファイルより小さなデータの塊に<quote>縮める</quote> こと)のような仕組みをサポートした一般的なHTTP/WebDAV ライブラリを使って Apache と通信します。やらなくてはならないことは 単にSubversionとApacheで必要な機能をコンパイルし、そのような機能を使える ように正しくプログラムを設定することだけです。"

#. Tag: para
#: ch06-server-configuration.xml:2023
#, fuzzy, no-c-format
msgid "Equally useful are other features of the Apache and Subversion relationship, such as the ability to specify a custom port (instead of the default HTTP port 80) or a virtual domain name by which the Subversion repository should be accessed, or the ability to access the repository through an HTTP proxy. These things are all supported by Neon, so Subversion gets that support for free."
msgstr "それほどは面白くありませんが、やはり有用なことは Apache と Subversion に関係したその他の機能で、たとえば特定のポートを指定する機能( デフォルト HTTP ポートである 80 のかわりに)や、Subversion リポジトリが アクセスする仮想ドメイン名の機能や、プロキシ経由でリポジトリにアクセス する能力などがあります。これらはすべて Neon でサポートされているので、 Subversion は自由にその機能を利用することができます。"

#. Tag: para
#: ch06-server-configuration.xml:2031
#, fuzzy, no-c-format
msgid "Finally, because <command>mod_dav_svn</command> is speaking a subset of the WebDAV/DeltaV protocol, it's possible to access the repository via third-party DAV clients. Most modern operating systems (Win32, OS X, and Linux) have the built-in ability to mount a DAV server as a standard network share. This is a complicated topic; for details, read <xref linkend=\"svn.webdav\"/>."
msgstr "最後に<command>mod_dav_svn</command>は、ほぼ完全なWebDAV/DeltaV の方言を利用することができるのでサードパーティー製の DAV クライアント を経由してリポジトリにアクセスすることもできます。ほとんどのモダンな オペレーティングシステム(Win32, OS X そして Linux)では標準ネットワーク を<quote>共有</quote>することによって DAV サーバをマウントする組み込みの機能があります。 これは複雑な話題です; 詳細は<xref linkend=\"svn.webdav\"/>を読んでください。"

#. Tag: title
#: ch06-server-configuration.xml:2050
#, fuzzy, no-c-format
msgid "Path-Based Authorization"
msgstr "最後に修正した人"

#. Tag: para
#: ch06-server-configuration.xml:2052
#, no-c-format
msgid "Both Apache and <command>svnserve</command> are capable of granting (or denying) permissions to users. Typically this is done over the entire repository: a user can read the repository (or not), and she can write to the repository (or not). It's also possible, however, to define finer-grained access rules. One set of users may have permission to write to a certain directory in the repository, but not others; another directory might not even be readable by all but a few special people."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:2062
#, no-c-format
msgid "Both servers use a common file format to describe these path-based access rules. In the case of Apache, one needs to load the <command>mod_authz_svn</command> module and then add the <literal>AuthzSVNAccessFile</literal> directive (within the <filename>httpd.conf</filename> file) pointing to your own rules-file. (For a full explanation, see <xref linkend=\"svn.serverconfig.httpd.authz.perdir\"/>.) If you're using <command>svnserve</command>, then you need to make the <literal>authz-db</literal> variable (within <filename>svnserve.conf</filename>) point to your rules-file."
msgstr ""

#. Tag: sect1
#: ch06-server-configuration.xml:2072
#, no-c-format
msgid ""
"<sidebar> <title>Do you really need path-based access control?</title> <para>A lot of administrators setting up Subversion for the first time tend to jump into path-based access control without giving it a lot of thought. The administrator usually knows which teams of people are working on which projects, so it's easy to jump in and grant certain teams access to certain directories and not others. It seems like a natural thing, and it appeases the administrator's desire to maintain tight control of the repository.</para> <para>Note, though, that there are often invisible (and visible!) costs associated with this feature. In the visible category, the server needs to do a lot more work to ensure that the user has the right to read or write each specific path; in certain situations, there's very noticeable performance loss. In the invisible category, consider the culture you're creating. Most of the time, while certain users <emphasis>shouldn't</emphasis> be committing changes to certain parts of the repository, that social contract doesn't need to be technologically enforced. Teams can sometimes spontaneously collaborate with each other; someone may want to help someone else out by committing to an area she doesn't normally work on. By preventing this sort of thing at the server level, you're setting up barriers to unexpected collaboration. You're also creating a bunch of rules that need to be maintained as projects develop, new users are added, and so on. It's a bunch of extra work to maintain.</para> <para>Remember that this is a version control system! Even if somebody accidentally commits a change to something they shouldn't, it's easy to undo the change. And if a user commits to the wrong place with deliberate malice, then it's a social problem anyway, and that the problem needs to be dealt with outside of Subversion.</para> <para>So before you begin restricting users' access rights, ask yourself if there's a real, honest need for this, or if it's just something that <quote>sounds good</quote> to an administrator. Decide whether it's worth sacrificing some server speed for, and remember that there's very little risk involved; it's bad to become dependent on technology as a crutch for social problems.<footnote><para>A common theme in this book!</para></footnote>.</para> <para>As an example to ponder, consider that the Subversion project itself has always had a notion of who is allowed to commit where, but it's always been enforced socially. This is a good model of community trust, especially for open-source projects. Of course, sometimes there <emphasis>are</emphasis> truly legitimate needs for path-based access control; within corporations, for example, certain types of data really can be sensitive, and access needs to be genuinely restricted to small groups of people.</para> </sidebar> <para>Once your server knows where to find your rules-file, it's time to define the rules.</para> <para>The syntax of the file is the same familiar one used by <command>svnserve.conf</command> and the runtime configuration files. Lines that start with a hash (<literal>#</literal>) are ignored. In its simplest form, each section names a repository and path within it, and the authenticated usernames are the option names within each section. The value of each option describes the user's level of access to the repository path: either <literal>r</literal> (read-only) or <literal>rw</literal> (read-write). If the user is not mentioned at all, no access is allowed.</para> <para>To be more specific: the value of the section-names are either of the form <literal>[repos-name:path]</literal> or the form <literal>[path]</literal>. If you're using the <literal>SVNParentPath</literal> directive, then it's important to specify the repository names in your sections. If you omit them, then a section like <literal>[/some/dir]</literal> will match the path <filename>/some/dir</filename> in <emphasis>every</emphasis> repository. If you're using the <literal>SVNPath</literal> directive, however, then it's fine to only define paths in your sections&mdash;after all, there's only one repository.</para> <screen>\n"
"[calc:/branches/calc/bug-142]\n"
"harry = rw\n"
"sally = r\n"
"</screen> <para>In this first example, the user <literal>harry</literal> has full read and write access on the <filename>/branches/calc/bug-142</filename> directory in the <literal>calc</literal> repository, but the user <literal>sally</literal> has read-only access. Any other users are blocked from accessing this directory.</para> <para>Of course, permissions are inherited from parent to child directory. That means that we can specify a subdirectory with a different access policy for Sally:</para> <screen>\n"
"[calc:/branches/calc/bug-142]\n"
"harry = rw\n"
"sally = r\n"
"\n"
"# give sally write access only to the 'testing' subdir\n"
"[calc:/branches/calc/bug-142/testing]\n"
"sally = rw\n"
"</screen> <para>Now Sally can write to the <filename>testing</filename> subdirectory of the branch, but can still only read other parts. Harry, meanwhile, continues to have complete read-write access to the whole branch.</para> <para>It's also possible to explicitly deny permission to someone via inheritance rules, by setting the username variable to nothing:</para> <screen>\n"
"[calc:/branches/calc/bug-142]\n"
"harry = rw\n"
"sally = r\n"
"\n"
"[calc:/branches/calc/bug-142/secret]\n"
"harry =\n"
"</screen> <para>In this example, Harry has read-write access to the entire <filename>bug-142</filename> tree, but has absolutely no access at all to the <filename>secret</filename> subdirectory within it.</para> <para>The thing to remember is that the most specific path always matches first. The server tries to match the path itself, and then the parent of the path, then the parent of that, and so on. The net effect is that mentioning a specific path in the accessfile will always override any permissions inherited from parent directories.</para> <para>By default, nobody has any access to the repository at all. That means that if you're starting with an empty file, you'll probably want to give at least read permission to all users at the root of the repository. You can do this by using the asterisk variable (<literal>*</literal>), which means <quote>all users</quote>:</para> <screen>\n"
"[/]\n"
"* = r\n"
"</screen> <para>This is a common setup; notice that there's no repository name mentioned in the section name. This makes all repositories world readable to all users. Once all users have read-access to the repositories, you can give explicit <literal>rw</literal> permission to certain users on specific subdirectories within specific repositories.</para> <para>The asterisk variable (<literal>*</literal>) is also worth special mention here: it's the <emphasis>only</emphasis> pattern which matches an anonymous user. If you've configured your server block to allow a mixture of anonymous and authenticated access, all users start out accessing anonymously. The server looks for a <literal>*</literal> value defined for the path being accessed; if it can't find one, then it demands real authentication from the client.</para> <para>The access file also allows you to define whole groups of users, much like the Unix <filename>/etc/group</filename> file:</para> <screen>\n"
"[groups]\n"
"calc-developers = harry, sally, joe\n"
"paint-developers = frank, sally, jane\n"
"everyone = harry, sally, joe, frank, sally, jane\n"
"</screen> <para>Groups can be granted access control just like users. Distinguish them with an <quote>at</quote> (<literal>@</literal>) prefix:</para> <screen>\n"
"[calc:/projects/calc]\n"
"@calc-developers = rw\n"
"\n"
"[paint:/projects/paint]\n"
"@paint-developers = rw\n"
"jane = r\n"
"</screen> <para>Groups can also be defined to contain other groups:</para> <screen>\n"
"[groups]\n"
"calc-developers = harry, sally, joe\n"
"paint-developers = frank, sally, jane\n"
"everyone = @calc-developers, @paint-developers\n"
"</screen> <sidebar> <title>Partial Readability and Checkouts</title> <para>If you're using Apache as your Subversion server and have made certain subdirectories of your repository unreadable to certain users, then you need to be aware of a possible non-optimal behavior with <command>svn checkout</command>.</para> <para>When the client requests a checkout or update over HTTP, it makes a single server request, and receives a single (often large) server response. When the server receives the request, that is the <emphasis>only</emphasis> opportunity Apache has to demand user authentication. This has some odd side-effects. For example, if a certain subdirectory of the repository is only readable by user Sally, and user Harry checks out a parent directory, his client will respond to the initial authentication challenge as Harry. As the server generates the large response, there's no way it can re-send an authentication challenge when it reaches the special subdirectory; thus the subdirectory is skipped altogether, rather than asking the user to re-authenticate as Sally at the right moment. In a similar way, if the root of the repository is anonymously world-readable, then the entire checkout will be done without authentication&mdash;again, skipping the unreadable directory, rather than asking for authentication partway through.</para> </sidebar>"
msgstr ""

#. Tag: title
#: ch06-server-configuration.xml:2278
#, no-c-format
msgid "Supporting Multiple Repository Access Methods"
msgstr "複数リポジトリアクセス方法のサポート"

#. Tag: para
#: ch06-server-configuration.xml:2280
#, no-c-format
msgid "You've seen how a repository can be accessed in many different ways. But is it possible&mdash;or safe&mdash;for your repository to be accessed by multiple methods simultaneously? The answer is yes, provided you use a bit of foresight."
msgstr "いろいろな異なる方法でどのようにしてリポジトリにアクセスするかを見て きました。しかし、複数の方法で同時にあるリポジトリにアクセスすることは 可能&mdash;あるいは安全に&mdash;なのでしょうか? 答えはイエスです。少し ばかり慎重になる必要はありますが。"

#. Tag: para
#: ch06-server-configuration.xml:2285
#, no-c-format
msgid "At any given time, these processes may require read and write access to your repository:"
msgstr "ある時刻において、以下のようなプロセスがあなたのリポジトリに対して 読み出しアクセス、あるいは書き込みアクセス要求を出しているかも知れません :"

#. Tag: para
#: ch06-server-configuration.xml:2290
#, fuzzy, no-c-format
msgid "regular system users using a Subversion client (as themselves) to access the repository directly via <literal>file://</literal> URLs;"
msgstr "Subversion クライアントを使って (自分自身の名のもとに)<literal>file:///</literal>URLを 指定することで直接リポジトリにアクセスする通常のユーザによって:"

#. Tag: para
#: ch06-server-configuration.xml:2295
#, no-c-format
msgid "regular system users connecting to SSH-spawned private <command>svnserve</command> processes (running as themselves) which access the repository;"
msgstr "リポジトリにアクセスするプライベートに SSH-起動された<command>svnserve</command> プロセスに接続する通常のシステムユーザによって:"

#. Tag: para
#: ch06-server-configuration.xml:2300
#, no-c-format
msgid "an <command>svnserve</command> process&mdash;either a daemon or one launched by <command>inetd</command>&mdash;running as a particular fixed user;"
msgstr "デーモンとして、または<command>inetd</command>によって起動された<command>svnserve</command> プロセスが、特定の固定されたユーザとして実行されることによって:"

#. Tag: para
#: ch06-server-configuration.xml:2306
#, no-c-format
msgid "an Apache <command>httpd</command> process, running as a particular fixed user."
msgstr "Apache <command>httpd</command> プロセスが、特定の固定されたユーザとして実行 されることによって"

#. Tag: para
#: ch06-server-configuration.xml:2311
#, no-c-format
msgid "The most common problem administrators run into is repository ownership and permissions. Does every process (or user) in the previous list have the rights to read and write the Berkeley DB files? Assuming you have a Unix-like operating system, a straightforward approach might be to place every potential repository user into a new <literal>svn</literal> group, and make the repository wholly owned by that group. But even that's not enough, because a process may write to the database files using an unfriendly umask&mdash;one that prevents access by other users."
msgstr "管理者が直面する一番よくある問題はリポジトリの所有権とパーミッションです。 上のリストにあるすべてのプロセス(あるいはユーザ)は Berkeley DB ファイルに対する 読み書きの権限を持っていますか? あなたが Unix風のオペレーティングシステム を使っているとして、一番素直な解決方法は、すべての潜在的なリポジトリユーザ を新しい<literal>svn</literal>グループに入れてしまい、リポジトリをその グループによって完全に所有されている形にしてしまうことです。しかし それだけでは十分ではありません。プロセスはデータベースファイルに、排他的な umask で書き込むかも知れません&mdash;それは他のユーザがアクセスするのを 妨害してしまいます。"

#. Tag: para
#: ch06-server-configuration.xml:2322
#, no-c-format
msgid "So the next step beyond setting up a common group for repository users is to force every repository-accessing process to use a sane umask. For users accessing the repository directly, you can make the <command>svn</command> program into a wrapper script that first sets <command>umask 002</command> and then runs the real <command>svn</command> client program. You can write a similar wrapper script for the <command>svnserve</command> program, and add a <command>umask 002</command> command to Apache's own startup script, <filename>apachectl</filename>. For example:"
msgstr "それでリポジトリユーザの共通グループ設定の後の次のステップはすべてのリポジトリ アクセスプロセスで、正しい umask を使うことです。リポジトリに直接アクセスする ユーザの場合は<command>svn</command>プログラムをくるんでしまうスクリプトを 作り、その先頭で<command>umask 002</command>を設定してから実際の<command>svn</command> クライアントプログラムを実行すれば良いでしょう。同様のラッパースクリプトを <command>svnserve</command>についても書き、Apache の起動スクリプト <filename>apachectl</filename>の先頭にも<command>umask 002</command>コマンドを 追加しましょう。たとえば:"

#. Tag: screen
#: ch06-server-configuration.xml:2333
#, no-c-format
msgid ""
"$ cat /usr/bin/svn\n"
"\n"
"#!/bin/sh\n"
"\n"
"umask 002\n"
"/usr/bin/svn-real \"$@\""
msgstr ""
"$ cat /usr/bin/svn\n"
"\n"
"#!/bin/sh\n"
"\n"
"umask 002\n"
"/usr/bin/svn-real \"$@\""

#. Tag: para
#: ch06-server-configuration.xml:2335
#, no-c-format
msgid "Another common problem is often encountered on Unix-like systems. As a repository is used, Berkeley DB occasionally creates new log files to journal its actions. Even if the repository is wholly owned by the <command>svn</command> group, these newly created files won't necessarily be owned by that same group, which then creates more permissions problems for your users. A good workaround is to set the group SUID bit on the repository's <filename>db</filename> directory. This causes all newly-created log files to have the same group owner as the parent directory."
msgstr "また別のよくある問題が Unix風システムではよく起こります。 リポジトリが利用されると BerkeleyDB は必要におうじて新しい ログファイルを作り動作を記録します。リポジトリ自体は 完全に<command>svn</command>グループによって所有されていても このようにして新規に作られたファイルが同じグループによって 所有される必要はありません。これが理由でユーザにとっては また別のパーミッションの問題がおこります。うまい回避策としては リポジトリのある<filename>db</filename>ディレクトリにたいして グループ SUID ビットを立てることです。これによって すべての新たに作成されるログファイルは親ディレクトリと 同じ所有グループになります。"

#. Tag: para
#: ch06-server-configuration.xml:2346
#, no-c-format
msgid "Once you've jumped through these hoops, your repository should be accessible by all the necessary processes. It may seem a bit messy and complicated, but the problems of having multiple users sharing write-access to common files are classic ones that are not often elegantly solved."
msgstr "いったんこの問題を乗り越えてしまえば、あなたのリポジトリは すべての必要なプロセスからアクセスすることができるようになって いるはずです。少し面倒で複雑ですが、複数のユーザが書き込みアクセス を共有することで起こる問題は、しばしばきれいに解くことができない 古典的な問題です。"

#. Tag: para
#: ch06-server-configuration.xml:2352
#, no-c-format
msgid "Fortunately, most repository administrators will never <emphasis>need</emphasis> to have such a complex configuration. Users who wish to access repositories that live on the same machine are not limited to using <literal>file://</literal> access URLs&mdash;they can typically contact the Apache HTTP server or <command>svnserve</command> using <literal>localhost</literal> for the server name in their <literal>http://</literal> or <literal>svn://</literal> URLs. And to maintain multiple server processes for your Subversion repositories is likely to be more of a headache than necessary. We recommend you choose the server that best meets your needs and stick with it!"
msgstr "ありがたいことに、ほとんどのリポジトリ管理者はそのような複雑な 設定をする<emphasis>必要</emphasis>はないでしょう。 同じマシン上にあるリポジトリにアクセスしたいと思うユーザは <literal>file://</literal>アクセス URL を利用することに制限されて いるわけではありません&mdash; <literal>http://</literal>や <literal>svn://</literal>URL中にサーバ名として <literal>localhost</literal> を指定する形でApache HTTP サーバや<command>svnserve</command> を使うこともできるのです。そして複数のサーバプロセスを Subversion リポジトリのために管理することは頭痛の種を増やすだけのことです。 自分のニーズに本当に合ったサーバ構成を選択し、そこにしがみついて 離れない、これがおすすめの方法です!"

#. Tag: title
#: ch06-server-configuration.xml:2366
#, no-c-format
msgid "The svn+ssh:// server checklist"
msgstr "svn+ssh:// サーバのチェックリスト"

#. Tag: para
#: ch06-server-configuration.xml:2368
#, no-c-format
msgid "It can be quite tricky to get a bunch of users with existing SSH accounts to share a repository without permissions problems. If you're confused about all the things that you (as an administrator) need to do on a Unix-like system, here's a quick checklist that resummarizes some of things discussed in this section:"
msgstr "パーミッションの問題を回避してリポジトリを共有するように既存の SSH アカウントのある複数のユーザを設定するのはとても技巧的な話しになるかも しれません。Unix風システム上で(管理者として)やらなくてはならない 作業に混乱した時にそなえてこの節で議論した内容をもう１度まとめて チェックリストにしておきます:"

#. Tag: para
#: ch06-server-configuration.xml:2377
#, fuzzy, no-c-format
msgid "All of your SSH users need to be able to read and write to the repository, so: put all the SSH users into a single group."
msgstr "すべてのSSH ユーザはリポジトリに対して読み書きの権限を持っていなくては なりません。すべての SSH ユーザを一つのグループにまとめてください。 リポジトリ全体をそのグループの所有とし、グループパーミッションに 読み書き許可を与えてください。"

#. Tag: para
#: ch06-server-configuration.xml:2382
#, no-c-format
msgid "Make the repository wholly owned by that group."
msgstr ""

#. Tag: para
#: ch06-server-configuration.xml:2385
#, fuzzy, no-c-format
msgid "Set the group permissions to read/write."
msgstr "グループパーミッション制御"

#. Tag: para
#: ch06-server-configuration.xml:2387
#, fuzzy, no-c-format
msgid "Your users need to use a sane umask when accessing the repository, so: make sure that <command>svnserve</command> (<filename>/usr/bin/svnserve</filename>, or wherever it lives in <literal>$PATH</literal>) is actually a wrapper script which sets <command>umask 002</command> and executes the real <command>svnserve</command> binary."
msgstr "リポジトリにアクセスするためには、ユーザは正しい umask を使う必要があり ます。 <command>svnserve</command>(これは <filename>/usr/bin/svnserve</filename>、あるいは <literal>$PATH</literal>のどこかにあります)が、<command>umask 002</command> 設定後本当の<command>svnserve</command>バイナリを実行するプログラムで あることを確認してください。<command>svnlook</command> と <command>svnadmin</command> を使う場合にも同じ方法をとってください。 正しい umask で実行するか、上で説明したようにラッパースクリプトで くるんでください。"

#. Tag: para
#: ch06-server-configuration.xml:2395
#, no-c-format
msgid "Take similar measures when using <command>svnlook</command> and <command>svnadmin</command>. Either run them with a sane umask, or wrap them as described above."
msgstr ""

#. Tag: title
#: ch07-customizing-svn.xml:2
#, no-c-format
msgid "Customizing Your Subversion Experience"
msgstr ""

#. Tag: para
#: ch07-customizing-svn.xml:4
#, no-c-format
msgid "Version control can be a complex subject, as much art as science, and offering myriad ways of getting stuff done. Throughout this book you've read of the various Subversion command-line client subcommands and the options which modify their behavior. In this chapter, we'll look into still more ways to customize the way Subversion works for you&mdash;setting up the Subversion runtime configuration, using external helper applications, Subversion's interaction with the operating system's configured locale, and so on."
msgstr ""

#. Tag: title
#: ch07-customizing-svn.xml:24
#, no-c-format
msgid "Runtime Configuration Area"
msgstr "実行時設定領域"

#. Tag: para
#: ch07-customizing-svn.xml:26
#, fuzzy, no-c-format
msgid "Subversion provides many optional behaviors that can be controlled by the user. Many of these options are of the kind that a user would wish to apply to all Subversion operations. So, rather than forcing users to remember command-line arguments for specifying these options, and to use them for every operation they perform, Subversion uses configuration files, segregated into a Subversion configuration area."
msgstr "Subversionはたくさんのオプションの振る舞いを用意していて、それはユーザに よって制御することができます。そのようなオプションの多くはユーザがすべての Subversion操作に適用したいと思うようなことです。それで、このようなオプション を指定するためにユーザにコマンドライン引数を思い出させるように強いるよりも また、実行しようとするすべての操作に対してそれらを使うよりも、Subversionは 定義ファイルを使います。それはSubversionの定義領域に分離されているものです。"

#. Tag: para
#: ch07-customizing-svn.xml:34
#, no-c-format
msgid "The Subversion <firstterm>configuration area</firstterm> is a two-tiered hierarchy of option names and their values. Usually, this boils down to a special directory that contains <firstterm>configuration files</firstterm> (the first tier), which are just text files in standard INI format (with <quote>sections</quote> providing the second tier). These files can be easily edited using your favorite text editor (such as Emacs or vi), and contain directives read by the client to determine which of several optional behaviors the user prefers."
msgstr "Subversionの<firstterm>設定領域</firstterm> は二層に分かれたオプション名と 値の階層です。普通、これは<firstterm>定義ファイル</firstterm> (最初の 層)を含む特別なディレクトリに要約してあり、それは標準的なINI形式の テキストファイルにすぎません。(そこには<quote>sections</quote> があり、 それが第二層になります)これらのファイルは好きなテキストエディタを 使って簡単に編集することができます。(emacs とか vi とか) そして、クライアント によって読み出される命令を含んでいて、ユーザが好むさまざまなオプションの 振る舞いをどうするかを決定します。"

#. Tag: title
#: ch07-customizing-svn.xml:47
#, no-c-format
msgid "Configuration Area Layout"
msgstr "設定領域のレイアウト"

#. Tag: para
#: ch07-customizing-svn.xml:49
#, no-c-format
msgid "The first time that the <command>svn</command> command-line client is executed, it creates a per-user configuration area. On Unix-like systems, this area appears as a directory named <filename>.subversion</filename> in the user's home directory. On Win32 systems, Subversion creates a folder named <filename>Subversion</filename>, typically inside the <filename>Application Data</filename> area of the user's profile directory (which, by the way, is usually a hidden directory). However, on this platform the exact location differs from system to system, and is dictated by the Windows registry. <footnote> <para>The <literal>APPDATA</literal> environment variable points to the <filename>Application Data</filename> area, so you can always refer to this folder as <filename>%APPDATA%\\Subversion</filename>.</para> </footnote> We will refer to the per-user configuration area using its Unix name, <filename>.subversion</filename>."
msgstr "<command>svn</command>コマンドラインクライアントが最初に実行されると、 それはユーザごとの構成領域を作ります。Unix風のシステムなら、この領域は ユーザのホームディレクトリに、<filename>.subversion</filename> という名前の ディレクトリとして用意されます。Win32システムでは、Subversionは <filename>Subversion</filename>という名前のフォルダを作ります。普通には ユーザプロファイルディレクトリ(これは通常は隠れたディレクトリになりますが) の<filename>Application Data</filename> 領域 の内部になります。しかし、このプラットフォームでは、完全な場所はシステム ごとに違っていて、本当の場所はWindowsレジストリ <footnote> <para><literal>APPDATA</literal> 環境変数は <filename>Application Data</filename> 領域を 指しているので、常にそのフォルダを<filename>%APPDATA%¥Subversion</filename> のように参照することができます。 </para> </footnote> に設定されています。 ユーザごとの設定領域は、Unix での名前である<filename>.subversion</filename> を使って参照することにします。"

#. Tag: para
#: ch07-customizing-svn.xml:69
#, no-c-format
msgid "In addition to the per-user configuration area, Subversion also recognizes the existence of a system-wide configuration area. This gives system administrators the ability to establish defaults for all users on a given machine. Note that the system-wide configuration area does not alone dictate mandatory policy&mdash;the settings in the per-user configuration area override those in the system-wide one, and command-line arguments supplied to the <command>svn</command> program have the final word on behavior. On Unix-like platforms, the system-wide configuration area is expected to be the <filename>/etc/subversion</filename> directory; on Windows machines, it looks for a <filename>Subversion</filename> directory inside the common <filename>Application Data</filename> location (again, as specified by the Windows Registry). Unlike the per-user case, the <command>svn</command> program does not attempt to create the system-wide configuration area."
msgstr "ユーザごとの設定領域に加えて、Subversionはシステム全体の設定領域も 理解することができます。これはシステム管理者にあるマシン上での すべてのユーザに対するデフォルトを設定する力を与えます。システム全体 の設定領域は必須のポリシーがあるわけではありません&mdash;ユーザ ごとの設定領域は、システム全体の領域を上書きし、<command>svn</command> プログラムに与えるコマンドライン引数は振る舞いを決める最後の場所に なります。Unix風のプラットフォームでは、システム全体の設定領域は <filename>/etc/subversion</filename> ディレクトリにあると期待されて います。Windows マシンの場合は共通<filename>アプリケーション データ </filename> 領域の内部にある <filename>Subversion</filename>ディレクトリを見に行きます (このディレクトリもWindows レジストリによって指定されます)。 ユーザごとの場合と違って、<command>svn</command> プログラムは システム全体の設定領域を作ろうとはしません。"

#. Tag: para
#: ch07-customizing-svn.xml:87
#, fuzzy, no-c-format
msgid "The per-user configuration area currently contains three files&mdash;two configuration files (<filename>config</filename> and <filename>servers</filename>), and a <filename>README.txt</filename> file which describes the INI format. At the time of their creation, the files contain default values for each of the supported Subversion options, mostly commented out and grouped with textual descriptions about how the values for the key affect Subversion's behavior. To change a certain behavior, you need only to load the appropriate configuration file into a text editor, and modify the desired option's value. If at any time you wish to have the default configuration settings restored, you can simply remove (or rename) your configuration directory and then run some innocuous <command>svn</command> command, such as <command>svn --version</command>. A new configuration directory with the default contents will be created."
msgstr "<filename>.subversion</filename> ディレクトリは現在のところ 三つのファイルを含んでいます&mdash;二つの設定ファイル (<filename>config</filename> と <filename>servers</filename>です)、それに <filename>README.txt</filename> ファイルで、これはINI形式を 説明するものです。それらの生成時には、ファイルはSubversion がサポートするそれぞれのオプションのデフォルト値が入っており、 ほとんどがコメントアウトされていて、さらに、どのようにキーに対する 値がSubversionの振る舞いに影響するかということについて、テキストの 説明付きでグループ化されています。何かの振る舞いを変えるためには 関連する設定ファイルをテキストエディタで開き、必要なオプション値で 修正することだけが必要です。 もし設定をデフォルトに戻したい場合は、いつでも単にその設定ディレクトリを 削除し、何か無害な<command>svn</command>コマンド、たとえば <command>svn --version</command>のようなものを実行することができます。 新しい設定用ディレクトリがデフォルト値を含む形で生成されます。"

#. Tag: para
#: ch07-customizing-svn.xml:104
#, no-c-format
msgid "The per-user configuration area also contains a cache of authentication data. The <filename>auth</filename> directory holds a set of subdirectories that contain pieces of cached information used by Subversion's various supported authentication methods. This directory is created in such a way that only the user herself has permission to read its contents."
msgstr "ユーザごとの設定領域は認証データのキャッシュも含みます。<filename>auth</filename> ディレクトリは Subversionでサポートされているさまざまな認証方法で利用される キャッシュ情報の要素を含むサブディレクトリの集まりを保持します。 このディレクトリはユーザ自身だけがその内容を読むことができるような形に 作成されます。"

#. Tag: title
#: ch07-customizing-svn.xml:116
#, no-c-format
msgid "Configuration and the Windows Registry"
msgstr "設定と、Windowsのレジストリ"

#. Tag: para
#: ch07-customizing-svn.xml:118
#, no-c-format
msgid "In addition to the usual INI-based configuration area, Subversion clients running on Windows platforms may also use the Windows registry to hold the configuration data. The option names and their values are the same as in the INI files. The <quote>file/section</quote> hierarchy is preserved as well, though addressed in a slightly different fashion&mdash;in this schema, files and sections are just levels in the registry key tree."
msgstr "普通の INIベースの設定領域に加えて、Windowsプラットフォーム上で実行されて いるSubversionクライアントはWindowsのレジストリも設定データを格納する場所 として利用することができます。オプション名とその値は INIファイル中と同じ です。<quote>file/section</quote> の階層関係も保存されます。わずかに異なる 方法によりますが&mdash;この方法では、ファイルとセクションは単にレジストリ キーのツリーの階層にしかすぎません。"

#. Tag: para
#: ch07-customizing-svn.xml:127
#, no-c-format
msgid "Subversion looks for system-wide configuration values under the <literal>HKEY_LOCAL_MACHINE\\Software\\Tigris.org\\Subversion</literal> key. For example, the <literal>global-ignores</literal> option, which is in the <literal>miscellany</literal> section of the <filename>config</filename> file, would be found at <literal>HKEY_LOCAL_MACHINE\\Software\\Tigris.org\\Subversion\\Config\\Miscellany\\global-ignores</literal>. Per-user configuration values should be stored under <literal>HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion</literal>."
msgstr "Subversionはシステム全体の設定値を <literal>HKEY_LOCAL_MACHINE¥Software¥Tigris.org¥Subversion</literal>キー の元で検削ｳ駈ｵます。たとえば<literal>global-ignores</literal> オプション、 これは<filename>config</filename> ファイルの<literal>miscellany</literal> セクションにありますが、<literal>HKEY_LOCAL_MACHINE¥Software¥Tigris.org¥Subversion¥Config¥Miscellany¥global-ignores</literal>に見つけることができます。 ユーザごとの設定値は <literal>HKEY_CURRENT_USER¥Software¥Tigris.org¥Subversion</literal>. の下に格納されるはずです。"

#. Tag: para
#: ch07-customizing-svn.xml:138
#, fuzzy, no-c-format
msgid "Registry-based configuration options are parsed <emphasis>before</emphasis> their file-based counterparts, so are overridden by values found in the configuration files. In other words, Subversion looks for configuration information in the following locations on a Windows system; lower-numbered locations take precedence over higher-numbered locations:"
msgstr "レジストリベースの設定オプションは、ファイルベースの残りの部分を 検削ｳ駈ｷる<emphasis>前に</emphasis> 検削ｳ駈ｳれます。それで、 このようなオプションは、設定ファイル中で見つかった値によって上書き されます。言い換えると、設定のプライオリティは Windowsシステムの 場合、以下の順序となることが保証されています:"

#. Tag: para
#: ch07-customizing-svn.xml:147
#, no-c-format
msgid "Command-line options"
msgstr "コマンドラインオプション"

#. Tag: para
#: ch07-customizing-svn.xml:150
#, no-c-format
msgid "The per-user INI files"
msgstr "ユーザごとのINIファイル"

#. Tag: para
#: ch07-customizing-svn.xml:153
#, no-c-format
msgid "The per-user Registry values"
msgstr "ユーザごとのレジストリ値"

#. Tag: para
#: ch07-customizing-svn.xml:156
#, no-c-format
msgid "The system-wide INI files"
msgstr "システム全体のINIファイル"

#. Tag: para
#: ch07-customizing-svn.xml:159
#, no-c-format
msgid "The system-wide Registry values"
msgstr "システム全体のレジストリ値"

#. Tag: para
#: ch07-customizing-svn.xml:163
#, no-c-format
msgid "Also, the Windows Registry doesn't really support the notion of something being <quote>commented out</quote>. However, Subversion will ignore any option key whose name begins with a hash (<literal>#</literal>) character. This allows you to effectively comment out a Subversion option without deleting the entire key from the Registry, obviously simplifying the process of restoring that option."
msgstr "また、Windowsレジストリは<quote>コメントアウト</quote> のような概念をサポートしていません。しかし、Subversionは、 キーの名前がハッシュ文字(<literal>#</literal>) で始まるような すべてのオプションを無視します。これで実際にはSubversionのオプション を、レジストリから完全にキーを消さずにコメントアウトすることができます。 明らかに、そのオプションの設定作業は簡単にしています。"

#. Tag: para
#: ch07-customizing-svn.xml:171
#, no-c-format
msgid "The <command>svn</command> command-line client never attempts to write to the Windows Registry, and will not attempt to create a default configuration area there. You can create the keys you need using the <command>REGEDIT</command> program. Alternatively, you can create a <filename>.reg</filename> file, and then double-click on that file from the Explorer shell, which will cause the data to be merged into your registry."
msgstr "<command>svn</command> コマンドラインクライアントはWindowsの レジストリに書き込むことは決してありませんし、そこに デフォルトの設定値を作ろうともしません。必要なキーは <command>REGEDIT</command>プログラムで作ることができます。他の方法 としては、<filename>.reg</filename> ファイルを作り、エクスプローラ シェルからそのファイルをダブルクリックすると、そのデータが レジストリにマージされます。"

#. Tag: title
#: ch07-customizing-svn.xml:181
#, no-c-format
msgid "Sample Registration Entries (.reg) File."
msgstr "レジストリエントリ(.reg) ファイルの例"

#. Tag: programlisting
#: ch07-customizing-svn.xml:183
#, fuzzy, no-c-format
msgid ""
"REGEDIT4\n"
"\n"
"[HKEY_LOCAL_MACHINE\\Software\\Tigris.org\\Subversion\\Servers\\groups]\n"
"\n"
"[HKEY_LOCAL_MACHINE\\Software\\Tigris.org\\Subversion\\Servers\\global]\n"
"\"#http-proxy-host\"=\"\"\n"
"\"#http-proxy-port\"=\"\"\n"
"\"#http-proxy-username\"=\"\"\n"
"\"#http-proxy-password\"=\"\"\n"
"\"#http-proxy-exceptions\"=\"\"\n"
"\"#http-timeout\"=\"0\"\n"
"\"#http-compression\"=\"yes\"\n"
"\"#neon-debug-mask\"=\"\"\n"
"\"#ssl-authority-files\"=\"\"\n"
"\"#ssl-trust-default-ca\"=\"\"\n"
"\"#ssl-client-cert-file\"=\"\"\n"
"\"#ssl-client-cert-password\"=\"\"\n"
"\n"
"[HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion\\Config\\auth]\n"
"\"#store-passwords\"=\"yes\"\n"
"\"#store-auth-creds\"=\"yes\"\n"
"\n"
"[HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion\\Config\\helpers]\n"
"\"#editor-cmd\"=\"notepad\"\n"
"\"#diff-cmd\"=\"\"\n"
"\"#diff3-cmd\"=\"\"\n"
"\"#diff3-has-program-arg\"=\"\"\n"
"\n"
"[HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion\\Config\\tunnels]\n"
"\n"
"[HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion\\Config\\miscellany]\n"
"\"#global-ignores\"=\"*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#* .DS_Store\"\n"
"\"#log-encoding\"=\"\"\n"
"\"#use-commit-times\"=\"\"\n"
"\"#no-unlock\"=\"\"\n"
"\"#enable-auto-props\"=\"\"\n"
"\n"
"[HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion\\Config\\auto-props]"
msgstr ""
"REGEDIT4\n"
"\n"
"[HKEY_LOCAL_MACHINE¥Software¥Tigris.org¥Subversion¥Servers¥groups]\n"
"\n"
"[HKEY_LOCAL_MACHINE¥Software¥Tigris.org¥Subversion¥Servers¥global]\n"
"\"#http-proxy-host\"=\"\"\n"
"\"#http-proxy-port\"=\"\"\n"
"\"#http-proxy-username\"=\"\"\n"
"\"#http-proxy-password\"=\"\"\n"
"\"#http-proxy-exceptions\"=\"\"\n"
"\"#http-timeout\"=\"0\"\n"
"\"#http-compression\"=\"yes\"\n"
"\"#neon-debug-mask\"=\"\"\n"
"\"#ssl-authority-files\"=\"\"\n"
"\"#ssl-trust-default-ca\"=\"\"\n"
"\"#ssl-client-cert-file\"=\"\"\n"
"\"#ssl-client-cert-password\"=\"\"\n"
"\n"
"[HKEY_CURRENT_USER¥Software¥Tigris.org¥Subversion¥Config¥auth]\n"
"\"#store-auth-creds\"=\"no\"\n"
"\n"
"[HKEY_CURRENT_USER¥Software¥Tigris.org¥Subversion¥Config¥helpers]\n"
"\"#editor-cmd\"=\"notepad\"\n"
"\"#diff-cmd\"=\"\"\n"
"\"#diff3-cmd\"=\"\"\n"
"\"#diff3-has-program-arg\"=\"\"\n"
"\n"
"[HKEY_CURRENT_USER¥Software¥Tigris.org¥Subversion¥Config¥miscellany]\n"
"\"#global-ignores\"=\"*.o *.lo *.la #*# .*.rej *.rej .*‾ *‾ .#* .DS_Store\"\n"
"\"#log-encoding\"=\"\"\n"
"\"#use-commit-times\"=\"\"\n"
"\"#template-root\"=\"\"\n"
"\"#enable-auto-props\"=\"\"\n"
"\n"
"[HKEY_CURRENT_USER¥Software¥Tigris.org¥Subversion¥Config¥tunnels]\n"
"\n"
"[HKEY_CURRENT_USER¥Software¥Tigris.org¥Subversion¥Config¥auto-props]"

#. Tag: para
#: ch07-customizing-svn.xml:186
#, no-c-format
msgid "The previous example shows the contents of a <filename>.reg</filename> file which contains some of the most commonly used configuration options and their default values. Note the presence of both system-wide (for network proxy-related options) and per-user settings (editor programs and password storage, among others). Also note that all the options are effectively commented out. You need only to remove the hash (<literal>#</literal>) character from the beginning of the option names, and set the values as you desire."
msgstr "この例は、<filename>.reg</filename> の内容を示した例ですが、その 中には、よく利用される設定オプションの大部分とそのデフォルト値が あります。システムの設定(たとえばネットワークプロキシに関するオプション) と、ユーザごとの設定(利用するエディタ、パスワード、など)の両方が あることに注意してください。さらにすべてのオプションは、コメントアウト されていることにも注意してください。オプション名の先頭のハッシュ文字 (<literal>#</literal>) を取り除くだけで、望んでいる値に設定することが できます。"

#. Tag: title
#: ch07-customizing-svn.xml:201
#, no-c-format
msgid "Configuration Options"
msgstr "設定オプション"

#. Tag: para
#: ch07-customizing-svn.xml:205
#, no-c-format
msgid "In this section, we will discuss the specific run-time configuration options that are currently supported by Subversion."
msgstr "この章では、特定の実行時オプションについて議論します。現在Subversion がサポートしているものについてです。"

#. Tag: title
#: ch07-customizing-svn.xml:211
#, no-c-format
msgid "Servers"
msgstr "servers"

#. Tag: para
#: ch07-customizing-svn.xml:213
#, no-c-format
msgid "The <filename>servers</filename> file contains Subversion configuration options related to the network layers. There are two special section names in this file&mdash;<literal>groups</literal> and <literal>global</literal>. The <literal>groups</literal> section is essentially a cross-reference table. The keys in this section are the names of other sections in the file; their values are <firstterm>globs</firstterm>&mdash;textual tokens which possibly contain wildcard characters&mdash;that are compared against the hostnames of the machine to which Subversion requests are sent."
msgstr "<filename>servers</filename> ファイルはSubversionの設定オプションで、 ネットワーク層に関係したものを含んでいます。二つのセクション名がその ファイルにはあります&mdash;<literal>groups</literal> と<literal>global</literal> です。<literal>groups</literal>セクションは、要するにクロスリファレンスの テーブルです。このセクションのキーは、ファイル中にある別のセクションの名前 です。その値は<firstterm>グロブ</firstterm>&mdash;ワイルドカードを含んで いるかも知れないテキストトークンです&mdash;で、Subversionの要求が送信 されるマシンのホスト名称と比較されます。"

#. Tag: programlisting
#: ch07-customizing-svn.xml:225
#, no-c-format
msgid ""
"[groups]\n"
"beanie-babies = *.red-bean.com\n"
"collabnet = svn.collab.net\n"
"\n"
"[beanie-babies]\n"
"&hellip;\n"
"\n"
"[collabnet]\n"
"&hellip;"
msgstr ""
"[groups]\n"
"beanie-babies = *.red-bean.com\n"
"collabnet = svn.collab.net\n"
"\n"
"[beanie-babies]\n"
"&hellip;\n"
"\n"
"[collabnet]\n"
"&hellip;"

#. Tag: para
#: ch07-customizing-svn.xml:227
#, no-c-format
msgid "When Subversion is used over a network, it attempts to match the name of the server it is trying to reach with a group name under the <literal>groups</literal> section. If a match is made, Subversion then looks for a section in the <filename>servers</filename> file whose name is the matched group's name. From that section it reads the actual network configuration settings."
msgstr "Subversionがネットワーク越しに利用される場合、<literal>groups</literal> セクションにあるグループ名に合うサーバ名称とマッチするものを探します。 もしマッチした場合はSubversionは次に、その名前がグループ名称とマッチした <filename>servers</filename> ファイル中のセクションを探します。そして そのセクションから実際のネットワーク設定オプションを読み出します。"

#. Tag: para
#: ch07-customizing-svn.xml:235
#, no-c-format
msgid "The <literal>global</literal> section contains the settings that are meant for all of the servers not matched by one of the globs under the <literal>groups</literal> section. The options available in this section are exactly the same as those valid for the other server sections in the file (except, of course, the special <literal>groups</literal> section), and are as follows:"
msgstr "<literal>global</literal> セクションは<literal>groups</literal>セクション のどのグロブにも当てはまらなかったすべてのサーバに対する 設定があります。このセクションで使えるオプションは、ファイルの別の サーバセクションで利用できるものとまったく同じです。(ただし、 もちろん、<literal>groups</literal> セクションは例外です) 以下のような感じです:"

#. Tag: literal
#: ch07-customizing-svn.xml:246
#, fuzzy, no-c-format
msgid "http-proxy-exceptions"
msgstr "http-proxy-host"

#. Tag: para
#: ch07-customizing-svn.xml:248
#, no-c-format
msgid "This specifies a comma-separated list of patterns for repository hostnames that should accessed directly, without using the proxy machine. The pattern syntax is the same as is used in the Unix shell for filenames. A repository hostname matching any of these patterns will not be proxied."
msgstr ""

#. Tag: literal
#: ch07-customizing-svn.xml:257
#, no-c-format
msgid "http-proxy-host"
msgstr "http-proxy-host"

#. Tag: para
#: ch07-customizing-svn.xml:259
#, no-c-format
msgid "This specifies the hostname of the proxy computer through which your HTTP-based Subversion requests must pass. It defaults to an empty value, which means that Subversion will not attempt to route HTTP requests through a proxy computer, and will instead attempt to contact the destination machine directly."
msgstr "これは、プロキシコンピュータのホスト名称で、HTTPベースのSubversion はそこを通じて通信しなくてはなりません。デフォルトは空で、それは Subversionはプロキシを通してHTTP要求せず、直接、目的のマシンと 通信しようとすることを意味しています。"

#. Tag: literal
#: ch07-customizing-svn.xml:268
#, no-c-format
msgid "http-proxy-port"
msgstr "http-proxy-port"

#. Tag: para
#: ch07-customizing-svn.xml:270
#, no-c-format
msgid "This specifies the port number on the proxy host to use. It defaults to an empty value."
msgstr "これは、利用するプロキシホストのポート番号を指定します。 デフォルトは空です。"

#. Tag: literal
#: ch07-customizing-svn.xml:275
#, no-c-format
msgid "http-proxy-username"
msgstr "http-proxy-username"

#. Tag: para
#: ch07-customizing-svn.xml:277
#, no-c-format
msgid "This specifies the username to supply to the proxy machine. It defaults to an empty value."
msgstr "これは、プロキシマシンで必要なユーザ名を指定します。 デフォルトは空です。"

#. Tag: literal
#: ch07-customizing-svn.xml:282
#, no-c-format
msgid "http-proxy-password"
msgstr "http-proxy-password"

#. Tag: para
#: ch07-customizing-svn.xml:284
#, no-c-format
msgid "This specifies the password to supply to the proxy machine. It defaults to an empty value."
msgstr "これは、プロキシマシンで必要なパスワードを指定します。 デフォルトは空です。"

#. Tag: literal
#: ch07-customizing-svn.xml:289
#, no-c-format
msgid "http-timeout"
msgstr "http-timeout"

#. Tag: para
#: ch07-customizing-svn.xml:291
#, fuzzy, no-c-format
msgid "This specifies the amount of time, in seconds, to wait for a server response. If you experience problems with a slow network connection causing Subversion operations to time out, you should increase the value of this option. The default value is <literal>0</literal>, which instructs the underlying HTTP library, Neon, to use its default timeout setting."
msgstr "これはサーバ応答を待つ時間の最大値を秒単位で指定します。 もし、Subversionの操作がタイムアウトしてしまうような低速の ネットワーク接続に関係した問題を抱えている場合、この オプションの値を増やしてみてください。デフォルト値は <literal>0</literal>で、この場合、HTTPライブラリである Neonにデフォルトのタイムアウト値を使うように指示します。"

#. Tag: literal
#: ch07-customizing-svn.xml:302
#, no-c-format
msgid "http-compression"
msgstr "http-compression"

#. Tag: para
#: ch07-customizing-svn.xml:304
#, no-c-format
msgid "This specifies whether or not Subversion should attempt to compress network requests made to DAV-ready servers. The default value is <literal>yes</literal> (though compression will only occur if that capability is compiled into the network layer). Set this to <literal>no</literal> to disable compression, such as when debugging network transmissions."
msgstr "これは、DAVが有効なサーバで、Subversionがネットワーク要求データを 圧縮するかどうかを指定します。デフォルト値は<literal>yes</literal> (ただし、圧縮はネットワーク層のコンパイル時に有効になっていなくては なりませんが、)です。<literal>no</literal> に設定すると圧縮は 無効になりますが、これはネットワーク転送のデバッグ時などに使います。"

#. Tag: literal
#: ch07-customizing-svn.xml:314
#, no-c-format
msgid "neon-debug-mask"
msgstr "neon-debug-mask"

#. Tag: para
#: ch07-customizing-svn.xml:316
#, no-c-format
msgid "This is an integer mask that the underlying HTTP library, Neon, uses for choosing what type of debugging output to yield. The default value is <literal>0</literal>, which will silence all debugging output. For more information about how Subversion makes use of Neon, see <xref linkend=\"svn.developer\"/>."
msgstr "これは、整数値のマスクで、HTTPライブラリNeon がどのようなタイプの デバック出力を生成するかを指定するものです。デフォルトは <literal>0</literal>で、すべてデバッグ出力を無効にします。Subversion がNeonをどのように使うかについての詳細は <xref linkend=\"svn.developer\"/>を見てください。"

#. Tag: literal
#: ch07-customizing-svn.xml:325
#, no-c-format
msgid "ssl-authority-files"
msgstr "ssl-authority-file"

#. Tag: para
#: ch07-customizing-svn.xml:327
#, no-c-format
msgid "This is a semicolon-delimited list of paths to files containing certificates of the certificate authorities (or CAs) that are accepted by the Subversion client when accessing the repository over HTTPS."
msgstr "これは HTTPS 経由でリポジトリにアクセスするときに Subversion クライアントによって受け入れられる認証機関(あるいは CA)の 証明書を含むファイルパスのリストをセミコロンで区切ったものになります。"

#. Tag: literal
#: ch07-customizing-svn.xml:335
#, no-c-format
msgid "ssl-trust-default-ca"
msgstr "ssl-trust-default-ca"

#. Tag: para
#: ch07-customizing-svn.xml:337
#, no-c-format
msgid "Set this variable to <literal>yes</literal> if you want Subversion to automatically trust the set of default CAs that ship with OpenSSL."
msgstr "Subversion が自動的に OpenSSL に付いているデフォルトのCA を信用する ようにしたい場合にはこの変数を<literal>yes</literal>にしてください。"

#. Tag: literal
#: ch07-customizing-svn.xml:343
#, no-c-format
msgid "ssl-client-cert-file"
msgstr "ssl-client-cert-file"

#. Tag: para
#: ch07-customizing-svn.xml:345
#, no-c-format
msgid "If a host (or set of hosts) requires an SSL client certificate, you'll normally be prompted for a path to your certificate. By setting this variable to that same path, Subversion will be able to find your client certificate automatically without prompting you. There's no standard place to store your certificate on disk; Subversion will grab it from any path you specify."
msgstr "ホスト(あるいは何台かのホスト)が SSL クライアント証明書を要求する場合 普通は証明書のあるパスを入力するようにユーザにうながします。そのパスを この変数に設定すると Subversion はユーザの入力なしにクライアント証明書 を自動的に探すことができるようになります。証明書をディスク上に保存する ための標準的な場所はありません; Subversion は指定したどのようなパスから でもそれを取得することができます。"

#. Tag: literal
#: ch07-customizing-svn.xml:356
#, no-c-format
msgid "ssl-client-cert-password"
msgstr "ssl-client-cert-password"

#. Tag: para
#: ch07-customizing-svn.xml:358
#, no-c-format
msgid "If your SSL client certificate file is encrypted by a passphrase, Subversion will prompt you for the passphrase whenever the certificate is used. If you find this annoying (and don't mind storing the password in the <filename>servers</filename> file), then you can set this variable to the certificate's passphrase. You won't be prompted anymore."
msgstr "SSL クライアント証明書ファイルがパスフレーズで暗号化されている場合 Subversion はその証明書を利用するたびにパスフレーズの入力を求めます。 これが嫌なら(そして<filename>servers</filename>ファイル中に 自分のパスワードを保存するのが嫌でなけれぱ)、この変数に証明書の パスフレーズを設定することができます。これでパスフレーズを聞かれる ことはなくなります。"

#. Tag: title
#: ch07-customizing-svn.xml:373
#, no-c-format
msgid "Config"
msgstr "config"

#. Tag: para
#: ch07-customizing-svn.xml:375
#, fuzzy, no-c-format
msgid "The <filename>config</filename> file contains the rest of the currently available Subversion run-time options, those not related to networking. There are only a few options in use as of this writing, but they are again grouped into sections in expectation of future additions."
msgstr "<filename>config</filename> ファイルは、Subversion実行時 オプションのうち、現在利用できる残りのもので、ネットワークに 関連するもの以外が含まれています。現時点ではいくつかのオプション が利用できるだけですが、今後の追加を考えて、別のセクションとして グループ化してあります。"

#. Tag: para
#: ch07-customizing-svn.xml:381
#, no-c-format
msgid "The <literal>auth</literal> section contains settings related to Subversion's authentication and authorization against the repository. It contains:"
msgstr "<literal>auth</literal> セクションはSubversionのリポジトリに対する 認証と許可に関係した設定があります。それは:"

#. Tag: literal
#: ch07-customizing-svn.xml:387
#, no-c-format
msgid "store-passwords"
msgstr "store-passwords"

#. Tag: para
#: ch07-customizing-svn.xml:389
#, no-c-format
msgid "This instructs Subversion to cache, or not to cache, passwords that are supplied by the user in response to server authentication challenges. The default value is <literal>yes</literal>. Set this to <literal>no</literal> to disable this on-disk password caching. You can override this option for a single instance of the <command>svn</command> command using the <option>--no-auth-cache</option> command-line parameter (for those subcommands that support it). For more information, see <xref linkend=\"svn.serverconfig.netmodel.credcache\"/>."
msgstr "これはSubversionにサーバ認証チャレンジに対してユーザが 入力するパスワードをキャッシュするかどうかを指示します。 デフォルトは<literal>yes</literal> です。<literal>no</literal>に 設定するとディスク上でのパスワードのキャッシュを無効にします。 このオプションは<command>svn</command> コマンドインスタンスのどれか で<option>--no-auth-cache</option> を使うと上書きすることができます。 (あるいはこの引数をサポートしているコマンドであればどれでも)。 詳細は<xref linkend=\"svn.serverconfig.netmodel.credcache\"/>を参照してください。"

#. Tag: literal
#: ch07-customizing-svn.xml:403
#, no-c-format
msgid "store-auth-creds"
msgstr "store-auth-creds"

#. Tag: para
#: ch07-customizing-svn.xml:405
#, no-c-format
msgid "This setting is the same as <literal>store-passwords</literal>, except that it enables or disables disk-caching of <emphasis>all</emphasis> authentication information: usernames, passwords, server certificates, and any other types of cacheable credentials."
msgstr "この設定は <literal>store-passwords</literal>と同じですが、ディスク上 にキャッシュする <emphasis>すべての</emphasis>認証情報を有効にしたり 無効にするところが違います。このような情報にはユーザ名、パスワード サーバ証明書、その他のキャッシュ可能な認証情報すべてが含まれます。"

#. Tag: para
#: ch07-customizing-svn.xml:415
#, no-c-format
msgid "The <literal>helpers</literal> section controls which external applications Subversion uses to accomplish its tasks. Valid options in this section are:"
msgstr "<literal>helpers</literal> セクションはSubversionがどの 外部アプリケーションをいくつかの処理で使うかを制御します。 このセクションで有効なものは:"

#. Tag: literal
#: ch07-customizing-svn.xml:421
#, no-c-format
msgid "editor-cmd"
msgstr "editor-cmd"

#. Tag: para
#: ch07-customizing-svn.xml:423
#, fuzzy, no-c-format
msgid "This specifies the program Subversion will use to query the user for a log message during a commit operation, such as when using <command>svn commit</command> without either the <option>--message</option> (<option>-m</option>) or <option>--file</option> (<option>-F</option>) options. This program is also used with the <command>svn propedit</command> command&mdash;a temporary file is populated with the current value of the property the user wishes to edit, and the edits take place right in the editor program (see <xref linkend=\"svn.advanced.props\"/>). This option's default value is empty. The order of priority for determining the editor command (where lower-numbered locations take precedence over higher-numbered locations) is:"
msgstr "これはSubversionがコミット時のログメッセージを作るのにどのプログラムを 使うかを指定します。たとえば、<command>svn commit</command> が、 <option>--message</option> (<option>-m</option>)も <option>--file</option> (<option>-F</option>) オプション もなしで実行されたような場合です。このプログラムはまた<command>svn propedit</command>コマンドでも使います&mdash;一時的なファイルに ユーザが編集したいと思う現在の属性値が書き込まれますが、これは エディタの起動によって実行されます。(<xref linkend=\"svn.advanced.props\"/> 参照)。このオプションはデフォルトは空です。もしこのオプションが設定 されていないとSubversionは以下の順に調べます。"

#. Tag: para
#: ch07-customizing-svn.xml:440
#, no-c-format
msgid "Command-line option <literal>--editor-cmd</literal>"
msgstr "Command-line option <literal>--editor-cmd</literal>"

#. Tag: para
#: ch07-customizing-svn.xml:443
#, no-c-format
msgid "Environment variable <literal>SVN_EDITOR</literal>"
msgstr "Environment variable <literal>SVN_EDITOR</literal>"

#. Tag: para
#: ch07-customizing-svn.xml:446
#, no-c-format
msgid "Configuration option <literal>editor-cmd</literal>"
msgstr "Configuration option <literal>editor-cmd</literal>"

#. Tag: para
#: ch07-customizing-svn.xml:449
#, no-c-format
msgid "Environment variable <literal>VISUAL</literal>"
msgstr "Environment variable <literal>VISUAL</literal>"

#. Tag: para
#: ch07-customizing-svn.xml:452
#, no-c-format
msgid "Environment variable <literal>EDITOR</literal>"
msgstr "Environment variable <literal>EDITOR</literal>"

#. Tag: para
#: ch07-customizing-svn.xml:455
#, no-c-format
msgid "Possibly, a default value built in to Subversion (not present in the official builds)"
msgstr "Possibly, a default value built in to Subversion (not present in the official builds)"

#. Tag: para
#: ch07-customizing-svn.xml:459
#, no-c-format
msgid "The value of any of these options or variables is (unlike <literal>diff-cmd</literal>) the beginning of a command line to be executed by the shell. Subversion appends a space and the pathname of the temporary file to be edited. The editor should modify the temporary file and return a zero exit code to indicate success."
msgstr "The value of any of these options or variables is (unlike <literal>diff-cmd</literal>) the beginning of a command line to be executed by the shell. Subversion appends a space and the pathname of the temporary file to be edited. The editor should modify the temporary file and return a zero exit code to indicate success."

#. Tag: literal
#: ch07-customizing-svn.xml:468
#, no-c-format
msgid "diff-cmd"
msgstr "diff-cmd"

#. Tag: para
#: ch07-customizing-svn.xml:470
#, no-c-format
msgid "This specifies the absolute path of a differencing program, used when Subversion generates <quote>diff</quote> output (such as when using the <command>svn diff</command> command). By default Subversion uses an internal differencing library&mdash;setting this option will cause it to perform this task using an external program. See <xref linkend=\"svn.advanced.externaldifftools\"/> for more details on using such programs."
msgstr "これは差分表示プログラムの絶対パスを指定します。このプログラムは Subversionが <quote>diff</quote> の出力を生成するのに利用 されるものです( <command>svn diff</command> コマンド実行時 などです)。デフォルトで Subversion は内部的な差分ライブラリを 利用します&mdash;このオプションによって外部プログラムを使って 処理するようになります。そのようなプログラムの使い方の詳細は <xref linkend=\"svn.advanced.externaldifftools\"/>を見てください。"

#. Tag: literal
#: ch07-customizing-svn.xml:482
#, no-c-format
msgid "diff3-cmd"
msgstr "diff3-cmd"

#. Tag: para
#: ch07-customizing-svn.xml:484
#, no-c-format
msgid "This specifies the absolute path of a three-way differencing program. Subversion uses this program to merge changes made by the user with those received from the repository. By default Subversion uses an internal differencing library&mdash;setting this option will cause it to perform this task using an external program. See <xref linkend=\"svn.advanced.externaldifftools\"/> for more details on using such programs."
msgstr "これはスリーウェイ差分プログラムの絶対パスを指定します。Subversion はこのプログラムをリポジトリから受け取った、ユーザがした変更点を マージするのに使います。デフォルトで Subversion は内部的な差分 ライブラリを利用します&mdash;このオプションを設定すると、外部プログラムを 使って処理を実行するようになります。そのようなプログラムの使い方の 詳細は <xref linkend=\"svn.advanced.externaldifftools\"/> を見てください。"

#. Tag: literal
#: ch07-customizing-svn.xml:496
#, no-c-format
msgid "diff3-has-program-arg"
msgstr "diff3-has-program-arg"

#. Tag: para
#: ch07-customizing-svn.xml:498
#, no-c-format
msgid "This flag should be set to <literal>true</literal> if the program specified by the <literal>diff3-cmd</literal> option accepts a <option>--diff-program</option> command-line parameter."
msgstr "このフラグは<literal>diff3-cmd</literal> オプションが <option>--diff-program</option> パラメータを受け付ける場合には <literal>true</literal>を指定すべきです。"

#. Tag: para
#: ch07-customizing-svn.xml:507
#, no-c-format
msgid "The <literal>tunnels</literal> section allows you to define new tunnel schemes for use with <command>svnserve</command> and <literal>svn://</literal> client connections. For more details, see <xref linkend=\"svn.serverconfig.svnserve.sshauth\"/>."
msgstr "<literal>tunnels</literal> セクションでは <command>svnserve</command> と<literal>svn://</literal>クライアント接続を使った新しいトンネルスキーマを定義する ことができます。詳細は<xref linkend=\"svn.serverconfig.svnserve.sshauth\"/>を参照してください。"

#. Tag: para
#: ch07-customizing-svn.xml:513
#, no-c-format
msgid "The <literal>miscellany</literal> section is where everything that doesn't belong elsewhere winds up. <footnote> <para>Anyone for potluck dinner?</para> </footnote> In this section, you can find:"
msgstr "<literal>miscellany</literal> セクションは他の場所に置けない すべてのものの置き場所です。 <footnote> <para>残り物でディナーはいかが?</para> </footnote> このセクションには:"

#. Tag: literal
#: ch07-customizing-svn.xml:522
#, no-c-format
msgid "global-ignores"
msgstr "global-ignores"

#. Tag: para
#: ch07-customizing-svn.xml:524
#, no-c-format
msgid "When running the <command>svn status</command> command, Subversion lists unversioned files and directories along with the versioned ones, annotating them with a <literal>?</literal> character (see <xref linkend=\"svn.tour.cycle.examine.status\"/>). Sometimes, it can be annoying to see uninteresting, unversioned items&mdash;for example, object files that result from a program's compilation&mdash;in this display. The <literal>global-ignores</literal> option is a list of whitespace-delimited globs which describe the names of files and directories that Subversion should not display unless they are versioned. The default value is <literal>*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#* .DS_Store</literal>."
msgstr "<command>svn status</command>コマンドを実行するとSubversionは バージョン化されないファイルとディレクトリをバージョン化されて いるものと一緒に一覧表示します。このときバージョン化されていない ことを<literal>?</literal> 文字で表現します。 (<xref linkend=\"svn.tour.cycle.examine.status\"/>参照)。 ときどき、あまり興味のないバージョン化されないアイテムが表示されるのを 見るのを面倒に思うことがあります。 &mdash;たとえば、プログラムのコンパイルによってできるオブジェクトファイル など&mdash; <literal>global-ignores</literal> オプションは空白で区切られたグロブの リストで、バージョン化されていないのであればSubversionに表示して欲しく ないものの名前の指定になります。デフォルトは <literal>*.o *.lo *.la #*# .*.rej *.rej .*‾ *‾ .#* .DS_Store</literal>です。"

#. Tag: para
#: ch07-customizing-svn.xml:539
#, no-c-format
msgid "As well as <command>svn status</command>, the <command>svn add</command> and <command>svn import</command> commands also ignore files that match the list when they are scanning a directory. You can override this behaviour for a single instance of any of these commands by explicitly specifying the file name, or by using the <option>--no-ignore</option> command-line flag."
msgstr "<command>svn status</command> のほか、 <command>svn add</command>、<command>svn import</command> コマンドもリストにマッチするファイルを無視します。 どのコマンドでも<option>--no-ignore</option> フラグを使うとこのオプションをその実行に限って上書きできます。"

#. Tag: para
#: ch07-customizing-svn.xml:547
#, no-c-format
msgid "For information on more fine-grained control of ignored items, see <xref linkend=\"svn.advanced.props.special.ignore\"/>."
msgstr "無視するアイテムについてのもっと細かい制御については <xref linkend=\"svn.advanced.props.special.ignore\"/>を見てください。"

#. Tag: literal
#: ch07-customizing-svn.xml:553
#, no-c-format
msgid "enable-auto-props"
msgstr "enable-auto-props"

#. Tag: para
#: ch07-customizing-svn.xml:555
#, no-c-format
msgid "This instructs Subversion to automatically set properties on newly added or imported files. The default value is <literal>no</literal>, so set this to <literal>yes</literal> to enable Auto-props. The <literal>auto-props</literal> section of this file specifies which properties are to be set on which files."
msgstr "これは Subversion に新規追加またはインポートしたファイルの属性を 自動的に設定するように指示します。デフォルト値は<literal>no</literal> なので有効にするには<literal>yes</literal>にしてください。 このファイルの<literal>auto-props</literal>セクションはどの属性が どのファイル上に設定されるかを指定します。"

#. Tag: literal
#: ch07-customizing-svn.xml:565
#, no-c-format
msgid "log-encoding"
msgstr "log-encoding"

#. Tag: para
#: ch07-customizing-svn.xml:567
#, no-c-format
msgid "This variable sets the default character set encoding for commit log messages. It's a permanent form of the <option>--encoding</option> option (see <xref linkend=\"svn.ref.svn.sw\"/>). The Subversion repository stores log messages in UTF-8, and assumes that your log message is written using your operating system's native locale. You should specify a different encoding if your commit messages are written in any other encoding."
msgstr "この変数はログメッセージをコミットするキャラクタセットのデフォルト エンコーディングを設定します。これは <option>--encoding</option> オプションを無条件に有効にするものです( <xref linkend=\"svn.ref.svn.sw\"/> 参照)。Subversion リポジトリはログメッセージを UTF8 で保存し、あなたの ログメッセージはあなたのオペレーティングシステムの独自のロカールを使って 書き込まれることを仮定しています。他のエンコーディングで書いたメッセージ をコミットしたい場合には別のエンコーディングを指定すべきです。"

#. Tag: literal
#: ch07-customizing-svn.xml:580
#, no-c-format
msgid "use-commit-times"
msgstr "use-commit-times"

#. Tag: para
#: ch07-customizing-svn.xml:582
#, no-c-format
msgid "Normally your working copy files have timestamps that reflect the last time they were touched by any process, whether that be your own editor or by some <command>svn</command> subcommand. This is generally convenient for people developing software, because build systems often look at timestamps as a way of deciding which files need to be recompiled."
msgstr "通常作業コピーのファイルはどんな操作をしたかにかかわらず最後に触った 時刻を反映したタイムスタンプを持ちます。これはエディタで編集したか、 他の<command>svn</command>サブコマンドを使ったかにはよりません。 これは普通はソフトウェア開発者にとって便利なものですが、それは ビルドシステムはよくどのファイルが再コンパイルを必要としているか を決めるのにタイムスタンプを見るためです。"

#. Tag: para
#: ch07-customizing-svn.xml:590
#, no-c-format
msgid "In other situations, however, it's sometimes nice for the working copy files to have timestamps that reflect the last time they were changed in the repository. The <command>svn export</command> command always places these <quote>last-commit timestamps</quote> on trees that it produces. By setting this config variable to <literal>yes</literal>, the <command>svn checkout</command>, <command>svn update</command>, <command>svn switch</command>, and <command>svn revert</command> commands will also set last-commit timestamps on files that they touch."
msgstr "しかし別の状況ではリポジトリで変更された最終時刻を反映しているような タイムスタンプが作業ファイルに振られているほうが便利であることも あります。 <command>svn export</command>コマンドは常に、このような 抽出したツリー上の <quote>最終コミット時間</quote> を振りますが、この設定変数を <literal>yes</literal>にすると、<command>svn checkout</command>, <command>svn update</command>, <command>svn switch</command>, そして <command>svn revert</command>についても同様に、それらの操作が 触れたファイルに最終コミット時間を振るようになります。"

#. Tag: para
#: ch07-customizing-svn.xml:609
#, no-c-format
msgid "The <literal>auto-props</literal> section controls the Subversion client's ability to automatically set properties on files when they are added or imported. It contains any number of key-value pairs in the format <literal>PATTERN = PROPNAME=PROPVALUE</literal> where <literal>PATTERN</literal> is a file pattern that matches a set of filenames and the rest of the line is the property and its value. Multiple matches on a file will result in multiple propsets for that file; however, there is no guarantee that auto-props will be applied in the order in which they are listed in the config file, so you can't have one rule <quote>override</quote> another. You can find several examples of auto-props usage in the <filename>config</filename> file. Lastly, don't forget to set <literal>enable-auto-props</literal> to <literal>yes</literal> in the <literal>miscellany</literal> section if you want to enable auto-props."
msgstr "<literal>auto-props</literal>セクションは Subversion クライアントが追加 またはインポートしたファイルの属性を自動的に設定する能力を制御します。 そこには <literal>PATTERN = PROPNAME=PROPVALUE</literal>の形をした 任意数のキー・属性値の組を置くことができますが、ここで<literal>PATTERN</literal> はファイル名称にマッチするような正規表現で、行の残りの部分は対応する属性と その値です。ファイルに複数の要素がマッチすれば、そのファイルに複数の属性が 設定されることになります; しかし設定ファイル中に列挙された auto-props が その順序で適用されるかどうかの保証はないので一つの規則で別の規則を <quote>上書き</quote>することはできません。<filename>config</filename> ファイル中に、auto-props を使ったさまざまな例を見つけることができる でしょう。最後に、auto-props を有効にするには<literal>enable-auto-props</literal> を<literal>yes</literal>にするのを忘れずに。"

#. Tag: title
#: ch07-customizing-svn.xml:637
#, no-c-format
msgid "Localization"
msgstr "ローカライゼーション"

#. Tag: para
#: ch07-customizing-svn.xml:639
#, no-c-format
msgid "<firstterm>Localization</firstterm> is the act of making programs behave in a region-specific way. When a program formats numbers or dates in a way specific to your part of the world, or prints messages (or accepts input) in your native language, the program is said to be <firstterm>localized</firstterm>. This section describes steps Subversion has made towards localization."
msgstr "<firstterm>ローカライゼーション</firstterm> とはプログラムが 特定の地域に応じた動作をするように作ることを言います。あるプログラムが 数値や日付を特定の地域に応じて書式化して出力したり、その地域の言語でメッ セージを出力したり(あるいはそのような入力を受け入れたり)できるのであれ ば、そのプログラムは<firstterm>ローカライズされている</firstterm> と言 われます。この節では Subversion のローカライゼーションに向けた取り組み について説明します。"

#. Tag: title
#: ch07-customizing-svn.xml:649
#, no-c-format
msgid "Understanding locales"
msgstr "ロケールの理解"

#. Tag: para
#: ch07-customizing-svn.xml:651
#, no-c-format
msgid "Most modern operating systems have a notion of the <quote>current locale</quote>&mdash;that is, the region or country whose localization conventions are honored. These conventions&mdash;typically chosen by some runtime configuration mechanism on the computer&mdash;affect the way in which programs present data to the user, as well as the way in which they accept user input."
msgstr "最近のほとんどのオペレーティングシステムは <quote>現在のロケール値</quote> という考え方を採り入れています &mdash; つまり、その時点で考慮されている ローカリゼーションの規約が、どの地域や国に対応しているかという値です。 このような規約は&mdash; 普通はコンピュータの実行時の設定のしくみを 通じて選択されるものですが &mdash; プログラムがデータをユーザに対して 出力する時や、ユーザからの入力を受け付けるときの動作に影響を与えます。"

#. Tag: para
#: ch07-customizing-svn.xml:659
#, fuzzy, no-c-format
msgid "On most Unix-like systems, you can check the values of the locale-related runtime configuration options by running the <command>locale</command> command:"
msgstr "Unix 風のシステムでは<command>locale</command>コマンドを実行して ロケール関連の実行時設定オプションの値をチェックすることができます:"

#. Tag: screen
#: ch07-customizing-svn.xml:663
#, no-c-format
msgid ""
"$ locale\n"
"LANG=\n"
"LC_COLLATE=\"C\"\n"
"LC_CTYPE=\"C\"\n"
"LC_MESSAGES=\"C\"\n"
"LC_MONETARY=\"C\"\n"
"LC_NUMERIC=\"C\"\n"
"LC_TIME=\"C\"\n"
"LC_ALL=\"C\""
msgstr ""
"$ locale\n"
"LANG=\n"
"LC_COLLATE=\"C\"\n"
"LC_CTYPE=\"C\"\n"
"LC_MESSAGES=\"C\"\n"
"LC_MONETARY=\"C\"\n"
"LC_NUMERIC=\"C\"\n"
"LC_TIME=\"C\"\n"
"LC_ALL=\"C\""

#. Tag: para
#: ch07-customizing-svn.xml:665
#, no-c-format
msgid "The output is a list of locale-related environment variables and their current values. In this example, the variables are all set to the default <literal>C</literal> locale, but users can set these variables to specific country/language code combinations. For example, if one were to set the <literal>LC_TIME</literal> variable to <literal>fr_CA</literal>, then programs would know to present time and date information formatted according a French-speaking Canadian's expectations. And if one were to set the <literal>LC_MESSAGES</literal> variable to <literal>zh_TW</literal>, then programs would know to present human-readable messages in Traditional Chinese. Setting the <literal>LC_ALL</literal> variable has the effect of changing every locale variable to the same value. The value of <literal>LANG</literal> is used as a default value for any locale variable that is unset. To see the list of available locales on a Unix system, run the command <command>locale -a</command>."
msgstr "出力されているのはロケール関連の環境変数とその現在値です。この例では変 数はすべてデフォルトの<literal>C</literal>ロケールになっています。ユー ザはこれらの変数を特定の国/言語コードの組合せに変更することができます。 例えば <literal>LC_TIME</literal>変数の値を<literal>fr_CA</literal> に すると、プログラムはフランス語を話すカナダ人に対する書式で時刻と日付を 表示するようになります。あるいは <literal>LC_MESSAGES</literal>変数を <literal>zh_TW</literal>に設定すれば、プログラムは人が読むためのメッセー ジ中国語で表示するようになります。 <literal>LC_ALL</literal>変数を設定 すると全てのロケール変数の値が同じ値になります。 <literal>LANG</literal> の値はどのロケール変数も設定されていない場合の デフォルト値になります。Unix システムで可能なロケールの一覧は <command>locale -a</command>を実行するとわかります。"

#. Tag: para
#: ch07-customizing-svn.xml:684
#, no-c-format
msgid "On Windows, locale configuration is done via the <quote>Regional and Language Options</quote> control panel item. There you can view and select the values of individual settings from the available locales, and even customize (at a sickening level of detail) several of the display formatting conventions."
msgstr "Windows ではロケールの設定はコントロールパネルの<quote>地域と言語のオ プション</quote>を通じて設定することができます。その画面で利用できるロ ケール値がそれぞれどのようになっているかを確認し、選択することができ、 (かなり特殊なケースだと思いますが)表示形式の規約をさまざまにカスタマイ ズすることすらできます。"

#. Tag: title
#: ch07-customizing-svn.xml:695
#, no-c-format
msgid "Subversion's use of locales"
msgstr "Subversion でのロケール"

#. Tag: para
#: ch07-customizing-svn.xml:697
#, no-c-format
msgid "The Subversion client, <command>svn</command>, honors the current locale configuration in two ways. First, it notices the value of the <literal>LC_MESSAGES</literal> variable and attempts to print all messages in the specified language. For example:"
msgstr "Subversion クライアントである <command>svn</command>は、ふたつの場面で 現在のロケール値を正しく扱います。まず、<literal>LC_MESSAGES</literal> 変数の値を見て全てのメッセージを特定の言語で表示しようとします。たとえ ば:"

#. Tag: screen
#: ch07-customizing-svn.xml:703
#, no-c-format
msgid ""
"$ export LC_MESSAGES=de_DE\n"
"$ svn help cat\n"
"cat: Gibt den Inhalt der angegebenen Dateien oder URLs aus.\n"
"Aufruf: cat ZIEL[@REV]...\n"
"&hellip;"
msgstr ""
"$ export LC_MESSAGES=de_DE\n"
"$ svn help cat\n"
"cat: Gibt den Inhalt der angegebenen Dateien oder URLs aus.\n"
"Aufruf: cat ZIEL[@REV]...\n"
"&hellip;"

#. Tag: para
#: ch07-customizing-svn.xml:705
#, no-c-format
msgid "This behavior works identically on both Unix and Windows systems. Note, though, that while your operating system might have support for a certain locale, the Subversion client still may not be able to speak the particular language. In order to produce localized messages, human volunteers must provide translations for each language. The translations are written using the GNU gettext package, which results in translation modules that end with the <filename>.mo</filename> filename extension. For example, the German translation file is named <filename>de.mo</filename>. These translation files are installed somewhere on your system. On Unix, they typically live in <filename>/usr/share/locale/</filename>, while on Windows they're often found in the <filename>\\share\\locale\\</filename> folder in Subversion's installation area. Once installed, a module is named after the program it provides translations for. For example, the <filename>de.mo</filename> file may ultimately end up installed as <filename>/usr/share/locale/de/LC_MESSAGES/subversion.mo</filename>. By browsing the installed <filename>.mo</filename> files, you can see which languages the Subversion client is able to speak."
msgstr "この動作は Unix でも Windows でも同じです。しかし、あなたのオペレーティ ングシステムが特定のロケールをサポートしているとしても Subversion クラ イアントがその特定の言語をしゃべることができるとは限りません。ローカラ イズされたメッセージを出力するにはボランティアによる言語ごとの翻訳が必 要になります。翻訳は GNU gettext パッケージを利用しているので、 <filename>.mo</filename> というファイル拡張子をもった翻訳モジュールが 結果として必要になります。たとえば、ドイツ語の翻訳ファイルは <filename>de.mo</filename>になる、といった具合です。このような翻訳ファ イルはあなたのシステムの、ある特定の場所にインストールされます。Unix であれば普通は<filename>/usr/share/locale/</filename> のような場所にな り、Windows であれば Subversion をインストールしたフォルダの中の <filename>¥share¥locale¥</filename>フォルダなどに見つかることがよくあ ります。いったんインストールするとモジュールは翻訳を実行するプログラム の名前に変更されます。例えば <filename>de.mo</filename>というファイル は最終的には <filename>/usr/share/locale/de/LC_MESSAGES/subversion.mo</filename> の ような名前でインストールされます。インストールされている <filename>.mo</filename>ファイルを見れば、Subversion クライアントが実 際にはどの言語を話すことができるかがわかります。"

#. Tag: para
#: ch07-customizing-svn.xml:728
#, no-c-format
msgid "The second way in which the locale is honored involves how <command>svn</command> interprets your input. The repository stores all paths, filenames, and log messages in Unicode, encoded as UTF-8. In that sense, the repository is <firstterm>internationalized</firstterm>&mdash;that is, the repository is ready to accept input in any human language. This means, however, that the Subversion client is responsible for sending only UTF-8 filenames and log messages into the repository. In order to do this, it must convert the data from the native locale into UTF-8."
msgstr "ロケールが考慮される二番目の場面は <command>svn</command> があなたの入力を解釈する時です。リポジトリはすべてのパス名、ファイル名 そしてログメッセージを UTF-8 でエンコードされた Unicode で保存します。 この意味でリポジトリは <firstterm>国際化されて</firstterm>います&mdash; つまり、リポジトリはどのような自然言語の入力も受け入れる用意ができて います。しかしこれは Subversion クライアントは UTF-8 ファイル名とログ メッセージだけをリポジトリに送る責任があることを意味します。このため Subversion クライアントはデータをネイティブのロケールから UTF-8 へと 変換しなくてなりません。"

#. Tag: para
#: ch07-customizing-svn.xml:739
#, fuzzy, no-c-format
msgid "For example, suppose you create a file named <filename>caffè.txt</filename>, and then when committing the file, you write the log message as <quote>Adesso il caffè è più forte</quote>. Both the filename and log message contain non-ASCII characters, but because your locale is set to <literal>it_IT</literal>, the Subversion client knows to interpret them as Italian. It uses an Italian character set to convert the data to UTF-8 before sending them off to the repository."
msgstr "たとえば<filename>caff竪.txt</filename>という名前のファイルを作り、そ のファイルをコミットするときに <quote>Adesso il caff竪竪 pi湛 forte</quote>というログメッセージをつけたとします。ファイル名とログメッ セージの両方に 非ASCII 文字が含まれていますがロケールが <literal>it_IT</literal>に設定されているので Subversion クライアントは そのような文字列がイタリア語であることを理解することができます。そして イタリア語の文字セットを使ってデータ UTF-8 に変換し、それから結果を リポジトリに送信します。"

#. Tag: para
#: ch07-customizing-svn.xml:749
#, no-c-format
msgid "Note that while the repository demands UTF-8 filenames and log messages, it <emphasis>does not</emphasis> pay attention to file contents. Subversion treats file contents as opaque strings of bytes, and neither client nor server makes an attempt to understand the character set or encoding of the contents."
msgstr "リポジトリはファイル名とログメッセージは UTF-8 であることを要求します がファイルの内容にはまったく考慮 <emphasis>しません</emphasis>。 Subversion はファイルの内容を単なるバイト列の並びとして扱い、クライア ント側もサーバ側もその内容のキャラクタセットやエンコーディングを理解し ようとはしません。"

#. Tag: title
#: ch07-customizing-svn.xml:757
#, no-c-format
msgid "Character set conversion errors"
msgstr "キャラクタセット変換エラー"

#. Tag: para
#: ch07-customizing-svn.xml:759
#, no-c-format
msgid "While using Subversion, you might get hit with an error related to character set conversions:"
msgstr "Subversion を利用しているとキャラクタセット変換に関係したエラー に遭駈ｷ駈ｷるかも知れません:"

#. Tag: screen
#: ch07-customizing-svn.xml:762
#, no-c-format
msgid ""
"svn: Can't convert string from native encoding to 'UTF-8':\n"
"&hellip;\n"
"svn: Can't convert string from 'UTF-8' to native encoding:\n"
"&hellip;"
msgstr ""
"svn: Can't convert string from native encoding to 'UTF-8':\n"
"&hellip;\n"
"svn: Can't convert string from 'UTF-8' to native encoding:\n"
"&hellip;"

#. Tag: para
#: ch07-customizing-svn.xml:764
#, no-c-format
msgid "Errors like this typically occur when the Subversion client has received a UTF-8 string from the repository, but not all of the characters in that string can be represented using the encoding of the current locale. For example, if your locale is <literal>en_US</literal> but a collaborator has committed a Japanese filename, you're likely to see this error when you receive the file during an <command>svn update</command>."
msgstr "このようなエラーは Subversio クライアントが UTF-8 文字列をリポジトリ から受け取ったがその文字列中のすべての文字を現在のロケールのエンコーディング を使って表現できるわけではないような場合に典型的に発生します。たとえば 現在のロケールが <literal>en_US</literal> であるのに他の開発者が日本語の ファイル名をコミットした場合、<command>svn update</command>実行中にファイル を受け取っているときにこのようなエラーが発生するかも知れません。"

#. Tag: para
#: ch07-customizing-svn.xml:773
#, no-c-format
msgid "The solution is either to set your locale to something which <emphasis>can</emphasis> represent the incoming UTF-8 data, or to change the filename or log message in the repository. (And don't forget to slap your collaborator's hand&mdash;projects should decide on common languages ahead of time, so that all participants are using the same locale.)"
msgstr "解決方法としては受け手のロケールを取り込もうとする UTF-8 データを表現 することが <emphasis>可能な</emphasis>どれかのロケールに設定するか、 リポジトリ中のファイル名やログメッセージを変更するかです。(それから その開発者にきちんと次のように伝えておくことも忘れずに&mdash;このプロジェクト はある共通の言語で開発することに決めたので、すべての開発者はそのロケール を使うように、と。)"

#. Tag: title
#: ch07-customizing-svn.xml:790
#, no-c-format
msgid "Using External Differencing Tools"
msgstr "外部差分ツールの利用"

#. Tag: para
#: ch07-customizing-svn.xml:792
#, no-c-format
msgid "The presence of <option>--diff-cmd</option> and <option>--diff3-cmd</option> options, and similarly named runtime configuration parameters (see <xref linkend=\"svn.advanced.confarea.opts.config\"/>), can lead to a false notion of how easy it is to use external differencing (or <quote>diff</quote>) and merge tools with Subversion. While Subversion can use most of popular such tools available, the effort invested in setting this up often turns out to be non-trivial."
msgstr "<option>--diff-cmd</option>と<option>--diff3-cmd</option> オプションや 同じような名前の実行時環境パラメータ(<xref linkend=\"svn.advanced.confarea.opts.config\"/>参照)がある ので、Subversion で外部差分ツール(あるいは <quote>diff</quote>)とマージツールを 使うのは簡単なことだという間違った考えを持ってしまうかも知れません。 Subversion ではそのようなよく知られたほとんどのツールを使うことが できますが、このような設定に必要な努力はそれほど簡単ではないことが よくあります。"

#. Tag: para
#: ch07-customizing-svn.xml:802
#, no-c-format
msgid "The interface between Subversion and external diff and merge tools harkens back to a time when Subversion's only contextual differencing capabilities were built around invocations of the GNU diffutils toolchain, specifically the <command>diff</command> and <command>diff3</command> utilities. To get the kind of behavior Subversion needed, it called these utilities with more than a handful of options and parameters, most of which were quite specific to the utilities. Some time later, Subversion grew its own internal differencing library, and as a failover mechanism, <footnote> <para>Subversion developers are good, but even the best make mistakes.</para> </footnote> the <option>--diff-cmd</option> and <option>--diff3-cmd</option> options were added to the Subversion command-line client so users could more easily indicate that they preferred to use the GNU diff and diff3 utilities instead of the newfangled internal diff library. If those options were used, Subversion would simply ignore the internal diff library, and fall back to running those external programs, lengthy argument lists and all. And that's where things remain today."
msgstr "Subversion と外部 diff と merge ツールは Subversion の唯一の文脈差分 を出力する能力が GNU の diffutils の連携した呼び出しだけであった ころに由来しています。具体的には <command>diff</command> と <command>diff3</command> ユーティリティーです。Subversion が必要とする ような動作をさせるには、そのようなユーティリティーをかなりたくさんの オプションと引数で呼び出されました。それらのほとんどはそれぞれの ユーティリティーごとの非常に特殊なオプションでした。ある時点から Subversion は自分自身の内部差分ライブラリを持つようになり、エラー回避の仕組みとして の <footnote> <para> Subversion 開発者はもちろんみんな優秀ですが、猿も木から落ちるといいます。 </para> </footnote> <option>--diff-cmd</option>と<option>--diff3-cmd</option> オプションが Subversion コマンドラインクライアントに追加されていて、 これによってユーザは、新しい内部 diff ライブラリを使うかわりに自分の 好きな GNU diff や diff3 ユーティリティーを使うこともできたのです。 このようなオプションが利用された場合、Subversion は単に内部 diff ライブラリを無視し、そのような外部プログラムを長い引数つきで実行します。 これが、このようなオプションが今でも残っている理由です。"

#. Tag: para
#: ch07-customizing-svn.xml:825
#, no-c-format
msgid "It didn't take long for folks to realize that having such easy configuration mechanisms for specifying that Subversion should use the external GNU diff and diff3 utilities located at a particular place on the system could be applied toward the use of other diff and merge tools, too. After all, Subversion didn't actually verify that the things it was being told to run were members of the GNU diffutils toolchain. But the only configurable aspect of using those external tools is their location on the system&mdash;not the option set, parameter order, etc. Subversion continues throwing all those GNU utility options at your external diff tool regardless of whether or not that program can understand those options. And that's where things get unintuitive for most users."
msgstr "Subversion がシステム中の特定のディレクトリにある外部 GNU diff と diff3 ユーティリティーを利用するための簡単な設定の仕組みは他の diff や merge ツールにも一般的に利用できることに開発チームが気づくまでにはそんなに 長い時間はかかりませんでした。要するに Subversion は実際に実行せよと 言われた外部ツールが GNU diffutils のツールの組み合わせであるかどうか を実際には確認していなかったのです。しかしこれらの外部ツールを利用する ための、そのツールのシステム中の場所だけは設定しなくてはなりません&mdash; 必要なオプションと、パラメータの順序、などを指定するのはもちろんのこと ですが。Subversion は、このような GNU ユーティリティー用のオプションの すべてを、実際にそのオプションが理解されるかどうかにかかわりなく 外部 diff ツールに渡します。そしてここがほとんどのユーザにとって 直観的には理解しにくい部分です。"

#. Tag: para
#: ch07-customizing-svn.xml:839
#, no-c-format
msgid "The key to using external diff and merge tools (other than GNU diff and diff3, of course) with Subversion is to use wrapper scripts which convert the input from Subversion into something that your differencing tool can understand, and then to convert the output of your tool back into a format which Subversion expects&mdash;the format that the GNU tools would have used. The following sections cover the specifics of those expectations."
msgstr "外部 diff と merge ツール(もちろん GNU diff と diff3 以外のものも含みますが) を Subversion で利用するときの鍵は、Subversion からの入力をその差分ツールが 理解できる何らかの形に変換し、そのツールからの出力内容&mdash; それは たとえば GNU ツールが利用しているような書式ということになるのでしょうが&mdash; を Subversion 側で理解できる形に変換するようなラッパースクリプトを使うことです。 以下の節ではこのような考え方を具体的に述べます。"

#. Tag: para
#: ch07-customizing-svn.xml:849
#, no-c-format
msgid "The decision on when to fire off a contextual diff or merge as part of a larger Subversion operation is made entirely by Subversion, and is affected by, among other things, whether or not the files being operated on are human-readable as determined by their <literal>svn:mime-type</literal> property. This means, for example, that even if you had the niftiest Microsoft Word-aware differencing or merging tool in the Universe, it would never be invoked by Subversion so long as your versioned Word documents had a configured MIME type that denoted that they were not human-readable (such as <literal>application/msword</literal>). For more about MIME type settings, see"
msgstr "Subversion の処理の一部として文脈 diff や merge をいつ利用するかの判断は 完全に Subversion 側で決定され、操作対象となるファイルが人間によって 可読な形式であるかどうかは他の場合と同様 <literal>svn:mime-type</literal> 属性によって決められます。これによって、例えば、仮にあなたが宇宙で一番 すぐれた Microsoft Word 用の差分とマージツールを手にしていたとしても、 そのバージョン化された Word ドキュメントが人間によって可読ではないことを 示す MIME タイプに設定されていなければ(たとえば <literal>application/msword</literal>のようなもの)決して起動されることは ないでしょう。MIME タイプの設定についての詳細は <xref linkend=\"svn.advanced.props.special.mime-type\"/>を見て ください。"

#. Tag: title
#: ch07-customizing-svn.xml:867
#, no-c-format
msgid "External diff"
msgstr "外部 diff"

#. Tag: para
#: ch07-customizing-svn.xml:869
#, fuzzy, no-c-format
msgid "Subversion calls external diff programs with parameters suitable for the GNU diff utility, and expects only that the external program return with a successful error code. For most alternative diff programs, only the sixth and seventh arguments&mdash;the paths of the files which represent the left and right sides of the diff, respectively&mdash;are of interest. Note that Subversion runs the diff program once per modified file covered by the Subversion operation, so if your program runs in an asynchronous fashion (or <quote>backgrounded</quote>), you might have several instances of it all running simultaneously. Finally, Subversion expects that your program return an error code of 1 if your program detected differences, or 0 if it did not&mdash;any other error code is considered a fatal error."
msgstr "Subversion は外部 diff プログラムを GNU diff ユーティリティーにふさわしい 引数で呼び出し、その外部プログラムには単に成醐ｻ駈ｵたことを示すエラーコード を返すことだけを期待します。その他のほとんどの diff プログラムでは 六番目と七番目の引数、これは diff の左側と右側にそれぞれ対応したファイルの パスになりますが、それだけが関係してきます。Subversion は Subversion の操作によって修正されたファイルごとに diff プログラムを起動する ため、その外部プログラムが非同期的に実行される(あるいは<quote>バックグラウンド</quote> で実行される)場合にはすべてのインスタンスが同時に実行されてしまうかも知れない ことに注意してください。最後に Subversion はそのプログラムが差分を検出した場合 0 を、また検出しなかった場合には 1 をエラーコードとして返すものとして扱います &mdash;これ以外のエラーは致命的なエラーとみなします。"

#. Tag: para
#: ch07-customizing-svn.xml:884
#, no-c-format
msgid "The GNU diff manual page puts it this way: <quote>An exit status of 0 means no differences were found, 1 means some differences were found, and 2 means trouble.</quote>"
msgstr "GNU diff のマニュアルには以下のようにあります: <quote> 0 の終了コードは差分がなかったことを意味し、1 は何か差分があったことを、また 2 は処理に異常があったことを示します。 </quote>"

#. Tag: para
#: ch07-customizing-svn.xml:890
#, no-c-format
msgid "and <xref linkend=\"svn.advanced.externaldifftools.diff.ex-2\"/> are templates for external diff tool wrappers in the Bourne shell and Windows batch scripting languages, respectively."
msgstr "と <xref linkend=\"svn.advanced.externaldifftools.diff.ex-2\"/> はそれぞれ Bourne シェルと Windows バッチスクリプト言語での外部 diff ツールの ラッパー用テンプレートです。"

#. Tag: title
#: ch07-customizing-svn.xml:897
#, no-c-format
msgid "diffwrap.sh"
msgstr "diffwrap.sh"

#. Tag: programlisting
#: ch07-customizing-svn.xml:898
#, no-c-format
msgid ""
"#!/bin/sh\n"
"\n"
"# Configure your favorite diff program here.\n"
"DIFF=\"/usr/local/bin/my-diff-tool\"\n"
"\n"
"# Subversion provides the paths we need as the sixth and seventh \n"
"# parameters.\n"
"LEFT=${6}\n"
"RIGHT=${7}\n"
"\n"
"# Call the diff command (change the following line to make sense for\n"
"# your merge program).\n"
"$DIFF --left $LEFT --right $RIGHT\n"
"\n"
"# Return an errorcode of 0 if no differences were detected, 1 if some were.\n"
"# Any other errorcode will be treated as fatal."
msgstr ""
"#!/bin/sh\n"
"\n"
"# ここに自分の好きな diff プログラムを設定してください。\n"
"DIFF=\"/usr/local/bin/my-diff-tool\"\n"
"\n"
"# Subversion は 6 番目と 7 番目の引数としてパス名が必要です\n"
"LEFT=${6}\n"
"RIGHT=${7}\n"
"\n"
"# diff コマンドを呼び出します (merge プログラムで意味を持つように\n"
"# 以下の行を変更してください。)\n"
"$DIFF --left $LEFT --right $RIGHT\n"
"\n"
"# 差分がなけばエラーコード 0 を、差分があれば 1 を返します。\n"
"# それ以外のエラーコードは致命的とみなします。"

#. Tag: title
#: ch07-customizing-svn.xml:902
#, no-c-format
msgid "diffwrap.bat"
msgstr "diffwrap.bat"

#. Tag: programlisting
#: ch07-customizing-svn.xml:903
#, no-c-format
msgid ""
"@ECHO OFF\n"
"\n"
"REM Configure your favorite diff program here.\n"
"SET DIFF=\"C:\\Program Files\\Funky Stuff\\My Diff Tool.exe\"\n"
"\n"
"REM Subversion provides the paths we need as the sixth and seventh \n"
"REM parameters.\n"
"SET LEFT=%6\n"
"SET RIGHT=%7\n"
"\n"
"REM Call the diff command (change the following line to make sense for\n"
"REM your merge program).\n"
"%DIFF% --left %LEFT% --right %RIGHT%\n"
"\n"
"REM Return an errorcode of 0 if no differences were detected, 1 if some were.\n"
"REM Any other errorcode will be treated as fatal."
msgstr ""
"@ECHO OFF\n"
"\n"
"REM ここに自分の好きな diff プログラムを設定してください。\n"
"SET DIFF=\"C:¥Program Files¥Funky Stuff¥My Diff Tool.exe\"\n"
"\n"
"REM Subversion は 6 番目と 7 番目の引数としてパス名が必要です\n"
"SET LEFT=%6\n"
"SET RIGHT=%7\n"
"\n"
"REM diff コマンドを呼び出します (merge プログラムで意味を持つように\n"
"REM 以下の行を変更してください。)\n"
"%DIFF% --left %LEFT% --right %RIGHT%\n"
"\n"
"REM 差分がなけばエラーコード 0 を、差分があれば 1 を返します。\n"
"REM それ以外のエラーコードは致命的とみなします。"

#. Tag: title
#: ch07-customizing-svn.xml:909
#, no-c-format
msgid "External diff3"
msgstr "外部 diff3"

#. Tag: para
#: ch07-customizing-svn.xml:911
#, fuzzy, no-c-format
msgid "Subversion calls external merge programs with parameters suitable for the GNU diff3 utility, expecting that the external program return with a successful error code and that the full file contents which result from the completed merge operation are printed on the standard output stream (so that Subversion can redirect them into the appropriate version controlled file). For most alternative merge programs, only the ninth, tenth, and eleventh arguments, the paths of the files which represent the <quote>mine</quote>, <quote>older</quote>, and <quote>yours</quote> inputs, respectively, are of interest. Note that because Subversion depends on the output of your merge program, you wrapper script must not exit before that output has been delivered to Subversion. When it finally does exit, it should return an error code of 0 if the merge was successful, or 1 if unresolved conflicts remain in the output&mdash;any other error code is considered a fatal error."
msgstr "Subversion は外部マージプログラムを GNU diff3 ユーティリティーにふさわしい 引数で呼び出し、この外部プログラムが成功を示すエラーコードで戻り、 完了したマージ処理の結果としてのファイル内容の全体が標準出力ストリームに 出力されることを期待します(これによって Subversion はその内容を 適切なバージョン管理下にあるファイルにリダイレクトすることができます)> その他のほとんどのマージプログラムでは 9 番目、10番目、そして 11 番目の 引数だけが処理に関係してきます。これらはそれぞれ <quote>自分側のファイル(mine)</quote>、 <quote>マージ元になる古いファイル(older)</quote>、そして <quote>相手側のファイル(yours)</quote>の内容になります。 Subversion はそのマージプログラムの出力に依存するので、ラッパースクリプトは 出力が Subversion に転送されてしまうまで終了してはいけません。最終的に プログラムが終了した際にマージが成醐ｻ駈ｵていれば 0 を、解消できない衝突が 出力中に残っている場合には 1 を返します &mdash; それ以外のエラーコードは 致命的なものとみなします。"

#. Tag: para
#: ch07-customizing-svn.xml:929
#, no-c-format
msgid "and <xref linkend=\"svn.advanced.externaldifftools.diff3.ex-2\"/> are templates for external merge tool wrappers in the Bourne shell and Windows batch scripting languages, respectively."
msgstr "と <xref linkend=\"svn.advanced.externaldifftools.diff3.ex-2\"/> はそれぞれ Bourne シェルと Windows バッチスクリプト言語用の外部マージツール ラッパーのテンプレートです。"

#. Tag: title
#: ch07-customizing-svn.xml:935
#, no-c-format
msgid "diff3wrap.sh"
msgstr "diff3wrap.sh"

#. Tag: programlisting
#: ch07-customizing-svn.xml:936
#, no-c-format
msgid ""
"#!/bin/sh\n"
"\n"
"# Configure your favorite diff3/merge program here.\n"
"DIFF3=\"/usr/local/bin/my-merge-tool\"\n"
"\n"
"# Subversion provides the paths we need as the ninth, tenth, and eleventh \n"
"# parameters.\n"
"MINE=${9}\n"
"OLDER=${10}\n"
"YOURS=${11}\n"
"\n"
"# Call the merge command (change the following line to make sense for\n"
"# your merge program).\n"
"$DIFF3 --older $OLDER --mine $MINE --yours $YOURS\n"
"\n"
"# After performing the merge, this script needs to print the contents\n"
"# of the merged file to stdout.  Do that in whatever way you see fit.\n"
"# Return an errorcode of 0 on successful merge, 1 if unresolved conflicts\n"
"# remain in the result.  Any other errorcode will be treated as fatal."
msgstr ""
"#!/bin/sh\n"
"\n"
"# ここに自分の好きな diff3/merge プログラムを設定してください。\n"
"DIFF3=\"/usr/local/bin/my-merge-tool\"\n"
"\n"
"# Subversion は必要となるパスを、9, 10, 11 番目の引数として用意します。\n"
"MINE=${9}\n"
"OLDER=${10}\n"
"YOURS=${11}\n"
"\n"
"# merge コマンドを呼び出します (merge プログラムで意味を持つように\n"
"# 以下の行を変更してください。)\n"
"$DIFF3 --older $OLDER --mine $MINE --yours $YOURS\n"
"\n"
"# マージ処理実行後、このスクリプトはマージされたファイル内容を標準出力に\n"
"# 表示す必要があります。適切だと考える方法でこれを行ってください。\n"
"# エラーコード 0 はマージ成功を、1 は解消不能な衝突が結果に残ったことを\n"
"# 示します。それ以外のエラーコードは致命的とみなします。"

#. Tag: title
#: ch07-customizing-svn.xml:940
#, no-c-format
msgid "diff3wrap.bat"
msgstr "diff3wrap.bat"

#. Tag: programlisting
#: ch07-customizing-svn.xml:941
#, no-c-format
msgid ""
"@ECHO OFF\n"
"\n"
"REM Configure your favorite diff3/merge program here.\n"
"SET DIFF3=\"C:\\Program Files\\Funky Stuff\\My Merge Tool.exe\"\n"
"\n"
"REM Subversion provides the paths we need as the ninth, tenth, and eleventh \n"
"REM parameters.  But we only have access to nine parameters at a time, so we\n"
"REM shift our nine-parameter window twice to let us get to what we need.\n"
"SHIFT\n"
"SHIFT\n"
"SET MINE=%7\n"
"SET OLDER=%8\n"
"SET YOURS=%9\n"
"\n"
"REM Call the merge command (change the following line to make sense for\n"
"REM your merge program).\n"
"%DIFF3% --older %OLDER% --mine %MINE% --yours %YOURS%\n"
"\n"
"REM After performing the merge, this script needs to print the contents\n"
"REM of the merged file to stdout.  Do that in whatever way you see fit.\n"
"REM Return an errorcode of 0 on successful merge, 1 if unresolved conflicts\n"
"REM remain in the result.  Any other errorcode will be treated as fatal."
msgstr ""
"@ECHO OFF\n"
"\n"
"REM ここに自分の好きな diff3/merge プログラムを設定してください。\n"
"SET DIFF3=\"C:¥Program Files¥Funky Stuff¥My Merge Tool.exe\"\n"
"\n"
"REM Subversion は必要となるパスを、9, 10, 11 番目の引数として用意しますが、\n"
"REM 一度にアクセスできる引数の数は 9 個までなので、必要な引数を取得するため\n"
"REM 取得前に 9 個のパラメータウィンドウを二回シフトしておきます。\n"
"SHIFT\n"
"SHIFT\n"
"SET MINE=%7\n"
"SET OLDER=%8\n"
"SET YOURS=%9\n"
"\n"
"REM merge コマンドを呼び出します (merge プログラムで意味を持つように\n"
"REM 以下の行を変更してください。)\n"
"%DIFF3% --older %OLDER% --mine %MINE% --yours %YOURS%\n"
"\n"
"REM マージ処理実行後、このスクリプトはマージされたファイル内容を標準出力に\n"
"REM 表示す必要があります。適切だと考える方法でこれを行ってください。\n"
"REM エラーコード 0 はマージ成功を、1 は解消不能な衝突が結果に残ったことを\n"
"REM 示します。それ以外のエラーコードは致命的とみなします。"

#. Tag: title
#: ch08-embedding-svn.xml:2
#, fuzzy, no-c-format
msgid "Embedding Subversion"
msgstr "Subversionのインストール"

#. Tag: para
#: ch08-embedding-svn.xml:4
#, no-c-format
msgid "Subversion has a modular design: it's implemented as a collection of libraries written in C. Each library has a well-defined purpose and Application Programming Interface (API), and that interface is available not only for Subversion itself to use, but for any software that wishes to embed or otherwise programmatically control Subversion. Additionally, Subversion's API is available not only to other C programs, but also to programs written in higher-level languages such as Python, Perl, Java, or Ruby."
msgstr ""

#. Tag: para
#: ch08-embedding-svn.xml:14
#, fuzzy, no-c-format
msgid "This chapter is for those who wish to interact with Subversion through its public API or its various language bindings. If you wish to write robust wrapper scripts around Subversion functionality to simplify your own life, are trying to develop more complex integrations between Subversion and other pieces of software, or just have an interest in Subversion's various library modules and what they offer, this chapter is for you. If, however, you don't foresee yourself participating with Subversion at such a level, feel free to skip this chapter with the confidence that your experience as a Subversion user will not be affected."
msgstr "この章はソースコードに自分の手を実際に染めることによってSubversion のいままさに起こっている進化を援護しようとする人に向けてのものです。 ソフトウェアのもっと詳細に触れ、Subversion自身を開発するのに&mdash; あるいは、Subversionライブラリを使った完全に新しいツールを書くために &mdash;必要になる技術的に重要な点について説明します。もし、そんな レベルの話に参加したくないのであれば、この章は飛ばしてもらって結構 です。Subversionのユーザとしての経験には影響を与えませんので。"

#. Tag: title
#: ch08-embedding-svn.xml:30
#, no-c-format
msgid "Layered Library Design"
msgstr "階層化されたライブラリ設計"

#. Tag: para
#: ch08-embedding-svn.xml:32
#, fuzzy, no-c-format
msgid "Each of Subversion's core libraries can be said to exist in one of three main layers&mdash;the Repository Layer, the Repository Access (RA) Layer, or the Client Layer (see <xref linkend=\"svn.intro.architecture.dia-1\"/>). We will examine these layers shortly, but first, let's briefly summarize Subversion's various libraries. For the sake of consistency, we will refer to the libraries by their extensionless Unix library names (libsvn_fs, libsvn_wc, mod_dav_svn, etc.)."
msgstr "Subversionはモジュール化された設計になっていて、Cライブラリの集まりと して実装されています。ライブラリのそれぞれはよく定義された目的とインター フェースを持っていて、ほとんどのモジュールは三つの主要な層のどれかに属 します。&mdash;リポジトリ層、リポジトリアクセス層(RA)、そしてクライア ント層です。これらの層について簡単に見ていきますが、最初に<xref linkend=\"svn.developer.layerlib.tbl-1\"/> にあるSubversion ライブラリ一覧を見てくだ さい。一貫した議論とするため、ライブラリは、拡張子を除いた Unix のライ ブラリ名称で参照することにします(たとえば: libsvn_fs, libsvn_wc, mod_dav_svn)。"

#. Tag: term
#: ch08-embedding-svn.xml:43
#, no-c-format
msgid "libsvn_client"
msgstr "libsvn_client"

#. Tag: para
#: ch08-embedding-svn.xml:44
#, no-c-format
msgid "Primary interface for client programs"
msgstr "クライアントプログラムへの主要なインターフェース"

#. Tag: term
#: ch08-embedding-svn.xml:48
#, no-c-format
msgid "libsvn_delta"
msgstr "libsvn_delta"

#. Tag: para
#: ch08-embedding-svn.xml:49
#, no-c-format
msgid "Tree and byte-stream differencing routines"
msgstr "ツリーとバイトストリームの差分ルーチン"

#. Tag: term
#: ch08-embedding-svn.xml:53
#, no-c-format
msgid "libsvn_diff"
msgstr "libsvn_diff"

#. Tag: para
#: ch08-embedding-svn.xml:54
#, no-c-format
msgid "Contextual differencing and merging routines"
msgstr "コンテキスト差分とマージルーチン"

#. Tag: term
#: ch08-embedding-svn.xml:58
#, no-c-format
msgid "libsvn_fs"
msgstr "libsvn_fs"

#. Tag: para
#: ch08-embedding-svn.xml:59
#, no-c-format
msgid "Filesystem commons and module loader"
msgstr "ファイルシステムの共通関数と、モジュールローダー"

#. Tag: term
#: ch08-embedding-svn.xml:63
#, no-c-format
msgid "libsvn_fs_base"
msgstr "libsvn_fs_base"

#. Tag: para
#: ch08-embedding-svn.xml:64
#, no-c-format
msgid "The Berkeley DB filesystem back-end"
msgstr "Berkeley DB ファイルシステムバックエンド"

#. Tag: term
#: ch08-embedding-svn.xml:68
#, no-c-format
msgid "libsvn_fs_fs"
msgstr "libsvn_fs_fs"

#. Tag: para
#: ch08-embedding-svn.xml:69
#, no-c-format
msgid "The native filesystem (FSFS) back-end"
msgstr "ネイティブファイルシステム (FSFS) バックエンド"

#. Tag: term
#: ch08-embedding-svn.xml:73
#, no-c-format
msgid "libsvn_ra"
msgstr "libsvn_ra"

#. Tag: para
#: ch08-embedding-svn.xml:74
#, no-c-format
msgid "Repository Access commons and module loader"
msgstr "リポジトリアクセスのための共通ルーチンとモジュールローダ"

#. Tag: term
#: ch08-embedding-svn.xml:78
#, no-c-format
msgid "libsvn_ra_dav"
msgstr "libsvn_ra_dav"

#. Tag: para
#: ch08-embedding-svn.xml:79
#, no-c-format
msgid "The WebDAV Repository Access module"
msgstr "WebDAV リポジトリアクセスモジュール"

#. Tag: term
#: ch08-embedding-svn.xml:83
#, no-c-format
msgid "libsvn_ra_local"
msgstr "libsvn_ra_local"

#. Tag: para
#: ch08-embedding-svn.xml:84
#, no-c-format
msgid "The local Repository Access module"
msgstr "ローカルリポジトリアクセスモジュール"

#. Tag: term
#: ch08-embedding-svn.xml:88
#, fuzzy, no-c-format
msgid "libsvn_ra_serf"
msgstr "libsvn_ra_svn"

#. Tag: para
#: ch08-embedding-svn.xml:89
#, fuzzy, no-c-format
msgid "Another (experimental) WebDAV Repository Access module"
msgstr "WebDAV リポジトリアクセスモジュール"

#. Tag: term
#: ch08-embedding-svn.xml:93
#, no-c-format
msgid "libsvn_ra_svn"
msgstr "libsvn_ra_svn"

#. Tag: para
#: ch08-embedding-svn.xml:94
#, no-c-format
msgid "The custom protocol Repository Access module"
msgstr "独自プロトコルによるリポジトリアクセスモジュール"

#. Tag: term
#: ch08-embedding-svn.xml:98
#, no-c-format
msgid "libsvn_repos"
msgstr "libsvn_repos"

#. Tag: para
#: ch08-embedding-svn.xml:99
#, no-c-format
msgid "Repository interface"
msgstr "リポジトリインターフェース"

#. Tag: term
#: ch08-embedding-svn.xml:102
#, no-c-format
msgid "libsvn_subr"
msgstr "libsvn_subr"

#. Tag: para
#: ch08-embedding-svn.xml:103
#, no-c-format
msgid "Miscellaneous helpful subroutines"
msgstr "さまざまな役に立つサブルーチン"

#. Tag: term
#: ch08-embedding-svn.xml:107
#, no-c-format
msgid "libsvn_wc"
msgstr "libsvn_wc"

#. Tag: para
#: ch08-embedding-svn.xml:108
#, no-c-format
msgid "The working copy management library"
msgstr "作業コピー管理ライブラリ"

#. Tag: term
#: ch08-embedding-svn.xml:112
#, no-c-format
msgid "mod_authz_svn"
msgstr "mod_authz_svn"

#. Tag: para
#: ch08-embedding-svn.xml:113
#, no-c-format
msgid "Apache authorization module for Subversion repositories access via WebDAV"
msgstr "WebDAV経由で Subversion リポジトリにアクセスするための Apache 認証モジュール。"

#. Tag: para
#: ch08-embedding-svn.xml:118
#, no-c-format
msgid "Apache module for mapping WebDAV operations to Subversion ones"
msgstr "WebDAV操作をSubversionのものに対応付けるApacheモジュール"

#. Tag: para
#: ch08-embedding-svn.xml:123
#, fuzzy, no-c-format
msgid "The fact that the word <quote>miscellaneous</quote> only appears once in the previous list is a good sign. The Subversion development team is serious about making sure that functionality lives in the right layer and libraries. Perhaps the greatest advantage of the modular design is its lack of complexity from a developer's point of view. As a developer, you can quickly formulate that kind of <quote>big picture</quote> that allows you to pinpoint the location of certain pieces of functionality with relative ease."
msgstr "に<quote>さまざまな</quote>という言 葉が一つだけ出てきているというのは、良い設計である証拠です。Subversion 開発チームはそれぞれの機能が、正しい層とライブラリにあることを確認する のを、重要なことだと考えています。多分、モジュール化した設計の一番大き な利点は開発者の観点から見た複雑さを減らすことができることです。開発者 として、あなたはすぐに、<quote>話の概要</quote>を知ることができ、それ によって比較的簡単にある特定の機能の場所を特定することができるようにな ります。"

#. Tag: para
#: ch08-embedding-svn.xml:133
#, fuzzy, no-c-format
msgid "Another benefit of modularity is the ability to replace a given module with a whole new library that implements the same API without affecting the rest of the code base. In some sense, this happens within Subversion already. The libsvn_ra_dav, libsvn_ra_local, libsvn_ra_serf, and libsvn_ra_svn libraries each implement the same interface, all working as plugins to libsvn_ra. And all four communicate with the Repository Layer&mdash;libsvn_ra_local connects to the repository directly; the other three do so over a network. The libsvn_fs_base and libsvn_fs_fs libraries are another pair of libraries that implement the same functionality in different ways&mdash;both are plugins to the common libsvn_fs library."
msgstr "モジュール化のほかの利点は、与えられたモジュールをコードの別の部分に 影響与えることなしに、同じAPIを実装した新しいライブラリで置き換えることが できるということです。ある意味で、これはSubversion内部で既に起きて いることです。libsvn_ra_dav, libsvn_ra_local, そして libsvn_ra_svn の すべては、同じインターフェースを実装しています。そして、この三つすべて が、リポジトリ層とやり取りします。 &mdash; libsvn_ra_dav と libsvn_ra_svn はネットワーク越しにそう しますし、libsvn_ra_local は直接リポジトリに接続します。 libsvn_fs_base と libsvn_fs_fs ライブラリは、さらにまた別の例です。"

#. Tag: para
#: ch08-embedding-svn.xml:146
#, no-c-format
msgid "The client itself also highlights the benefits of modularity in the Subversion design. Subversion's libsvn_client library is a one-stop shop for most of the functionality necessary for designing a working Subversion client (see <xref linkend=\"svn.developer.layerlib.client\"/>). So while the Subversion distribution provides only the <command>svn</command> command-line client program, there are several third-party programs which provide various forms of graphical client UI. These GUIs use the same APIs that the stock command-line client does. This type of modularity has played a large role in the proliferation of available Subversion clients and IDE integrations and, by extension, to the tremendous adoption rate of Subversion itself."
msgstr ""

#. Tag: title
#: ch08-embedding-svn.xml:162
#, no-c-format
msgid "Repository Layer"
msgstr "リポジトリ層"

#. Tag: para
#: ch08-embedding-svn.xml:164
#, fuzzy, no-c-format
msgid "When referring to Subversion's Repository Layer, we're generally talking about two basic concepts&mdash;the versioned filesystem implementation (accessed via libsvn_fs, and supported by its libsvn_fs_base and libsvn_fs_fs plugins), and the repository logic that wraps it (as implemented in libsvn_repos). These libraries provide the storage and reporting mechanisms for the various revisions of your version-controlled data. This layer is connected to the Client Layer via the Repository Access Layer, and is, from the perspective of the Subversion user, the stuff at the <quote>other end of the line.</quote>"
msgstr "Subversionのリポジトリ層を参照するとき、一般的に、二つのライブラリに ついて語っています&mdash;リポジトリライブラリとファイルシステムライブラリ です。これらのライブラリはバージョン管理されたデータのさまざまなリビジョン のための格納と報告の仕組みを提供しています。この層はリポジトリアクセス層 を経由してクライアント層とつながっていて、Subversion利用者から見ると、 <quote>通信の相手先</quote>にあるものに見えます。"

#. Tag: para
#: ch08-embedding-svn.xml:176
#, fuzzy, no-c-format
msgid "The Subversion Filesystem is not a kernel-level filesystem that one would install in an operating system (like the Linux ext2 or NTFS), but a virtual filesystem. Rather than storing <quote>files</quote> and <quote>directories</quote> as real files and directories (as in, the kind you can navigate through using your favorite shell program), it uses one of two available abstract storage backends&mdash;either a Berkeley DB database environment, or a flat-file representation. (To learn more about the two repository back-ends, see <xref linkend=\"svn.reposadmin.basics.backends\"/>.) There has even been considerable interest by the development community in giving future releases of Subversion the ability to use other back-end database systems, perhaps through a mechanism such as Open Database Connectivity (ODBC). In fact, Google did something similar to this before launching the Google Code Project Hosting service: they announced in mid-2006 that members of its Open Source team had written a new proprietary Subversion filesystem plugin which used their ultra-scalable Bigtable database for its storage."
msgstr "Subversionのファイルシステムはlibsvn_fs APIによってアクセスされ、 オペレーティングシステムにインストールされているカーネルレベルの 意味でのファイルシステム(Linuxのext2 や、NTFSのような)ではなく、 仮想的なファイルシステムのことです。<quote>ファイル</quote>と <quote>ディレクトリ</quote>を (自分の好きなシェルを使って操作することができるような)現実の ファイルとディレクトリとして保存するのではなく、バックエンドの 抽象的な保存の仕組みとして二つのうちのどちらかが利用可能です &mdash; Berkeley DB データベース環境か、フラットファイルによる 表現です。(この二つのバックエンドについてより深く知りたい場合は <xref linkend=\"svn.reposadmin.basics.backends\"/>を見てください)。 しかし、Subversionの今後のリリースの中で開発コミュニティによって 興味を引いている、別のバックエンドデータベースシステムの利用 可能性があります。たとえば、オープンデータベースコネクティビティー (ODBC)などです。"

#. Tag: para
#: ch08-embedding-svn.xml:196
#, fuzzy, no-c-format
msgid "The filesystem API exported by libsvn_fs contains the kinds of functionality you would expect from any other filesystem API&mdash;you can create and remove files and directories, copy and move them around, modify file contents, and so on. It also has features that are not quite as common, such as the ability to add, modify, and remove metadata (<quote>properties</quote>) on each file or directory. Furthermore, the Subversion Filesystem is a versioning filesystem, which means that as you make changes to your directory tree, Subversion remembers what your tree looked like before those changes. And before the previous changes. And the previous ones. And so on, all the way back through versioning time to (and just beyond) the moment you first started adding things to the filesystem."
msgstr "libsvn_fs が提供するファイルシステムAPIは他のファイルシステムAPI でも期待できるような機能を持っています: ファイルやディレクトリの 作成や削除ができて、コピーや、移動ができ、ファイルの内容を 修正することができて、などなどです。あまり一般的ではないような 機能もあります。たとえば、ファイルやディレクトリに付随した メタデータ(<quote>属性</quote>)の追加、変更、削除、などです。さらに Subversionファイルシステムはバージョン化可能なファイルシステムで、 これは、ディレクトリツリーに変更を加えると、Subversionはその変更 以前に、そのツリーがどのように見えるかを憶えておくということを 意味します。そして、さらにその前の変更前、さらにその前、などです。 このようにして、ファイルシステムに何かを最初に追加したところまでの すべてのバージョンに戻ることができます。"

#. Tag: para
#: ch08-embedding-svn.xml:211
#, fuzzy, no-c-format
msgid "All the modifications you make to your tree are done within the context of a Subversion commit transaction. The following is a simplified general routine for modifying your filesystem:"
msgstr "ツリーに加えたすべての変更はSubversionのトランザクションの中で実行 されます。以下は、ファイルシステムを修正するための単純で一般的な 手続きです:"

#. Tag: para
#: ch08-embedding-svn.xml:218
#, fuzzy, no-c-format
msgid "Begin a Subversion commit transaction."
msgstr "Subversionトランザクションの開始"

#. Tag: para
#: ch08-embedding-svn.xml:221
#, no-c-format
msgid "Make your changes (adds, deletes, property modifications, etc.)."
msgstr "修正の実行(追加、削除、属性の修正、など)"

#. Tag: para
#: ch08-embedding-svn.xml:225
#, no-c-format
msgid "Commit your transaction."
msgstr "トランザクションのコミット"

#. Tag: para
#: ch08-embedding-svn.xml:229
#, no-c-format
msgid "Once you have committed your transaction, your filesystem modifications are permanently stored as historical artifacts. Each of these cycles generates a single new revision of your tree, and each revision is forever accessible as an immutable snapshot of <quote>the way things were.</quote>"
msgstr "トランザクションをコミットすると、ファイルシステムの変更は歴史上の 出来事として永久に記録されます。このようなそれぞれのサイクルは ツリーに新しいリビジョンを作り、それぞれのリビジョンは<quote>あることが どのようであったか</quote>という純粋なスナップショットとしていつでもアクセス できるようになります。"

#. Tag: title
#: ch08-embedding-svn.xml:236
#, no-c-format
msgid "The Transaction Distraction"
msgstr "トランザクションを邪魔するもの"

#. Tag: para
#: ch08-embedding-svn.xml:238
#, fuzzy, no-c-format
msgid "The notion of a Subversion transaction can become easily confused with the transaction support provided by the underlying database itself, especially given the former's close proximity to the Berkeley DB database code in libsvn_fs_base. Both types of transaction exist to provide atomicity and isolation. In other words, transactions give you the ability to perform a set of actions in an all-or-nothing fashion&mdash;either all the actions in the set complete with success, or they all get treated as if <emphasis>none</emphasis> of them ever happened&mdash;and in a way that does not interfere with other processes acting on the data."
msgstr "Subversionのトランザクションという概念は、特に、 それと非常に近い意味のlibsvn_fs にあるデータベースの実際のコード を見せられると、データベース自身がサポートしているトランザクションと 容易に混乱してしまいます。両方とも、不可分性と、分離性を持っています。 言い換えると、トランザクションはある処理のあつまりを、<quote>全か、無か</quote> という形で実行する能力を与えます&mdash;そのあつまりの中にあるすべての 処理は、完全に成醐ｻ駈ｷるか、<emphasis>何も</emphasis>起こらなかったかの ように扱われます&mdash;そして、トランザクション中に、そのデータに別の 処理をするプロセスには一切干渉しません。"

#. Tag: para
#: ch08-embedding-svn.xml:251
#, fuzzy, no-c-format
msgid "Database transactions generally encompass small operations related specifically to the modification of data in the database itself (such as changing the contents of a table row). Subversion transactions are larger in scope, encompassing higher-level operations like making modifications to a set of files and directories which are intended to be stored as the next revision of the filesystem tree. If that isn't confusing enough, consider the fact that Subversion uses a database transaction during the creation of a Subversion transaction (so that if the creation of Subversion transaction fails, the database will look as if we had never attempted that creation in the first place)!"
msgstr "データベーストランザクションは一般的に、データベース自身のデータの 修正に関係した小さないくつかの操作を含んでいます。 (たとえば、テーブル行の内容を修正することなどです)。 Subversionのトランザクションは、もっと大きな範囲のもので、 それは、ファイルシステムツリーの次のリビジョンとして格納されることを 目的とした、ファイルやディレクトリに対するいくつかの修正をする ような操作を含んでいます。混乱がないようなら、こう考えてください: SubversionはSubversionトランザクションの生成中に、データベーストランザクション を使います(それで、もしSubversionトランザクションの生成が失敗すれば、 データベースは最初からその生成をしなかったように見えます)"

#. Tag: para
#: ch08-embedding-svn.xml:265
#, no-c-format
msgid "Fortunately for users of the filesystem API, the transaction support provided by the database system itself is hidden almost entirely from view (as should be expected from a properly modularized library scheme). It is only when you start digging into the implementation of the filesystem itself that such things become visible (or interesting)."
msgstr "ファイルシステムAPI利用者にとって幸運なことに、データベースシステム 自身によって用意されているトランザクションサポートは、ほとんどの場合 隠れていて見えません。(普通のモジュール化されたライブラリの設計から 期待されることですが)。ファイルシステム自身の実装を開始する場合に初めて、 そのようなことが見えるように(あるいは興味深く思えるように)なります。"

#. Tag: para
#: ch08-embedding-svn.xml:275
#, fuzzy, no-c-format
msgid "Most of the functionality provided by the filesystem interface deals with actions that occur on individual filesystem paths. That is, from outside of the filesystem, the primary mechanism for describing and accessing the individual revisions of files and directories comes through the use of path strings like <filename>/foo/bar</filename>, just as if you were addressing files and directories through your favorite shell program. You add new files and directories by passing their paths-to-be to the right API functions. You query for information about them by the same mechanism."
msgstr "ファイルシステムインターフェースによって用意される機能のほとんどは ファイルシステムパスに対して起こる操作として提供されます。 つまり、ファイルシステムの外部からは、ファイルやディレクトリの個別の リビジョンを記述し、アクセスする、主要な仕組みは、<filename>/foo/bar</filename> のようなパス文字列を使うことを通じて提供され、それはちょうど、あなたが なじみのシェルプログラムを通じてファイルやディレクトリにアクセスする ような感じになります。適切なパス名を正しいAPI関数に渡すことによって、 新しいファイルやディレクトリを追加することができます。同じ仕組みを使って そのファイルなどに関した情報を問い合わせることができます。"

#. Tag: para
#: ch08-embedding-svn.xml:286
#, no-c-format
msgid "Unlike most filesystems, though, a path alone is not enough information to identify a file or directory in Subversion. Think of a directory tree as a two-dimensional system, where a node's siblings represent a sort of left-and-right motion, and descending into subdirectories a downward motion. <xref linkend=\"svn.developer.layerlib.repos.dia-1\"/> shows a typical representation of a tree as exactly that."
msgstr "ほとんどのファイルシステムとは違い、パスだけを指定するのは、Subversion のファイルやディレトクリを特定するのに十分な情報ではありません。 ディレクトリツリーを二次元のシステムと考えてください。ここで、あるノードの 兄弟は、左から右に移動することを表現していて、サブディレトクリに降りていく のは、下向きの移動であると考えてください。<xref linkend=\"svn.developer.layerlib.repos.dia-1\"/> は典型的なツリーの 表現を示しています。"

#. Tag: title
#: ch08-embedding-svn.xml:296
#, no-c-format
msgid "Files and directories in two dimensions"
msgstr "二次元の中のファイルとディレクトリ"

#. Tag: para
#: ch08-embedding-svn.xml:300
#, fuzzy, no-c-format
msgid "The difference here is that the Subversion filesystem has a nifty third dimension that most filesystems do not have&mdash;Time! <footnote> <para>We understand that this may come as a shock to sci-fi fans who have long been under the impression that Time was actually the <emphasis>fourth</emphasis> dimension, and we apologize for any emotional trauma induced by our assertion of a different theory.</para> </footnote> In the filesystem interface, nearly every function that has a <parameter>path</parameter> argument also expects a <parameter>root</parameter> argument. This <structname>svn_fs_root_t</structname> argument describes either a revision or a Subversion transaction (which is simply a revision-in-the-making), and provides that third-dimensional context needed to understand the difference between <filename>/foo/bar</filename> in revision 32, and the same path as it exists in revision 98. <xref linkend=\"svn.developer.layerlib.repos.dia-2\"/> shows revision history as an added dimension to the Subversion filesystem universe."
msgstr "もちろんSubversionのファイルシステムは隠れた第三の次元を持っていますが、 それはほとんどのファイルシステムが持っていないものです&mdash;それは時間の次元です! <footnote> <para> わたしたちは、時間は実際には<emphasis>第四の</emphasis> 次元である という印象をずっと持っていたSFファイルにショックを与えるということを 理解していますし、別の理論をわたしたちが宣言することによって生じる 心理的なトラウマについては謝らなくてはなりませんね。 </para> </footnote> ファイルシステムインターフェースで、<parameter>path</parameter> 引数を 持つほとんどすべての関数はまた<parameter>root</parameter> 引数も指定し なくてはなりません。この<structname>svn_fs_root_t</structname> 引数は、 リビジョンか、Subversionのトランザクション(それは普通はリビジョンとな るべきものです)のどちらかをあらわし、リビジョン32の <filename>/foo/bar</filename> と、リビジョン98の同じパスとの間の違いを 理解するのに必要になる三次元コンテキストを用意します。<xref linkend=\"svn.developer.layerlib.repos.dia-2\"/> はSubversionファイルシステムの宇宙に 追加された次元についてのリビジョン履歴をあらわしています。"

#. Tag: title
#: ch08-embedding-svn.xml:324
#, no-c-format
msgid "Versioning time&mdash;the third dimension!"
msgstr "バージョン化した時刻&mdash;第三の次元!"

#. Tag: para
#: ch08-embedding-svn.xml:328
#, no-c-format
msgid "As we mentioned earlier, the libsvn_fs API looks and feels like any other filesystem, except that it has this wonderful versioning capability. It was designed to be usable by any program interested in a versioning filesystem. Not coincidentally, Subversion itself is interested in that functionality. But while the filesystem API should be sufficient for basic file and directory versioning support, Subversion wants more&mdash;and that is where libsvn_repos comes in."
msgstr "以前指摘したように、libsvn_fs API は他のファイルシステムと見かけは よくにているが、このすばらしいバージョン管理能力だけは例外です。 それはバージョンファイルシステムに興味のあるすべてのプログラマによって 利用できるように設計されました。偶然の一致ではありませんが、 Subversion自身もその機能に興味があります。しかし、ファイルシステムAPI は基本的なファイルとディレクトリのバージョン管理をサポートしていますが Subversionはさらに多くを要求します&mdash;そしてそれはlibsvn_repos が 提供するものです。"

#. Tag: para
#: ch08-embedding-svn.xml:338
#, fuzzy, no-c-format
msgid "The Subversion repository library (libsvn_repos) sits (logically speaking) atop the libsvn_fs API, providing additional functionality beyond that of the underlying versioned filesystem logic. It does not completely wrap each and every filesystem function&mdash;only certain major steps in the general cycle of filesystem activity are wrapped by the repository interface. Some of these include the creation and commit of Subversion transactions, and the modification of revision properties. These particular events are wrapped by the repository layer because they have hooks associated with them. A repository hook system is not strictly related to implementing a versioning filesystem, so it lives in the repository wrapper library."
msgstr "libsvn_repos APIを使おうとする開発者には、それがファイルシステムインターフェース に対する完全なラッパではないことがわかるでしょう。つまり、 ファイルシステム操作の一般的なサイクルにある主要なイベントに ついてだけリポジトリインターフェースによってラップされます。 その中のいくつかは、Subversionトランザクションの生成やコミット、 リビジョン属性の修正などです。このような特定のイベントはそれに 関連したフックがあるため、リポジトリ層によってラップされます。 将来的には他のイベントもリポジトリAPIによってラップされるかも 知れません。しかし、残りのファイルシステムの作用のすべては libsvn_fs API 経由で直接実行されます。"

#. Tag: para
#: ch08-embedding-svn.xml:352
#, fuzzy, no-c-format
msgid "The hooks mechanism is but one of the reasons for the abstraction of a separate repository library from the rest of the filesystem code. The libsvn_repos API provides several other important utilities to Subversion. These include the abilities to:"
msgstr "フックの仕組みは、残りのファイルシステムコードから 独立したリポジトリライブラリの抽象化が一つの理由です。 libsvn_repos API はほかにもいくつかの重要なユーティリティーを Subversionに提供しています。これには以下のようなものがあります:"

#. Tag: para
#: ch08-embedding-svn.xml:360
#, no-c-format
msgid "create, open, destroy, and perform recovery steps on a Subversion repository and the filesystem included in that repository."
msgstr "Subversionリポジトリと、それに含まれるファイルシステム上での ファイルの生成、オープン、削除、そして回復のステップ"

#. Tag: para
#: ch08-embedding-svn.xml:365
#, no-c-format
msgid "describe the differences between two filesystem trees."
msgstr "二つのファイルシステムツリー間の比較の表示"

#. Tag: para
#: ch08-embedding-svn.xml:369
#, no-c-format
msgid "query for the commit log messages associated with all (or some) of the revisions in which a set of files was modified in the filesystem."
msgstr "ファイルシステム中で修正されたファイルがあるすべて(あるいは いくつかの)のリビジョンに結びついたコミットログメッセージへの 問い合わせ"

#. Tag: para
#: ch08-embedding-svn.xml:374
#, no-c-format
msgid "generate a human-readable <quote>dump</quote> of the filesystem, a complete representation of the revisions in the filesystem."
msgstr "ファイルシステムの可読な<quote>ダンプ</quote>の生成、ファイルシステム中にある リビジョンの完全な表現"

#. Tag: para
#: ch08-embedding-svn.xml:379
#, no-c-format
msgid "parse that dump format, loading the dumped revisions into a different Subversion repository."
msgstr "ダンプフォーマットの解析、異なるSubversionリポジトリの中に ダンプされたリビジョンをロードすること"

#. Tag: para
#: ch08-embedding-svn.xml:384
#, no-c-format
msgid "As Subversion continues to evolve, the repository library will grow with the filesystem library to offer increased functionality and configurable option support."
msgstr "Subversionが進化し続けるにつれて、リポジトリライブラリは 増えつづける機能と設定可能なオプションをサポートを提供する ために，ファイルシステムライブラリとともに大きくなり続ける でしょう。"

#. Tag: title
#: ch08-embedding-svn.xml:392
#, no-c-format
msgid "Repository Access Layer"
msgstr "リポジトリアクセス層"

#. Tag: para
#: ch08-embedding-svn.xml:394
#, fuzzy, no-c-format
msgid "If the Subversion Repository Layer is at <quote>the other end of the line</quote>, the Repository Access (RA) Layer is the line itself. Charged with marshaling data between the client libraries and the repository, this layer includes the libsvn_ra module loader library, the RA modules themselves (which currently includes libsvn_ra_dav, libsvn_ra_local, libsvn_ra_serf, and libsvn_ra_svn), and any additional libraries needed by one or more of those RA modules (such as the mod_dav_svn Apache module or libsvn_ra_svn's server, <command>svnserve</command>)."
msgstr "もしSubversionリポジトリ層が、<quote>通信路のもう一方の端点</quote> であるなら、リポジトリ アクセス層は、その通信路そのもののです。クライアントライブラリとリポジトリ の間でデータを相互変換することが課せられたこの層は libsva_raモジュールローダ ライブラリ、そのRAモジュール自身(現在のところ、libsvn_ra_dav, libsvn_ra_local,そして libsvn_ra_svnを含みます)、そして一つ以上の RA モジュールに必要となる追加 のライブラリ、たとえば、libsvn_ra_dav が通信するための、mod_dav_svn Apache モジュールを含みます。mod_dva_svn モジュールを利用しないときには、 libsvn_ra_svn のサーバである<command>svnserve</command>が通信します。"

#. Tag: para
#: ch08-embedding-svn.xml:405
#, fuzzy, no-c-format
msgid "Since Subversion uses URLs to identify its repository resources, the protocol portion of the URL scheme (usually <literal>file://</literal>, <literal>http://</literal>, <literal>https://</literal>, <literal>svn://</literal>, or <literal>svn+ssh://</literal>) is used to determine which RA module will handle the communications. Each module registers a list of the protocols it knows how to <quote>speak</quote> so that the RA loader can, at runtime, determine which module to use for the task at hand. You can determine which RA modules are available to the Subversion command-line client, and what protocols they claim to support, by running <command>svn --version</command>:"
msgstr "Subversionは、リポジトリリソースを特定するのに URLを利用するので、 URLスキーマのプロトコル部(普通は、<literal>file:</literal>, <literal>http:</literal>, <literal>https:</literal>, あるいは <literal>svn:</literal>) はどの RA モジュールが通信を処理するか を決めるために使われます。それぞれのモジュールは、プロトコルのリスト を登録しますが、それはどうやって<quote>話せば</quote>良いかを知っているので、 RA ローダが実行時にどのRAモジュールをその処理のために利用するかを 決定することができます。どのRAモジュールがSubversionコマンドライン クライアントに利用可能かを決定することができ、<command>svn --version</command> を実行することで、どのプロトコルはサポートしていないと言ってくるか を知ることができます。:"

#. Tag: screen
#: ch08-embedding-svn.xml:418
#, fuzzy, no-c-format
msgid ""
"$ svn --version\n"
"svn, version 1.4.3 (r23084)\n"
"   compiled Jan 18 2007, 07:47:40\n"
"\n"
"Copyright (C) 2000-2006 CollabNet.\n"
"Subversion is open source software, see http://subversion.tigris.org/\n"
"This product includes software developed by CollabNet (http://www.Collab.Net/).\n"
"\n"
"The following repository access (RA) modules are available:\n"
"\n"
"* ra_dav : Module for accessing a repository via WebDAV (DeltaV) protocol.\n"
"  - handles 'http' scheme\n"
"  - handles 'https' scheme\n"
"* ra_svn : Module for accessing a repository using the svn network protocol.\n"
"  - handles 'svn' scheme\n"
"* ra_local : Module for accessing a repository on local disk.\n"
"  - handles 'file' scheme\n"
"\n"
"$"
msgstr ""
"$ svn --version\n"
"svn, version 1.2.3 (r15833)\n"
"   compiled Sep 13 2005, 22:45:22\n"
"\n"
"Copyright (C) 2000-2005 CollabNet.\n"
"Subversion is open source software, see http://subversion.tigris.org/\n"
"This product includes software developed by CollabNet (http://www.Collab.Net/).\n"
"\n"
"The following repository access (RA) modules are available:\n"
"\n"
"* ra_dav : Module for accessing a repository via WebDAV (DeltaV) protocol.\n"
"  - handles 'http' scheme\n"
"  - handles 'https' scheme\n"
"* ra_svn : Module for accessing a repository using the svn network protocol.\n"
"  - handles 'svn' scheme\n"
"* ra_local : Module for accessing a repository on local disk.\n"
"  - handles 'file' scheme"

#. Tag: para
#: ch08-embedding-svn.xml:420
#, no-c-format
msgid "The public API exported by the RA Layer contains functionality necessary for sending and receiving versioned data to and from the repository. And each of the available RA plugins is able to perform that task using a specific protocol&mdash;libsvn_ra_dav speaks HTTP/WebDAV (optionally using SSL encryption) with an Apache HTTP Server that is running the mod_dav_svn Subversion server module; libsvn_ra_svn speaks a custom network protocol with the <command>svnserve</command> program; and so on."
msgstr ""

#. Tag: para
#: ch08-embedding-svn.xml:430
#, fuzzy, no-c-format
msgid "And for those who wish to access a Subversion repository using still another protocol, that is precisely why the Repository Access Layer is modularized! Developers can simply write a new library that implements the RA interface on one side and communicates with the repository on the other. Your new library can use existing network protocols, or you can invent your own. You could use inter-process communication (IPC) calls, or&mdash;let's get crazy, shall we?&mdash;you could even implement an email-based protocol. Subversion supplies the APIs; you supply the creativity."
msgstr "さらに別のプロトコルを使ってSubversionのリポジトリにアクセスしたいと いう人にとってこそ、どうしてリポジトリアクセス層がモジュール化されている かという理由になります。開発者は片方で RA インターフェースを実装する 新しいライブラリを簡単に書くことができ、もう一方でそのリポジトリと 通信することができます。新しいライブラリは既に存在しているネットワーク プロトコルを利用することもできますし、自分で開発したものでも良いのです。 プロセス間通信(IPC)呼び出しを使うかも知れませんし&mdash;ちょっとおバカ かも知れませんが&mdash;メールベースのプロトコルを使うことだってできます。 SubversionはAPIを提供し、あなたは自分の想像性を提供する、と。"

#. Tag: title
#: ch08-embedding-svn.xml:445
#, no-c-format
msgid "Client Layer"
msgstr "クライアント層"

#. Tag: para
#: ch08-embedding-svn.xml:447
#, no-c-format
msgid "On the client side, the Subversion working copy is where all the action takes place. The bulk of functionality implemented by the client-side libraries exists for the sole purpose of managing working copies&mdash;directories full of files and other subdirectories which serve as a sort of local, editable <quote>reflection</quote> of one or more repository locations&mdash;and propagating changes to and from the Repository Access layer."
msgstr "クライアント側から見ると、Subversionの作業コピーは すべての処理が起こる場所です。クライアント側ライブラリによって 実装される機能は、作業コピーの管理というただ一つの目的のために 存在します&mdash;ローカルな場所に何らかの形で提供される ファイルと他のサブディレクトリのあるディレクトリが、一つ以上の リポジトリ位置を<quote>反映した</quote>ものとし、リポジトリアクセス層との間の 変更を伝えたりします。"

#. Tag: para
#: ch08-embedding-svn.xml:456
#, no-c-format
msgid "Subversion's working copy library, libsvn_wc, is directly responsible for managing the data in the working copies. To accomplish this, the library stores administrative information about each working copy directory within a special subdirectory. This subdirectory, named <filename>.svn</filename>, is present in each working copy directory and contains various other files and directories which record state and provide a private workspace for administrative action. For those familiar with CVS, this <filename>.svn</filename> subdirectory is similar in purpose to the <filename>CVS</filename> administrative directories found in CVS working copies. For more information about the <filename>.svn</filename> administrative area, see <xref linkend=\"svn.developer.insidewc\"/>in this chapter."
msgstr "Subversionの作業コピーライブラリ、libsvn_wc は作業コピー中の データの管理に直接の責任を負います。これをやるために、このライブラリ は特別なサブディレクトリの中にそれぞれの作業コピーについての管理情報 を格納します。このサブディレクトリは<filename>.svn</filename> という 名前ですが、どの作業コピー中にも存在し、管理に関係した動作を するための状態を記録し、作業スペースを確保するためのさまざまな ファイルやディレクトリを含んでいます。CVSになじみのある人なら、 この<filename>.svn</filename> サブディレクトリは、その目的としては CVSの作業コピーにある管理ディレクトリ<filename>CVS</filename> に よく似ていることがわかると思います。<filename>.svn</filename> 管理領域についての詳細は、この章の <xref linkend=\"svn.developer.insidewc\"/>を参照してください"

#. Tag: para
#: ch08-embedding-svn.xml:471
#, no-c-format
msgid "The Subversion client library, libsvn_client, has the broadest responsibility; its job is to mingle the functionality of the working copy library with that of the Repository Access Layer, and then to provide the highest-level API to any application that wishes to perform general revision control actions. For example, the function <function>svn_client_checkout()</function> takes a URL as an argument. It passes this URL to the RA layer and opens an authenticated session with a particular repository. It then asks the repository for a certain tree, and sends this tree into the working copy library, which then writes a full working copy to disk (<filename>.svn</filename> directories and all)."
msgstr "Subversionクライアントライブラリ libsvn_client は広範囲の役目を 負います。その仕事は、作業コピーライブラリの機能と、リポジトリアクセス層 の機能を結びつけることで、一般的なリビジョン制御を実行したいと思う すべてのアプリケーションに最上位のAPIを提供することです。たとえば <function>svn_client_checkout()</function> 関数は引数としてURLを とります。この関数は URLを RA層に渡し、特定のリポジトリに認証された セッションを開きます。それからそのリポジトリに特定のツリーを指定し、 このツリーを作業コピーライブラリに送りますが、今度はそのライブラリが 作業コピー全体をディスクに書き込みます(<filename>.svn</filename> ディレクトリを含むすべての情報)。"

#. Tag: para
#: ch08-embedding-svn.xml:485
#, fuzzy, no-c-format
msgid "The client library is designed to be used by any application. While the Subversion source code includes a standard command-line client, it should be very easy to write any number of GUI clients on top of the client library. New GUIs (or any new client, really) for Subversion need not be clunky wrappers around the included command-line client&mdash;they have full access via the libsvn_client API to same functionality, data, and callback mechanisms that the command-line client uses. In fact, the Subversion source code tree contains a small C program (which can be found at <filename>tools/examples/minimal_client.c</filename> that exemplifies how to wield the Subversion API to create a simple client program"
msgstr "クライアントライブラリはどのようなアプリケーションからも利用できる ように設計されています。Subversionのソースコードは標準的なコマンド ラインクライアントを含んでいるので、そのクライアントライブラリの 上に好きなだけGUIクライアントを書くことができます。Subversionの 新しい GUI(あるいは実際には新しいクライアント)は、コマンドライン クライアントを含むダサいラッパである必要はありません。 &mdash;それは、libsvn_client API を通じてコマンドラインクライアント が使っているのと同じ機能、データ、コールバックの仕組みに完全にアクセス することができます。"

#. Tag: title
#: ch08-embedding-svn.xml:500
#, no-c-format
msgid "Binding Directly&mdash;A Word About Correctness"
msgstr "直接のバインド&mdash;正確さについての言葉"

#. Tag: para
#: ch08-embedding-svn.xml:502
#, fuzzy, no-c-format
msgid "Why should your GUI program bind directly with a libsvn_client instead of acting as a wrapper around a command-line program? Besides simply being more efficient, it can be more correct as well. A command-line program (like the one supplied with Subversion) that binds to the client library needs to effectively translate feedback and requested data bits from C types to some form of human-readable output. This type of translation can be lossy. That is, the program may not display all of the information harvested from the API, or may combine bits of information for compact representation."
msgstr "なぜGUIプログラムは、直接 libsvn_client にバインドし、コマンドライン プログラムをつつむラッパとして動作しないのでしょう? それは単により 効率的であるからだ、というだけではなく、潜在的な正確さについての 問題もあります。コマンドラインプログラム(Subversionが提供しているような もの)はクライアントライブラリに結びついていますが、C言語の型を持つフィードバックとデータビットの要求を、人間が読める形の出力に効率的に変換する必要が あります。この手の変換は不正確になりがちです。つまり、プログラムはAPI から取得した情報のすべてを表示しないかも知れませんし、要約した表現形式 になるように情報をつなぎあわせたりするかも知れません。"

#. Tag: para
#: ch08-embedding-svn.xml:514
#, no-c-format
msgid "If you wrap such a command-line program with yet another program, the second program has access only to already-interpreted (and as we mentioned, likely incomplete) information, which it must <emphasis>again</emphasis> translate into <emphasis>its</emphasis> representation format. With each layer of wrapping, the integrity of the original data is potentially tainted more and more, much like the result of making a copy of a copy (of a copy &hellip;) of a favorite audio or video cassette."
msgstr "そのようなコマンドラインプログラムを別のプログラムでラップすると、 ラップするほうのプログラムは既に解釈された(そして注意したように おそらく不完全な)情報にアクセスすることができるだけで、それは <emphasis>もう一度</emphasis>、<emphasis>自分に固有の</emphasis> 表現形式に変換しなくてはなりません。それぞれのラッピングの層ごとに、 最初のデータの正確さはどんどん失われていく可能性があり、それはちょうど 自分の好きなオーディオやビデオカセットを繰り返しコピーするときに 起こるような話になってしまいます。"

#. Tag: para
#: ch08-embedding-svn.xml:524
#, no-c-format
msgid "But the most compelling argument for binding directly to the APIs instead of wrapping other programs is that the Subversion project makes compatibility promises regarding its APIs. Across minor versions of those APIs (such as between 1.3 and 1.4), no function's prototype will change. In other words, you aren't forced to update your program's source code simply because you've upgraded to a new version of Subversion. Certain functions might be deprecated, but they still work, and this gives you a buffer of time to eventually embrace the newer APIs. These kinds of compatibility promises do not exist for Subversion command-line program output, which is subject to change from release to release."
msgstr ""

#. Tag: title
#: ch08-embedding-svn.xml:547
#, no-c-format
msgid "Inside the Working Copy Administration Area"
msgstr "作業コピー管理領域の内部"

#. Tag: para
#: ch08-embedding-svn.xml:549
#, no-c-format
msgid "As we mentioned earlier, each directory of a Subversion working copy contains a special subdirectory called <filename>.svn</filename> which houses administrative data about that working copy directory. Subversion uses the information in <filename>.svn</filename> to keep track of things like:"
msgstr "以前指摘したように、Subversion作業コピーのディレクトリのそれぞれは <filename>.svn</filename> という名前の特別のサブディレクトリを持ち、 そこに作業コピーディレクトリに関する管理情報を格納します。 Subversion は<filename>.svn</filename> 中の情報を以下のようなことを 記録するのに利用します:"

#. Tag: para
#: ch08-embedding-svn.xml:557
#, no-c-format
msgid "Which repository location(s) are represented by the files and subdirectories in the working copy directory."
msgstr "どこにあるリポジトリが、作業コピーディレクトリのファイルやサブディレクトリ によって表現されているのか。"

#. Tag: para
#: ch08-embedding-svn.xml:562
#, no-c-format
msgid "What revision of each of those files and directories are currently present in the working copy."
msgstr "どのリビジョンのファイルやディレクトリが現在の作業コピーに あるのか。"

#. Tag: para
#: ch08-embedding-svn.xml:566
#, no-c-format
msgid "Any user-defined properties that might be attached to those files and directories."
msgstr "ファイルやディレクトリに結びついたユーザ定義の属性。"

#. Tag: para
#: ch08-embedding-svn.xml:570
#, no-c-format
msgid "Pristine (un-edited) copies of the working copy files."
msgstr "作業コピーファイルの修正元(編集前)コピー。"

#. Tag: para
#: ch08-embedding-svn.xml:575
#, no-c-format
msgid "The Subversion working copy administration area's layout and contents are considered implementation details not really intended for human consumption. Developers are encouraged to use Subversion's public APIs, or the tools that Subversion provides, to access and manipulate the working copy data, instead of directly reading or modifying those files. The file formats employed by the working copy library for its administrative data do change from time to time&mdash;a fact that the public APIs do a great job of hiding from the average user. In this section, we expose some of these implementation details sheerly to appease your overwhelming curiosity."
msgstr ""

#. Tag: title
#: ch08-embedding-svn.xml:589
#, no-c-format
msgid "The Entries File"
msgstr "Entries ファイル"

#. Tag: para
#: ch08-embedding-svn.xml:591
#, fuzzy, no-c-format
msgid "Perhaps the single most important file in the <filename>.svn</filename> directory is the <filename>entries</filename> file. It contains the bulk of the administrative information about the versioned items in a working copy directory. It is this one file which tracks the repository URLs, pristine revision, file checksums, pristine text and property timestamps, scheduling and conflict state information, last-known commit information (author, revision, timestamp), local copy history&mdash;practically everything that a Subversion client is interested in knowing about a versioned (or to-be-versioned) resource!"
msgstr "<filename>.svn</filename> ディレクトリにある一番重要な ファイルは<filename>entries</filename> ファイルです。 このファイルはXMLドキュメントでその内容は作業コピーディレクトリ中の バージョン管理下にあるリソースについての管理情報のあつまりです。 リポジトリURL、修正元リビジョン、ファイルのチェックサム、修正元 テキストと属性のタイムスタンプ、予告と衝突状態に関する情報、最後に コミットしたことに関する情報(実行者、リビジョン、タイムスタンプ)、 ローカルコピー履歴&mdash;Subversionクライアントが管理しているリソース について興味のある情報はすべてここに記録されています。"

#. Tag: para
#: ch08-embedding-svn.xml:604
#, fuzzy, no-c-format
msgid "Folks familiar with CVS's administrative directories will have recognized at this point that Subversion's <filename>.svn/entries</filename> file serves the purposes of, among other things, CVS's <filename>CVS/Entries</filename>, <filename>CVS/Root</filename>, and <filename>CVS/Repository</filename> files combined."
msgstr "典型的な<filename>.svn</filename>ディレクトリの内部を見ると、 それは<filename>CVS</filename> の管理ディレクトリでCVSが管理 する情報よりも、少し多いことがわかります。 <filename>entries</filename> ファイルは現在の作業コピーディレクトリ の状態を記述したXMLを含んでいて、これは基本的にCVSの <filename>Entries</filename>と<filename>Repository</filename> を一緒にしたものになります。"

#. Tag: para
#: ch08-embedding-svn.xml:611
#, no-c-format
msgid "The format of the <filename>.svn/entries</filename> file has changed over time. Originally an XML file, it now uses a custom&mdash;though still human-readable&mdash;file format. While XML was a great choice for early developers of Subversion who were frequently debugging the file's contents (and Subversion's behavior in light of them), the need for easy developer debugging has diminished as Subversion has matured, and has been replaced by the user's need for snappier performance. Be aware that Subversion's working copy library automatically upgrades working copies from one format to another&mdash;it reads the old formats, and writes the new&mdash;which saves you the hassle of checking out a new working copy, but can also complicate situations where different versions of Subversion might be trying to use the same working copy."
msgstr ""

#. Tag: title
#: ch08-embedding-svn.xml:631
#, no-c-format
msgid "Pristine Copies and Property Files"
msgstr "修正元コピーと属性ファイル"

#. Tag: para
#: ch08-embedding-svn.xml:633
#, fuzzy, no-c-format
msgid "As mentioned before, the <filename>.svn</filename> directory also holds the pristine <quote>text-base</quote> versions of files. Those can be found in <filename>.svn/text-base</filename>. The benefits of these pristine copies are multiple&mdash;network-free checks for local modifications and difference reporting, network-free reversion of modified or missing files, more efficient transmission of changes to the server&mdash;but comes at the cost of having each versioned file stored at least twice on disk. These days, this seems to be a negligible penalty for most files. However, the situation gets uglier as the size of your versioned files grows. Some attention is being given to making the presence of the <quote>text-base</quote> an option. Ironically though, it is as your versioned files' sizes get larger that the existence of the <quote>text-base</quote> becomes more crucial&mdash;who wants to transmit a huge file across a network just because they want to commit a tiny change to it?"
msgstr "前に注意したように、<filename>.svn</filename>ディレクトリはまた 修正元の<quote>text-base</quote>バージョンのファイルを保存しています。 これは<filename>.svn/text-base</filename>にあります。修正元 コピーの利点は、いくつかあります。&mdash;ネットワークの通信なしに ローカル修正をチェックして差分を報告したり、ネットワーク通信なしに 修正したり削除したファイルを元に戻したり、サーバへの変更点の送信 サイズを減らしたりできます&mdash;しかし、少なくともそれぞれの バージョン管理されたファイルを二つディスク上に保存するコストが 発生します。最近では、これはほとんどのファイルについて無視できる程度の ものです。しかし、バージョン管理されたファイルが大きくなるにつれ この状況はひどいことになっていきます。<quote>text-base</quote> をオプションにしては、という意見もあります。 しかし皮肉にも、バージョン管理するファイルのサイズが大きくなるに つれて、<quote>text-base</quote>の存在も、それだけ重要になっていきます&mdash; ファイルにしたほんの少しの変更をコミットしたいだけなのに、ばかでかい ファイルをネットワーク越しに送ろうなんて、誰が考えるでしょう?"

#. Tag: para
#: ch08-embedding-svn.xml:652
#, fuzzy, no-c-format
msgid "Similar in purpose to the <quote>text-base</quote> files are the property files and their pristine <quote>prop-base</quote> copies, located in <filename>.svn/props</filename> and <filename>.svn/prop-base</filename> respectively. Since directories can have properties, too, there are also <filename>.svn/dir-props</filename> and <filename>.svn/dir-prop-base</filename> files."
msgstr "<quote>text-base</quote>ファイルと同じような目的で、属性ファイルと、その修正元 <quote>prop-base</quote>コピーがあります。それぞれ、<filename>.svn/props</filename> と<filename>.svn/prop-base</filename> にあります。 ディレクトリも属性を持つことができるので、 <filename>.svn/dir-props</filename> と <filename>.svn/dir-prop-base</filename> ファイルがあります。 これらの属性ファイルのそれぞれ(<quote>作業中</quote>と<quote>元の</quote>バージョン)は 属性名と属性値を格納するのに、単純な<quote>ディスク上ハッシュ</quote>ファイル形式 を使います。"

#. Tag: title
#: ch08-embedding-svn.xml:669
#, no-c-format
msgid "Using the APIs"
msgstr "APIの利用"

#. Tag: para
#: ch08-embedding-svn.xml:671
#, fuzzy, no-c-format
msgid "Developing applications against the Subversion library APIs is fairly straightforward. Subversion is primarily a set of C libraries, with header (.h) files that live in the <filename>subversion/include</filename> directory of the source tree. These headers are copied into your system locations (for example, <filename>/usr/local/include</filename>) when you build and install Subversion itself from source. These headers represent the entirety of the functions and types meant to be accessible by users of the Subversion libraries. The Subversion developer community is meticulous about ensuring that the public API is well-documented&mdash;refer directly to the header files for that documentation."
msgstr "SubversionライブラリAPIを使ったアプリケーションの開発は比較的素直な 形で進みます。すべてのヘッダファイルはソースツリーの <filename>subversion/include</filename> にあります。これらのヘッダは ソースコードからSubversionを作りインストールすると、そのマシンの システムヘッダの置き場所にコピーされます。このようなヘッダには Subversionライブラリのユーザによってアクセスできるような機能と型の すべてがあります。"

#. Tag: para
#: ch08-embedding-svn.xml:684
#, fuzzy, no-c-format
msgid "When examining the public header files, the first thing you might notice is that Subversion's datatypes and functions are namespace protected. That is, every public Subversion symbol name begins with <literal>svn_</literal>, followed by a short code for the library in which the symbol is defined (such as <literal>wc</literal>, <literal>client</literal>, <literal>fs</literal>, etc.), followed by a single underscore (<literal>_</literal>) and then the rest of the symbol name. Semi-public functions (used among source files of a given library but not by code outside that library, and found inside the library directories themselves) differ from this naming scheme in that instead of a single underscore after the library code, they use a double underscore (<literal>__</literal>). Functions that are private to a given source file have no special prefixing, and are declared <literal>static</literal>. Of course, a compiler isn't interested in these naming conventions, but they help to clarify the scope of a given function or datatype."
msgstr "最初に気をつけなくてはならないのはSubversionのデータ型と関数は 固有の名前空間によって分離されていることです。すべてのパブリックな Subversionシンボル名は<literal>svn_</literal>で始まり、そのシンボルが 定義されているライブラリの短いコードが続き、 (<literal>wc</literal>とか、 <literal>client</literal>とか、<literal>fs</literal>など)、 アンダースコアが一つきて、(<literal>_</literal>) 、最後にシンボル名の 残りの部分がきます。限定的にパブリックな関数(ライブラリ中のソースファイル 間では利用されるが、ライブラリの外では利用されず、ライブラリディレクトリ 自身の内部でだけ参照可能なもの)はこの命名規約とは違い、ライブラリコード のあとにアンダースコアが一つくるかわりに、二つきます (<literal>__</literal>)。あるソースファイルでプライベートな関数は 特殊な接頭辞を持たず、<literal>static</literal>宣言されます。もちろん コンパイラはこのような命名規約を解釈しませんが、ある関数のスコープや データ型を明らかにするときの助けになります。"

#. Tag: para
#: ch08-embedding-svn.xml:703
#, no-c-format
msgid "Another good source of information about programming against the Subversion APIs is the project's own hacking guidelines, which can be found at <ulink url=\"http://subversion.tigris.org/hacking.html\"></ulink>. This document contains useful information which, while aimed at developers and would-be developers of Subversion itself, is equally applicable to folks developing against Subversion as a set of third-party libraries."
msgstr ""

#. Tag: para
#: ch08-embedding-svn.xml:711
#, no-c-format
msgid "After all, Subversion uses Subversion's APIs, too."
msgstr ""

#. Tag: title
#: ch08-embedding-svn.xml:718
#, no-c-format
msgid "The Apache Portable Runtime Library"
msgstr "Apache Portable Runtime ライブラリ"

#. Tag: para
#: ch08-embedding-svn.xml:720
#, fuzzy, no-c-format
msgid "Along with Subversion's own datatypes, you will see many references to datatypes that begin with <literal>apr_</literal>&mdash;symbols from the Apache Portable Runtime (APR) library. APR is Apache's portability library, originally carved out of its server code as an attempt to separate the OS-specific bits from the OS-independent portions of the code. The result was a library that provides a generic API for performing operations that differ mildly&mdash;or wildly&mdash;from OS to OS. While the Apache HTTP Server was obviously the first user of the APR library, the Subversion developers immediately recognized the value of using APR as well. This means that there is practically no OS-specific code in Subversion itself. Also, it means that the Subversion client compiles and runs anywhere that Apache HTTP Server itself does. Currently this list includes all flavors of Unix, Win32, BeOS, OS/2, and Mac OS X."
msgstr "Subversion自身のデータ型とともに、<literal>apr_</literal>で 始まるデータ型への参照をたくさん見かけることがあります&mdash; これは Apache のPortable Runtime (APR) ライブラリです。APR は Apache の可搬なライブラリですが、もともとApacheのサーバコードの OS依存の部分をOS非依存の部分から分離するために作られました。 結果は、OSごとに、わずかに、あるいは大きく異なる操作を実行する ための抽象的なAPIを提供することになりました。Apache HTTPサーバは 明らかにAPRライブラリの最初の利用者でしたが、Subversion開発者は すぐにAPRを使うことの重要性に気づきました。これは実際にSubversion 自身の中にまったくOSに依存していないコードの部分があることを意味 します。さらに、Subversionクライアントはサーバがコンパイルし実行 する場所であればどこでも実行できることを意味します。現時点では このようなOSには、Unixライクなすべて、Win32, BeOS, OS/2 そして Mac OS X が含まれます。"

#. Tag: para
#: ch08-embedding-svn.xml:737
#, fuzzy, no-c-format
msgid "In addition to providing consistent implementations of system calls that differ across operating systems, <footnote> <para>Subversion uses ANSI system calls and datatypes as much as possible.</para> </footnote> APR gives Subversion immediate access to many custom datatypes, such as dynamic arrays and hash tables. Subversion uses these types extensively. But perhaps the most pervasive APR datatype, found in nearly every Subversion API prototype, is the <structname>apr_pool_t</structname>&mdash;the APR memory pool. Subversion uses pools internally for all its memory allocation needs (unless an external library requires a different memory management mechanism for data passed through its API), <footnote> <para>Neon and Berkeley DB are examples of such libraries.</para> </footnote> and while a person coding against the Subversion APIs is not required to do the same, they <emphasis>are</emphasis> required to provide pools to the API functions that need them. This means that users of the Subversion API must also link against APR, must call <function>apr_initialize()</function> to initialize the APR subsystem, and then must create and manage pools for use with Subversion API calls, typically by using <function>svn_pool_create()</function>, <function>svn_pool_clear()</function>, and <function>svn_pool_destroy()</function>."
msgstr "オペレーティングシステム間で異なるシステムコールの一貫した 実装を提供することに加えて、 <footnote> <para>Subversion はANSI システムコールとデータ型をできる限り 利用しています。 </para> </footnote> APR は Subversionがたくさんの独自のデータ型に直接アクセスすることを 可能にしますが、それには、動的な配列やハッシュテーブルがあります。 Subversion はソースコード中でこれらの型を拡張して利用します。 しかし、多分最も広範囲に利用されているAPRデータ型は、ほとんど すべてのSubversion APIプロトタイプに現れますが、<structname>apr_pool_t</structname>です &mdash;APRのメモリプールです。Subversion はプールを内部的にすべてのメモリ確保 が必要な場合に利用します。(ただし、外部ライブラリがそのAPIを通じて 受け渡すデータのメモリ管理にこれと異なる形式を要求しない限りにおいて、 です。) <footnote> <para>Neon と Berkeley DB はそのようなライブラリの例です。</para> </footnote> そして、Subversion API に対するコーディングは同じことを要求される わけではありませんが、必要な場所では API関数のために pool を用意する ことは要求されます。これは APR もリンクする必要のあるSubversion API の ユーザは<function>apr_initialize()</function>を呼んで APR サブシステム を初期化する必要があり、それから Subversion API 呼び出しを利用するために pool を用意しなくてはならない、ということになります。詳細は <xref linkend=\"svn.developer.pools\"/>を見てください。"

#. Tag: title
#: ch08-embedding-svn.xml:767
#, no-c-format
msgid "Programming with Memory Pools"
msgstr "メモリプールを使ったプログラミング"

#. Tag: para
#: ch08-embedding-svn.xml:769
#, fuzzy, no-c-format
msgid "Almost every developer who has used the C programming language has at some point sighed at the daunting task of managing memory usage. Allocating enough memory to use, keeping track of those allocations, freeing the memory when you no longer need it&mdash;these tasks can be quite complex. And of course, failure to do those things properly can result in a program that crashes itself, or worse, crashes the computer."
msgstr "C 言語を使ったことのあるほとんどすべての開発者は、ある時点で メモリ管理のことでうんざりしてため息をつくことがあるでしょう。 利用するために必要な十分なメモリを確保し、その利用状況を記録し、 いらなくなったらメモリを解放する&mdash;そういう処理は非常に 複雑です。そしてもちろん、それに失敗すると、プログラムが壊れて しまい、ひどいときにはコンピュータが壊れてしまいます。 幸運にも、Subversionが可搬性のために利用しているAPRライブラリ は<structname>apr_pool_t</structname>型を用意していて、これは メモリのプールを表現するものです。"

#. Tag: para
#: ch08-embedding-svn.xml:778
#, no-c-format
msgid "Higher-level languages, on the other hand, take the job of memory management away from the developer completely. <footnote> <para>Or at least make it something you only toy with when doing extremely tight program optimization.</para> </footnote> Languages like Java and Python use <firstterm>garbage collection</firstterm>, allocating memory for objects when needed, and automatically freeing that memory when the object is no longer in use."
msgstr ""

#. Tag: para
#: ch08-embedding-svn.xml:789
#, no-c-format
msgid "APR provides a middle-ground approach called pool-based memory management. It allows the developer to control memory usage at a lower resolution&mdash;per chunk (or <quote>pool</quote>) of memory, instead of per allocated object. Rather than using <function>malloc()</function> and friends to allocate enough memory for a given object, you ask APR to allocate the memory from a memory pool. When you're finished using the objects you've created in the pool, you destroy the entire pool, effectively de-allocating the memory consumed by <emphasis>all</emphasis> the objects you allocated from it. Thus, rather than keeping track of individual objects which need to be de-allocated, your program simply considers the general lifetimes of those objects, and allocates the objects in a pool whose lifetime (the time between the pool's creation and its deletion) matches the object's needs."
msgstr ""

#. Tag: title
#: ch08-embedding-svn.xml:811
#, no-c-format
msgid "URL and Path Requirements"
msgstr "URL と Path の要求"

#. Tag: para
#: ch08-embedding-svn.xml:813
#, no-c-format
msgid "With remote version control operation as the whole point of Subversion's existence, it makes sense that some attention has been paid to internationalization (i18n) support. After all, while <quote>remote</quote> might mean <quote>across the office</quote>, it could just as well mean <quote>across the globe.</quote> To facilitate this, all of Subversion's public interfaces that accept path arguments expect those paths to be canonicalized, and encoded in UTF-8. This means, for example, that any new client binary that drives the libsvn_client interface needs to first convert paths from the locale-specific encoding to UTF-8 before passing those paths to the Subversion libraries, and then re-convert any resultant output paths from Subversion back into the locale's encoding before using those paths for non-Subversion purposes. Fortunately, Subversion provides a suite of functions (see <filename>subversion/include/svn_utf.h</filename>) that can be used by any program to do these conversions."
msgstr "Subversion全体の問題としてのリモートバージョン管理操作では、国際化(i18n) のサポートについていくらか注意しておく必要があります。 結局、<quote>リモート</quote>が、<quote>オフィス以外の場所</quote>を意味するのなら、それは <quote>全世界から</quote>という意味でもあります。このような状況に対応するために Subversionのパス引数をとる、すべてのパブリックインターフェースは パスが正規化され、UTF-8でエンコードされているものとします。 これはたとえば、libsvn_clientインターフェースを呼び出す、 新しいクライアントバイナリはすべて、Subversionライブラリにパスを渡す 前に、まずパスをローカルコーディングからUTF-8に変換しなくてはならず、 Subversion からの結果パスを、Subversion以外の目的に利用する前には ローカルコーディングに再変換しなくてはならないということです。 幸運なことに、Subversionはこのような変換が必要な任意のプログラムが 利用できるような関数を用意しています (<filename>subversion/include/svn_utf.h</filename>を参照してください)。"

#. Tag: para
#: ch08-embedding-svn.xml:831
#, fuzzy, no-c-format
msgid "Also, Subversion APIs require all URL parameters to be properly URI-encoded. So, instead of passing <uri>file:///home/username/My File.txt</uri> as the URL of a file named <literal>My File.txt</literal>, you need to pass <uri>file:///home/username/My%20File.txt</uri>. Again, Subversion supplies helper functions that your application can use&mdash;<function>svn_path_uri_encode()</function> and <function>svn_path_uri_decode()</function>, for URI encoding and decoding, respectively."
msgstr "また、Subversion API はすべての URL引数が正しく URIエンコードされている ことを要求します。それで <literal>My File.txt</literal>という名前のファイルURLを、 <systemitem class=\"url\">file:///home/username/My File.txt</systemitem> と渡すかわりに、 <systemitem class=\"url\">file:///home/username/My%20File.txt</systemitem> と渡さなくてはなりません。 やはりSubversionはアプリケーションが利用できるヘルパー関数を用意して います&mdash; <function>svn_path_uri_encode()</function> と <function>svn_path_uri_decode()</function>を使ってそれぞれ URI のエンコードとデコードができます。"

#. Tag: title
#: ch08-embedding-svn.xml:843
#, no-c-format
msgid "Using Languages Other than C and C++"
msgstr "C と C++以外の言語の利用"

#. Tag: para
#: ch08-embedding-svn.xml:845
#, fuzzy, no-c-format
msgid "If you are interested in using the Subversion libraries in conjunction with something other than a C program&mdash;say a Python or Perl script&mdash;Subversion has some support for this via the Simplified Wrapper and Interface Generator (SWIG). The SWIG bindings for Subversion are located in <filename>subversion/bindings/swig</filename>. They are still maturing, but they are usable. These bindings allow you to call Subversion API functions indirectly, using wrappers that translate the datatypes native to your scripting language into the datatypes needed by Subversion's C libraries."
msgstr "C言語以外のものと組み合わせてSubversionライブラリを使うのに興味が あるなら&mdash;たとえばPython や Perl のスクリプトなどを使った&mdash; SubversionはSimplified Wrapper and Interface Generator (SWIG)という形 である程度サポートしています。Subversion用のSWIGは、 <filename>subversion/bindings/swig</filename>にあり、開発はまだ続いては いますが、利用可能な状態にあります。これを使えば、スクリプト言語固有の データ型を、SubversionのCライブラリで必要なデータ型に変換するラッパを 使ってSubversion API を間接的に呼び出すことができるようになります。"

#. Tag: para
#: ch08-embedding-svn.xml:856
#, fuzzy, no-c-format
msgid "Significant efforts have been made towards creating functional SWIG-generated bindings for Python, Perl, and Ruby. To some extent, the work done preparing the SWIG interface files for these languages is reusable in efforts to generate bindings for other languages supported by SWIG (which include versions of C#, Guile, Java, MzScheme, OCaml, PHP, and Tcl, among others). However, some extra programming is required to compensate for complex APIs that SWIG needs some help translating between languages. For more information on SWIG itself, see the project's website at <ulink url=\"http://www.swig.org/\"></ulink>."
msgstr "Subversion の言語連携は不幸にも Subversion のコアモジュールほど注目 されていません。しかし Python, Perl, そして Ruby 用の関数連携を作る ためにかなり努力されてきました。ある程度の範囲で、このような拳固に 対して容易された SWIG インターフェースファイルは SWIG でサポートされて いる言語の連携を生成するために再利用することができます。 (このような言語には C#、Guilde, Java, Mzscheme, OCaml, PHP, Tcl その他があります)。 それでも SWIG を汎用的に利用するのに必要な複雑な API のために ある程度特殊なプログラミングが必要にはなります。SWIG 自身の詳細に ついては<systemitem class=\"url\">http://www.swig.org/</systemitem>にある プロジェクトウェブサイトを参照してください。"

#. Tag: para
#: ch08-embedding-svn.xml:867
#, no-c-format
msgid "Subversion also has language bindings for Java. The JavaJL bindings (located in <filename>subversion/bindings/java</filename> in the Subversion source tree) aren't SWIG-based, but are instead a mixture of javah and hand-coded JNI. JavaHL most covers Subversion client-side APIs, and is specifically targeted at implementors of Java-based Subversion clients and IDE integrations."
msgstr ""

#. Tag: para
#: ch08-embedding-svn.xml:876
#, no-c-format
msgid "Subversion's language bindings tend to lack the level of developer attention given to the core Subversion modules, but can generally be trusted as production-ready. A number of scripts and applications, alternative Subversion GUI clients and other third-party tools are successfully using Subversion's language bindings today to accomplish their Subversion integrations."
msgstr ""

#. Tag: para
#: ch08-embedding-svn.xml:884
#, no-c-format
msgid "It's worth noting here that there are other options for interfacing with Subversion using other languages: alternative bindings for Subversion which aren't provided by the Subversion development community at all. You can find links to these alternative bindings on the Subversion project's links page (at <ulink url=\"http://subversion.tigris.org/links.html\"></ulink>), but there are a couple of popular ones we feel are especially noteworthy. First, Barry Scott's PySVN bindings (<ulink url=\"http://pysvn.tigris.org/\"></ulink>) are a popular option for binding with Python. PySVN boasts of a more Pythonic interface than the more C-like APIs provided by Subversion's own Python bindings. For folks looking for a pure Java implementation of Subversion, check out SVNKit (<ulink url=\"http://svnkit.com/\"></ulink>), which is Subversion re-written from the ground up in Java. You should exercise caution here, though&mdash;because SVNKit doesn't use the core Subversion libraries, it's behavior is not guaranteed to match that of Subversion itself."
msgstr ""

#. Tag: title
#: ch08-embedding-svn.xml:905
#, fuzzy, no-c-format
msgid "Code Samples"
msgstr "例"

#. Tag: para
#: ch08-embedding-svn.xml:907
#, no-c-format
msgid "contains a code segment (written in C) that illustrates some of the concepts we've been discussing. It uses both the repository and filesystem interfaces (as can be determined by the prefixes <literal>svn_repos_</literal> and <literal>svn_fs_</literal> of the function names, respectively) to create a new revision in which a directory is added. You can see the use of an APR pool, which is passed around for memory allocation purposes. Also, the code reveals a somewhat obscure fact about Subversion error handling&mdash;all Subversion errors must be explicitly handled to avoid memory leakage (and in some cases, application failure)."
msgstr ""

#. Tag: title
#: ch08-embedding-svn.xml:922
#, no-c-format
msgid "Using the Repository Layer"
msgstr "リポジトリ層の利用"

#. Tag: programlisting
#: ch08-embedding-svn.xml:924
#, fuzzy, no-c-format
msgid ""
"/* Convert a Subversion error into a simple boolean error code.\n"
" *\n"
" * NOTE:  Subversion errors must be cleared (using svn_error_clear())\n"
" *        because they are allocated from the global pool, else memory\n"
" *        leaking occurs.\n"
" */\n"
"#define INT_ERR(expr)                           \\\n"
"  do {                                          \\\n"
"    svn_error_t *__temperr = (expr);            \\\n"
"    if (__temperr)                              \\\n"
"      {                                         \\\n"
"        svn_error_clear(__temperr);             \\\n"
"        return 1;                               \\\n"
"      }                                         \\\n"
"    return 0;                                   \\\n"
"  } while (0)\n"
"\n"
"/* Create a new directory at the path NEW_DIRECTORY in the Subversion\n"
" * repository located at REPOS_PATH.  Perform all memory allocation in\n"
" * POOL.  This function will create a new revision for the addition of\n"
" * NEW_DIRECTORY.  Return zero if the operation completes\n"
" * successfully, non-zero otherwise.\n"
" */\n"
"static int\n"
"make_new_directory(const char *repos_path,\n"
"                   const char *new_directory,\n"
"                   apr_pool_t *pool)\n"
"{\n"
"  svn_error_t *err;\n"
"  svn_repos_t *repos;\n"
"  svn_fs_t *fs;\n"
"  svn_revnum_t youngest_rev;\n"
"  svn_fs_txn_t *txn;\n"
"  svn_fs_root_t *txn_root;\n"
"  const char *conflict_str;\n"
"\n"
"  /* Open the repository located at REPOS_PATH. \n"
"   */\n"
"  INT_ERR(svn_repos_open(&amp;repos, repos_path, pool));\n"
"\n"
"  /* Get a pointer to the filesystem object that is stored in REPOS. \n"
"   */\n"
"  fs = svn_repos_fs(repos);\n"
"\n"
"  /* Ask the filesystem to tell us the youngest revision that\n"
"   * currently exists. \n"
"   */\n"
"  INT_ERR(svn_fs_youngest_rev(&amp;youngest_rev, fs, pool));\n"
"\n"
"  /* Begin a new transaction that is based on YOUNGEST_REV.  We are\n"
"   * less likely to have our later commit rejected as conflicting if we\n"
"   * always try to make our changes against a copy of the latest snapshot\n"
"   * of the filesystem tree. \n"
"   */\n"
"  INT_ERR(svn_fs_begin_txn(&amp;txn, fs, youngest_rev, pool));\n"
"\n"
"  /* Now that we have started a new Subversion transaction, get a root\n"
"   * object that represents that transaction. \n"
"   */\n"
"  INT_ERR(svn_fs_txn_root(&amp;txn_root, txn, pool));\n"
"  \n"
"  /* Create our new directory under the transaction root, at the path\n"
"   * NEW_DIRECTORY. \n"
"   */\n"
"  INT_ERR(svn_fs_make_dir(txn_root, new_directory, pool));\n"
"\n"
"  /* Commit the transaction, creating a new revision of the filesystem\n"
"   * which includes our added directory path.\n"
"   */\n"
"  err = svn_repos_fs_commit_txn(&amp;conflict_str, repos, \n"
"                                &amp;youngest_rev, txn, pool);\n"
"  if (! err)\n"
"    {\n"
"      /* No error?  Excellent!  Print a brief report of our success.\n"
"       */\n"
"      printf(\"Directory '%s' was successfully added as new revision \"\n"
"             \"'%ld'.\\n"
"\", new_directory, youngest_rev);\n"
"    }\n"
"  else if (err-&gt;apr_err == SVN_ERR_FS_CONFLICT)\n"
"    {\n"
"      /* Uh-oh.  Our commit failed as the result of a conflict\n"
"       * (someone else seems to have made changes to the same area \n"
"       * of the filesystem that we tried to modify).  Print an error\n"
"       * message.\n"
"       */\n"
"      printf(\"A conflict occurred at path '%s' while attempting \"\n"
"             \"to add directory '%s' to the repository at '%s'.\\n"
"\", \n"
"             conflict_str, new_directory, repos_path);\n"
"    }\n"
"  else\n"
"    {\n"
"      /* Some other error has occurred.  Print an error message.\n"
"       */\n"
"      printf(\"An error occurred while attempting to add directory '%s' \"\n"
"             \"to the repository at '%s'.\\n"
"\", \n"
"             new_directory, repos_path);\n"
"    }\n"
"\n"
"  INT_ERR(err);\n"
"}"
msgstr ""
"/* Create a new directory at the path NEW_DIRECTORY in the Subversion\n"
"   repository located at REPOS_PATH.  Perform all memory allocation in\n"
"   POOL.  This function will create a new revision for the addition of\n"
"   NEW_DIRECTORY.  */\n"
"static svn_error_t *\n"
"make_new_directory (const char *repos_path,\n"
"                    const char *new_directory,\n"
"                    apr_pool_t *pool)\n"
"{\n"
"  svn_error_t *err;\n"
"  svn_repos_t *repos;\n"
"  svn_fs_t *fs;\n"
"  svn_revnum_t youngest_rev;\n"
"  svn_fs_txn_t *txn;\n"
"  svn_fs_root_t *txn_root;\n"
"  const char *conflict_str;\n"
"\n"
"  /* Open the repository located at REPOS_PATH.  */\n"
"  SVN_ERR (svn_repos_open (&amp;repos, repos_path, pool));\n"
"\n"
"  /* Get a pointer to the filesystem object that is stored in\n"
"     REPOS.  */\n"
"  fs = svn_repos_fs (repos);\n"
"\n"
"  /* Ask the filesystem to tell us the youngest revision that\n"
"     currently exists.  */\n"
"  SVN_ERR (svn_fs_youngest_rev (&amp;youngest_rev, fs, pool));\n"
"\n"
"  /* Begin a new transaction that is based on YOUNGEST_REV.  We are\n"
"     less likely to have our later commit rejected as conflicting if we\n"
"     always try to make our changes against a copy of the latest snapshot\n"
"     of the filesystem tree.  */\n"
"  SVN_ERR (svn_fs_begin_txn (&amp;txn, fs, youngest_rev, pool));\n"
"\n"
"  /* Now that we have started a new Subversion transaction, get a root\n"
"     object that represents that transaction.  */\n"
"  SVN_ERR (svn_fs_txn_root (&amp;txn_root, txn, pool));\n"
"  \n"
"  /* Create our new directory under the transaction root, at the path\n"
"     NEW_DIRECTORY.  */\n"
"  SVN_ERR (svn_fs_make_dir (txn_root, new_directory, pool));\n"
"\n"
"  /* Commit the transaction, creating a new revision of the filesystem\n"
"     which includes our added directory path.  */\n"
"  err = svn_repos_fs_commit_txn (&amp;conflict_str, repos, \n"
"                                 &amp;youngest_rev, txn, pool);\n"
"  if (! err)\n"
"    {\n"
"      /* No error?  Excellent!  Print a brief report of our success.  */\n"
"      printf (\"Directory '%s' was successfully added as new revision \"\n"
"              \"'%ld'.¥n\", new_directory, youngest_rev);\n"
"    }\n"
"  else if (err-&gt;apr_err == SVN_ERR_FS_CONFLICT)\n"
"    {\n"
"      /* Uh-oh.  Our commit failed as the result of a conflict\n"
"         (someone else seems to have made changes to the same area \n"
"         of the filesystem that we tried to modify).  Print an error\n"
"         message.  */\n"
"      printf (\"A conflict occurred at path '%s' while attempting \"\n"
"              \"to add directory '%s' to the repository at '%s'.¥n\", \n"
"              conflict_str, new_directory, repos_path);\n"
"    }\n"
"  else\n"
"    {\n"
"      /* Some other error has occurred.  Print an error message.  */\n"
"      printf (\"An error occurred while attempting to add directory '%s' \"\n"
"              \"to the repository at '%s'.¥n\", \n"
"              new_directory, repos_path);\n"
"    }\n"
"\n"
"  /* Return the result of the attempted commit to our caller.  */\n"
"  return err;\n"
"}"

#. Tag: para
#: ch08-embedding-svn.xml:927
#, fuzzy, no-c-format
msgid "Note that in <xref linkend=\"svn.developer.layerlib.repos.ex-1\"/>, the code could just as easily have committed the transaction using <function>svn_fs_commit_txn()</function>. But the filesystem API knows nothing about the repository library's hook mechanism. If you want your Subversion repository to automatically perform some set of non-Subversion tasks every time you commit a transaction (like, for example, sending an email that describes all the changes made in that transaction to your developer mailing list), you need to use the libsvn_repos-wrapped version of that function, which adds the hook triggering functionality&mdash;in this case, <function>svn_repos_fs_commit_txn()</function>. (For more information regarding Subversion's repository hooks, see <xref linkend=\"svn.reposadmin.create.hooks\"/>.)"
msgstr "このコードで、リポジトリとファイルシステムインターフェースの両方に 対する呼び出しがあります。<function>svn_fs_commit_txn()</function>を 使ってトランザクションを簡単にコミットできます。しかし、 ファイルシステムAPIはリポジトリライブラリのフックの仕組みについては 何も知りません。もしSubversionリポジトリにトランザクションをコミット するたびに自動的にある種の非Subversion的な作業を実行させたい場合、 (たとえば、開発者メーリングリストにそのトランザクションで起きたすべて 変更を説明するメール を送信する、など)、その関数のlibsvn_reposで ラップされたバージョンを使う必要があります&mdash; <function>svn_repos_fs_commit_txn()</function>。 この関数は実際にはもし存在すれば、最初に<quote>pre-commit</quote>フックスクリプトを実行し、 それからトランザクションをコミットし、最後に<quote>post-commit</quote>フックスクリプト を実行します。フックは、実際にはコアのファイルシステムライブラリ自身 に含まれない特別の報告の仕組みを用意します。 (Subversionのリポジトリフックについての詳細は<xref linkend=\"svn.reposadmin.create.hooks\"/>を見てください)。"

#. Tag: para
#: ch08-embedding-svn.xml:943
#, fuzzy, no-c-format
msgid "Now let's switch languages. <xref linkend=\"svn.developer.usingapi.otherlangs.ex-1\"/> is a sample program that uses Subversion's SWIG Python bindings to recursively crawl the youngest repository revision, and print the various paths reached during the crawl."
msgstr "Subversion の Python SWIG 連携を使って、最新のリポジトリリビジョンを 再帰的に訪問し、その途中で見つかったさまざまなパスを表示するような サンプルプログラムを見てみましょう。"

#. Tag: title
#: ch08-embedding-svn.xml:950
#, no-c-format
msgid "Using the Repository Layer with Python"
msgstr "Pythonを使ったリポジトリ層"

#. Tag: programlisting
#: ch08-embedding-svn.xml:952
#, fuzzy, no-c-format
msgid ""
"#!/usr/bin/python\n"
"\n"
"\"\"\"Crawl a repository, printing versioned object path names.\"\"\"\n"
"\n"
"import sys\n"
"import os.path\n"
"import svn.fs, svn.core, svn.repos\n"
"\n"
"def crawl_filesystem_dir(root, directory):\n"
"    \"\"\"Recursively crawl DIRECTORY under ROOT in the filesystem, and return\n"
"    a list of all the paths at or below DIRECTORY.\"\"\"\n"
"\n"
"    # Print the name of this path.\n"
"    print directory + \"/\"\n"
"    \n"
"    # Get the directory entries for DIRECTORY.\n"
"    entries = svn.fs.svn_fs_dir_entries(root, directory)\n"
"\n"
"    # Loop over the entries.\n"
"    names = entries.keys()\n"
"    for name in names:\n"
"        # Calculate the entry's full path.\n"
"        full_path = directory + '/' + name\n"
"\n"
"        # If the entry is a directory, recurse.  The recursion will return\n"
"        # a list with the entry and all its children, which we will add to\n"
"        # our running list of paths.\n"
"        if svn.fs.svn_fs_is_dir(root, full_path):\n"
"            crawl_filesystem_dir(root, full_path)\n"
"        else:\n"
"            # Else it's a file, so print its path here.\n"
"            print full_path\n"
"\n"
"def crawl_youngest(repos_path):\n"
"    \"\"\"Open the repository at REPOS_PATH, and recursively crawl its\n"
"    youngest revision.\"\"\"\n"
"    \n"
"    # Open the repository at REPOS_PATH, and get a reference to its\n"
"    # versioning filesystem.\n"
"    repos_obj = svn.repos.svn_repos_open(repos_path)\n"
"    fs_obj = svn.repos.svn_repos_fs(repos_obj)\n"
"\n"
"    # Query the current youngest revision.\n"
"    youngest_rev = svn.fs.svn_fs_youngest_rev(fs_obj)\n"
"    \n"
"    # Open a root object representing the youngest (HEAD) revision.\n"
"    root_obj = svn.fs.svn_fs_revision_root(fs_obj, youngest_rev)\n"
"\n"
"    # Do the recursive crawl.\n"
"    crawl_filesystem_dir(root_obj, \"\")\n"
"    \n"
"if __name__ == \"__main__\":\n"
"    # Check for sane usage.\n"
"    if len(sys.argv) != 2:\n"
"        sys.stderr.write(\"Usage: %s REPOS_PATH\\n"
"\"\n"
"                         % (os.path.basename(sys.argv[0])))\n"
"        sys.exit(1)\n"
"\n"
"    # Canonicalize the repository path.\n"
"    repos_path = svn.core.svn_path_canonicalize(sys.argv[1])\n"
"\n"
"    # Do the real work.\n"
"    crawl_youngest(repos_path)"
msgstr ""
"#!/usr/bin/python\n"
"\n"
"\"\"\"Crawl a repository, printing versioned object path names.\"\"\"\n"
"\n"
"import sys\n"
"mport os.path\n"
"import svn.fs, svn.core, svn.repos\n"
"\n"
"def crawl_filesystem_dir(root, directory, pool):\n"
"    \"\"\"Recursively crawl DIRECTORY under ROOT in the filesystem, and return\n"
"    a list of all the paths at or below DIRECTORY.  Use POOL for all \n"
"    allocations.\"\"\"\n"
"\n"
"    # Print the name of this path.\n"
"    print directory + \"/\"\n"
"    \n"
"    # Get the directory entries for DIRECTORY.\n"
"    entries = svn.fs.svn_fs_dir_entries(root, directory, pool)\n"
"\n"
"    # Use an iteration subpool.\n"
"    subpool = svn.core.svn_pool_create(pool)\n"
"\n"
"    # Loop over the entries.\n"
"    names = entries.keys()\n"
"    for name in names:\n"
"        # Clear the iteration subpool.\n"
"        svn.core.svn_pool_clear(subpool)\n"
"\n"
"        # Calculate the entry's full path.\n"
"        full_path = directory + '/' + name\n"
"\n"
"        # If the entry is a directory, recurse.  The recursion will return\n"
"        # a list with the entry and all its children, which we will add to\n"
"        # our running list of paths.\n"
"        if svn.fs.svn_fs_is_dir(root, full_path, subpool):\n"
"            crawl_filesystem_dir(root, full_path, subpool)\n"
"        else:\n"
"            # Else it's a file, so print its path here.\n"
"            print full_path\n"
"\n"
"    # Destroy the iteration subpool.\n"
"    svn.core.svn_pool_destroy(subpool)\n"
"\n"
"def crawl_youngest(pool, repos_path):\n"
"    \"\"\"Open the repository at REPOS_PATH, and recursively crawl its\n"
"    youngest revision.\"\"\"\n"
"    \n"
"    # Open the repository at REPOS_PATH, and get a reference to its\n"
"    # versioning filesystem.\n"
"    repos_obj = svn.repos.svn_repos_open(repos_path, pool)\n"
"    fs_obj = svn.repos.svn_repos_fs(repos_obj)\n"
"\n"
"    # Query the current youngest revision.\n"
"    youngest_rev = svn.fs.svn_fs_youngest_rev(fs_obj, pool)\n"
"    \n"
"    # Open a root object representing the youngest (HEAD) revision.\n"
"    root_obj = svn.fs.svn_fs_revision_root(fs_obj, youngest_rev, pool)\n"
"\n"
"    # Do the recursive crawl.\n"
"    crawl_filesystem_dir(root_obj, \"\", pool)\n"
"    \n"
"if __name__ == \"__main__\":\n"
"    # Check for sane usage.\n"
"    if len(sys.argv) != 2:\n"
"        sys.stderr.write(\"Usage: %s REPOS_PATH¥n\"\n"
"                         % (os.path.basename(sys.argv[0])))\n"
"        sys.exit(1)\n"
"\n"
"    # Call the app-wrapper, which takes care of APR initialization/shutdown\n"
"    # and the creation and cleanup of our top-level memory pool.\n"
"    svn.core.run_app(crawl_youngest, os.path.normpath(sys.argv[1]))"

#. Tag: para
#: ch08-embedding-svn.xml:955
#, fuzzy, no-c-format
msgid "This same program in C would need to deal with APR's memory pool system. But Python handles memory usage automatically, and Subversion's Python bindings adhere to that convention. In C, you'd be working with custom datatypes (such as those provided by the APR library) for representing the hash of entries and the list of paths, but Python has hashes (called <quote>dictionaries</quote>) and lists as built-in datatypes, and provides a rich collection of functions for operating on those types. So SWIG (with the help of some customizations in Subversion's language bindings layer) takes care of mapping those custom datatypes into the native datatypes of the target language. This provides a more intuitive interface for users of that language."
msgstr "This same program in C would need to deal with custom datatypes (such as those provided by the APR library) for representing the hash of entries and the list of paths, but Python has hashes (called <quote>dictionaries</quote>) and lists as built-in datatypes, and provides a rich collection of functions for operating on those types. So SWIG (with the help of some customizations in Subversion's language bindings layer) takes care of mapping those custom datatypes into the native datatypes of the target language. This provides a more intuitive interface for users of that language."

#. Tag: para
#: ch08-embedding-svn.xml:969
#, fuzzy, no-c-format
msgid "The Subversion Python bindings can be used for working copy operations, too. In the previous section of this chapter, we mentioned the <filename>libsvn_client</filename> interface, and how it exists for the sole purpose of simplifying the process of writing a Subversion client. <xref linkend=\"svn.developer.usingapi.otherlangs.ex-2\"/> is a brief example of how that library can be accessed via the SWIG Python bindings to recreate a scaled-down version of the <command>svn status</command> command."
msgstr "The Subversion Python bindings can be used for working copy operations, too. In the previous section of this chapter, we mentioned the <filename>libsvn_client</filename> interface, and how it exists for the sole purpose of simplifying the process of writing a Subversion client. The following is a brief example of how that library can be accessed via the SWIG bindings to recreate a scaled-down version of the <command>svn status</command> command."

#. Tag: title
#: ch08-embedding-svn.xml:980
#, no-c-format
msgid "A Python Status Crawler"
msgstr "A Python Status Crawler"

#. Tag: programlisting
#: ch08-embedding-svn.xml:982
#, fuzzy, no-c-format
msgid ""
"#!/usr/bin/env python\n"
"\n"
"\"\"\"Crawl a working copy directory, printing status information.\"\"\"\n"
"\n"
"import sys\n"
"import os.path\n"
"import getopt\n"
"import svn.core, svn.client, svn.wc\n"
"\n"
"def generate_status_code(status):\n"
"    \"\"\"Translate a status value into a single-character status code,\n"
"    using the same logic as the Subversion command-line client.\"\"\"\n"
"    code_map = { svn.wc.svn_wc_status_none        : ' ',\n"
"                 svn.wc.svn_wc_status_normal      : ' ',\n"
"                 svn.wc.svn_wc_status_added       : 'A',\n"
"                 svn.wc.svn_wc_status_missing     : '!',\n"
"                 svn.wc.svn_wc_status_incomplete  : '!',\n"
"                 svn.wc.svn_wc_status_deleted     : 'D',\n"
"                 svn.wc.svn_wc_status_replaced    : 'R',\n"
"                 svn.wc.svn_wc_status_modified    : 'M',\n"
"                 svn.wc.svn_wc_status_merged      : 'G',\n"
"                 svn.wc.svn_wc_status_conflicted  : 'C',\n"
"                 svn.wc.svn_wc_status_obstructed  : '~',\n"
"                 svn.wc.svn_wc_status_ignored     : 'I',\n"
"                 svn.wc.svn_wc_status_external    : 'X',\n"
"                 svn.wc.svn_wc_status_unversioned : '?',\n"
"               }\n"
"    return code_map.get(status, '?')\n"
"\n"
"def do_status(wc_path, verbose):\n"
"    # Calculate the length of the input working copy path.\n"
"    wc_path_len = len(wc_path)\n"
"\n"
"    # Build a client context baton.\n"
"    ctx = svn.client.svn_client_ctx_t()\n"
"\n"
"    def _status_callback(path, status, root_path_len=wc_path_len):\n"
"        \"\"\"A callback function for svn_client_status.\"\"\"\n"
"\n"
"        # Print the path, minus the bit that overlaps with the root of\n"
"        # the status crawl\n"
"        text_status = generate_status_code(status.text_status)\n"
"        prop_status = generate_status_code(status.prop_status)\n"
"        print '%s%s  %s' % (text_status, prop_status, path[wc_path_len + 1:])\n"
"        \n"
"    # Do the status crawl, using _status_callback() as our callback function.\n"
"    svn.client.svn_client_status(wc_path, None, _status_callback,\n"
"                                 1, verbose, 0, 0, ctx)\n"
"\n"
"def usage_and_exit(errorcode):\n"
"    \"\"\"Print usage message, and exit with ERRORCODE.\"\"\"\n"
"    stream = errorcode and sys.stderr or sys.stdout\n"
"    stream.write(\"\"\"Usage: %s OPTIONS WC-PATH\n"
"Options:\n"
"  --help, -h    : Show this usage message\n"
"  --verbose, -v : Show all statuses, even uninteresting ones\n"
"\"\"\" % (os.path.basename(sys.argv[0])))\n"
"    sys.exit(errorcode)\n"
"    \n"
"if __name__ == '__main__':\n"
"    # Parse command-line options.\n"
"    try:\n"
"        opts, args = getopt.getopt(sys.argv[1:], \"hv\", [\"help\", \"verbose\"])\n"
"    except getopt.GetoptError:\n"
"        usage_and_exit(1)\n"
"    verbose = 0\n"
"    for opt, arg in opts:\n"
"        if opt in (\"-h\", \"--help\"):\n"
"            usage_and_exit(0)\n"
"        if opt in (\"-v\", \"--verbose\"):\n"
"            verbose = 1\n"
"    if len(args) != 1:\n"
"        usage_and_exit(2)\n"
"            \n"
"    # Canonicalize the repository path.\n"
"    wc_path = svn.core.svn_path_canonicalize(args[0])\n"
"\n"
"    # Do the real work.\n"
"    try:\n"
"        do_status(wc_path, verbose)\n"
"    except svn.core.SubversionException, e:\n"
"        sys.stderr.write(\"Error (%d): %s\\n"
"\" % (e[1], e[0]))\n"
"        sys.exit(1)"
msgstr ""
"#!/usr/bin/env python\n"
"\"\"\"Crawl a working copy directory, printing status information.\"\"\"\n"
" \n"
"import sys\n"
"import os.path\n"
"import getopt\n"
"import svn.core, svn.client, svn.wc\n"
"\n"
"def generate_status_code(status):\n"
"    \"\"\"Translate a status value into a single-character status code,\n"
"    using the same logic as the Subversion command-line client.\"\"\"\n"
"\n"
"    if status == svn.wc.svn_wc_status_none:\n"
"        return ' '\n"
"    if status == svn.wc.svn_wc_status_normal:\n"
"        return ' '\n"
"    if status == svn.wc.svn_wc_status_added:\n"
"        return 'A'\n"
"    if status == svn.wc.svn_wc_status_missing:\n"
"        return '!'\n"
"    if status == svn.wc.svn_wc_status_incomplete:\n"
"        return '!'\n"
"    if status == svn.wc.svn_wc_status_deleted:\n"
"        return 'D'\n"
"    if status == svn.wc.svn_wc_status_replaced:\n"
"        return 'R'\n"
"    if status == svn.wc.svn_wc_status_modified:\n"
"        return 'M'\n"
"    if status == svn.wc.svn_wc_status_merged:\n"
"        return 'G'\n"
"    if status == svn.wc.svn_wc_status_conflicted:\n"
"        return 'C'\n"
"    if status == svn.wc.svn_wc_status_obstructed:\n"
"        return '‾'\n"
"    if status == svn.wc.svn_wc_status_ignored:\n"
"        return 'I'\n"
"    if status == svn.wc.svn_wc_status_external:\n"
"        return 'X'\n"
"    if status == svn.wc.svn_wc_status_unversioned:\n"
"        return '?'\n"
"    return '?'\n"
"\n"
"def do_status(pool, wc_path, verbose):\n"
"    # Calculate the length of the input working copy path.\n"
"    wc_path_len = len(wc_path)\n"
"\n"
"    # Build a client context baton.\n"
"    ctx = svn.client.svn_client_ctx_t()\n"
"\n"
"    def _status_callback(path, status, root_path_len=wc_path_len):\n"
"        \"\"\"A callback function for svn_client_status.\"\"\"\n"
"\n"
"        # Print the path, minus the bit that overlaps with the root of\n"
"        # the status crawl\n"
"        text_status = generate_status_code(status.text_status)\n"
"        prop_status = generate_status_code(status.prop_status)\n"
"        print '%s%s  %s' % (text_status, prop_status, path[wc_path_len + 1:])\n"
"        \n"
"    # Do the status crawl, using _status_callback() as our callback function.\n"
"    svn.client.svn_client_status(wc_path, None, _status_callback,\n"
"                                 1, verbose, 0, 0, ctx, pool)\n"
"\n"
"def usage_and_exit(errorcode):\n"
"    \"\"\"Print usage message, and exit with ERRORCODE.\"\"\"\n"
"    stream = errorcode and sys.stderr or sys.stdout\n"
"    stream.write(\"\"\"Usage: %s OPTIONS WC-PATH\n"
"Options:\n"
"  --help, -h    : Show this usage message\n"
"  --verbose, -v : Show all statuses, even uninteresting ones\n"
"\"\"\" % (os.path.basename(sys.argv[0])))\n"
"    sys.exit(errorcode)\n"
"    \n"
"if __name__ == '__main__':\n"
"    # Parse command-line options.\n"
"    try:\n"
"        opts, args = getopt.getopt(sys.argv[1:], \"hv\", [\"help\", \"verbose\"])\n"
"    except getopt.GetoptError:\n"
"        usage_and_exit(1)\n"
"    verbose = 0\n"
"    for opt, arg in opts:\n"
"        if opt in (\"-h\", \"--help\"):\n"
"            usage_and_exit(0)\n"
"        if opt in (\"-v\", \"--verbose\"):\n"
"            verbose = 1\n"
"    if len(args) != 1:\n"
"        usage_and_exit(2)\n"
"            \n"
"    # Call the app-wrapper, which takes care of APR initialization/shutdown\n"
"    # and the creation and cleanup of our top-level memory pool.\n"
"    svn.core.run_app(do_status, os.path.normpath(args[0]), verbose)"

#. Tag: para
#: ch08-embedding-svn.xml:985
#, no-c-format
msgid "As was the case in <xref linkend=\"svn.developer.usingapi.otherlangs.ex-1\"/>, this program is pool-free and uses, for the most part, normal Python data types. The call to <function>svn_client_ctx_t()</function> is deceiving because the public Subversion API has no such function&mdash;this just happens to be a case where SWIG's automatic language generation bleeds through a little bit (the function is a sort of factory function for Python's version of the corresponding complex C structure). Also note that the path passed to this program (like the last one) gets run through <function>svn_path_canonicalize()</function>, because to <emphasis>not</emphasis> do so runs the risk of triggering the underlying Subversion C library's assertions about such things, which translate into rather immediate and unceremonious program abortion."
msgstr ""

#. Tag: title
#: ch09-reference.xml:2
#, no-c-format
msgid "Subversion Complete Reference"
msgstr "Subversion リファレンス"

#. Tag: para
#: ch09-reference.xml:4
#, no-c-format
msgid "This chapter is intended to be a complete reference to using Subversion. This includes the command line client (<command>svn</command>) and all its subcommands, as well as the repository administration programs (<command>svnadmin</command> and <command>svnlook</command>) and their respective subcommands."
msgstr "この章はSubversionの完全なリファレンスです。 コマンドラインクライアント (<command>svn</command>) とそのすべてのサブコマンド、 さらにリポジトリ管理プログラム (<command>svnadmin</command>と<command>svnlook</command>) と そのすべてのサブコマンドです。"

#. Tag: title
#: ch09-reference.xml:16
#, no-c-format
msgid "The Subversion Command Line Client: <command>svn</command>"
msgstr "Subversion コマンドラインクライアント: <command>svn</command>"

#. Tag: para
#: ch09-reference.xml:18
#, fuzzy, no-c-format
msgid "To use the command line client, you type <command>svn</command>, the subcommand you wish to use <footnote><para>Yes, yes, you don't need a subcommand to use the <option>--version</option> option, but we'll get to that in just a minute.</para></footnote>, and any options or targets that you wish to operate on&mdash;there is no specific order that the subcommand and the options must appear in. For example, all of the following are valid ways to use <command>svn status</command>:"
msgstr "コマンドラインクライアントを使うには <command>svn</command> と入力してから、使いたいサブコマンドを入力してください。 <footnote><para> はい、そうですね。 <option>--version</option> スイッチを使うときにはサブコマンドは不要です。少し後でそのことに 触れます。</para> </footnote>, どんなスイッチや対象となる ターゲットについてもそうです&mdash; サブコマンドとスイッチの並びには特定の順序はありません。たとえば <command>svn status</command>: を使う場合に、以下はどれも有効です:"

#. Tag: screen
#: ch09-reference.xml:28
#, no-c-format
msgid ""
"$ svn -v status\n"
"$ svn status -v \n"
"$ svn status -v myfile"
msgstr ""
"$ svn -v status\n"
"$ svn status -v \n"
"$ svn status -v myfile"

#. Tag: para
#: ch09-reference.xml:30
#, no-c-format
msgid "You can find many more examples of how to use most client commands in <xref linkend=\"svn.tour\"/> and commands for managing properties in <xref linkend=\"svn.advanced.props\"/>."
msgstr "クライアントコマンドの利用法については、もっとたくさんの 例が <xref linkend=\"svn.tour\"/>にあり、属性の管理については <xref linkend=\"svn.advanced.props\"/>にあります。"

#. Tag: title
#: ch09-reference.xml:36
#, fuzzy, no-c-format
msgid "<command>svn</command> Options"
msgstr "<command>svn</command> のスイッチ"

#. Tag: para
#: ch09-reference.xml:38
#, fuzzy, no-c-format
msgid "While Subversion has different options for its subcommands, all options are global&mdash;that is, each option is guaranteed to mean the same thing regardless of the subcommand you use it with. For example, <option>--verbose</option> (<option>-v</option>) always means <quote>verbose output</quote>, regardless of the subcommand you use it with."
msgstr "Subversion はサブコマンドごとに違ったスイッチを持って いますが、どれもグローバルに働きます&mdash;つまりそれぞれの スイッチは一緒に利用されるサブコマンドにかかわらず同じ意味 を持ちます。たとえば<option>--verbose</option> (<option>-v</option>) は常に、どのサブコマンドと一緒に使っても<quote>冗長な出力</quote>を 意味します。"

#. Tag: option
#: ch09-reference.xml:49
#, no-c-format
msgid "--auto-props"
msgstr "--auto-props"

#. Tag: para
#: ch09-reference.xml:51
#, no-c-format
msgid "Enables auto-props, overriding the <literal>enable-auto-props</literal> directive in the <filename>config</filename> file."
msgstr "<filename>config</filename>ファイルにある<literal>enable-auto-props</literal> ディレクティブを上書きする形で auto-props を有効にします。"

#. Tag: term
#: ch09-reference.xml:58
#, fuzzy, no-c-format
msgid "<option>--change</option> (<option>-c</option>) <replaceable>ARG</replaceable>"
msgstr "<option>--revision</option> (<option>-r</option>) <replaceable>ARG</replaceable>"

#. Tag: para
#: ch09-reference.xml:61
#, no-c-format
msgid "Used as a means to refer to a specific <quote>change</quote> (aka a revision), this option is syntactic sugar for <quote>-r ARG-1:ARG</quote>."
msgstr ""

#. Tag: term
#: ch09-reference.xml:68
#: ch09-reference.xml:5283
#, no-c-format
msgid "<option>--config-dir</option> <replaceable>DIR</replaceable>"
msgstr "<option>--config-dir</option> <replaceable>DIR</replaceable>"

#. Tag: para
#: ch09-reference.xml:71
#: ch09-reference.xml:5286
#, no-c-format
msgid "Instructs Subversion to read configuration information from the specified directory instead of the default location (<filename>.subversion</filename> in the user's home directory)."
msgstr "Subversion にデフォルトの場所(ユーザのホームディレクトリにある<filename>.subversion</filename> )のかわりに特定のディレクトリから設定情報を読み出すように指示します。"

#. Tag: term
#: ch09-reference.xml:79
#, no-c-format
msgid "<option>--diff-cmd</option> <replaceable>CMD</replaceable>"
msgstr "<option>--diff-cmd</option> <replaceable>CMD</replaceable>"

#. Tag: para
#: ch09-reference.xml:82
#, fuzzy, no-c-format
msgid "Specifies an external program to use to show differences between files. When <command>svn diff</command> is invoked without this option, it uses Subversion's internal diff engine, which provides unified diffs by default. If you want to use an external diff program, use <option>--diff-cmd</option>. You can pass options to the diff program with the <option>--extensions</option> option (more on that later in this section)."
msgstr "ファイル間の差異を表示するために使う外部プログラムを指定します。 <command>svn diff</command>が起動されると、デフォルトでは unifid diff形式 であるSubversionの内部 diff エンジンが利用されます。外部 diff プログラム を利用したい場合は、<option>--diff-cmd</option>を使ってください。 <option>--extensions</option>スイッチで diffプログラムを指定することもで きます。(詳しくはこの章のあとで説明します)。"

#. Tag: term
#: ch09-reference.xml:98
#, no-c-format
msgid "<option>--diff3-cmd</option> <replaceable>CMD</replaceable>"
msgstr "<option>--diff3-cmd</option> <replaceable>CMD</replaceable>"

#. Tag: para
#: ch09-reference.xml:101
#, no-c-format
msgid "Specifies an external program to use to merge files."
msgstr "ファイルをマージするために使う外部プログラムを指定します。"

#. Tag: option
#: ch09-reference.xml:106
#, no-c-format
msgid "--dry-run"
msgstr "--dry-run"

#. Tag: para
#: ch09-reference.xml:108
#, no-c-format
msgid "Goes through all the motions of running a command, but makes no actual changes&mdash;either on disk or in the repository."
msgstr "コマンドの実行をそのままたどりますが、実際の動作はしません &mdash;作業コピーに対しても、リポジトリに対するコマンドにも使えます。"

#. Tag: term
#: ch09-reference.xml:115
#, no-c-format
msgid "<option>--editor-cmd</option> <replaceable>CMD</replaceable>"
msgstr "<option>--editor-cmd</option> <replaceable>CMD</replaceable>"

#. Tag: para
#: ch09-reference.xml:118
#, no-c-format
msgid "Specifies an external program to use to edit a log message or a property value. See the <literal>editor-cmd</literal> section in <xref linkend=\"svn.advanced.confarea.opts.config\"/> for ways to specify a default editor."
msgstr "ログメッセージや属性値を編集するのに使う外部プログラムを指定します。"

#. Tag: term
#: ch09-reference.xml:126
#, no-c-format
msgid "<option>--encoding</option> <replaceable>ENC</replaceable>"
msgstr "<option>--encoding</option> <replaceable>ENC</replaceable>"

#. Tag: para
#: ch09-reference.xml:128
#, no-c-format
msgid "Tells Subversion that your commit message is encoded in the charset provided. The default is your operating system's native locale, and you should specify the encoding if your commit message is in any other encoding."
msgstr "コミットメッセージが指定した文字コード系でエンコードされていることを Subversion に伝えます。 デフォルトはあなたのオペレーティングシステムのもともとの ロケールで、コミットメッセージが別の文字コード系でエンコードされている場合にはそれを 指定する必要があります。"

#. Tag: term
#: ch09-reference.xml:137
#, no-c-format
msgid "<option>--extensions</option> (<option>-x</option>) <replaceable>ARGS</replaceable>"
msgstr "<option>--extensions</option>(<option>-x</option>) <replaceable>ARGS</replaceable>"

#. Tag: para
#: ch09-reference.xml:140
#, fuzzy, no-c-format
msgid "Specifies an argument or arguments that Subversion should pass to an external diff command. This option is valid only when used with the <command>svn diff</command> or <command>svn merge</command> commands, with the <option>--diff-cmd</option> option. If you wish to pass multiple arguments, you must enclose all of them in quotes (for example, <command>svn diff --diff-cmd /usr/bin/diff -x \"-b -E\"</command>)."
msgstr "Subversion がファイル間の差異を得るときに使う外部 diff コマンドに渡さなく てはならない一つ以上の引数を指定します。複数の引数を渡したい 場合は、それらすべてをクオートでくくらなくてはなりません。(たとえば、 <command>svn diff --diff-cmd /usr/bin/diff -x \"-b -E\"</command>)。 このスイッチは<option>--diff-cmd</option>スイッチも指定した場合 に<emphasis>のみ</emphasis>利用することができます。"

#. Tag: term
#: ch09-reference.xml:154
#, no-c-format
msgid "<option>--file</option> (<option>-F</option>) <replaceable>FILENAME</replaceable>"
msgstr "<option>--file</option> (<option>-F</option>) <replaceable>FILENAME</replaceable>"

#. Tag: para
#: ch09-reference.xml:158
#, no-c-format
msgid "Uses the contents of the named file for the specified subcommand, though different subcommands do different things with this content. For example, <command>svn commit</command> uses the content as a commit log, whereas <command>svn propset</command> uses it as a property value."
msgstr ""

#. Tag: option
#: ch09-reference.xml:168
#, no-c-format
msgid "--force"
msgstr "--force"

#. Tag: para
#: ch09-reference.xml:170
#, fuzzy, no-c-format
msgid "Forces a particular command or operation to run. There are some operations that Subversion will prevent you from doing in normal usage, but you can pass the force option to tell Subversion <quote>I know what I'm doing as well as the possible repercussions of doing it, so let me at 'em</quote>. This option is the programmatic equivalent of doing your own electrical work with the power on&mdash;if you don't know what you're doing, you're likely to get a nasty shock."
msgstr "特定のコマンドまたは操作の実行を強制します。 Subversion が通常なら拒否するようないくつかの操作がありますが、 この強制スイッチを使い、Subversion に<quote>そうしたら どうなるかはわかっているから、とにかく やらせてくれ</quote>と伝えることができます。 このスイッチは、電子工作か何かで、最後に電源を入れる状況に 似ています&mdash;何をやろうとしているのかよく理解していなければ きっと嫌な目に遭うでしょう。"

#. Tag: option
#: ch09-reference.xml:183
#, no-c-format
msgid "--force-log"
msgstr "--force-log"

#. Tag: para
#: ch09-reference.xml:185
#, no-c-format
msgid "Forces a suspicious parameter passed to the <option>--message</option> (<option>-m</option>) or <option>--file</option> (<option>-F</option>) options to be accepted as valid. By default, Subversion will produce an error if parameters to these options look like they might instead be targets of the subcommand. For example, if you pass a versioned file's path to the <option>--file</option> (<option>-F</option>) option, Subversion will assume you've made a mistake, that the path was instead intended as the target of the operation, and that you simply failed to provide some other&mdash;unversioned&mdash;file as the source of your log message. To assert your intent and override these types of errors, pass the <option>--force-log</option> option to subcommands that accept log messages."
msgstr "<option>--messages</option> (<option>-m</option>) や <option>--file</option> (<option>-F</option>) オプションに 渡す疑わしい引数を正しいものとして強制的に受け入れる ように指示します。デフォルトでは、Subversion は正しいサブコマンドで あると解釈するかわりに、そのような引数が間違いであるとして エラーを生成します。 たとえば、バージョン化されたファイルのパスを<option>--file</option> (<option>-F</option>) オプションに渡すと、Subversion はそのパスが 操作対象として意図されていたと考えずに、その引数には間違いがあると みなし、ログメッセージのためのバージョン化されていない元ファイルを 用意することに失敗してしまいます。自分の意図を宣言し、この種のエラー を無視するためには、<option>--force-log</option>オプションをログメッセージ を受け入れるサブコマンドに対して指定する必要があります。"

#. Tag: term
#: ch09-reference.xml:204
#, no-c-format
msgid "<option>--help</option> (<option>-h</option> or <option>-?</option>)"
msgstr "<option>--help</option> (<option>-h or -?</option>)"

#. Tag: para
#: ch09-reference.xml:208
#, no-c-format
msgid "If used with one or more subcommands, shows the built-in help text for each subcommand. If used alone, it displays the general client help text."
msgstr "一つ以上のサブコマンドと一緒に使って、それぞれのサブコマンドの 組み込みヘルプテキストを表示します。このスイッチだけを単独で 使うと、一般的なコマンドクライアントのヘルプテキストを表示します。"

#. Tag: option
#: ch09-reference.xml:215
#, no-c-format
msgid "--ignore-ancestry"
msgstr "--ignore-ancestry"

#. Tag: para
#: ch09-reference.xml:217
#, no-c-format
msgid "Tells Subversion to ignore ancestry when calculating differences (rely on path contents alone)."
msgstr "Subversion に対して 差分を計算するときに、系統情報を無視するよう指示します(単にパス内容のみを利用します)。"

#. Tag: option
#: ch09-reference.xml:223
#, no-c-format
msgid "--ignore-externals"
msgstr "--ignore-externals"

#. Tag: para
#: ch09-reference.xml:225
#, no-c-format
msgid "Tells Subversion to ignore external definitions and the external working copies managed by them."
msgstr "Subversion に外部定義と外部定義によって管理される外部作業コピー を無視するように指示します。"

#. Tag: option
#: ch09-reference.xml:231
#: ch09-reference.xml:3678
#, no-c-format
msgid "--incremental"
msgstr "--incremental"

#. Tag: para
#: ch09-reference.xml:233
#, no-c-format
msgid "Prints output in a format suitable for concatenation."
msgstr "(他の出力と)連結するのに適した形式で 出力を表示します。"

#. Tag: term
#: ch09-reference.xml:239
#, no-c-format
msgid "<option>--limit</option> <replaceable>NUM</replaceable>"
msgstr "<option>--limit</option> <replaceable>NUM</replaceable>"

#. Tag: para
#: ch09-reference.xml:242
#, no-c-format
msgid "Show only the first <replaceable>NUM</replaceable> log messages."
msgstr "最初の <replaceable>NUM</replaceable>個のログメッセージだけを 表示します。"

#. Tag: term
#: ch09-reference.xml:248
#, no-c-format
msgid "<option>--message</option> (<option>-m</option>) <replaceable>MESSAGE</replaceable>"
msgstr "<option>--message</option> (<option>-m</option>) <replaceable>MESSAGE</replaceable>"

#. Tag: para
#: ch09-reference.xml:252
#, fuzzy, no-c-format
msgid "Indicates that you will specify a either a log message or a lock comment on the command line, following this option. For example:"
msgstr "コマンドライン上でコミットメッセージを指定します。このスイッチの あとに、たとえば:"

#. Tag: screen
#: ch09-reference.xml:256
#, no-c-format
msgid "$ svn commit -m \"They don't make Sunday.\""
msgstr "$ svn commit -m \"They don't make Sunday.\""

#. Tag: term
#: ch09-reference.xml:261
#, no-c-format
msgid "<option>--new</option> <replaceable>ARG</replaceable>"
msgstr "<option>--new</option> <replaceable>ARG</replaceable>"

#. Tag: para
#: ch09-reference.xml:263
#, fuzzy, no-c-format
msgid "Uses <replaceable>ARG</replaceable> as the newer target (for use with <command>svn diff</command>)."
msgstr "<replaceable>ARG</replaceable> を新しいターゲットとして利用します。"

#. Tag: option
#: ch09-reference.xml:269
#: ch09-reference.xml:5294
#, no-c-format
msgid "--no-auth-cache"
msgstr "--no-auth-cache"

#. Tag: para
#: ch09-reference.xml:271
#: ch09-reference.xml:5296
#, no-c-format
msgid "Prevents caching of authentication information (e.g. username and password) in the Subversion administrative directories."
msgstr "認証情報(ユーザ名やパスワードなど)をSubversion管理ディレクトリにキャッシュしないよう 指示します。"

#. Tag: option
#: ch09-reference.xml:278
#, no-c-format
msgid "--no-auto-props"
msgstr "--no-auto-props"

#. Tag: para
#: ch09-reference.xml:280
#, no-c-format
msgid "Disables auto-props, overriding the <literal>enable-auto-props</literal> directive in the <filename>config</filename> file."
msgstr "<filename>config</filename>ファイル中の<literal>enable-auto-props</literal> ディレクティブを上書きする形で auto-props を無効にします。"

#. Tag: option
#: ch09-reference.xml:287
#, no-c-format
msgid "--no-diff-added"
msgstr "--no-diff-added"

#. Tag: para
#: ch09-reference.xml:289
#, no-c-format
msgid "Prevents Subversion from printing differences for added files. The default behavior when you add a file is for <command>svn diff</command> to print the same differences that you would see if you had added the entire contents of an existing (empty) file."
msgstr "Subversion が追加されたファイルの差分を表示するのを防ぎます。 ファイルを追加した場合のデフォルトの動作は<command>svn diff</command> については、すでに(空の)ファイルが存在していて、そこに新たな ファイルの内容全体が追加された場合の差分の出力と同じになります。"

#. Tag: option
#: ch09-reference.xml:298
#: ch09-reference.xml:4483
#, no-c-format
msgid "--no-diff-deleted"
msgstr "--no-diff-deleted"

#. Tag: para
#: ch09-reference.xml:300
#, no-c-format
msgid "Prevents Subversion from printing differences for deleted files. The default behavior when you remove a file is for <command>svn diff</command> to print the same differences that you would see if you had left the file but removed all the content."
msgstr "削除されたファイルの差分を表示しないようにSubversionに指示します。 デフォルトではファイルを削除したときの<command>svn diff</command>の 出力は、ファイルは削除されずゼロバイトで残っているかのような 形になります。"

#. Tag: option
#: ch09-reference.xml:309
#, no-c-format
msgid "--no-ignore"
msgstr "--no-ignore"

#. Tag: para
#: ch09-reference.xml:311
#, no-c-format
msgid "Shows files in the status listing that would normally be omitted since they match a pattern in the <literal>global-ignores</literal> configuration option or the <literal>svn:ignore</literal> property. See <xref linkend=\"svn.advanced.confarea.opts.config\"/> and <xref linkend=\"svn.advanced.props.special.ignore\"/> for more information."
msgstr "<literal>global-ignores</literal>設定オプション、あるいはsvn:ignore属 性にマッチしたため通常なら省略されるようなファイルの ステータス一覧を表示します。 <xref linkend=\"svn.advanced.confarea.opts.config\"/>と <xref linkend=\"svn.advanced.props.special.ignore\"/> にさらに詳しい情報があります。"

#. Tag: option
#: ch09-reference.xml:322
#, no-c-format
msgid "--no-unlock"
msgstr "--no-unlock"

#. Tag: para
#: ch09-reference.xml:324
#, no-c-format
msgid "Don't automatically unlock files (the default commit behavior is to unlock all files listed as part of the commit). See <xref linkend=\"svn.advanced.locking\"/> for more information."
msgstr "自動的にファイルをアンロックしません(デフォルトのコミットの動作は コミットの一環として関連するすべてのファイルをアンロックします)。 より詳しくは<xref linkend=\"svn.advanced.locking\"/>を見て ください。"

#. Tag: option
#: ch09-reference.xml:332
#: ch09-reference.xml:5303
#, no-c-format
msgid "--non-interactive"
msgstr "--non-interactive"

#. Tag: para
#: ch09-reference.xml:334
#: ch09-reference.xml:5305
#, no-c-format
msgid "In the case of an authentication failure, or insufficient credentials, prevents prompting for credentials (e.g. username or password). This is useful if you're running Subversion inside of an automated script and it's more appropriate to have Subversion fail than to prompt for more information."
msgstr "認証が失敗したり十分な許可がないときに、認証要求するのを 抑制します。(たとえば、ユーザ名とパスワード)これは、 Subversionを自動スクリプト中で実行しているようなときで 認証要求させるよりも単に失敗したほうが便利な場合に 役に立ちます。"

#. Tag: term
#: ch09-reference.xml:344
#, no-c-format
msgid "<option>--non-recursive</option> (<option>-N</option>)"
msgstr "<option>--non-recursive</option> (<option>-N</option>)"

#. Tag: para
#: ch09-reference.xml:346
#, no-c-format
msgid "Stops a subcommand from recursing into subdirectories. Most subcommands recurse by default, but some subcommands&mdash;usually those that have the potential to remove or undo your local modifications&mdash;do not."
msgstr "サブディレクトリに対してサブコマンドを再帰的に実行するのを 抑止します。ほとんどのサブコマンドはデフォルトで再帰的に実行 されますが、いくつかのサブコマンド&mdash;普通は、作業コピーの 変更に対する削除や取り消しが起きるようなもの&mdash;はそうでは ありません。"

#. Tag: option
#: ch09-reference.xml:355
#, no-c-format
msgid "--notice-ancestry"
msgstr "--notice-ancestry"

#. Tag: para
#: ch09-reference.xml:357
#, no-c-format
msgid "Pay attention to ancestry when calculating differences."
msgstr "差分を計算するときに系統情報を考慮します。"

#. Tag: term
#: ch09-reference.xml:363
#, no-c-format
msgid "<option>--old</option> <replaceable>ARG</replaceable>"
msgstr "<option>--old</option> <replaceable>ARG</replaceable>"

#. Tag: para
#: ch09-reference.xml:365
#, fuzzy, no-c-format
msgid "Uses <replaceable>ARG</replaceable> as the older target (for use with <command>svn diff</command>)."
msgstr "<replaceable>ARG</replaceable> を古いターゲットとして利用します。"

#. Tag: term
#: ch09-reference.xml:371
#: ch09-reference.xml:5315
#, no-c-format
msgid "<option>--password</option> <replaceable>PASS</replaceable>"
msgstr "<option>--password</option> <replaceable>PASS</replaceable>"

#. Tag: para
#: ch09-reference.xml:374
#: ch09-reference.xml:5318
#, no-c-format
msgid "Indicates that you are providing your password for authentication on the command line&mdash;otherwise, if it is needed, Subversion will prompt you for it."
msgstr "コマンドライン上で認証用パスワードを指定します&mdash;これを 指定しなければ、必要な場所でSubversion はパスワード入力を 要求してきます。"

#. Tag: term
#: ch09-reference.xml:382
#, no-c-format
msgid "<option>--quiet</option> (<option>-q</option>)"
msgstr "<option>--quiet</option> (<option>-q</option>)"

#. Tag: para
#: ch09-reference.xml:384
#, no-c-format
msgid "Requests that the client print only essential information while performing an operation."
msgstr "実行中に重要な情報だけを表示するように指示します。"

#. Tag: term
#: ch09-reference.xml:390
#, no-c-format
msgid "<option>--recursive</option> (<option>-R</option>)"
msgstr "<option>--recursive</option> (<option>-R</option>)"

#. Tag: para
#: ch09-reference.xml:392
#, no-c-format
msgid "Makes a subcommand recurse into subdirectories. Most subcommands recurse by default."
msgstr "サブコマンドをサブディレクトリに対して再帰的に実行する ようにします。ほとんどのサブコマンドはデフォルトで再帰的な 動作をします。"

#. Tag: term
#: ch09-reference.xml:398
#, no-c-format
msgid "<option>--relocate</option> <replaceable>FROM TO [PATH...]</replaceable>"
msgstr "<option>--relocate</option> <replaceable>FROM TO [PATH...]</replaceable>"

#. Tag: para
#: ch09-reference.xml:401
#, no-c-format
msgid "Used with the <command>svn switch</command> subcommand, changes the location of the repository that your working copy references. This is useful if the location of your repository changes and you have an existing working copy that you'd like to continue to use. See <command>svn switch</command> for an example."
msgstr "<command>svn switch</command>サブコマンドと一緒に使うことで作業コピー が参照しているリポジトリの場所を変更します。これは、リポジトリの 場所が移動しても、既に存在している作業コピーを続けて利用したい場合 に便利です。例として、<command>svn switch</command>を参照してください。"

#. Tag: term
#: ch09-reference.xml:412
#, no-c-format
msgid "<option>--revision</option> (<option>-r</option>) <replaceable>REV</replaceable>"
msgstr "<option>--revision</option> (<option>-r</option>) <replaceable>REV</replaceable>"

#. Tag: para
#: ch09-reference.xml:416
#, fuzzy, no-c-format
msgid "Indicates that you're going to supply a revision (or range of revisions) for a particular operation. You can provide revision numbers, revision keywords or dates (in curly braces), as arguments to the revision option. If you wish to provide a range of revisions, you can provide two revisions separated by a colon. For example:"
msgstr "特定の操作で、リビジョン(またはリビジョンの範囲)を設定します。 リビジョンはリビジョンスイッチの引数として、番号、キーワード、 日付(この場合は中かっこを使って)のどれかで指定することができます。 リビジョンを二つ指定するときにはコロンで区切ります。たとえば:"

#. Tag: screen
#: ch09-reference.xml:424
#, no-c-format
msgid ""
"$ svn log -r 1729\n"
"$ svn log -r 1729:HEAD\n"
"$ svn log -r 1729:1744\n"
"$ svn log -r {2001-12-04}:{2002-02-17}\n"
"$ svn log -r 1729:{2002-02-17}"
msgstr ""
"$ svn log -r 1729\n"
"$ svn log -r 1729:HEAD\n"
"$ svn log -r 1729:1744\n"
"$ svn log -r {2001-12-04}:{2002-02-17}\n"
"$ svn log -r 1729:{2002-02-17}"

#. Tag: para
#: ch09-reference.xml:426
#, no-c-format
msgid "See <xref linkend=\"svn.tour.revs.keywords\"/> for more information."
msgstr "詳しくは<xref linkend=\"svn.tour.revs.keywords\"/> を見てください。"

#. Tag: option
#: ch09-reference.xml:432
#: ch09-reference.xml:4503
#, no-c-format
msgid "--revprop"
msgstr "--revprop"

#. Tag: para
#: ch09-reference.xml:434
#: ch09-reference.xml:4505
#, fuzzy, no-c-format
msgid "Operates on a revision property instead of a property specific to a file or directory. This option requires that you also pass a revision with the <option>--revision</option> (<option>-r</option>) option."
msgstr "ファイルやディレクトリの属性のかわりに、リビジョンの属性に対して 操作するようにします。このスイッチを使う場合は <option>--revision</option>(<option>-r</option>)を使ってリビジョンも 渡す必要があります。 バージョン化しない属性についての詳細は<xref linkend=\"svn.reposadmin.basics.revprops\"/> を見てください。"

#. Tag: term
#: ch09-reference.xml:443
#, no-c-format
msgid "<option>--show-updates</option> (<option>-u</option>)"
msgstr "<option>--show-updates</option> (<option>-u</option>)"

#. Tag: para
#: ch09-reference.xml:445
#, no-c-format
msgid "Causes the client to display information about which files in your working copy are out-of-date. This doesn't actually update any of your files&mdash;it just shows you which files will be updated if you run <command>svn update</command>."
msgstr "作業コピーのどのファイルが最新であるかの情報を表示します。 これは実際に自分に作業ファイルを更新しません&mdash;もし <command>svn update</command>を実行したとしたら、どの ファイルが更新されるかを表示するだけです。"

#. Tag: option
#: ch09-reference.xml:455
#, no-c-format
msgid "--stop-on-copy"
msgstr "--stop-on-copy"

#. Tag: para
#: ch09-reference.xml:457
#, no-c-format
msgid "Causes a Subversion subcommand which is traversing the history of a versioned resource to stop harvesting that historical information when a copy&mdash;that is, a location in history where that resource was copied from another location in the repository&mdash;is encountered."
msgstr "Subversion のサブコマンドでバージョン化されたリソースを巡回する ようなものについて、コピーを発見したときには履歴情報の収集を止める ようにします。&mdash; ここで言うコピーとは履歴の中でリポジトリの ほかの場所からコピーされたリソースがあるような場所のことを言って います。"

#. Tag: option
#: ch09-reference.xml:467
#, no-c-format
msgid "--strict"
msgstr "--strict"

#. Tag: para
#: ch09-reference.xml:469
#, fuzzy, no-c-format
msgid "Causes Subversion to use strict semantics, a notion which is rather vague unless talking about specific subcommands (namely, <command>svn propget</command>)."
msgstr "Subversion が厳密なセマンティクスを使うように します。ここで言う\"セマンティクス\"の意味ですが、具体的なサブコマンドに則して 説明しなければ漠然としたものになってしまいます。"

#. Tag: term
#: ch09-reference.xml:476
#, no-c-format
msgid "<option>--targets</option> <replaceable>FILENAME</replaceable>"
msgstr "<option>--targets</option> <replaceable>FILENAME</replaceable>"

#. Tag: para
#: ch09-reference.xml:479
#, no-c-format
msgid "Tells Subversion to get the list of files that you wish to operate on from the filename you provide instead of listing all the files on the command line."
msgstr "コマンドライン上にすべてのファイルを記入するかわりに、 指定したファイルから操作したいファイルの一覧を取得するよう Subversion に指示します。"

#. Tag: term
#: ch09-reference.xml:487
#: ch09-reference.xml:5326
#, no-c-format
msgid "<option>--username</option> <replaceable>NAME</replaceable>"
msgstr "<option>--username</option> <replaceable>NAME</replaceable>"

#. Tag: para
#: ch09-reference.xml:490
#: ch09-reference.xml:5329
#, no-c-format
msgid "Indicates that you are providing your username for authentication on the command line&mdash;otherwise, if it is needed, Subversion will prompt you for it."
msgstr "コマンドライン上での認証に、指定したユーザ名称を使うように 指示します&mdash;そうでなければ、必要な場所で、Subversionは その入力をユーザに求めます。"

#. Tag: term
#: ch09-reference.xml:498
#, no-c-format
msgid "<option>--verbose</option> (<option>-v</option>)"
msgstr "<option>--verbose</option> (<option>-v</option>)"

#. Tag: para
#: ch09-reference.xml:500
#, no-c-format
msgid "Requests that the client print out as much information as it can while running any subcommand. This may result in Subversion printing out additional fields, detailed information about every file, or additional information regarding its actions."
msgstr "サブコマンド実行時に、できるたけ多くの情報を表示するように 指示します。Subversion は、追加フィールド、すべてのファイルの 詳細情報、動作内容についての追加情報などを表示するようになります。"

#. Tag: option
#: ch09-reference.xml:509
#: ch09-reference.xml:5615
#: ch09-reference.xml:5775
#, no-c-format
msgid "--version"
msgstr "--version"

#. Tag: para
#: ch09-reference.xml:511
#, fuzzy, no-c-format
msgid "Prints the client version info. This information not only includes the version number of the client, but also a listing of all repository access modules that the client can use to access a Subversion repository. With <option>--quiet</option> (<option>-q</option>) it prints only the version number in a compact form."
msgstr "クライアントプログラムのバージョン番号を表示します。この情報は バージョン番号のほか、Subversionリポジトリにクライアントプログラム がアクセスするために利用できるモジュールの一覧も表示します。"

#. Tag: option
#: ch09-reference.xml:522
#, no-c-format
msgid "--xml"
msgstr "--xml"

#. Tag: para
#: ch09-reference.xml:524
#, no-c-format
msgid "Prints output in XML format."
msgstr "XMLフォーマットで出力します。"

#. Tag: title
#: ch09-reference.xml:534
#, no-c-format
msgid "<command>svn</command> Subcommands"
msgstr "<command>svn</command> サブコマンド"

#. Tag: para
#: ch09-reference.xml:536
#: ch09-reference.xml:5344
#, no-c-format
msgid "Here are the various subcommands:"
msgstr ""

#. Tag: primary
#: ch09-reference.xml:541
#: ch09-reference.xml:622
#: ch09-reference.xml:714
#: ch09-reference.xml:781
#: ch09-reference.xml:861
#: ch09-reference.xml:932
#: ch09-reference.xml:1033
#: ch09-reference.xml:1171
#: ch09-reference.xml:1251
#: ch09-reference.xml:1469
#: ch09-reference.xml:1561
#: ch09-reference.xml:1609
#: ch09-reference.xml:1687
#: ch09-reference.xml:1790
#: ch09-reference.xml:1889
#: ch09-reference.xml:1963
#: ch09-reference.xml:2105
#: ch09-reference.xml:2205
#: ch09-reference.xml:2272
#: ch09-reference.xml:2363
#: ch09-reference.xml:2427
#: ch09-reference.xml:2488
#: ch09-reference.xml:2553
#: ch09-reference.xml:2619
#: ch09-reference.xml:2726
#: ch09-reference.xml:2802
#: ch09-reference.xml:2887
#: ch09-reference.xml:3266
#: ch09-reference.xml:3397
#: ch09-reference.xml:3470
#, fuzzy, no-c-format
msgid "<primary>svn</primary>"
msgstr "<para>ls</para>"

#. Tag: secondary
#: ch09-reference.xml:542
#: ch09-reference.xml:623
#: ch09-reference.xml:715
#: ch09-reference.xml:782
#: ch09-reference.xml:862
#: ch09-reference.xml:933
#: ch09-reference.xml:1034
#: ch09-reference.xml:1172
#: ch09-reference.xml:1252
#: ch09-reference.xml:1470
#: ch09-reference.xml:1562
#: ch09-reference.xml:1610
#: ch09-reference.xml:1688
#: ch09-reference.xml:1791
#: ch09-reference.xml:1890
#: ch09-reference.xml:1964
#: ch09-reference.xml:2106
#: ch09-reference.xml:2206
#: ch09-reference.xml:2273
#: ch09-reference.xml:2364
#: ch09-reference.xml:2428
#: ch09-reference.xml:2489
#: ch09-reference.xml:2554
#: ch09-reference.xml:2620
#: ch09-reference.xml:2727
#: ch09-reference.xml:2803
#: ch09-reference.xml:2888
#: ch09-reference.xml:3267
#: ch09-reference.xml:3398
#: ch09-reference.xml:3471
#: ch09-reference.xml:3742
#: ch09-reference.xml:3796
#: ch09-reference.xml:3833
#: ch09-reference.xml:3921
#: ch09-reference.xml:3954
#: ch09-reference.xml:4004
#: ch09-reference.xml:4037
#: ch09-reference.xml:4078
#: ch09-reference.xml:4125
#: ch09-reference.xml:4164
#: ch09-reference.xml:4200
#: ch09-reference.xml:4256
#: ch09-reference.xml:4298
#: ch09-reference.xml:4347
#: ch09-reference.xml:4404
#: ch09-reference.xml:4542
#: ch09-reference.xml:4582
#: ch09-reference.xml:4623
#: ch09-reference.xml:4711
#: ch09-reference.xml:4751
#: ch09-reference.xml:4794
#: ch09-reference.xml:4835
#: ch09-reference.xml:4866
#: ch09-reference.xml:4910
#: ch09-reference.xml:4952
#: ch09-reference.xml:4996
#: ch09-reference.xml:5035
#: ch09-reference.xml:5083
#: ch09-reference.xml:5135
#: ch09-reference.xml:5176
#: ch09-reference.xml:5212
#: ch09-reference.xml:5350
#: ch09-reference.xml:5407
#: ch09-reference.xml:5466
#, no-c-format
msgid "subcommands"
msgstr ""

#. Tag: tertiary
#: ch09-reference.xml:543
#, fuzzy, no-c-format
msgid "<tertiary>add</tertiary>"
msgstr "<entry>いいえ</entry>"

#. Tag: refpurpose
#: ch09-reference.xml:548
#, no-c-format
msgid "Add files, directories, or symbolic links."
msgstr "通常ファイル、ディレクトリ、シンボリックリンクを追加します。"

#. Tag: title
#: ch09-reference.xml:552
#: ch09-reference.xml:633
#: ch09-reference.xml:725
#: ch09-reference.xml:791
#: ch09-reference.xml:871
#: ch09-reference.xml:942
#: ch09-reference.xml:1045
#: ch09-reference.xml:1182
#: ch09-reference.xml:1261
#: ch09-reference.xml:1479
#: ch09-reference.xml:1571
#: ch09-reference.xml:1620
#: ch09-reference.xml:1698
#: ch09-reference.xml:1800
#: ch09-reference.xml:1901
#: ch09-reference.xml:1973
#: ch09-reference.xml:2116
#: ch09-reference.xml:2215
#: ch09-reference.xml:2282
#: ch09-reference.xml:2373
#: ch09-reference.xml:2438
#: ch09-reference.xml:2498
#: ch09-reference.xml:2563
#: ch09-reference.xml:2629
#: ch09-reference.xml:2737
#: ch09-reference.xml:2812
#: ch09-reference.xml:2897
#: ch09-reference.xml:3276
#: ch09-reference.xml:3407
#: ch09-reference.xml:3480
#: ch09-reference.xml:3751
#: ch09-reference.xml:3805
#: ch09-reference.xml:3842
#: ch09-reference.xml:3929
#: ch09-reference.xml:3963
#: ch09-reference.xml:4015
#: ch09-reference.xml:4048
#: ch09-reference.xml:4088
#: ch09-reference.xml:4134
#: ch09-reference.xml:4173
#: ch09-reference.xml:4215
#: ch09-reference.xml:4266
#: ch09-reference.xml:4307
#: ch09-reference.xml:4356
#: ch09-reference.xml:4413
#: ch09-reference.xml:4551
#: ch09-reference.xml:4591
#: ch09-reference.xml:4632
#: ch09-reference.xml:4720
#: ch09-reference.xml:4760
#: ch09-reference.xml:4803
#: ch09-reference.xml:4843
#: ch09-reference.xml:4877
#: ch09-reference.xml:4920
#: ch09-reference.xml:4962
#: ch09-reference.xml:5005
#: ch09-reference.xml:5045
#: ch09-reference.xml:5093
#: ch09-reference.xml:5144
#: ch09-reference.xml:5186
#: ch09-reference.xml:5221
#: ch09-reference.xml:5361
#: ch09-reference.xml:5417
#: ch09-reference.xml:5476
#: ch09-reference.xml:5713
#, no-c-format
msgid "Synopsis"
msgstr "用法"

#. Tag: programlisting
#: ch09-reference.xml:553
#, no-c-format
msgid "svn add PATH..."
msgstr "svn add PATH..."

#. Tag: para
#: ch09-reference.xml:558
#, fuzzy, no-c-format
msgid "Schedule files, directories, or symbolic links in your working copy for addition to the repository. They will be uploaded and added to the repository on your next commit. If you add something and change your mind before committing, you can unschedule the addition using <command>svn revert</command>."
msgstr "通常ファイル、ディレクトリ、シンボリックリンクを作業コピーに 追加しリポジトリに対する 追加予告をします。次のコミットでリポジトリにアップロードして 追加されます。何かを追加し、コミット前に気が変わった場合は、 <command>svn revert</command>で追加を取り消す ことができます。"

#. Tag: title
#: ch09-reference.xml:568
#: ch09-reference.xml:646
#: ch09-reference.xml:737
#: ch09-reference.xml:808
#: ch09-reference.xml:895
#: ch09-reference.xml:977
#: ch09-reference.xml:1100
#: ch09-reference.xml:1203
#: ch09-reference.xml:1386
#: ch09-reference.xml:1504
#: ch09-reference.xml:1582
#: ch09-reference.xml:1636
#: ch09-reference.xml:1743
#: ch09-reference.xml:1844
#: ch09-reference.xml:1917
#: ch09-reference.xml:2011
#: ch09-reference.xml:2160
#: ch09-reference.xml:2234
#: ch09-reference.xml:2325
#: ch09-reference.xml:2389
#: ch09-reference.xml:2454
#: ch09-reference.xml:2515
#: ch09-reference.xml:2579
#: ch09-reference.xml:2655
#: ch09-reference.xml:2754
#: ch09-reference.xml:2829
#: ch09-reference.xml:3201
#: ch09-reference.xml:3307
#: ch09-reference.xml:3424
#: ch09-reference.xml:3546
#: ch09-reference.xml:3944
#: ch09-reference.xml:4856
#: ch09-reference.xml:5057
#: ch09-reference.xml:5105
#: ch09-reference.xml:5383
#: ch09-reference.xml:5435
#: ch09-reference.xml:5494
#, no-c-format
msgid "Alternate Names"
msgstr "別名"

#. Tag: para
#: ch09-reference.xml:569
#: ch09-reference.xml:738
#: ch09-reference.xml:896
#: ch09-reference.xml:1505
#: ch09-reference.xml:1637
#: ch09-reference.xml:1744
#: ch09-reference.xml:1918
#: ch09-reference.xml:2012
#: ch09-reference.xml:2161
#: ch09-reference.xml:2235
#: ch09-reference.xml:2755
#: ch09-reference.xml:2830
#: ch09-reference.xml:3425
#: ch09-reference.xml:4146
#: ch09-reference.xml:4278
#: ch09-reference.xml:4977
#: ch09-reference.xml:5384
#, no-c-format
msgid "None"
msgstr "なし"

#. Tag: title
#: ch09-reference.xml:573
#: ch09-reference.xml:651
#: ch09-reference.xml:742
#: ch09-reference.xml:813
#: ch09-reference.xml:900
#: ch09-reference.xml:984
#: ch09-reference.xml:1105
#: ch09-reference.xml:1208
#: ch09-reference.xml:1391
#: ch09-reference.xml:1509
#: ch09-reference.xml:1590
#: ch09-reference.xml:1641
#: ch09-reference.xml:1748
#: ch09-reference.xml:1849
#: ch09-reference.xml:1922
#: ch09-reference.xml:2016
#: ch09-reference.xml:2165
#: ch09-reference.xml:2239
#: ch09-reference.xml:2330
#: ch09-reference.xml:2394
#: ch09-reference.xml:2459
#: ch09-reference.xml:2520
#: ch09-reference.xml:2584
#: ch09-reference.xml:2660
#: ch09-reference.xml:2759
#: ch09-reference.xml:2834
#: ch09-reference.xml:3206
#: ch09-reference.xml:3312
#: ch09-reference.xml:3429
#: ch09-reference.xml:3551
#, no-c-format
msgid "Changes"
msgstr "変更対象"

#. Tag: para
#: ch09-reference.xml:574
#, no-c-format
msgid "Working Copy"
msgstr "作業コピー"

#. Tag: title
#: ch09-reference.xml:578
#: ch09-reference.xml:656
#: ch09-reference.xml:747
#: ch09-reference.xml:818
#: ch09-reference.xml:905
#: ch09-reference.xml:989
#: ch09-reference.xml:1111
#: ch09-reference.xml:1214
#: ch09-reference.xml:1396
#: ch09-reference.xml:1514
#: ch09-reference.xml:1595
#: ch09-reference.xml:1646
#: ch09-reference.xml:1753
#: ch09-reference.xml:1854
#: ch09-reference.xml:1927
#: ch09-reference.xml:2021
#: ch09-reference.xml:2170
#: ch09-reference.xml:2244
#: ch09-reference.xml:2335
#: ch09-reference.xml:2399
#: ch09-reference.xml:2464
#: ch09-reference.xml:2525
#: ch09-reference.xml:2589
#: ch09-reference.xml:2665
#: ch09-reference.xml:2764
#: ch09-reference.xml:2839
#: ch09-reference.xml:3211
#: ch09-reference.xml:3317
#: ch09-reference.xml:3434
#: ch09-reference.xml:3556
#, no-c-format
msgid "Accesses Repository"
msgstr "Accesses Repository"

#. Tag: para
#: ch09-reference.xml:579
#: ch09-reference.xml:906
#: ch09-reference.xml:1596
#: ch09-reference.xml:2765
#: ch09-reference.xml:2840
#, no-c-format
msgid "<para>No</para>"
msgstr "<para>なし</para>"

#. Tag: title
#: ch09-reference.xml:583
#: ch09-reference.xml:661
#: ch09-reference.xml:752
#: ch09-reference.xml:823
#: ch09-reference.xml:910
#: ch09-reference.xml:994
#: ch09-reference.xml:1117
#: ch09-reference.xml:1219
#: ch09-reference.xml:1402
#: ch09-reference.xml:1519
#: ch09-reference.xml:1600
#: ch09-reference.xml:1651
#: ch09-reference.xml:1758
#: ch09-reference.xml:1859
#: ch09-reference.xml:1932
#: ch09-reference.xml:2026
#: ch09-reference.xml:2175
#: ch09-reference.xml:2249
#: ch09-reference.xml:2340
#: ch09-reference.xml:2404
#: ch09-reference.xml:2469
#: ch09-reference.xml:2530
#: ch09-reference.xml:2594
#: ch09-reference.xml:2670
#: ch09-reference.xml:2769
#: ch09-reference.xml:2844
#: ch09-reference.xml:3216
#: ch09-reference.xml:3322
#: ch09-reference.xml:3439
#: ch09-reference.xml:3561
#: ch09-reference.xml:3769
#: ch09-reference.xml:3823
#: ch09-reference.xml:3897
#: ch09-reference.xml:3983
#: ch09-reference.xml:4100
#: ch09-reference.xml:4144
#: ch09-reference.xml:4225
#: ch09-reference.xml:4276
#: ch09-reference.xml:4319
#: ch09-reference.xml:4382
#: ch09-reference.xml:4562
#: ch09-reference.xml:4602
#: ch09-reference.xml:4689
#: ch09-reference.xml:4731
#: ch09-reference.xml:4771
#: ch09-reference.xml:4815
#: ch09-reference.xml:4889
#: ch09-reference.xml:4931
#: ch09-reference.xml:4975
#: ch09-reference.xml:5015
#: ch09-reference.xml:5062
#: ch09-reference.xml:5110
#: ch09-reference.xml:5156
#: ch09-reference.xml:5388
#: ch09-reference.xml:5440
#: ch09-reference.xml:5499
#: ch09-reference.xml:5744
#, no-c-format
msgid "Options"
msgstr ""

#. Tag: screen
#: ch09-reference.xml:585
#, fuzzy, no-c-format
msgid ""
"--targets FILENAME\n"
"--non-recursive (-N)\n"
"--quiet (-q)\n"
"--config-dir DIR\n"
"--no-ignore\n"
"--auto-props\n"
"--no-auto-props\n"
"--force"
msgstr ""
"--targets FILENAME\n"
"--non-recursive (-N)\n"
"--quiet (-q)\n"
"--config-dir DIR\n"
"--auto-props\n"
"--no-auto-props\n"
"--force"

#. Tag: title
#: ch09-reference.xml:589
#: ch09-reference.xml:695
#: ch09-reference.xml:758
#: ch09-reference.xml:829
#: ch09-reference.xml:917
#: ch09-reference.xml:1000
#: ch09-reference.xml:1123
#: ch09-reference.xml:1225
#: ch09-reference.xml:1408
#: ch09-reference.xml:1525
#: ch09-reference.xml:1657
#: ch09-reference.xml:1764
#: ch09-reference.xml:1865
#: ch09-reference.xml:1938
#: ch09-reference.xml:2032
#: ch09-reference.xml:2181
#: ch09-reference.xml:2255
#: ch09-reference.xml:2346
#: ch09-reference.xml:2410
#: ch09-reference.xml:2475
#: ch09-reference.xml:2536
#: ch09-reference.xml:2600
#: ch09-reference.xml:2676
#: ch09-reference.xml:2775
#: ch09-reference.xml:2850
#: ch09-reference.xml:3222
#: ch09-reference.xml:3328
#: ch09-reference.xml:3445
#: ch09-reference.xml:3567
#: ch09-reference.xml:3775
#: ch09-reference.xml:3903
#: ch09-reference.xml:4065
#: ch09-reference.xml:4186
#: ch09-reference.xml:4229
#: ch09-reference.xml:4325
#: ch09-reference.xml:4388
#: ch09-reference.xml:4434
#: ch09-reference.xml:4568
#: ch09-reference.xml:4608
#: ch09-reference.xml:4695
#: ch09-reference.xml:4737
#: ch09-reference.xml:4777
#: ch09-reference.xml:4821
#: ch09-reference.xml:4895
#: ch09-reference.xml:4937
#: ch09-reference.xml:4981
#: ch09-reference.xml:5021
#: ch09-reference.xml:5068
#: ch09-reference.xml:5116
#: ch09-reference.xml:5162
#: ch09-reference.xml:5201
#: ch09-reference.xml:5231
#: ch09-reference.xml:5394
#: ch09-reference.xml:5446
#: ch09-reference.xml:5505
#: ch09-reference.xml:5786
#, no-c-format
msgid "Examples"
msgstr "例"

#. Tag: para
#: ch09-reference.xml:591
#, no-c-format
msgid "To add a file to your working copy:"
msgstr "作業コピーにファイルを追加:"

#. Tag: screen
#: ch09-reference.xml:593
#, no-c-format
msgid ""
"$ svn add foo.c \n"
"A         foo.c"
msgstr ""
"$ svn add foo.c \n"
"A         foo.c"

#. Tag: para
#: ch09-reference.xml:595
#, no-c-format
msgid "When adding a directory, the default behavior of <command>svn add</command> is to recurse:"
msgstr "ディレクトリを追加するとき <command>svn add</command> のデフォルトは 再帰的です:"

#. Tag: screen
#: ch09-reference.xml:598
#, no-c-format
msgid ""
"$ svn add testdir\n"
"A         testdir\n"
"A         testdir/a\n"
"A         testdir/b\n"
"A         testdir/c\n"
"A         testdir/d"
msgstr ""
"$ svn add testdir\n"
"A         testdir\n"
"A         testdir/a\n"
"A         testdir/b\n"
"A         testdir/c\n"
"A         testdir/d"

#. Tag: para
#: ch09-reference.xml:600
#, no-c-format
msgid "You can add a directory without adding its contents:"
msgstr "内部にあるファイルを追加することなしに、ディレクトリのみ追加する ことができます:"

#. Tag: screen
#: ch09-reference.xml:603
#, no-c-format
msgid ""
"$ svn add --non-recursive otherdir\n"
"A         otherdir"
msgstr ""
"$ svn add --non-recursive otherdir\n"
"A         otherdir"

#. Tag: para
#: ch09-reference.xml:605
#, no-c-format
msgid "Normally, the command <command>svn add *</command> will skip over any directories that are already under version control. Sometimes, however, you may want to add every unversioned object in your working copy, including those hiding deeper down. Passing the <option>--force</option> option makes <command>svn add</command> recurse into versioned directories:"
msgstr "通常、コマンド<command>svn add *</command>はすでにバージョン管理下に あるすべてのディレクトリを飛ばします。しかし作業コピーにあるすべての バージョン化されていないオブジェクトを再帰的に追加したいこともあるでしょ う。<command>svn add</command>に <option>--force</option>オプションを渡すと 既にバージョン化されているディレクトリにも再帰的に降りていきます:"

#. Tag: screen
#: ch09-reference.xml:614
#, no-c-format
msgid ""
"$ svn add * --force\n"
"A         foo.c\n"
"A         somedir/bar.c\n"
"A         otherdir/docs/baz.doc\n"
"&hellip;"
msgstr ""
"$ svn add * --force\n"
"A         foo.c\n"
"A         somedir/bar.c\n"
"A         otherdir/docs/baz.doc\n"
"&hellip;"

#. Tag: tertiary
#: ch09-reference.xml:624
#, fuzzy, no-c-format
msgid "blame"
msgstr "svn blame"

#. Tag: refname
#: ch09-reference.xml:628
#, no-c-format
msgid "svn blame"
msgstr "svn blame"

#. Tag: refpurpose
#: ch09-reference.xml:629
#, no-c-format
msgid "Show author and revision information in-line for the specified files or URLs."
msgstr "指定されたファイルまたは URL の変更者とリビジョン情報をインラインで表示 します。"

#. Tag: programlisting
#: ch09-reference.xml:634
#, no-c-format
msgid "svn blame TARGET[@REV]..."
msgstr "svn blame TARGET[@REV]..."

#. Tag: para
#: ch09-reference.xml:639
#, no-c-format
msgid "Show author and revision information in-line for the specified files or URLs. Each line of text is annotated at the beginning with the author (username) and the revision number for the last change to that line."
msgstr "指定されたファイルまたは URL の変更者とリビジョン情報をインラインで表示 します。それぞれのテキスト行には先頭に変更者(ユーザ名)と、最後にその行に 変更があったリビジョン番号の注釈がつきます。"

#. Tag: para
#: ch09-reference.xml:647
#, no-c-format
msgid "praise, annotate, ann"
msgstr "praise, annotate, ann"

#. Tag: para
#: ch09-reference.xml:652
#: ch09-reference.xml:743
#: ch09-reference.xml:1392
#: ch09-reference.xml:1591
#: ch09-reference.xml:1749
#: ch09-reference.xml:1850
#: ch09-reference.xml:2017
#: ch09-reference.xml:3207
#, no-c-format
msgid "Nothing"
msgstr "なし"

#. Tag: para
#: ch09-reference.xml:657
#: ch09-reference.xml:748
#: ch09-reference.xml:819
#: ch09-reference.xml:990
#: ch09-reference.xml:1647
#: ch09-reference.xml:1855
#: ch09-reference.xml:1928
#: ch09-reference.xml:2022
#: ch09-reference.xml:3318
#: ch09-reference.xml:3435
#: ch09-reference.xml:3557
#, no-c-format
msgid "<para>Yes</para>"
msgstr "<para>Yes</para>"

#. Tag: screen
#: ch09-reference.xml:663
#, fuzzy, no-c-format
msgid ""
"--revision (-r) ARG\n"
"--verbose (-v)\n"
"--incremental\n"
"--xml\n"
"--extensions (-x) ARG\n"
"--force\n"
"--username ARG\n"
"--password ARG\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir ARG"
msgstr ""
"--revision (-r) REV\n"
"--verbose (-v)\n"
"--recursive (-R)\n"
"--incremental\n"
"--xml\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:697
#, no-c-format
msgid "If you want to see blame annotated source for <filename>readme.txt</filename> in your test repository:"
msgstr "自分のテスト用リポジトリにある <filename>readme.txt</filename> の注釈付きソースを見たい場合には:"

#. Tag: screen
#: ch09-reference.xml:700
#, no-c-format
msgid ""
"$ svn blame http://svn.red-bean.com/repos/test/readme.txt\n"
"     3      sally This is a README file.\n"
"     5      harry You should read this."
msgstr ""
"$ svn blame http://svn.red-bean.com/repos/test/readme.txt\n"
"     3      sally This is a README file.\n"
"     5      harry You should read this."

#. Tag: para
#: ch09-reference.xml:702
#, no-c-format
msgid "Even if <command>svn blame</command> says that Harry last modified readme.txt in revision 5, you'll have to examine exactly what the revision changed to be sure that Harry changed the <emphasis>context</emphasis> of the line&mdash;he may have just adjusted the whitespace."
msgstr ""

#. Tag: tertiary
#: ch09-reference.xml:716
#: ch09-reference.xml:4583
#, fuzzy, no-c-format
msgid "<tertiary>cat</tertiary>"
msgstr "<literal>cat</literal>"

#. Tag: refpurpose
#: ch09-reference.xml:721
#, no-c-format
msgid "Output the contents of the specified files or URLs."
msgstr "指定したファイルまたはURLの内容を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:726
#, no-c-format
msgid "svn cat TARGET[@REV]..."
msgstr "svn cat TARGET[@REV]..."

#. Tag: para
#: ch09-reference.xml:731
#, no-c-format
msgid "Output the contents of the specified files or URLs. For listing the contents of directories, see <command>svn list</command>."
msgstr "指定したファイルまたはURLの内容を表示します。 ディレクトリの内容の表示については、<command>svn list</command> を見てください。"

#. Tag: screen
#: ch09-reference.xml:754
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"
msgstr ""
"--revision (-r) REV\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:760
#, no-c-format
msgid "If you want to view readme.txt in your repository without checking it out:"
msgstr "チェックアウトすることなしにリポジトリ中のreadme.txtを表示したい 場合:"

#. Tag: screen
#: ch09-reference.xml:762
#, no-c-format
msgid ""
"$ svn cat http://svn.red-bean.com/repos/test/readme.txt\n"
"This is a README file.\n"
"You should read this."
msgstr ""
"$ svn cat http://svn.red-bean.com/repos/test/readme.txt\n"
"This is a README file.\n"
"You should read this."

#. Tag: para
#: ch09-reference.xml:765
#, no-c-format
msgid "If your working copy is out of date (or you have local modifications) and you want to see the <literal>HEAD</literal> revision of a file in your working copy, <command>svn cat</command> will automatically fetch the <literal>HEAD</literal> revision when you give it a path:"
msgstr "作業コピーが最新ではない(か、作業コピーに何か修正を加えた 場合)状態で、作業コピーのあるファイルの<literal>HEAD</literal> リビジョンを見たい場合、パスを指定すれば<command>svn cat</command> は 自動的に <literal>HEAD</literal>リビジョン にアクセスします:"

#. Tag: screen
#: ch09-reference.xml:773
#, no-c-format
msgid ""
"$ cat foo.c\n"
"This file is in my local working copy \n"
"and has changes that I've made.\n"
"\n"
"$ svn cat foo.c\n"
"Latest revision fresh from the repository!"
msgstr ""
"$ cat foo.c\n"
"This file is in my local working copy \n"
"and has changes that I've made.\n"
"\n"
"$ svn cat foo.c\n"
"Latest revision fresh from the repository!"

#. Tag: tertiary
#: ch09-reference.xml:783
#, no-c-format
msgid "checkout"
msgstr "checkout"

#. Tag: refname
#: ch09-reference.xml:787
#, no-c-format
msgid "svn checkout"
msgstr "svn checkout"

#. Tag: refpurpose
#: ch09-reference.xml:788
#, no-c-format
msgid "Check out a working copy from a repository."
msgstr "リポジトリから作業コピーをチェックアウトします。"

#. Tag: programlisting
#: ch09-reference.xml:792
#, no-c-format
msgid "svn checkout URL[@REV]... [PATH]"
msgstr "svn checkout URL[@REV]... [PATH]"

#. Tag: para
#: ch09-reference.xml:797
#, no-c-format
msgid "Check out a working copy from a repository. If <replaceable>PATH</replaceable> is omitted, the basename of the URL will be used as the destination. If multiple URLs are given each will be checked out into a subdirectory of <replaceable>PATH</replaceable>, with the name of the subdirectory being the basename of the URL."
msgstr "リポジトリから作業コピーをチェックアウトします。 <replaceable>PATH</replaceable> が省略されれば コピー先としてURLのベース名が使われます。 複数のURLが指定された場合には、 それぞれが、<replaceable>PATH</replaceable>のサブディレクトリに チェックアウトされますが ここでのサブディレクトリの名前はURLのベース名になります。"

#. Tag: para
#: ch09-reference.xml:809
#, no-c-format
msgid "<para>co</para>"
msgstr "<para>co</para>"

#. Tag: para
#: ch09-reference.xml:814
#, no-c-format
msgid "Creates a working copy."
msgstr "作業コピーが新たに作られます。"

#. Tag: screen
#: ch09-reference.xml:825
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--quiet (-q)\n"
"--non-recursive (-N)\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--ignore-externals\n"
"--config-dir DIR"
msgstr ""
"--revision (-r) REV\n"
"--quiet (-q)\n"
"--non-recursive (-N)\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--ignore-externals\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:831
#, no-c-format
msgid "Check out a working copy into a directory called <filename>mine</filename>:"
msgstr "<filename>mine</filename>と呼ばれるディレクトリに作業コピーをチェックアウト:"

#. Tag: screen
#: ch09-reference.xml:834
#, no-c-format
msgid ""
"$ svn checkout file:///tmp/repos/test mine\n"
"A  mine/a\n"
"A  mine/b\n"
"Checked out revision 2.\n"
"$ ls\n"
"mine"
msgstr ""
"$ svn checkout file:///tmp/repos/test mine\n"
"A  mine/a\n"
"A  mine/b\n"
"Checked out revision 2.\n"
"$ ls\n"
"mine"

#. Tag: para
#: ch09-reference.xml:836
#, fuzzy, no-c-format
msgid "Check out two different directories into two separate working copies:"
msgstr "二つの異なるディレクトリを二つの別々の作業コピーに チェックアウト:"

#. Tag: screen
#: ch09-reference.xml:839
#, no-c-format
msgid ""
"$ svn checkout file:///tmp/repos/test  file:///tmp/repos/quiz\n"
"A  test/a\n"
"A  test/b\n"
"Checked out revision 2.\n"
"A  quiz/l\n"
"A  quiz/m\n"
"Checked out revision 2.\n"
"$ ls\n"
"quiz  test"
msgstr ""
"$ svn checkout file:///tmp/repos/test  file:///tmp/repos/quiz\n"
"A  test/a\n"
"A  test/b\n"
"Checked out revision 2.\n"
"A  quiz/l\n"
"A  quiz/m\n"
"Checked out revision 2.\n"
"$ ls\n"
"quiz  test"

#. Tag: para
#: ch09-reference.xml:841
#, fuzzy, no-c-format
msgid "Check out two different directories into two separate working copies, but place both into a directory called <filename>working-copies</filename>:"
msgstr "二つの異なるディレクトリを二つの別々の作業コピーに チェックアウトするが、両方とも <filename>working-copies</filename> と呼ばれる ディレクトリ中に作る:"

#. Tag: screen
#: ch09-reference.xml:845
#, no-c-format
msgid ""
"$ svn checkout file:///tmp/repos/test  file:///tmp/repos/quiz working-copies\n"
"A  working-copies/test/a\n"
"A  working-copies/test/b\n"
"Checked out revision 2.\n"
"A  working-copies/quiz/l\n"
"A  working-copies/quiz/m\n"
"Checked out revision 2.\n"
"$ ls\n"
"working-copies"
msgstr ""
"$ svn checkout file:///tmp/repos/test  file:///tmp/repos/quiz working-copies\n"
"A  working-copies/test/a\n"
"A  working-copies/test/b\n"
"Checked out revision 2.\n"
"A  working-copies/quiz/l\n"
"A  working-copies/quiz/m\n"
"Checked out revision 2.\n"
"$ ls\n"
"working-copies"

#. Tag: para
#: ch09-reference.xml:847
#, fuzzy, no-c-format
msgid "If you interrupt a checkout (or something else interrupts your checkout, like loss of connectivity, etc.), you can restart it either by issuing the identical checkout command again, or by updating the incomplete working copy:"
msgstr "チェックアウトを中断する(かまたは、ネットワーク接続の不具合などにより チェックアウトが中断されるかした)場合、もう一度純粋なチェックアウトを 実行しても、不完全な作業コピーを更新することでも再開できます:"

#. Tag: screen
#: ch09-reference.xml:853
#, no-c-format
msgid ""
"$ svn checkout file:///tmp/repos/test test\n"
"A  test/a\n"
"A  test/b\n"
"^C\n"
"svn: The operation was interrupted\n"
"svn: caught SIGINT\n"
"\n"
"$ svn checkout file:///tmp/repos/test test\n"
"A  test/c\n"
"A  test/d\n"
"^C\n"
"svn: The operation was interrupted\n"
"svn: caught SIGINT\n"
"\n"
"$ cd test\n"
"$ svn update\n"
"A  test/e\n"
"A  test/f\n"
"Updated to revision 3."
msgstr ""
"$ svn checkout file:///tmp/repos/test test\n"
"A  test/a\n"
"A  test/b\n"
"^C\n"
"svn: The operation was interrupted\n"
"svn: caught SIGINT\n"
"\n"
"$ svn checkout file:///tmp/repos/test test\n"
"A  test/c\n"
"A  test/d\n"
"^C\n"
"svn: The operation was interrupted\n"
"svn: caught SIGINT\n"
"\n"
"$ cd test\n"
"$ svn update\n"
"A  test/e\n"
"A  test/f\n"
"Updated to revision 3."

#. Tag: tertiary
#: ch09-reference.xml:863
#, fuzzy, no-c-format
msgid "cleanup"
msgstr "svn cleanup"

#. Tag: refname
#: ch09-reference.xml:867
#, no-c-format
msgid "svn cleanup"
msgstr "svn cleanup"

#. Tag: refpurpose
#: ch09-reference.xml:868
#, no-c-format
msgid "Recursively clean up the working copy."
msgstr "作業コピーを再帰的に正常化する。"

#. Tag: programlisting
#: ch09-reference.xml:872
#, no-c-format
msgid "svn cleanup [PATH...]"
msgstr "svn cleanup [PATH...]"

#. Tag: para
#: ch09-reference.xml:877
#, no-c-format
msgid "Recursively clean up the working copy, removing working copy locks and resuming unfinished operations. If you ever get a <quote>working copy locked</quote> error, run this command to remove stale locks and get your working copy into a usable state again."
msgstr "作業コピーを再帰的に正常化するため、操作が未完了の ロックを削除します。<quote>作業コピーロック</quote>エラーが 発生したときには、このコマンドを実行して、ロックを解除し、 作業コピーを正常に戻してください。"

#. Tag: para
#: ch09-reference.xml:883
#, fuzzy, no-c-format
msgid "If, for some reason, an <command>svn update</command> fails due to a problem running an external diff program (e.g. user input or network failure), pass the <option>--diff3-cmd</option> to allow cleanup to complete any merging with your external diff program. You can also specify any configuration directory with the <option>--config-dir</option> option, but you should need these options extremely infrequently."
msgstr "何かの理由で<command>svn update</command>の失敗が外部 diff プログラム の実行の問題である場合(たとえばユーザ入力やネットワークの問題など)には 外部 diff プログラムでのマージ処理を完結させるために <option>--diff3-cmd</option>を渡すことができます。また <option>--config-dir</option> スイッチで任意の設定ディレクトリの指定もできます。ただしこれらのスイッチが 必要な場面は非常にまれです。"

#. Tag: para
#: ch09-reference.xml:901
#: ch09-reference.xml:2166
#: ch09-reference.xml:2760
#: ch09-reference.xml:2835
#: ch09-reference.xml:3313
#: ch09-reference.xml:3552
#, no-c-format
msgid "Working copy"
msgstr "作業コピー"

#. Tag: screen
#: ch09-reference.xml:912
#, no-c-format
msgid ""
"--diff3-cmd CMD\n"
"--config-dir DIR"
msgstr ""
"--diff3-cmd CMD\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:919
#, no-c-format
msgid "Well, there's not much to the examples here as <command>svn cleanup</command> generates no output. If you pass no <replaceable>PATH</replaceable>, <quote><filename>.</filename></quote> is used."
msgstr "<command>svn cleanup</command> は何も出力しないので、あまり例はありません。 もし、<replaceable>PATH</replaceable> を指定しなければ、<quote><filename>.</filename></quote>をかわりに使います。"

#. Tag: screen
#: ch09-reference.xml:924
#, no-c-format
msgid ""
"$ svn cleanup\n"
"\n"
"$ svn cleanup /path/to/working-copy"
msgstr ""
"$ svn cleanup\n"
"\n"
"$ svn cleanup /path/to/working-copy"

#. Tag: tertiary
#: ch09-reference.xml:934
#, fuzzy, no-c-format
msgid "commit"
msgstr "svn commit"

#. Tag: refpurpose
#: ch09-reference.xml:939
#, no-c-format
msgid "Send changes from your working copy to the repository."
msgstr "作業コピーの変更点をリポジトリに送ります。"

#. Tag: programlisting
#: ch09-reference.xml:943
#, no-c-format
msgid "svn commit [PATH...]"
msgstr "svn commit [PATH...]"

#. Tag: para
#: ch09-reference.xml:948
#, fuzzy, no-c-format
msgid "Send changes from your working copy to the repository. If you do not supply a log message with your commit by using either the <option>--file</option> or <option>--message</option> option, <command>svn</command> will launch your editor for you to compose a commit message. See the <literal>editor-cmd</literal> section in <xref linkend=\"svn.advanced.confarea.opts.config\"/>."
msgstr "作業コピーの変更点をリポジトリに送ります。 <option>--file</option>か、 <option>--message</option> のオプションを指定しなければ <command>svn</command> はエディタを起動し、ユーザに コミットメッセージを作成させます。 <xref linkend=\"svn.advanced.confarea.opts.config\"/>にある <literal>editor-cmd</literal> の章を見てください。"

#. Tag: para
#: ch09-reference.xml:957
#, fuzzy, no-c-format
msgid "<command>svn commit</command> will send any lock tokens that it finds and will release locks on all <replaceable>PATHS</replaceable> committed (recursively), unless <option>--no-unlock</option> is passed."
msgstr "<command>svn commit</command> は <option>--no-unlock</option>を指定しなければ 見つかったロックトークンを送信し、コミットされた すべての <replaceable>PATHS</replaceable>上に あるロックを(再帰的に)開放します。"

#. Tag: para
#: ch09-reference.xml:963
#, no-c-format
msgid "If you begin a commit and Subversion launches your editor to compose the commit message, you can still abort without committing your changes. If you want to cancel your commit, just quit your editor without saving your commit message and Subversion will prompt you to either abort the commit, continue with no message, or edit the message again."
msgstr "コミット処理を始め、Subversionがメッセージ作成のためのエディタを起動 した後でもまだ変更をコミットせず中断することができます。コミットを 取り消したければコミットメッセージを保存せずに単にエディタを終了 してください。Subversionはコミットを中断するか、メッセージなしで継続 するか、メッセージを再編集するかを聞いてきます。"

#. Tag: para
#: ch09-reference.xml:978
#, no-c-format
msgid "ci (short for <quote>check in</quote>; not <quote>co</quote>, which is short for <quote>checkout</quote>)"
msgstr "ci (<quote>check in</quote> の短縮形です; <quote>co</quote>ではありません。 <quote>co</quote>は<quote>checkout</quote>の短縮形です。)"

#. Tag: para
#: ch09-reference.xml:985
#, no-c-format
msgid "Working copy, repository"
msgstr "作業コピー、リポジトリ"

#. Tag: screen
#: ch09-reference.xml:996
#, no-c-format
msgid ""
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--quiet (-q)\n"
"--no-unlock\n"
"--non-recursive (-N)\n"
"--targets FILENAME\n"
"--force-log\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--encoding ENC\n"
"--config-dir DIR"
msgstr ""
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--quiet (-q)\n"
"--no-unlock\n"
"--non-recursive (-N)\n"
"--targets FILENAME\n"
"--force-log\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--encoding ENC\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:1002
#, no-c-format
msgid "Commit a simple modification to a file with the commit message on the command line and an implicit target of your current directory (<quote><filename>.</filename></quote>):"
msgstr "コマンドラインで指定したコミットメッセージとカレントディレクトリ (<quote><filename>.</filename></quote>)を暗黙のターゲットとして単純な変更をコミットします:"

#. Tag: screen
#: ch09-reference.xml:1007
#, no-c-format
msgid ""
"$ svn commit -m \"added howto section.\"\n"
"Sending        a\n"
"Transmitting file data .\n"
"Committed revision 3."
msgstr ""
"$ svn commit -m \"added howto section.\"\n"
"Sending        a\n"
"Transmitting file data .\n"
"Committed revision 3."

#. Tag: para
#: ch09-reference.xml:1009
#, no-c-format
msgid "Commit a modification to the file <filename>foo.c</filename> (explicitly specified on the command line) with the commit message in a file named <literal>msg</literal>:"
msgstr "ファイル<filename>foo.c</filename> (コマンドラインで明示的に 指定) の変更点を、ファイル<literal>msg</literal>の内容をコミットメッセージと してコミット:"

#. Tag: screen
#: ch09-reference.xml:1014
#, no-c-format
msgid ""
"$ svn commit -F msg foo.c\n"
"Sending        foo.c\n"
"Transmitting file data .\n"
"Committed revision 5."
msgstr ""
"$ svn commit -F msg foo.c\n"
"Sending        foo.c\n"
"Transmitting file data .\n"
"Committed revision 5."

#. Tag: para
#: ch09-reference.xml:1016
#, fuzzy, no-c-format
msgid "If you want to use a file that's under version control for your commit message with <option>--file</option>, you need to pass the <option>--force-log</option> option:"
msgstr "コミットメッセージとして、<option>--file</option>で 指定したファイルがバージョン管理下にある場合、 <option>--force-log</option> スイッチを 使う必要がある:"

#. Tag: screen
#: ch09-reference.xml:1021
#, no-c-format
msgid ""
"$ svn commit --file file_under_vc.txt foo.c\n"
"svn: The log message file is under version control\n"
"svn: Log message file is a versioned file; use '--force-log' to override\n"
"\n"
"$ svn commit --force-log --file file_under_vc.txt foo.c\n"
"Sending        foo.c\n"
"Transmitting file data .\n"
"Committed revision 6."
msgstr ""
"$ svn commit --file file_under_vc.txt foo.c\n"
"svn: The log message file is under version control\n"
"svn: Log message file is a versioned file; use `--force-log' to override\n"
"\n"
"$ svn commit --force --file-log file_under_vc.txt foo.c\n"
"Sending        foo.c\n"
"Transmitting file data .\n"
"Committed revision 6."

#. Tag: para
#: ch09-reference.xml:1023
#, no-c-format
msgid "To commit a file scheduled for deletion:"
msgstr "削除予告ファイルをコミット:"

#. Tag: screen
#: ch09-reference.xml:1025
#, no-c-format
msgid ""
"$ svn commit -m \"removed file 'c'.\"\n"
"Deleting       c\n"
"\n"
"Committed revision 7."
msgstr ""
"$ svn commit -m \"removed file 'c'.\"\n"
"Deleting       c\n"
"\n"
"Committed revision 7."

#. Tag: tertiary
#: ch09-reference.xml:1035
#, fuzzy, no-c-format
msgid "copy"
msgstr "hotcopy"

#. Tag: refpurpose
#: ch09-reference.xml:1040
#, no-c-format
msgid "Copy a file or directory in a working copy or in the repository."
msgstr "作業コピーやリポジトリ中の、 ファイルやディレクトリをコピー。"

#. Tag: programlisting
#: ch09-reference.xml:1046
#, no-c-format
msgid "svn copy SRC DST"
msgstr "svn copy SRC DST"

#. Tag: para
#: ch09-reference.xml:1052
#, no-c-format
msgid "Copy a file in a working copy or in the repository. <replaceable>SRC</replaceable> and <replaceable>DST</replaceable> can each be either a working copy (WC) path or URL:"
msgstr "作業コピーまたはリポジトリ中のファイルをコピーします。 <replaceable>SRC</replaceable> と <replaceable>DST</replaceable> は、作業コピー(WC)上のパスでも、URLでもかまいません:"

#. Tag: term
#: ch09-reference.xml:1060
#: ch09-reference.xml:2307
#, no-c-format
msgid "WC -&gt; WC"
msgstr "WC -&gt; WC"

#. Tag: para
#: ch09-reference.xml:1062
#, no-c-format
msgid "Copy and schedule an item for addition (with history)."
msgstr "追加用にファイルをコピーし、追加予告します。 (with history)."

#. Tag: term
#: ch09-reference.xml:1068
#, no-c-format
msgid "WC -&gt; URL"
msgstr "WC -&gt; URL"

#. Tag: para
#: ch09-reference.xml:1070
#, no-c-format
msgid "Immediately commit a copy of WC to URL."
msgstr "WCのコピーを直接URLにコミット。"

#. Tag: term
#: ch09-reference.xml:1075
#, no-c-format
msgid "URL -&gt; WC"
msgstr "URL -&gt; WC"

#. Tag: para
#: ch09-reference.xml:1077
#, no-c-format
msgid "Check out URL into WC, and schedule it for addition."
msgstr "URLをWCにチェックアウトし、追加予告する。"

#. Tag: term
#: ch09-reference.xml:1083
#: ch09-reference.xml:2315
#, no-c-format
msgid "URL -&gt; URL"
msgstr "URL -&gt; URL"

#. Tag: para
#: ch09-reference.xml:1085
#, no-c-format
msgid "Complete server-side copy. This is usually used to branch and tag."
msgstr "完全なサーバ上のみでのコピー。これは普通ブランチやタグに 利用されます。"

#. Tag: para
#: ch09-reference.xml:1093
#, no-c-format
msgid "You can only copy files within a single repository. Subversion does not support cross-repository copying."
msgstr "ファイルは一つのリポジトリの内部でのみコピー可能です。 Subversionはリポジトリ間コピーをサポートしていません。"

#. Tag: para
#: ch09-reference.xml:1101
#, no-c-format
msgid "<para>cp</para>"
msgstr "<para>cp</para>"

#. Tag: para
#: ch09-reference.xml:1106
#, no-c-format
msgid "Repository if destination is a URL."
msgstr "コピー先が URL である場合はリポジトリ。"

#. Tag: para
#: ch09-reference.xml:1107
#, no-c-format
msgid "Working copy if destination is a WC path."
msgstr "コピー先が作業コピーのパスである場合は作業コピー。"

#. Tag: para
#: ch09-reference.xml:1112
#, no-c-format
msgid "If source or destination is in the repository, or if needed to look up the source revision number."
msgstr "コピー元またはコピー先がリポジトリであるか、 ソースリビジョン番号を参照する必要がある場合には発生 する。"

#. Tag: screen
#: ch09-reference.xml:1119
#, no-c-format
msgid ""
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--revision (-r) REV\n"
"--quiet (-q)\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--force-log\n"
"--editor-cmd EDITOR\n"
"--encoding ENC\n"
"--config-dir DIR"
msgstr ""
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--revision (-r) REV\n"
"--quiet (-q)\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--editor-cmd EDITOR\n"
"--encoding ENC\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:1125
#, no-c-format
msgid "Copy an item within your working copy (just schedules the copy&mdash;nothing goes into the repository until you commit):"
msgstr "作業コピー中のファイルまたはディレクトリをコピー( コピー予告のみ&mdash;次のコミットまでリポジトリには何も 起こらない):"

#. Tag: screen
#: ch09-reference.xml:1129
#, no-c-format
msgid ""
"$ svn copy foo.txt bar.txt\n"
"A         bar.txt\n"
"$ svn status\n"
"A  +   bar.txt"
msgstr ""
"$ svn copy foo.txt bar.txt\n"
"A         bar.txt\n"
"$ svn status\n"
"A  +   bar.txt"

#. Tag: para
#: ch09-reference.xml:1131
#, no-c-format
msgid "Copy an item in your working copy to a URL in the repository (an immediate commit, so you must supply a commit message):"
msgstr "リポジトリ中の URL に作業コピー中のファイルまたはディレクトリ をコピー(同時にコミットされるので、コミットメッセージを 指定する必要あり):"

#. Tag: screen
#: ch09-reference.xml:1135
#, no-c-format
msgid ""
"$ svn copy near.txt file:///tmp/repos/test/far-away.txt -m \"Remote copy.\"\n"
"\n"
"Committed revision 8."
msgstr ""
"$ svn copy near.txt file:///tmp/repos/test/far-away.txt -m \"Remote copy.\"\n"
"\n"
"Committed revision 8."

#. Tag: para
#: ch09-reference.xml:1137
#, no-c-format
msgid "Copy an item from the repository to your working copy (just schedules the copy&mdash;nothing goes into the repository until you commit):"
msgstr "リポジトリのファイルまたはディレクトリを作業コピーに コピー(コピーの予告のみ&mdash;次のコミットまでリポジトリには 何も起こらない):"

#. Tag: para
#: ch09-reference.xml:1142
#, no-c-format
msgid "This is the recommended way to resurrect a dead file in your repository!"
msgstr "これはリポジトリ中の死んだファイルを復活させるおすすめの 方法です"

#. Tag: screen
#: ch09-reference.xml:1146
#, no-c-format
msgid ""
"$ svn copy file:///tmp/repos/test/far-away near-here\n"
"A         near-here"
msgstr ""
"$ svn copy file:///tmp/repos/test/far-away near-here\n"
"A         near-here"

#. Tag: para
#: ch09-reference.xml:1148
#, no-c-format
msgid "And finally, copying between two URLs:"
msgstr "そして最後に二つのURLの間でコピーする方法:"

#. Tag: screen
#: ch09-reference.xml:1150
#, no-c-format
msgid ""
"$ svn copy file:///tmp/repos/test/far-away file:///tmp/repos/test/over-there -m \"remote copy.\"\n"
"\n"
"Committed revision 9."
msgstr ""
"$ svn copy file:///tmp/repos/test/far-away file:///tmp/repos/test/over-there -m \"remote copy.\"\n"
"\n"
"Committed revision 9."

#. Tag: para
#: ch09-reference.xml:1153
#, no-c-format
msgid "This is the easiest way to <quote>tag</quote> a revision in your repository&mdash;just <command>svn copy</command> that revision (usually <literal>HEAD</literal>) into your tags directory."
msgstr "リポジトリ中のリビジョンに<quote>tag</quote>をつける一番簡単な方法 &mdash;そのリビジョン(普通は<literal>HEAD</literal>)をタグ付けされた ディレクトリに、単に <command>svn copy</command> する。"

#. Tag: screen
#: ch09-reference.xml:1159
#, no-c-format
msgid ""
"$ svn copy file:///tmp/repos/test/trunk file:///tmp/repos/test/tags/0.6.32-prerelease -m \"tag tree\"\n"
"\n"
"Committed revision 12."
msgstr ""
"$ svn copy file:///tmp/repos/test/trunk file:///tmp/repos/test/tags/0.6.32-prerelease -m \"tag tree\"\n"
"\n"
"Committed revision 12."

#. Tag: para
#: ch09-reference.xml:1161
#, no-c-format
msgid "And don't worry if you forgot to tag&mdash;you can always specify an older revision and tag anytime:"
msgstr "そのタグを忘れるのを心配する必要はありません&mdash; いつでも古いリビジョンを指定してタグ付けすることが できます:"

#. Tag: screen
#: ch09-reference.xml:1164
#, no-c-format
msgid ""
"$ svn copy -r 11 file:///tmp/repos/test/trunk file:///tmp/repos/test/tags/0.6.32-prerelease -m \"Forgot to tag at rev 11\"\n"
"\n"
"Committed revision 13."
msgstr ""
"$ svn copy -r 11 file:///tmp/repos/test/trunk file:///tmp/repos/test/tags/0.6.32-prerelease -m \"Forgot to tag at rev 11\"\n"
"\n"
"Committed revision 13."

#. Tag: tertiary
#: ch09-reference.xml:1173
#, fuzzy, no-c-format
msgid "delete"
msgstr "削除"

#. Tag: refpurpose
#: ch09-reference.xml:1178
#, no-c-format
msgid "Delete an item from a working copy or the repository."
msgstr "作業コピーかリポジトリから ファイルまたはディレクトリを削除します。"

#. Tag: programlisting
#: ch09-reference.xml:1183
#, no-c-format
msgid "svn delete PATH..."
msgstr "svn delete PATH..."

#. Tag: programlisting
#: ch09-reference.xml:1184
#, no-c-format
msgid "svn delete URL..."
msgstr "svn delete URL..."

#. Tag: para
#: ch09-reference.xml:1189
#, fuzzy, no-c-format
msgid "Items specified by <replaceable>PATH</replaceable> are scheduled for deletion upon the next commit. Files (and directories that have not been committed) are immediately removed from the working copy. The command will not remove any unversioned or modified items; use the <option>--force</option> option to override this behavior."
msgstr "<replaceable>PATH</replaceable>で指定されたファイルまたはディレクトリは次のコミット で削除することを予告します。ファイル(と、まだコミットしていない ディレクトリ)は直ちに作業コピーから削除されます。このコマンドは バージョン化されていないか修正されているものに対しては 動作しません。<option>--force</option>スイッチを使えばこの 動作を変更できます。"

#. Tag: para
#: ch09-reference.xml:1197
#, no-c-format
msgid "Items specified by URL are deleted from the repository via an immediate commit. Multiple URLs are committed atomically."
msgstr "URLで指定されたファイルまたはディレクトリは 直接コミットを発行する形で削除されます。複数の URL は単一のトランザクションと して不分割にコミットされます。"

#. Tag: para
#: ch09-reference.xml:1204
#, no-c-format
msgid "del, remove, rm"
msgstr "del, remove, rm"

#. Tag: para
#: ch09-reference.xml:1209
#, fuzzy, no-c-format
msgid "Working copy if operating on files, repository if operating on URLs"
msgstr "ファイルに対して実行した場合は作業コピー。URLに対して実行した場合はリポジトリ"

#. Tag: para
#: ch09-reference.xml:1215
#: ch09-reference.xml:1754
#, no-c-format
msgid "Only if operating on URLs"
msgstr "URLに対して操作した場合のみ発生する"

#. Tag: screen
#: ch09-reference.xml:1221
#, no-c-format
msgid ""
"--force\n"
"--force-log\n"
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--quiet (-q)\n"
"--targets FILENAME\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--editor-cmd EDITOR\n"
"--encoding ENC\n"
"--config-dir DIR"
msgstr ""
"--force\n"
"--force-log\n"
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--quiet (-q)\n"
"--targets FILENAME\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--encoding ENC"

#. Tag: para
#: ch09-reference.xml:1227
#, fuzzy, no-c-format
msgid "Using <command>svn</command> to delete a file from your working copy deletes your local copy of the file, but merely schedules it to be deleted from the repository. When you commit, the file is deleted in the repository."
msgstr "<command>svn</command> を使って作業コピーからファイルを 削除すると、単に削除が予告されるだけです。ファイルは次のコミット でリポジトリから削除されます。"

#. Tag: screen
#: ch09-reference.xml:1233
#, no-c-format
msgid ""
"$ svn delete myfile\n"
"D         myfile\n"
"\n"
"$ svn commit -m \"Deleted file 'myfile'.\"\n"
"Deleting       myfile\n"
"Transmitting file data .\n"
"Committed revision 14."
msgstr ""
"$ svn delete myfile\n"
"D         myfile\n"
"\n"
"$ svn commit -m \"Deleted file 'myfile'.\"\n"
"Deleting       myfile\n"
"Transmitting file data .\n"
"Committed revision 14."

#. Tag: para
#: ch09-reference.xml:1235
#, no-c-format
msgid "Deleting a URL, however, is immediate, so you have to supply a log message:"
msgstr "URLを削除しますが、それは直ちに起こるので ログメッセージを指定する必要があります:"

#. Tag: screen
#: ch09-reference.xml:1238
#, no-c-format
msgid ""
"$ svn delete -m \"Deleting file 'yourfile'\" file:///tmp/repos/test/yourfile\n"
"\n"
"Committed revision 15."
msgstr ""
"$ svn delete -m \"Deleting file 'yourfile'\" file:///tmp/repos/test/yourfile\n"
"\n"
"Committed revision 15."

#. Tag: para
#: ch09-reference.xml:1240
#, no-c-format
msgid "Here's an example of how to force deletion of a file that has local mods:"
msgstr "この例は作業コピーに修正があるファイルを強制削除する方法です:"

#. Tag: screen
#: ch09-reference.xml:1243
#, no-c-format
msgid ""
"$ svn delete over-there \n"
"svn: Attempting restricted operation for modified resource\n"
"svn: Use --force to override this restriction\n"
"svn: 'over-there' has local modifications\n"
"\n"
"$ svn delete --force over-there \n"
"D         over-there"
msgstr ""
"$ svn delete over-there \n"
"svn: Attempting restricted operation for modified resource\n"
"svn: Use --force to override this restriction\n"
"svn: 'over-there' has local modifications\n"
"\n"
"$ svn delete --force over-there \n"
"D         over-there"

#. Tag: tertiary
#: ch09-reference.xml:1253
#: ch09-reference.xml:4752
#, no-c-format
msgid "diff"
msgstr "diff"

#. Tag: refpurpose
#: ch09-reference.xml:1258
#, fuzzy, no-c-format
msgid "Display the differences between two revisions or paths."
msgstr "二つのパスの間の相違点を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:1262
#, fuzzy, no-c-format
msgid "diff [-c M | -r N[:M]] [TARGET[@REV]...]"
msgstr "svn diff [-r N[:M]] [TARGET[@REV]...]"

#. Tag: programlisting
#: ch09-reference.xml:1263
#, fuzzy, no-c-format
msgid "diff [-r N[:M]] --old=OLD-TGT[@OLDREV] [--new=NEW-TGT[@NEWREV]] [PATH...]"
msgstr "svn diff [-r N[:M]] --old OLD-TGT[@OLDREV] [--new NEW-TGT[@NEWREV]] [PATH...]"

#. Tag: programlisting
#: ch09-reference.xml:1264
#, no-c-format
msgid "diff OLD-URL[@OLDREV] NEW-URL[@NEWREV]"
msgstr "svn diff OLD-URL[@OLDREV] NEW-URL[@NEWREV]"

#. Tag: para
#: ch09-reference.xml:1271
#, fuzzy, no-c-format
msgid "Display the differences between two paths. The ways you can use <command>svn diff</command> are:"
msgstr "ふたつのパスの間の違いを表示します。 <command>svn diff</command>には 三つの使い方があります:"

#. Tag: para
#: ch09-reference.xml:1274
#, no-c-format
msgid "Use just <command>svn diff'</command>to display local modifications in a working copy."
msgstr ""

#. Tag: para
#: ch09-reference.xml:1277
#, no-c-format
msgid "Display the changes made to <replaceable>TARGET</replaceable>s as they are seen in <replaceable>REV</replaceable> between two revisions. <replaceable>TARGET</replaceable>s may be all working copy paths or all <replaceable>URL</replaceable>s. If <replaceable>TARGET</replaceable>s are working copy paths, <replaceable>N</replaceable> defaults to <literal>BASE</literal> and <replaceable>M</replaceable> to the working copy; if <replaceable>URL</replaceable>s, <replaceable>N</replaceable> must be specified and <replaceable>M</replaceable> defaults to <literal>HEAD</literal>. The <quote>-c M</quote> option is equivalent to <quote>-r N:M</quote> where <literal>N = M-1</literal>. Using <quote>-c -M</quote> does the reverse: <quote>-r M:N</quote> where <literal>N = M-1</literal>."
msgstr ""

#. Tag: para
#: ch09-reference.xml:1294
#, no-c-format
msgid "Display the differences between <replaceable>OLD-TGT</replaceable> as it was seen in <replaceable>OLDREV</replaceable> and <replaceable>NEW-TGT</replaceable> as it was seen ain <replaceable>NEWREV</replaceable>. <replaceable>PATH</replaceable>s, if given, are relative to <replaceable>OLD-TGT</replaceable> and <replaceable>NEW-TGT</replaceable> and restrict the output to differences for those paths. <replaceable>OLD-TGT</replaceable> and <replaceable>NEW-TGT</replaceable> may be working copy paths or <replaceable>URL[@REV]</replaceable>. <replaceable>NEW-TGT</replaceable> defaults to <replaceable>OLD-TGT</replaceable> if not specified. <quote>-r N</quote> makes OLDREV default to N, -r N:M makes <replaceable>OLDREV</replaceable> default to <replaceable>N</replaceable> and <replaceable>NEWREV</replaceable> default to <replaceable>M</replaceable>."
msgstr ""

#. Tag: para
#: ch09-reference.xml:1314
#, fuzzy, no-c-format
msgid "Shorthand for <command>svn diff --old=OLD-URL[@OLDREV] --new=NEW-URL[@NEWREV]</command>"
msgstr "svn diff OLD-URL[@OLDREV] NEW-URL[@NEWREV]"

#. Tag: para
#: ch09-reference.xml:1317
#, no-c-format
msgid "<command>svn diff -r N:M URL</command> is shorthand for <command>svn diff -r N:M --old=URL --new=URL</command>."
msgstr "<command>svn diff -r N:M URL</command> は <command>svn diff -r N:M --old=URL --new=URL</command>の略記法です。"

#. Tag: para
#: ch09-reference.xml:1321
#, no-c-format
msgid "<command>svn diff [-r N[:M]] URL1[@N] URL2[@M]</command> is shorthand for <command>svn diff [-r N[:M]] --old=URL1 --new=URL2</command>."
msgstr "<command>svn diff [-r N[:M]] URL1[@N] URL2[@M]</command> は <command>svn diff [-r N[:M]] --old=URL1 --new=URL2</command>の略記法です。"

#. Tag: para
#: ch09-reference.xml:1325
#, no-c-format
msgid "If <replaceable>TARGET</replaceable> is a URL, then revs N and M can be given either via the <option>--revision</option> or by using <quote>@</quote> notation as described earlier."
msgstr "<replaceable>TARGET</replaceable> が URL なら N と M のリビジョンは <option>--revision</option>を経由したものであるか既に述べたように <quote>@</quote>記法で指定されたものになります。"

#. Tag: para
#: ch09-reference.xml:1330
#, fuzzy, no-c-format
msgid "If <replaceable>TARGET</replaceable> is a working copy path, then the <option>--revision</option> option means:"
msgstr "<replaceable>TARGET</replaceable> が作業コピーパスであれば <option>--revision</option>スイッチの意味は:"

#. Tag: option
#: ch09-reference.xml:1337
#, no-c-format
msgid "--revision N:M"
msgstr "--revision N:M"

#. Tag: para
#: ch09-reference.xml:1339
#, no-c-format
msgid "The server compares <replaceable>TARGET</replaceable>@<replaceable>N</replaceable> and <replaceable>TARGET</replaceable>@<replaceable>M</replaceable>."
msgstr "サーバは <replaceable>TARGET</replaceable>@<replaceable>N</replaceable> と <replaceable>TARGET</replaceable>@<replaceable>M</replaceable> を比較します。"

#. Tag: option
#: ch09-reference.xml:1347
#, no-c-format
msgid "--revision N"
msgstr "--revision N"

#. Tag: para
#: ch09-reference.xml:1349
#, no-c-format
msgid "The client compares <replaceable>TARGET</replaceable>@<replaceable>N</replaceable> against working copy."
msgstr "クライアントは <replaceable>TARGET</replaceable>@<replaceable>N</replaceable> と作業コピーを比較します。"

#. Tag: term
#: ch09-reference.xml:1356
#, no-c-format
msgid "(no <option>--revision</option>)"
msgstr "(no <option>--revision</option>)"

#. Tag: para
#: ch09-reference.xml:1358
#, no-c-format
msgid "The client compares base and working copies of <replaceable>TARGET</replaceable>."
msgstr "クライアントは <replaceable>TARGET</replaceable>のベースリビジョンと作業コピーを 比較します。"

#. Tag: para
#: ch09-reference.xml:1365
#, no-c-format
msgid "If the alternate syntax is used, the server compares <replaceable>URL1</replaceable> and <replaceable>URL2</replaceable> at revisions <replaceable>N</replaceable> and <replaceable>M</replaceable> respectively. If either <replaceable>N</replaceable> or <replaceable>M</replaceable> are omitted, a value of <literal>HEAD</literal> is assumed."
msgstr "別の構文を使うとサーバはそれぞれリビジョン <replaceable>N</replaceable>と <replaceable>M</replaceable>にある <replaceable>URL1</replaceable>と <replaceable>URL2</replaceable> を比較します。もしNかMが省略されれば <replaceable>HEAD</replaceable> の値が使われます。"

#. Tag: para
#: ch09-reference.xml:1374
#, no-c-format
msgid "By default, <command>svn diff</command> ignores the ancestry of files and merely compares the contents of the two files being compared. If you use <option>--notice-ancestry</option>, the ancestry of the paths in question will be taken into consideration when comparing revisions (that is, if you run <command>svn diff</command> on two files with identical contents but different ancestry you will see the entire contents of the file as having been removed and added again)."
msgstr "デフォルトでは<command>svn diff</command>はファイルの系統を無視し、 単に比較対象になっている二つのファイルの内容を比較するだけです。 <option>--notice-ancestry</option>を使うとリビジョンを比較する際に、 問題になっているパスの系統が考慮されます(つまり、同じ内容を持っては いるが異なる系統を持つ二つのファイルに対して<command>svn diff</command>を実行すると、ファイル全体が一度削除され、 もう一度すべてが追加された形の結果を得ることになります)。"

#. Tag: para
#: ch09-reference.xml:1387
#, no-c-format
msgid "<para>di</para>"
msgstr "<para>di</para>"

#. Tag: para
#: ch09-reference.xml:1397
#, no-c-format
msgid "For obtaining differences against anything but <literal>BASE</literal> revision in your working copy"
msgstr "相違点を知るのに必要な場合は発生する。ただし作業コピーの <literal>BASE</literal>リビジョンを取得する場合は除く。"

#. Tag: screen
#: ch09-reference.xml:1404
#, fuzzy, no-c-format
msgid ""
"--revision (-r) ARG\n"
"--change (-c) ARG\n"
"--old ARG\n"
"--new ARG\n"
"--non-recursive (-N)\n"
"--diff-cmd CMD\n"
"--extensions (-x) \"ARGS\"\n"
"--no-diff-deleted\n"
"--notice-ancestry\n"
"--summarize\n"
"--force\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"
msgstr ""
"--revision (-r) REV\n"
"--old OLD-TARGET\n"
"--new NEW-TARGET\n"
"--extensions (-x) \"ARGS\"\n"
"--non-recursive (-N)\n"
"--diff-cmd CMD\n"
"--notice-ancestry\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--no-diff-deleted\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:1410
#, no-c-format
msgid "Compare <literal>BASE</literal> and your working copy (one of the most popular uses of <command>svn diff</command>):"
msgstr "<literal>BASE</literal>リビジョンと作業コピーを比較します。(<command>svn diff</command> の一番よくある使い方):"

#. Tag: screen
#: ch09-reference.xml:1414
#, no-c-format
msgid ""
"$ svn diff COMMITTERS \n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 4404)\n"
"+++ COMMITTERS        (working copy)"
msgstr ""
"$ svn diff COMMITTERS \n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 4404)\n"
"+++ COMMITTERS        (working copy)"

#. Tag: para
#: ch09-reference.xml:1416
#, no-c-format
msgid "See what changed in the file <literal>COMMITTERS</literal> revision 9115:"
msgstr ""

#. Tag: screen
#: ch09-reference.xml:1419
#, fuzzy, no-c-format
msgid ""
"$ svn diff -c 9115 COMMITTERS \n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 3900)\n"
"+++ COMMITTERS        (working copy)"
msgstr ""
"$ svn diff -r 3900 COMMITTERS \n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 3900)\n"
"+++ COMMITTERS        (working copy)"

#. Tag: para
#: ch09-reference.xml:1422
#, no-c-format
msgid "See how your working copy's modifications compare against an older revision:"
msgstr "作業コピーの変更を以前のリビジョンと比較する方法:"

#. Tag: screen
#: ch09-reference.xml:1425
#, no-c-format
msgid ""
"$ svn diff -r 3900 COMMITTERS \n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 3900)\n"
"+++ COMMITTERS        (working copy)"
msgstr ""
"$ svn diff -r 3900 COMMITTERS \n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 3900)\n"
"+++ COMMITTERS        (working copy)"

#. Tag: para
#: ch09-reference.xml:1427
#, no-c-format
msgid "Compare revision 3000 to revision 3500 using <quote>@</quote> syntax:"
msgstr "リビジョン3000とリビジョン3500を<quote>@</quote>構文を使って比較:"

#. Tag: screen
#: ch09-reference.xml:1430
#, no-c-format
msgid ""
"$ svn diff http://svn.collab.net/repos/svn/trunk/COMMITTERS@3000 http://svn.collab.net/repos/svn/trunk/COMMITTERS@3500\n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 3000)\n"
"+++ COMMITTERS        (revision 3500)\n"
"&hellip;"
msgstr ""
"$ svn diff http://svn.collab.net/repos/svn/trunk/COMMITTERS@3000 http://svn.collab.net/repos/svn/trunk/COMMITTERS@3500\n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 3000)\n"
"+++ COMMITTERS        (revision 3500)\n"
"&hellip;"

#. Tag: para
#: ch09-reference.xml:1432
#, no-c-format
msgid "Compare revision 3000 to revision 3500 using range notation (you only pass the one URL in this case):"
msgstr "リビジョン3000とリビジョン3500を範囲指定で比較( この場合は一つのURLのみを渡せばいい):"

#. Tag: screen
#: ch09-reference.xml:1436
#, no-c-format
msgid ""
"$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk/COMMITTERS\n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 3000)\n"
"+++ COMMITTERS        (revision 3500)"
msgstr ""
"$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk/COMMITTERS\n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 3000)\n"
"+++ COMMITTERS        (revision 3500)"

#. Tag: para
#: ch09-reference.xml:1439
#, no-c-format
msgid "Compare revision 3000 to revision 3500 of all files in <filename>trunk</filename> using range notation:"
msgstr "範囲指定によって <filename>trunk</filename>にある全てのファイルの リビジョン 3000 と リビジョン 3500 を比較する:"

#. Tag: screen
#: ch09-reference.xml:1442
#, no-c-format
msgid "$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk"
msgstr "$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk"

#. Tag: para
#: ch09-reference.xml:1445
#, no-c-format
msgid "Compare revision 3000 to revision 3500 of only three files in <filename>trunk</filename> using range notation:"
msgstr "範囲指定によって <filename>trunk</filename>にある三つのファイルに ついてのみリビジョン 3000 と リビジョン 3500 を比較する:"

#. Tag: screen
#: ch09-reference.xml:1449
#, no-c-format
msgid "$ svn diff -r 3000:3500 --old http://svn.collab.net/repos/svn/trunk COMMITTERS README HACKING"
msgstr "$ svn diff -r 3000:3500 --old http://svn.collab.net/repos/svn/trunk COMMITTERS README HACKING"

#. Tag: para
#: ch09-reference.xml:1451
#, no-c-format
msgid "If you have a working copy, you can obtain the differences without typing in the long URLs:"
msgstr "作業コピーがある場合、長い URL指定することなしに 相違点を取得することができます:"

#. Tag: screen
#: ch09-reference.xml:1454
#, no-c-format
msgid ""
"$ svn diff -r 3000:3500 COMMITTERS \n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 3000)\n"
"+++ COMMITTERS        (revision 3500)"
msgstr ""
"$ svn diff -r 3000:3500 COMMITTERS \n"
"Index: COMMITTERS\n"
"===================================================================\n"
"--- COMMITTERS        (revision 3000)\n"
"+++ COMMITTERS        (revision 3500)"

#. Tag: para
#: ch09-reference.xml:1456
#, no-c-format
msgid "Use <option>--diff-cmd</option> <replaceable>CMD</replaceable> <option>-x</option> to pass arguments directly to the external diff program"
msgstr "<option>--diff-cmd</option> <replaceable>CMD</replaceable> <option>-x</option> を使って 外部 diff プログラムに直接引数を渡します"

#. Tag: screen
#: ch09-reference.xml:1461
#, no-c-format
msgid ""
"$ svn diff --diff-cmd /usr/bin/diff -x \"-i -b\" COMMITTERS \n"
"Index: COMMITTERS\n"
"===================================================================\n"
"0a1,2\n"
"&gt; This is a test\n"
"&gt;"
msgstr ""
"$ svn diff --diff-cmd /usr/bin/diff -x \"-i -b\" COMMITTERS \n"
"Index: COMMITTERS\n"
"===================================================================\n"
"0a1,2\n"
"&gt; This is a test\n"
"&gt;"

#. Tag: tertiary
#: ch09-reference.xml:1471
#, fuzzy, no-c-format
msgid "export"
msgstr "svn export"

#. Tag: refname
#: ch09-reference.xml:1475
#, no-c-format
msgid "svn export"
msgstr "svn export"

#. Tag: refpurpose
#: ch09-reference.xml:1476
#, no-c-format
msgid "Export a clean directory tree."
msgstr "ディレクトリツリーのエクスポート"

#. Tag: programlisting
#: ch09-reference.xml:1480
#, no-c-format
msgid "svn export [-r REV] URL[@PEGREV] [PATH]"
msgstr "svn export [-r REV] URL[@PEGREV] [PATH]"

#. Tag: programlisting
#: ch09-reference.xml:1481
#, no-c-format
msgid "svn export [-r REV] PATH1[@PEGREV] [PATH2]"
msgstr "svn export [-r REV] PATH1[@PEGREV] [PATH2]"

#. Tag: para
#: ch09-reference.xml:1486
#, no-c-format
msgid "The first form exports a clean directory tree from the repository specified by URL, at revision <replaceable>REV</replaceable> if it is given, otherwise at <literal>HEAD</literal>, into <replaceable>PATH</replaceable>. If <replaceable>PATH</replaceable> is omitted, the last component of the <replaceable>URL</replaceable> is used for the local directory name."
msgstr "最初の構文では指定されたURLのリポジトリからディレクトリツリーを エクスポートします。このさい、<replaceable>REV</replaceable> が指定されれば リビジョン <replaceable>REV</replaceable> から、 そうでなければ <literal>HEAD</literal>のリビジョンが利用され、結果は <replaceable>PATH</replaceable>に出力されます。 <replaceable>PATH</replaceable>が省略されれば<replaceable>URL</replaceable>の 最後の部分がローカルディレクトリ名称として利用されます。"

#. Tag: para
#: ch09-reference.xml:1495
#, no-c-format
msgid "The second form exports a clean directory tree from the working copy specified by <replaceable>PATH1</replaceable> into <replaceable>PATH2</replaceable>. All local changes will be preserved, but files not under version control will not be copied."
msgstr "二番目の構文では <replaceable>PATH1</replaceable>で指定されたローカル作業コピーを <replaceable>PATH2</replaceable>に出力 します。すべての作業コピーへの変更は保存されますが、バージョン管理下 にないファイルはコピーされません。"

#. Tag: para
#: ch09-reference.xml:1510
#, no-c-format
msgid "Local disk"
msgstr "ローカルディスク"

#. Tag: para
#: ch09-reference.xml:1515
#, no-c-format
msgid "Only if exporting from a URL"
msgstr "URLからのエクスポートの場合のみ発生する"

#. Tag: screen
#: ch09-reference.xml:1521
#, fuzzy, no-c-format
msgid ""
"--revision (-r) REV\n"
"--quiet (-q)\n"
"--force\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--non-recursive (-N)\n"
"--config-dir DIR\n"
"--native-eol EOL\n"
"--ignore-externals"
msgstr ""
"--revision (-r) REV\n"
"--quiet (-q)\n"
"--force\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--non-recursive\n"
"--config-dir DIR\n"
"--native-eol EOL\n"
"--ignore-externals"

#. Tag: para
#: ch09-reference.xml:1527
#, no-c-format
msgid "Export from your working copy (doesn't print every file and directory):"
msgstr "作業コピーからのエクスポート( すべてのファイルとディレクトリをいちいち表示しない):"

#. Tag: screen
#: ch09-reference.xml:1530
#, no-c-format
msgid ""
"$ svn export a-wc my-export\n"
"Export complete."
msgstr ""
"$ svn export a-wc my-export\n"
"Export complete."

#. Tag: para
#: ch09-reference.xml:1532
#, no-c-format
msgid "Export directly from the repository (prints every file and directory):"
msgstr "リポジトリから直接エクスポート( すべてのファイルとディレクトリを表示):"

#. Tag: screen
#: ch09-reference.xml:1535
#, no-c-format
msgid ""
"$ svn export file:///tmp/repos my-export\n"
"A  my-export/test\n"
"A  my-export/quiz\n"
"&hellip;\n"
"Exported revision 15."
msgstr ""
"$ svn export file:///tmp/repos my-export\n"
"A  my-export/test\n"
"A  my-export/quiz\n"
"&hellip;\n"
"Exported revision 15."

#. Tag: para
#: ch09-reference.xml:1537
#, no-c-format
msgid "When rolling operating-system-specific release packages, it can be useful to export a tree which uses a specific EOL character for line endings. The <option>--native-eol</option> option will do this, but it only affects files that have <literal>svn:eol-style = native</literal> properties attached to them. For example, to export a tree with all CRLF line endings (possibly for a Windows .zip file distribution):"
msgstr "オペレーティングシステムごとのリリースパッケージを作る場合、行末に特定 の EOL文字を使ってエクスポートすることができると便利です。<option>--native-eol</option> オプションはこれをしますが、それはファイルが <literal>svn:eol-style = native</literal>属性を持っているものだけに効果があります。 たとえばすべてが CRLF 改行を持っているファイルからなるツリーをエクスポー トする場合(おそらく Windows の .zip ファイルでの配布のような場合が考え られますが):"

#. Tag: screen
#: ch09-reference.xml:1546
#, fuzzy, no-c-format
msgid ""
"$ svn export file:///tmp/repos my-export --native-eol CRLF\n"
"A  my-export/test\n"
"A  my-export/quiz\n"
"&hellip;\n"
"Exported revision 15."
msgstr ""
"$ svn export file://tmp/repos my-export --native-eol CRLF\n"
"A  my-export/test\n"
"A  my-export/quiz\n"
"&hellip;\n"
"Exported revision 15."

#. Tag: para
#: ch09-reference.xml:1548
#, fuzzy, no-c-format
msgid "You can specify <literal>LR</literal>, <literal>CR</literal>, or <literal>CRLF</literal> as a line ending type with the <option>--native-eol</option> option."
msgstr "<literal>PREV</literal>, <literal>BASE</literal>, そして <literal>COMMITTED</literal> はローカルパス名として参照する のに利用できますが、URL では利用できません。"

#. Tag: tertiary
#: ch09-reference.xml:1563
#: ch09-reference.xml:3922
#: ch09-reference.xml:4836
#, fuzzy, no-c-format
msgid "help"
msgstr ""
"#-#-#-#-#  ch03.pot  #-#-#-#-#\n"
"おたすけを!\n"
"#-#-#-#-#  ch09.pot  #-#-#-#-#\n"
"<refpurpose>ヘルプ</refpurpose>"

#. Tag: refname
#: ch09-reference.xml:1567
#, no-c-format
msgid "svn help"
msgstr "svn help"

#. Tag: programlisting
#: ch09-reference.xml:1572
#, no-c-format
msgid "svn help [SUBCOMMAND...]"
msgstr "svn help [SUBCOMMAND...]"

#. Tag: para
#: ch09-reference.xml:1577
#, no-c-format
msgid "This is your best friend when you're using Subversion and this book isn't within reach!"
msgstr "Subversionを使う場合の最良のガイドで、それに比べたらこの本などは 及びません!"

#. Tag: para
#: ch09-reference.xml:1583
#: ch09-reference.xml:3945
#: ch09-reference.xml:4857
#, no-c-format
msgid "?, h"
msgstr "?, h"

#. Tag: para
#: ch09-reference.xml:1584
#, no-c-format
msgid "The options <option>-?</option>, <option>-h</option> and <option>--help</option> have the same effect as using the <command>help</command> subcommand."
msgstr ""

#. Tag: screen
#: ch09-reference.xml:1602
#, fuzzy, no-c-format
msgid "--config-dir DIR"
msgstr ""
"--diff3-cmd CMD\n"
"--config-dir DIR"

#. Tag: tertiary
#: ch09-reference.xml:1611
#, fuzzy, no-c-format
msgid "import"
msgstr "インポート"

#. Tag: refpurpose
#: ch09-reference.xml:1616
#, no-c-format
msgid "Commit an unversioned file or tree into the repository."
msgstr "バージョン管理されていないファイルやツリーをリポジトリに コミットします。"

#. Tag: programlisting
#: ch09-reference.xml:1621
#, no-c-format
msgid "svn import [PATH] URL"
msgstr "svn import [PATH] URL"

#. Tag: para
#: ch09-reference.xml:1626
#, no-c-format
msgid "Recursively commit a copy of <replaceable>PATH</replaceable> to <replaceable>URL</replaceable>. If <replaceable>PATH</replaceable> is omitted <quote><filename>.</filename></quote> is assumed. Parent directories are created in the repository as necessary."
msgstr "<replaceable>PATH</replaceable>のコピーを再帰的に <replaceable>URL</replaceable>にコミットします。 <replaceable>PATH</replaceable> がなければ <quote><filename>.</filename></quote> が仮定されます。 必要に応じて親ディレクトリがリポジトリに作られます。"

#. Tag: para
#: ch09-reference.xml:1642
#, no-c-format
msgid "Repository"
msgstr "リポジトリ"

#. Tag: screen
#: ch09-reference.xml:1653
#, no-c-format
msgid ""
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--quiet (-q)\n"
"--non-recursive (-N)\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--force-log\n"
"--editor-cmd EDITOR\n"
"--encoding ENC\n"
"--config-dir DIR\n"
"--auto-props\n"
"--no-auto-props\n"
"--ignore-externals"
msgstr ""
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--quiet (-q)\n"
"--non-recursive (-N)\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--force-log\n"
"--editor-cmd EDITOR\n"
"--encoding ENC\n"
"--config-dir DIR\n"
"--auto-props\n"
"--no-auto-props\n"
"--ignore-externals"

#. Tag: para
#: ch09-reference.xml:1659
#, fuzzy, no-c-format
msgid "This imports the local directory <filename>myproj</filename> into <filename>trunk/misc</filename> in your repository. The directory <filename>trunk/misc</filename> need not exist before you import into it&mdash;<command>svn import</command> will recursively create directories for you."
msgstr "これはローカルディレクトリ <filename>myproj</filename>をリポジトリの <filename>trunk/misc</filename> にインポートします。ディレクトリ <filename>trunk/misc</filename> はインポートする前に 存在していなくてもかまいません&mdash;<command>svn import</command> は再帰的にディレクトリを作ります:"

#. Tag: screen
#: ch09-reference.xml:1667
#, fuzzy, no-c-format
msgid ""
"$ svn import -m \"New import\" myproj http://svn.red-bean.com/repos/trunk/misc\n"
"Adding         myproj/sample.txt\n"
"&hellip;\n"
"Transmitting file data .........\n"
"Committed revision 16."
msgstr ""
"$ svn import -m \"New import\" myproj http://svn.red-bean.com/repos/test\n"
"Adding         myproj/sample.txt\n"
"&hellip;\n"
"Transmitting file data .........\n"
"Committed revision 16."

#. Tag: para
#: ch09-reference.xml:1669
#, no-c-format
msgid "Be aware that this will <emphasis>not</emphasis> create a directory named <filename>myproj</filename> in the repository. If that's what you want, simply add <filename>myproj</filename> to the end of the URL:"
msgstr ""

#. Tag: screen
#: ch09-reference.xml:1674
#, fuzzy, no-c-format
msgid ""
"$ svn import -m \"New import\" myproj http://svn.red-bean.com/repos/trunk/misc/myproj\n"
"Adding         myproj/sample.txt\n"
"&hellip;\n"
"Transmitting file data .........\n"
"Committed revision 16."
msgstr ""
"$ svn import -m \"New import\" myproj ¥\n"
"    http://svn.red-bean.com/repos/test/trunk/misc/myproj\n"
"Adding         myproj/sample.txt\n"
"&hellip;\n"
"Transmitting file data .........\n"
"Committed revision 19."

#. Tag: para
#: ch09-reference.xml:1676
#, no-c-format
msgid "After importing data, note that the original tree is <emphasis>not</emphasis> under version control. To start working, you still need to <command>svn checkout</command> a fresh working copy of the tree."
msgstr "データほインポートした後でも、もとのツリーがバージョン 管理下に入ったわけ<emphasis>ではない</emphasis>のに注意し てください。作業を始めるには、まずそのツリーのための新しい作業コ ピーを<command>svn checkout</command>コマンドで作る必要が あります。"

#. Tag: tertiary
#: ch09-reference.xml:1689
#: ch09-reference.xml:4911
#, no-c-format
msgid "info"
msgstr "info"

#. Tag: refname
#: ch09-reference.xml:1693
#, no-c-format
msgid "svn info"
msgstr "svn info"

#. Tag: refpurpose
#: ch09-reference.xml:1694
#, no-c-format
msgid "Display information about a local or remote item."
msgstr "ローカル、あるいはリモートパスにあるアイテムについての情報を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:1699
#, fuzzy, no-c-format
msgid "svn info [TARGET[@REV]...]"
msgstr "svn list [TARGET[@REV]...]"

#. Tag: para
#: ch09-reference.xml:1704
#, fuzzy, no-c-format
msgid "Print information about the working copy paths or URLs specified. The information shown for both may include:"
msgstr "作業コピーのパスと URL の両方についての情報を表示します。これには:"

#. Tag: para
#: ch09-reference.xml:1709
#, no-c-format
msgid "Path"
msgstr "パス"

#. Tag: para
#: ch09-reference.xml:1710
#, no-c-format
msgid "Name"
msgstr "名前"

#. Tag: para
#: ch09-reference.xml:1711
#, no-c-format
msgid "<para>URL</para>"
msgstr "<para>URL</para>"

#. Tag: para
#: ch09-reference.xml:1712
#, no-c-format
msgid "Repository Root"
msgstr "リポジトリのルート"

#. Tag: para
#: ch09-reference.xml:1713
#, no-c-format
msgid "Repository UUID"
msgstr "リポジトリの UUID"

#. Tag: para
#: ch09-reference.xml:1715
#, no-c-format
msgid "Node Kind"
msgstr "ノードの種類"

#. Tag: para
#: ch09-reference.xml:1716
#, no-c-format
msgid "Last Changed Author"
msgstr "最後に修正した人"

#. Tag: para
#: ch09-reference.xml:1717
#, no-c-format
msgid "Last Changed Revision"
msgstr "最後に修正したリビジョン"

#. Tag: para
#: ch09-reference.xml:1718
#, no-c-format
msgid "Last Changed Date"
msgstr "最後に修正した日時"

#. Tag: para
#: ch09-reference.xml:1719
#, no-c-format
msgid "Lock Token"
msgstr "ロック・トークン"

#. Tag: para
#: ch09-reference.xml:1720
#, no-c-format
msgid "Lock Owner"
msgstr "ロックの所有者"

#. Tag: para
#: ch09-reference.xml:1721
#, fuzzy, no-c-format
msgid "Lock Created (date)"
msgstr "ロックの生成日時"

#. Tag: para
#: ch09-reference.xml:1722
#, no-c-format
msgid "Lock Expires (date)"
msgstr ""

#. Tag: para
#: ch09-reference.xml:1725
#, no-c-format
msgid "Additional kinds of information available only for working copy paths are:"
msgstr ""

#. Tag: para
#: ch09-reference.xml:1729
#, no-c-format
msgid "Schedule"
msgstr ""

#. Tag: para
#: ch09-reference.xml:1730
#, no-c-format
msgid "Copied From URL"
msgstr ""

#. Tag: para
#: ch09-reference.xml:1731
#, no-c-format
msgid "Copied From Rev"
msgstr ""

#. Tag: para
#: ch09-reference.xml:1732
#, no-c-format
msgid "Text Last Updated"
msgstr "最後に更新したテキスト"

#. Tag: para
#: ch09-reference.xml:1733
#, no-c-format
msgid "Properties Last Updated"
msgstr "最後に更新した属性"

#. Tag: para
#: ch09-reference.xml:1734
#, no-c-format
msgid "Checksum"
msgstr "チェックサム"

#. Tag: para
#: ch09-reference.xml:1735
#, no-c-format
msgid "Conflict Previous Base File"
msgstr ""

#. Tag: para
#: ch09-reference.xml:1736
#, fuzzy, no-c-format
msgid "Conflict Previous Working File"
msgstr "作業ファイルの上にファイルをコピーすること"

#. Tag: para
#: ch09-reference.xml:1737
#, no-c-format
msgid "Conflict Current Base File"
msgstr ""

#. Tag: para
#: ch09-reference.xml:1738
#, no-c-format
msgid "Conflict Properties File"
msgstr ""

#. Tag: screen
#: ch09-reference.xml:1760
#, fuzzy, no-c-format
msgid ""
"--revision (-r) REV\n"
"--recursive (-R)\n"
"--targets FILENAME\n"
"--incremental\n"
"--xml\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"
msgstr ""
"--revision (-r) REV\n"
"--verbose (-v)\n"
"--recursive (-R)\n"
"--incremental\n"
"--xml\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:1766
#, no-c-format
msgid "<command>svn info</command> will show you all the useful information that it has for items in your working copy. It will show information for files:"
msgstr "<command>svn info</command> は作業コピー中の ファイルまたはディレクトリに関する有用な情報を表示します。 次はファイルに関する情報を表示します:"

#. Tag: screen
#: ch09-reference.xml:1770
#, fuzzy, no-c-format
msgid ""
"$ svn info foo.c\n"
"Path: foo.c\n"
"Name: foo.c\n"
"URL: http://svn.red-bean.com/repos/test/foo.c\n"
"Repository Root: http://svn.red-bean.com/repos/test\n"
"Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25\n"
"Revision: 4417\n"
"Node Kind: file\n"
"Schedule: normal\n"
"Last Changed Author: sally\n"
"Last Changed Rev: 20\n"
"Last Changed Date: 2003-01-13 16:43:13 -0600 (Mon, 13 Jan 2003)\n"
"Text Last Updated: 2003-01-16 21:18:16 -0600 (Thu, 16 Jan 2003)\n"
"Properties Last Updated: 2003-01-13 21:50:19 -0600 (Mon, 13 Jan 2003)\n"
"Checksum: d6aeb60b0662ccceb6bce4bac344cb66"
msgstr ""
"$ svn info foo.c\n"
"Path: foo.c\n"
"Name: foo.c\n"
"URL: http://svn.red-bean.com/repos/test/foo.c\n"
"Repository Root: http://svn.red-bean.com/repos/test\n"
"Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25\n"
"Revision: 4417\n"
"Node Kind: file\n"
"Schedule: normal\n"
"Last Changed Author: sally\n"
"Last Changed Rev: 20\n"
"Last Changed Date: 2003-01-13 16:43:13 -0600 (Mon, 13 Jan 2003)\n"
"Text Last Updated: 2003-01-16 21:18:16 -0600 (Thu, 16 Jan 2003)\n"
"Properties Last Updated: 2003-01-13 21:50:19 -0600 (Mon, 13 Jan 2003)\n"
"Checksum: /3L38YwzhT93BWvgpdF6Zw=="

#. Tag: para
#: ch09-reference.xml:1772
#, no-c-format
msgid "It will also show information for directories:"
msgstr "ディレクトリに対する情報を表示することもできます:"

#. Tag: screen
#: ch09-reference.xml:1774
#, fuzzy, no-c-format
msgid ""
"$ svn info vendors\n"
"Path: vendors\n"
"URL: http://svn.red-bean.com/repos/test/vendors\n"
"Repository Root: http://svn.red-bean.com/repos/test\n"
"Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25\n"
"Revision: 19\n"
"Node Kind: directory\n"
"Schedule: normal\n"
"Last Changed Author: harry\n"
"Last Changed Rev: 19\n"
"Last Changed Date: 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003)\n"
"Properties Last Updated: 2003-01-16 23:39:02 -0600 (Thu, 16 Jan 2003)"
msgstr ""
"$ svn info vendors\n"
"Path: vendors\n"
"URL: http://svn.red-bean.com/repos/test/vendors\n"
"Repository Root: http://svn.red-bean.com/repos/test\n"
"Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25\n"
"Revision: 19\n"
"Node Kind: directory\n"
"Schedule: normal\n"
"Last Changed Author: harry\n"
"Last Changed Rev: 19\n"
"Last Changed Date: 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003)"

#. Tag: para
#: ch09-reference.xml:1776
#, no-c-format
msgid "<command>svn info</command> also acts on URLs (also note that the file readme.doc in this example is locked, so lock information is also provided):"
msgstr "<command>svn info</command> は URL に対しても処理することができます(この例での readme.doc ファイルはロックされているので、ロック情報もまた 表示されていることに注意してください):"

#. Tag: screen
#: ch09-reference.xml:1780
#, fuzzy, no-c-format
msgid ""
"$ svn info http://svn.red-bean.com/repos/test/readme.doc\n"
"Path: readme.doc\n"
"Name: readme.doc\n"
"URL: http://svn.red-bean.com/repos/test/readme.doc\n"
"Repository Root: http://svn.red-bean.com/repos/test\n"
"Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25\n"
"Revision: 1\n"
"Node Kind: file\n"
"Schedule: normal\n"
"Last Changed Author: sally\n"
"Last Changed Rev: 42\n"
"Last Changed Date: 2003-01-14 23:21:19 -0600 (Tue, 14 Jan 2003)\n"
"Lock Token: opaquelocktoken:14011d4b-54fb-0310-8541-dbd16bd471b2\n"
"Lock Owner: harry\n"
"Lock Created: 2003-01-15 17:35:12 -0600 (Wed, 15 Jan 2003)\n"
"Lock Comment (1 line):\n"
"My test lock comment"
msgstr ""
"$ svn info http://svn.red-bean.com/repos/test/readme.doc\n"
"Path: readme.doc\n"
"Name: readme.doc\n"
"URL: http://svn.red-bean.com/repos/test/readme.doc\n"
"Repository Root: http://svn.red-bean.com/repos/test\n"
"Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25\n"
"Revision: 1\n"
"Node Kind: file\n"
"Schedule: normal\n"
"Last Changed Author: sally\n"
"Last Changed Rev: 42\n"
"Last Changed Date: 2003-01-14 23:21:19 -0600 (Tue, 14 Jan 2003)\n"
"Text Last Updated: 2003-01-14 23:21:19 -0600 (Tue, 14 Jan 2003)\n"
"Checksum: d41d8cd98f00b204e9800998ecf8427e\n"
"Lock Token: opaquelocktoken:14011d4b-54fb-0310-8541-dbd16bd471b2\n"
"Lock Owner: harry\n"
"Lock Created: 2003-01-15 17:35:12 -0600 (Wed, 15 Jan 2003)"

#. Tag: tertiary
#: ch09-reference.xml:1792
#, fuzzy, no-c-format
msgid "list"
msgstr "svn list"

#. Tag: refpurpose
#: ch09-reference.xml:1797
#, no-c-format
msgid "List directory entries in the repository."
msgstr "リポジトリ中のディレクトリエントリを一覧表示します。"

#. Tag: programlisting
#: ch09-reference.xml:1801
#, no-c-format
msgid "svn list [TARGET[@REV]...]"
msgstr "svn list [TARGET[@REV]...]"

#. Tag: para
#: ch09-reference.xml:1806
#, no-c-format
msgid "List each <replaceable>TARGET</replaceable> file and the contents of each <replaceable>TARGET</replaceable> directory as they exist in the repository. If <replaceable>TARGET</replaceable> is a working copy path, the corresponding repository URL will be used."
msgstr "それぞれの <replaceable>TARGET</replaceable> ファイルと <replaceable>TARGET</replaceable> ディレクトリのリポジトリ 中の内容を一覧表示します。 <replaceable>TARGET</replaceable> が作業コピーのパスである場合、対応するリポジトリ URL が利用されます。"

#. Tag: para
#: ch09-reference.xml:1812
#, no-c-format
msgid "The default <replaceable>TARGET</replaceable> is <quote><filename>.</filename></quote>, meaning the repository URL of the current working copy directory."
msgstr "デフォルトの <replaceable>TARGET</replaceable> 値は <quote><filename>.</filename></quote> で、現在の作業コピーディレクトリ のリポジトリURLを意味します。"

#. Tag: para
#: ch09-reference.xml:1817
#, fuzzy, no-c-format
msgid "With <option>--verbose</option>, <command>svn list</command> shows the following fields for each item:"
msgstr "<option>--verbose</option>を使うと以下のフィールドがアイテムごとの 状態を示します:"

#. Tag: para
#: ch09-reference.xml:1822
#, no-c-format
msgid "Revision number of the last commit"
msgstr "最後のコミットのリビジョン番号"

#. Tag: para
#: ch09-reference.xml:1825
#, no-c-format
msgid "Author of the last commit"
msgstr "最後のコミットをした人"

#. Tag: para
#: ch09-reference.xml:1827
#, no-c-format
msgid "If locked, the letter <quote>O</quote> (See <xref linkend=\"svn.ref.svn.c.info\"/> for details)."
msgstr ""

#. Tag: para
#: ch09-reference.xml:1830
#, no-c-format
msgid "Size (in bytes)"
msgstr "データサイズ (バイト単位の)"

#. Tag: para
#: ch09-reference.xml:1832
#, no-c-format
msgid "Date and time of the last commit"
msgstr "最後のコミットの日時"

#. Tag: para
#: ch09-reference.xml:1836
#, no-c-format
msgid "With <option>--xml</option>, output is in XML format (with a header and an enclosing document element unless <option>--incremental</option> is also specified). All of the information is present; the <option>--verbose</option> option is not accepted."
msgstr "<option>--xml</option> オプションをつけると XML 形式で 出力します( <option>--incremental</option> を同時に指定し なければヘッダとタグでくくられたドキュメント要素も一緒に出力され ます)。すべての情報が対象になります; <option>--verbose</option> オプションは認められません。"

#. Tag: para
#: ch09-reference.xml:1845
#, no-c-format
msgid "<para>ls</para>"
msgstr "<para>ls</para>"

#. Tag: screen
#: ch09-reference.xml:1861
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--verbose (-v)\n"
"--recursive (-R)\n"
"--incremental\n"
"--xml\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"
msgstr ""
"--revision (-r) REV\n"
"--verbose (-v)\n"
"--recursive (-R)\n"
"--incremental\n"
"--xml\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:1867
#, no-c-format
msgid "<command>svn list</command> is most useful if you want to see what files a repository has without downloading a working copy:"
msgstr "<command>svn list</command> は、作業コピーを ダウンロードすることなしにどんなファイルがリポジトリにあるかを知る ときに役立ちます:"

#. Tag: screen
#: ch09-reference.xml:1871
#, no-c-format
msgid ""
"$ svn list http://svn.red-bean.com/repos/test/support\n"
"README.txt\n"
"INSTALL\n"
"examples/\n"
"&hellip;"
msgstr ""
"$ svn list http://svn.red-bean.com/repos/test/support\n"
"README.txt\n"
"INSTALL\n"
"examples/\n"
"&hellip;"

#. Tag: para
#: ch09-reference.xml:1873
#, fuzzy, no-c-format
msgid "You can pass the <option>--verbose</option> option for additional information, rather like the UNIX command <command>ls -l</command>:"
msgstr "追加情報を表示するのに <option>--verbose</option>スイッチを渡す こともできます。これだと UNIX の <command>ls -l</command>コマンドの 出力のような感じになります:"

#. Tag: screen
#: ch09-reference.xml:1877
#, no-c-format
msgid ""
"$ svn list --verbose file:///tmp/repos\n"
"     16 sally         28361 Jan 16 23:18 README.txt\n"
"     27 sally             0 Jan 18 15:27 INSTALL\n"
"     24 harry               Jan 18 11:27 examples/"
msgstr ""
"$ svn list --verbose file:///tmp/repos\n"
"     16 sally         28361 Jan 16 23:18 README.txt\n"
"     27 sally             0 Jan 18 15:27 INSTALL\n"
"     24 harry               Jan 18 11:27 例/"

#. Tag: para
#: ch09-reference.xml:1879
#, fuzzy, no-c-format
msgid "For further details, see <xref linkend=\"svn.tour.history.browsing.list\"/>."
msgstr "詳しくは<xref linkend=\"svn.tour.history.list\"/>を見てください。"

#. Tag: tertiary
#: ch09-reference.xml:1891
#: ch09-reference.xml:4953
#, no-c-format
msgid "lock"
msgstr "lock"

#. Tag: refname
#: ch09-reference.xml:1895
#, no-c-format
msgid "svn lock"
msgstr "svn lock"

#. Tag: refpurpose
#: ch09-reference.xml:1896
#, no-c-format
msgid "Lock working copy paths or URLs in the repository, so that no other user can commit changes to them."
msgstr "作業コピーパスまたはリポジトリ中の URL をロックし、他のユーザがそこに 変更点をコミットできないようにします。"

#. Tag: programlisting
#: ch09-reference.xml:1902
#, no-c-format
msgid "svn lock TARGET..."
msgstr "svn lock TARGET..."

#. Tag: para
#: ch09-reference.xml:1907
#, no-c-format
msgid "Lock each <replaceable>TARGET</replaceable>. If any <replaceable>TARGET</replaceable> is already locked by another user, print a warning and continue locking the rest of the <replaceable>TARGET</replaceable>s. Use <option>--force</option> to steal a lock from another user or working copy."
msgstr "<replaceable>TARGET</replaceable>それぞれをロックします。 他のユーザによってすでに <replaceable>TARGET</replaceable>のどれかが ロックされていた場合、警告を出して残りの<replaceable>TARGET</replaceable> をロックします。他のユーザ、あるいは作業コピーの設定したロックを <option>--force</option>オプションで横取りすることもできます。"

#. Tag: para
#: ch09-reference.xml:1923
#: ch09-reference.xml:3430
#, no-c-format
msgid "Working Copy, Repository"
msgstr "作業コピー、リポジトリ"

#. Tag: screen
#: ch09-reference.xml:1934
#, fuzzy, no-c-format
msgid ""
"--targets FILENAME\n"
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--force-log\n"
"--encoding ENC\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR\n"
"--force"
msgstr ""
"--targets ARG\n"
"--message (-m) ARG\n"
"--file (-F) ARG\n"
"--force-log\n"
"--encoding ARG\n"
"--username ARG\n"
"--password ARG\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir ARG\n"
"--force"

#. Tag: para
#: ch09-reference.xml:1940
#, no-c-format
msgid "Lock two files in your working copy:"
msgstr "作業コピー中のふたつのファイルをロックする:"

#. Tag: screen
#: ch09-reference.xml:1942
#, no-c-format
msgid ""
"$ svn lock tree.jpg house.jpg\n"
"'tree.jpg' locked by user 'harry'.\n"
"'house.jpg' locked by user 'harry'."
msgstr ""
"$ svn lock tree.jpg house.jpg\n"
"'tree.jpg' locked by user 'harry'.\n"
"'house.jpg' locked by user 'harry'."

#. Tag: para
#: ch09-reference.xml:1944
#, no-c-format
msgid "Lock a file in your working copy that is currently locked by another user:"
msgstr "他のユーザによって現在ロックされている作業コピー中の ファイルをロックする:"

#. Tag: screen
#: ch09-reference.xml:1947
#, fuzzy, no-c-format
msgid ""
"$ svn lock tree.jpg\n"
"svn: warning: Path '/tree.jpg is already locked by user 'sally in \\\n"
"     filesystem '/svn/repos/db'\n"
"\n"
"$ svn lock --force tree.jpg\n"
"'tree.jpg' locked by user 'harry'."
msgstr ""
"$ svn lock tree.jpg\n"
"svn: warning: Path '/tree.jpg is already locked by user 'harry in ¥\n"
"     filesystem '/svn/repos/db'\n"
"\n"
"$ svn lock --force foo\n"
"'tree.jpg' locked by user 'sally'."

#. Tag: para
#: ch09-reference.xml:1949
#, no-c-format
msgid "Lock a file without a working copy:"
msgstr "作業コピーに関係しないファイルをロックする:"

#. Tag: screen
#: ch09-reference.xml:1951
#, fuzzy, no-c-format
msgid ""
"$ svn lock http://svn.red-bean.com/repos/test/tree.jpg\n"
"'tree.jpg' locked by user 'harry'."
msgstr ""
"$ svn lock http://svn.red-bean.com/repos/test/tree.jpg\n"
"'tree.jpg' locked by user 'sally'."

#. Tag: para
#: ch09-reference.xml:1953
#: ch09-reference.xml:3460
#, no-c-format
msgid "For further details, see <xref linkend=\"svn.advanced.locking\"/>."
msgstr "より詳細は <xref linkend=\"svn.advanced.locking\"/>を見てください。"

#. Tag: tertiary
#: ch09-reference.xml:1965
#: ch09-reference.xml:4997
#, fuzzy, no-c-format
msgid "<tertiary>log</tertiary>"
msgstr "<literal>log</literal>"

#. Tag: refpurpose
#: ch09-reference.xml:1970
#, no-c-format
msgid "Display commit log messages."
msgstr "コミットログメッセージの表示。"

#. Tag: programlisting
#: ch09-reference.xml:1974
#, no-c-format
msgid "svn log [PATH]"
msgstr "svn log [PATH]"

#. Tag: programlisting
#: ch09-reference.xml:1975
#, no-c-format
msgid "svn log URL [PATH...]"
msgstr "svn log URL [PATH...]"

#. Tag: programlisting
#: ch09-reference.xml:1976
#, fuzzy, no-c-format
msgid "svn log URL[@REV] [PATH...]"
msgstr "svn log URL [PATH...]"

#. Tag: para
#: ch09-reference.xml:1981
#, fuzzy, no-c-format
msgid "Shows log messages from the repository. If no arguments are supplied, <command>svn log</command> shows the log messages for all files and directories inside of (and including) the current working directory of your working copy. You can refine the results by specifying a path, one or more revisions, or any combination of the two. The default revision range for a local path is <literal>BASE:1</literal>."
msgstr "デフォルトのターゲットは現在の作業ディレクトリのパスになります。 引数を指定しなければ <command>svn log</command> は自分の作業コピーの現在の作業ディレクトリ 自身とその内部のすべてのファイルとディレクトリに関するログメッセージを 表示します。 一つのパス、一つ以上のリビジョン、あるいはそれらの組み合わせを 指定することで結果内容を指定をできます。ローカルパスのデフォルト リビジョン範囲は、<literal>BASE:1</literal> です。"

#. Tag: para
#: ch09-reference.xml:1990
#, no-c-format
msgid "If you specify a URL alone, then it prints log messages for everything that the URL contains. If you add paths past the URL, only messages for those paths under that URL will be printed. The default revision range for a URL is <literal>HEAD:1</literal>."
msgstr "URLだけを指定すれば、その URL に含まれるすべてのログメッセージが 表示されます。URLの後にパスを付ければ URL中のそれらのパスに含まれる メッセージだけが表示されます。URL のデフォルトリビジョン範囲は <literal>HEAD:1</literal> です。"

#. Tag: para
#: ch09-reference.xml:1996
#, no-c-format
msgid "With <option>--verbose</option>, <command>svn log</command> will also print all affected paths with each log message. With <option>--quiet</option>, <command>svn log</command> will not print the log message body itself (this is compatible with <option>--verbose</option>)."
msgstr "<option>--verbose</option> を指定すると<command>svn log</command> はそれぞれのログメッセージと共に関連したすべてのパスを表示します。 <option>--quiet</option> を指定すると <command>svn log</command> はログメッセージの本体部分を表示しなくなります(これは <option>--verbose</option> スイッチと両立します)。"

#. Tag: para
#: ch09-reference.xml:2002
#, no-c-format
msgid "Each log message is printed just once, even if more than one of the affected paths for that revision were explicitly requested. Logs follow copy history by default. Use <option>--stop-on-copy</option> to disable this behavior, which can be useful for determining branch points."
msgstr "それぞれのログメッセージは、そのリビジョンに影響のあるパスが二度 以上要求されても、一度だけ表示されます。ログはデフォルトではコピーされた 履歴に従います。<option>--stop-on-copy</option> はこの振る舞いを無効にしますが、ブランチが 起きた場所を特定する場合には役に立ちます。"

#. Tag: screen
#: ch09-reference.xml:2028
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--quiet (-q)\n"
"--verbose (-v)\n"
"--targets FILENAME\n"
"--stop-on-copy\n"
"--incremental\n"
"--limit NUM\n"
"--xml\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"
msgstr ""
"--revision (-r) REV\n"
"--quiet (-q)\n"
"--verbose (-v)\n"
"--targets FILENAME\n"
"--stop-on-copy\n"
"--incremental\n"
"--limit NUM\n"
"--xml\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:2034
#, no-c-format
msgid "You can see the log messages for all the paths that changed in your working copy by running <command>svn log</command> from the top:"
msgstr "最上位で <command>svn log</command> を実行することによって作業コピー中の変更されたすべての パスのログメッセージを見ることができます:"

#. Tag: screen
#: ch09-reference.xml:2038
#, no-c-format
msgid ""
"$ svn log\n"
"------------------------------------------------------------------------\n"
"r20 | harry | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line\n"
"\n"
"Tweak.\n"
"------------------------------------------------------------------------\n"
"r17 | sally | 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003) | 2 lines\n"
"&hellip;"
msgstr ""
"$ svn log\n"
"------------------------------------------------------------------------\n"
"r20 | harry | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line\n"
"\n"
"Tweak.\n"
"------------------------------------------------------------------------\n"
"r17 | sally | 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003) | 2 lines\n"
"&hellip;"

#. Tag: para
#: ch09-reference.xml:2040
#, no-c-format
msgid "Examine all log messages for a particular file in your working copy:"
msgstr "作業コピー中の特定のファイルに関するすべてのログメッセージを調べます:"

#. Tag: screen
#: ch09-reference.xml:2043
#, no-c-format
msgid ""
"$ svn log foo.c\n"
"------------------------------------------------------------------------\n"
"r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line\n"
"\n"
"Added defines.\n"
"------------------------------------------------------------------------\n"
"r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines\n"
"&hellip;"
msgstr ""
"$ svn log foo.c\n"
"------------------------------------------------------------------------\n"
"r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line\n"
"\n"
"Added defines.\n"
"------------------------------------------------------------------------\n"
"r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines\n"
"&hellip;"

#. Tag: para
#: ch09-reference.xml:2045
#, no-c-format
msgid "If you don't have a working copy handy, you can log a URL:"
msgstr "作業コピーが手元にない場合、URLを log することができます:"

#. Tag: screen
#: ch09-reference.xml:2048
#, no-c-format
msgid ""
"$ svn log http://svn.red-bean.com/repos/test/foo.c\n"
"------------------------------------------------------------------------\n"
"r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line\n"
"\n"
"Added defines.\n"
"------------------------------------------------------------------------\n"
"r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines\n"
"&hellip;"
msgstr ""
"$ svn log http://svn.red-bean.com/repos/test/foo.c\n"
"------------------------------------------------------------------------\n"
"r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line\n"
"\n"
"Added defines.\n"
"------------------------------------------------------------------------\n"
"r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines\n"
"&hellip;"

#. Tag: para
#: ch09-reference.xml:2050
#, no-c-format
msgid "If you want several distinct paths underneath the same URL, you can use the <literal>URL [PATH...]</literal> syntax."
msgstr "同じURLの下のいくつかの別のパスがほしい場合<literal>URL [PATH...] </literal> 構文を使うことができます。"

#. Tag: screen
#: ch09-reference.xml:2054
#, no-c-format
msgid ""
"$ svn log http://svn.red-bean.com/repos/test/ foo.c bar.c\n"
"------------------------------------------------------------------------\n"
"r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line\n"
"\n"
"Added defines.\n"
"------------------------------------------------------------------------\n"
"r31 | harry | 2003-01-10 12:25:08 -0600 (Fri, 10 Jan 2003) | 1 line\n"
"\n"
"Added new file bar.c\n"
"------------------------------------------------------------------------\n"
"r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines\n"
"&hellip;"
msgstr ""
"$ svn log http://svn.red-bean.com/repos/test/ foo.c bar.c\n"
"------------------------------------------------------------------------\n"
"r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line\n"
"\n"
"Added defines.\n"
"------------------------------------------------------------------------\n"
"r31 | harry | 2003-01-10 12:25:08 -0600 (Fri, 10 Jan 2003) | 1 line\n"
"\n"
"Added new file bar.c\n"
"------------------------------------------------------------------------\n"
"r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines\n"
"&hellip;"

#. Tag: para
#: ch09-reference.xml:2056
#, fuzzy, no-c-format
msgid "When you're concatenating the results of multiple calls to the log command, you may want to use the <option>--incremental</option> option. <command>svn log</command> normally prints out a dashed line at the beginning of a log message, after each subsequent log message, and following the final log message. If you ran <command>svn log</command> on a range of two revisions, you would get this:"
msgstr "複数の log コマンドの結果をつなげたい場合、<option>--incremental</option> スイッチを使うことができます。 <command>svn log</command>は普通メッセージの最初にダッシュの行を表示 し、それぞれの引き続くログメッセージを表示し、最後のログメッセージが それに続きます。 もし <command>svn log</command> を二つのリビジョン範囲で実行した場合、次のような出力 になります:"

#. Tag: screen
#: ch09-reference.xml:2064
#, fuzzy, no-c-format
msgid ""
"$ svn log -r 14:15\n"
"------------------------------------------------------------------------\n"
"r14 | &hellip;\n"
"\n"
"------------------------------------------------------------------------\n"
"r15 | &hellip;\n"
"\n"
"------------------------------------------------------------------------"
msgstr ""
"$ svn log -r 14:15\n"
"------------------------------------------------------------------------\n"
"r14 | ...\n"
"\n"
"------------------------------------------------------------------------\n"
"r15 | ...\n"
"\n"
"------------------------------------------------------------------------"

#. Tag: para
#: ch09-reference.xml:2066
#, no-c-format
msgid "However, if you wanted to gather 2 non-sequential log messages into a file, you might do something like this:"
msgstr "しかし、二つの順番になっていないログメッセージをファイルに 出力したい場合、何か次のような感じになるでしょう:"

#. Tag: screen
#: ch09-reference.xml:2070
#, fuzzy, no-c-format
msgid ""
"$ svn log -r 14 &gt; mylog\n"
"$ svn log -r 19 &gt;&gt; mylog\n"
"$ svn log -r 27 &gt;&gt; mylog\n"
"$ cat mylog\n"
"------------------------------------------------------------------------\n"
"r14 | &hellip;\n"
"\n"
"------------------------------------------------------------------------\n"
"------------------------------------------------------------------------\n"
"r19 | &hellip;\n"
"\n"
"------------------------------------------------------------------------\n"
"------------------------------------------------------------------------\n"
"r27 | &hellip;\n"
"\n"
"------------------------------------------------------------------------"
msgstr ""
"$ svn log -r 14 &gt; mylog\n"
"$ svn log -r 19 &gt;&gt; mylog\n"
"$ svn log -r 27 &gt;&gt; mylog\n"
"$ cat mylog\n"
"------------------------------------------------------------------------\n"
"r14 | ...\n"
"\n"
"------------------------------------------------------------------------\n"
"------------------------------------------------------------------------\n"
"r19 | ...\n"
"\n"
"------------------------------------------------------------------------\n"
"------------------------------------------------------------------------\n"
"r27 | ...\n"
"\n"
"------------------------------------------------------------------------"

#. Tag: para
#: ch09-reference.xml:2072
#, fuzzy, no-c-format
msgid "You can avoid the clutter of the double dashed lines in your output by using the incremental option:"
msgstr "incremental スイッチを使えば、出力中の重複したダッシュ行 の表示を避けることができます:"

#. Tag: screen
#: ch09-reference.xml:2076
#, fuzzy, no-c-format
msgid ""
"$ svn log --incremental -r 14 &gt; mylog\n"
"$ svn log --incremental -r 19 &gt;&gt; mylog\n"
"$ svn log --incremental -r 27 &gt;&gt; mylog\n"
"$ cat mylog\n"
"------------------------------------------------------------------------\n"
"r14 | &hellip;\n"
"\n"
"------------------------------------------------------------------------\n"
"r19 | &hellip;\n"
"\n"
"------------------------------------------------------------------------\n"
"r27 | &hellip;"
msgstr ""
"$ svn log --incremental -r 14 &gt; mylog\n"
"$ svn log --incremental -r 19 &gt;&gt; mylog\n"
"$ svn log --incremental -r 27 &gt;&gt; mylog\n"
"$ cat mylog\n"
"------------------------------------------------------------------------\n"
"r14 | ...\n"
"\n"
"------------------------------------------------------------------------\n"
"r19 | ...\n"
"\n"
"------------------------------------------------------------------------\n"
"r27 | ..."

#. Tag: para
#: ch09-reference.xml:2078
#, fuzzy, no-c-format
msgid "The <option>--incremental</option> option provides similar output control when using the <option>--xml</option> option."
msgstr "<option>--incremental</option> スイッチは、 <option>--xml</option> スイッチを使ったときと同じような出力 制御をします。"

#. Tag: para
#: ch09-reference.xml:2085
#, no-c-format
msgid "If you run <command>svn log</command> on a specific path and provide a specific revision and get no output at all"
msgstr "もし <command>svn log</command> を特定のパス上の特定のリビジョン指定で実行すると 何も出力されないでしょう"

#. Tag: screen
#: ch09-reference.xml:2089
#, no-c-format
msgid ""
"$ svn log -r 20 http://svn.red-bean.com/untouched.txt\n"
"------------------------------------------------------------------------"
msgstr ""
"$ svn log -r 20 http://svn.red-bean.com/untouched.txt\n"
"------------------------------------------------------------------------"

#. Tag: para
#: ch09-reference.xml:2091
#, no-c-format
msgid "That just means that the path was not modified in that revision. If you log from the top of the repository, or know the file that changed in that revision, you can specify it explicitly:"
msgstr "それはパスはリビジョンによっては修正されなかったことを意味 しています。リポジトリの最上位で log するか、そのリビジョンで 修正したファイルを知っているなら、明示的にそれを指定することが できます:"

#. Tag: screen
#: ch09-reference.xml:2096
#, no-c-format
msgid ""
"$ svn log -r 20 touched.txt \n"
"------------------------------------------------------------------------\n"
"r20 | sally | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line\n"
"\n"
"Made a change.\n"
"------------------------------------------------------------------------"
msgstr ""
"$ svn log -r 20 touched.txt \n"
"------------------------------------------------------------------------\n"
"r20 | sally | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line\n"
"\n"
"Made a change.\n"
"------------------------------------------------------------------------"

#. Tag: tertiary
#: ch09-reference.xml:2107
#, fuzzy, no-c-format
msgid "merge"
msgstr "マージ"

#. Tag: refname
#: ch09-reference.xml:2111
#, no-c-format
msgid "svn merge"
msgstr "svn merge"

#. Tag: refpurpose
#: ch09-reference.xml:2112
#, no-c-format
msgid "Apply the differences between two sources to a working copy path."
msgstr "二つのソースの差を作業コピーパスに反映します。"

#. Tag: programlisting
#: ch09-reference.xml:2117
#, fuzzy, no-c-format
msgid "svn merge [-c M | -r N:M] SOURCE[@REV] [WCPATH]"
msgstr "svn merge -r N:M SOURCE[@REV] [WCPATH]"

#. Tag: programlisting
#: ch09-reference.xml:2118
#, no-c-format
msgid "svn merge sourceURL1[@N] sourceURL2[@M] [WCPATH]"
msgstr "svn merge sourceURL1[@N] sourceURL2[@M] [WCPATH]"

#. Tag: programlisting
#: ch09-reference.xml:2119
#, no-c-format
msgid "svn merge sourceWCPATH1@N sourceWCPATH2@M [WCPATH]"
msgstr "svn merge sourceWCPATH1@N sourceWCPATH2@M [WCPATH]"

#. Tag: para
#: ch09-reference.xml:2124
#, no-c-format
msgid "In the first and second forms, the source paths (URLs in the first form, working copy paths in the second) are specified at revisions <replaceable>N</replaceable> and <replaceable>M</replaceable>. These are the two sources to be compared. The revisions default to <literal>HEAD</literal> if omitted."
msgstr "最初の形式と二番目の形式ではソースとなるパス(これは最初の形式ではURL, 二番目の形式では作業コピーパスとなります)はリビジョン <replaceable>N</replaceable> と <replaceable>M</replaceable> で指定され、 その二つが比較されます。リビジョンが省略されれば <literal>HEAD</literal> を指定されたものと みなします。"

#. Tag: para
#: ch09-reference.xml:2131
#, no-c-format
msgid "The <literal>-c M</literal> option is equivalent to <literal>-r N:M</literal> where <replaceable>N = M-1</replaceable>. Using <literal>-c -M</literal> does the reverse: <literal>-r M:N</literal> where <replaceable>N = M-1</replaceable>."
msgstr ""

#. Tag: para
#: ch09-reference.xml:2137
#, no-c-format
msgid "In the third form, <replaceable>SOURCE</replaceable> can be a URL or working copy item, in which case the corresponding URL is used. This URL, at revisions <replaceable>N</replaceable> and <replaceable>M</replaceable>, defines the two sources to be compared."
msgstr "三番目の形式では <replaceable>SOURCE</replaceable> は URL か、作業コピーアイテムであり、その場合、 対応した URLが利用されます。この、リビジョン <replaceable>N</replaceable> と <replaceable>M</replaceable> のURLが、比較対象と なります。"

#. Tag: para
#: ch09-reference.xml:2144
#, no-c-format
msgid "<replaceable>WCPATH</replaceable> is the working copy path that will receive the changes. If <replaceable>WCPATH</replaceable> is omitted, a default value of <quote><filename>.</filename></quote> is assumed, unless the sources have identical basenames that match a file within <quote><filename>.</filename></quote>: in which case, the differences will be applied to that file."
msgstr "<replaceable>WCPATH</replaceable> が変更を受け取る作業コピーパスです。もし <replaceable>WCPATH</replaceable>が省略されると、 デフォルトとして <quote><filename>.</filename></quote>が利用されます。ただし、両方のソースのベース名が同じで、 さらに、その名前のファイルが <quote><filename>.</filename></quote>にある場合は別で、この場合は、差分はその ファイルに適用されます。"

#. Tag: para
#: ch09-reference.xml:2152
#, no-c-format
msgid "Unlike <command>svn diff</command>, the merge command takes the ancestry of a file into consideration when performing a merge operation. This is very important when you're merging changes from one branch into another and you've renamed a file on one branch but not the other."
msgstr "<command>svn diff</command>とは違い、マージコマンドはマージ操作の実行 時にファイルの系統を考慮します。これはあるブランチでの変更点を別の ブランチにマージする場合に、あるブランチでは名称を変更したが、もう一方 ではそうしなかったような場合に非常に重要になります。"

#. Tag: para
#: ch09-reference.xml:2171
#, no-c-format
msgid "Only if working with URLs"
msgstr "URLに対して動作するときのみ発生する"

#. Tag: screen
#: ch09-reference.xml:2177
#, fuzzy, no-c-format
msgid ""
"--revision (-r) REV\n"
"--change (-c) REV\n"
"--non-recursive (-N)\n"
"--quiet (-q)\n"
"--force\n"
"--dry-run\n"
"--diff3-cmd CMD\n"
"--extensions (-x) ARG\n"
"--ignore-ancestry\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"
msgstr ""
"--revision (-r) REV\n"
"--non-recursive (-N)\n"
"--quiet (-q)\n"
"--force\n"
"--dry-run\n"
"--diff3-cmd CMD\n"
"--ignore-ancestry\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:2183
#, no-c-format
msgid "Merge a branch back into the trunk (assuming that you have a working copy of the trunk, and that the branch was created in revision 250):"
msgstr "ブランチを主系にマージします (主系の作業コピーがあり、ブランチがリビジョン250で作られたと仮定します):"

#. Tag: screen
#: ch09-reference.xml:2187
#, no-c-format
msgid ""
"$ svn merge -r 250:HEAD http://svn.red-bean.com/repos/branches/my-branch\n"
"U  myproj/tiny.txt\n"
"U  myproj/thhgttg.txt\n"
"U  myproj/win.txt\n"
"U  myproj/flo.txt"
msgstr ""
"$ svn merge -r 250:HEAD http://svn.red-bean.com/repos/branches/my-branch\n"
"U  myproj/tiny.txt\n"
"U  myproj/thhgttg.txt\n"
"U  myproj/win.txt\n"
"U  myproj/flo.txt"

#. Tag: para
#: ch09-reference.xml:2189
#, no-c-format
msgid "If you branched at revision 23, and you want to merge changes on trunk into your branch, you could do this from inside the working copy of your branch:"
msgstr "リビジョン23で分岐(ブランチ化)して、そのブランチの中の主系に変更を マージしたいとします。これにはブランチの作業コピーの中で以下のような操作を します:"

#. Tag: screen
#: ch09-reference.xml:2193
#, no-c-format
msgid ""
"$ svn merge -r 23:30 file:///tmp/repos/trunk/vendors\n"
"U  myproj/thhgttg.txt\n"
"&hellip;"
msgstr ""
"$ svn merge -r 23:30 file:///tmp/repos/trunk/vendors\n"
"U  myproj/thhgttg.txt\n"
"&hellip;"

#. Tag: para
#: ch09-reference.xml:2195
#, no-c-format
msgid "To merge changes to a single file:"
msgstr "変更を一つのファイルにマージするには:"

#. Tag: screen
#: ch09-reference.xml:2197
#, no-c-format
msgid ""
"$ cd myproj\n"
"$ svn merge -r 30:31 thhgttg.txt \n"
"U  thhgttg.txt"
msgstr ""
"$ cd myproj\n"
"$ svn merge -r 30:31 thhgttg.txt\n"
"U  thhgttg.txt"

#. Tag: tertiary
#: ch09-reference.xml:2207
#, fuzzy, no-c-format
msgid "mkdir"
msgstr "svn mkdir"

#. Tag: refname
#: ch09-reference.xml:2211
#, no-c-format
msgid "svn mkdir"
msgstr "svn mkdir"

#. Tag: refpurpose
#: ch09-reference.xml:2212
#, no-c-format
msgid "Create a new directory under version control."
msgstr "バージョン管理下にある新しいディレクトリを作ります。"

#. Tag: programlisting
#: ch09-reference.xml:2216
#, no-c-format
msgid "svn mkdir PATH..."
msgstr "svn mkdir PATH..."

#. Tag: programlisting
#: ch09-reference.xml:2217
#, no-c-format
msgid "svn mkdir URL..."
msgstr "svn mkdir URL..."

#. Tag: para
#: ch09-reference.xml:2222
#, no-c-format
msgid "Create a directory with a name given by the final component of the <replaceable>PATH</replaceable> or URL. A directory specified by a working copy <replaceable>PATH</replaceable> is scheduled for addition in the working copy. A directory specified by a URL is created in the repository via an immediate commit. Multiple directory URLs are committed atomically. In both cases all the intermediate directories must already exist."
msgstr "<replaceable>PATH</replaceable> または URLを最後の部分とするようなディレクトリを作ります。 作業コピー <replaceable>PATH</replaceable> で指定されたディレクトリは作業コピーへの追加として 予告されます。URL によって指定されたディレクトリは作成と同時に コミットされます。複数のディレクトリ URL は不分割にコミットされます。 どちらの場合でも途中のディレクトリはすべて存在していなくてはなりません。"

#. Tag: para
#: ch09-reference.xml:2240
#: ch09-reference.xml:2331
#, no-c-format
msgid "Working copy, repository if operating on a URL"
msgstr "作業コピー。URLを指定した場合はリポジトリ"

#. Tag: para
#: ch09-reference.xml:2245
#: ch09-reference.xml:2336
#: ch09-reference.xml:2400
#: ch09-reference.xml:2465
#: ch09-reference.xml:2526
#: ch09-reference.xml:2590
#: ch09-reference.xml:2666
#, no-c-format
msgid "Only if operating on a URL"
msgstr "URLを指定した場合は発生する"

#. Tag: screen
#: ch09-reference.xml:2251
#, no-c-format
msgid ""
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--quiet (-q)\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--editor-cmd EDITOR\n"
"--encoding ENC\n"
"--force-log\n"
"--config-dir DIR"
msgstr ""
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--quiet (-q)\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--editor-cmd EDITOR\n"
"--encoding ENC\n"
"--force-log\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:2257
#, no-c-format
msgid "Create a directory in your working copy:"
msgstr "作業コピー中にディレクトリを作る:"

#. Tag: screen
#: ch09-reference.xml:2259
#, no-c-format
msgid ""
"$ svn mkdir newdir\n"
"A         newdir"
msgstr ""
"$ svn mkdir newdir\n"
"A         newdir"

#. Tag: para
#: ch09-reference.xml:2261
#, no-c-format
msgid "Create one in the repository (instant commit, so a log message is required):"
msgstr "リポジトリに作る(コミットが発生するのでログメッセージを 指定する必要がある) :"

#. Tag: screen
#: ch09-reference.xml:2264
#, no-c-format
msgid ""
"$ svn mkdir -m \"Making a new dir.\" http://svn.red-bean.com/repos/newdir\n"
"\n"
"Committed revision 26."
msgstr ""
"$ svn mkdir -m \"Making a new dir.\" http://svn.red-bean.com/repos/newdir\n"
"\n"
"Committed revision 26."

#. Tag: tertiary
#: ch09-reference.xml:2274
#, fuzzy, no-c-format
msgid "move"
msgstr "svn move"

#. Tag: refpurpose
#: ch09-reference.xml:2279
#, no-c-format
msgid "Move a file or directory."
msgstr "ファイルやディレクトリを移動する。"

#. Tag: programlisting
#: ch09-reference.xml:2283
#, no-c-format
msgid "svn move SRC DST"
msgstr "svn move SRC DST"

#. Tag: para
#: ch09-reference.xml:2288
#, no-c-format
msgid "This command moves a file or directory in your working copy or in the repository."
msgstr "このコマンドは作業コピーまたはリポジトリにある ファイルやディレクトリを移動します。"

#. Tag: para
#: ch09-reference.xml:2292
#, no-c-format
msgid "This command is equivalent to an <command>svn copy</command> followed by <command>svn delete</command>."
msgstr "このコマンドは、<command>svn copy</command> の後に <command>svn delete</command>を実行するのと同じことです。"

#. Tag: para
#: ch09-reference.xml:2298
#, no-c-format
msgid "Subversion does not support moving between working copies and URLs. In addition, you can only move files within a single repository&mdash;Subversion does not support cross-repository moving."
msgstr "Subversionでは作業コピーとURLの間の移動はサポートしていません。 さらに、ファイルの移動は一つのリポジトリの内部でのみ可能です&mdash; Subversionはリポジトリ間の移動をサポートしていません。"

#. Tag: para
#: ch09-reference.xml:2309
#, no-c-format
msgid "Move and schedule a file or directory for addition (with history)."
msgstr "移動してから、ファイルやディレクトリを追加予告します。"

#. Tag: para
#: ch09-reference.xml:2317
#, no-c-format
msgid "Complete server-side rename."
msgstr "サーバ上での名称変更"

#. Tag: para
#: ch09-reference.xml:2326
#, no-c-format
msgid "mv, rename, ren"
msgstr "mv, rename, ren"

#. Tag: screen
#: ch09-reference.xml:2342
#, fuzzy, no-c-format
msgid ""
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--revision (-r) REV (<emphasis>Deprecated</emphasis>)\n"
"--quiet (-q)\n"
"--force\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--editor-cmd EDITOR\n"
"--encoding ENC\n"
"--force-log\n"
"--config-dir DIR"
msgstr ""
"--message (-m) TEXT\n"
"--file (-F) FILE\n"
"--revision (-r) REV\n"
"--quiet (-q)\n"
"--force\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--editor-cmd EDITOR\n"
"--encoding ENC\n"
"--force-log\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:2348
#, no-c-format
msgid "Move a file in your working copy:"
msgstr "作業コピーのファイルを移動:"

#. Tag: screen
#: ch09-reference.xml:2350
#, no-c-format
msgid ""
"$ svn move foo.c bar.c\n"
"A         bar.c\n"
"D         foo.c"
msgstr ""
"$ svn move foo.c bar.c\n"
"A         bar.c\n"
"D         foo.c"

#. Tag: para
#: ch09-reference.xml:2352
#, no-c-format
msgid "Move a file in the repository (an immediate commit, so it requires a commit message):"
msgstr "リポジトリのファイルを移動(コミットが発生するので コミットメッセージを指定する必要がある):"

#. Tag: screen
#: ch09-reference.xml:2355
#, no-c-format
msgid ""
"$ svn move -m \"Move a file\" http://svn.red-bean.com/repos/foo.c \\\n"
"                            http://svn.red-bean.com/repos/bar.c\n"
"\n"
"Committed revision 27."
msgstr ""
"$ svn move -m \"Move a file\" http://svn.red-bean.com/repos/foo.c ¥\n"
"                            http://svn.red-bean.com/repos/bar.c\n"
"\n"
"Committed revision 27."

#. Tag: tertiary
#: ch09-reference.xml:2365
#, fuzzy, no-c-format
msgid "propdel"
msgstr "svn propdel"

#. Tag: refname
#: ch09-reference.xml:2369
#, no-c-format
msgid "svn propdel"
msgstr "svn propdel"

#. Tag: refpurpose
#: ch09-reference.xml:2370
#, no-c-format
msgid "Remove a property from an item."
msgstr "アイテムから属性を削除します。"

#. Tag: programlisting
#: ch09-reference.xml:2374
#, no-c-format
msgid "svn propdel PROPNAME [PATH...]"
msgstr "svn propdel PROPNAME [PATH...]"

#. Tag: programlisting
#: ch09-reference.xml:2375
#, fuzzy, no-c-format
msgid "svn propdel PROPNAME --revprop -r REV [TARGET]"
msgstr "svn propdel PROPNAME --revprop -r REV [URL]"

#. Tag: para
#: ch09-reference.xml:2380
#, fuzzy, no-c-format
msgid "This removes properties from files, directories, or revisions. The first form removes versioned properties in your working copy, while the second removes unversioned remote properties on a repository revision (<replaceable>TARGET</replaceable> only determines which repository to access)."
msgstr "これはファイル、ディレクトリ、リビジョンから属性を削除します。 最初の形式は作業コピーのバージョン管理された属性を削除し、 二番目の形式ではリポジトリリビジョン上のバージョン管理されていない属性を 削除します。"

#. Tag: para
#: ch09-reference.xml:2390
#, no-c-format
msgid "pdel, pd"
msgstr "pdel, pd"

#. Tag: para
#: ch09-reference.xml:2395
#: ch09-reference.xml:2460
#: ch09-reference.xml:2521
#: ch09-reference.xml:2585
#: ch09-reference.xml:2661
#, no-c-format
msgid "Working copy, repository only if operating on a URL"
msgstr "作業コピー。URLを指定した場合はリポジトリ"

#. Tag: screen
#: ch09-reference.xml:2406
#, no-c-format
msgid ""
"--quiet (-q)\n"
"--recursive (-R)\n"
"--revision (-r) REV\n"
"--revprop\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"
msgstr ""
"--quiet (-q)\n"
"--recursive (-R)\n"
"--revision (-r) REV\n"
"--revprop\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:2412
#, no-c-format
msgid "Delete a property from a file in your working copy"
msgstr "作業コピーのファイルから属性を削除する"

#. Tag: screen
#: ch09-reference.xml:2415
#, no-c-format
msgid ""
"$ svn propdel svn:mime-type  some-script\n"
"property 'svn:mime-type' deleted from 'some-script'."
msgstr ""
"$ svn propdel svn:mime-type  some-script\n"
"property 'svn:mime-type' deleted from 'some-script'."

#. Tag: para
#: ch09-reference.xml:2417
#, no-c-format
msgid "Delete a revision property:"
msgstr "リビジョン属性を削除する:"

#. Tag: screen
#: ch09-reference.xml:2419
#, no-c-format
msgid ""
"$ svn propdel --revprop -r 26 release-date \n"
"property 'release-date' deleted from repository revision '26'"
msgstr ""
"$ svn propdel --revprop -r 26 release-date \n"
"property 'release-date' deleted from repository revision '26'"

#. Tag: tertiary
#: ch09-reference.xml:2429
#, fuzzy, no-c-format
msgid "propedit"
msgstr "propget"

#. Tag: refname
#: ch09-reference.xml:2433
#, no-c-format
msgid "svn propedit"
msgstr "svn propedit"

#. Tag: refpurpose
#: ch09-reference.xml:2434
#, no-c-format
msgid "Edit the property of one or more items under version control."
msgstr "バージョン管理されている一つ以上のアイテムの属性を編集する。"

#. Tag: programlisting
#: ch09-reference.xml:2439
#, no-c-format
msgid "svn propedit PROPNAME PATH..."
msgstr "svn propedit PROPNAME PATH..."

#. Tag: programlisting
#: ch09-reference.xml:2440
#, fuzzy, no-c-format
msgid "svn propedit PROPNAME --revprop -r REV [TARGET]"
msgstr "svn propedit PROPNAME --revprop -r REV [URL]"

#. Tag: para
#: ch09-reference.xml:2445
#, fuzzy, no-c-format
msgid "Edit one or more properties using your favorite editor. The first form edits versioned properties in your working copy, while the second edits unversioned remote properties on a repository revision (<replaceable>TARGET</replaceable> only determines which repository to access)."
msgstr "一つ以上の属性を好きなエディタで修正します。 最初の形式は作業コピー中のバージョン管理された属性を編集します。 二番目の形式ではリポジトリリビジョン上のバージョン管理されていない 属性を編集します。"

#. Tag: para
#: ch09-reference.xml:2455
#, no-c-format
msgid "pedit, pe"
msgstr "pedit, pe"

#. Tag: screen
#: ch09-reference.xml:2471
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--revprop\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--encoding ENC\n"
"--editor-cmd EDITOR\n"
"--config-dir DIR"
msgstr ""
"--revision (-r) REV\n"
"--revprop\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--encoding ENC\n"
"--editor-cmd EDITOR\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:2477
#, no-c-format
msgid "<command>svn propedit</command> makes it easy to modify properties that have multiple values:"
msgstr "<command>svn propedit</command> は、複数の値を持つ 属性を簡単に変更することができます:"

#. Tag: screen
#: ch09-reference.xml:2480
#, no-c-format
msgid ""
"$ svn propedit svn:keywords  foo.c \n"
"    &lt;svn will launch your favorite editor here, with a buffer open\n"
"    containing the current contents of the svn:keywords property.  You\n"
"    can add multiple values to a property easily here by entering one\n"
"    value per line.&gt;\n"
"Set new value for property 'svn:keywords' on 'foo.c'"
msgstr ""
"$ svn propedit svn:keywords  foo.c \n"
"    &lt;svn will launch your favorite editor here, with a buffer open\n"
"    containing the current contents of the svn:keywords property.  You\n"
"    can add multiple values to a property easily here by entering one\n"
"    value per line.&gt;\n"
"Set new value for property 'svn:keywords' on 'foo.c'"

#. Tag: tertiary
#: ch09-reference.xml:2490
#: ch09-reference.xml:5036
#, no-c-format
msgid "propget"
msgstr "propget"

#. Tag: refname
#: ch09-reference.xml:2494
#, no-c-format
msgid "svn propget"
msgstr "svn propget"

#. Tag: refpurpose
#: ch09-reference.xml:2495
#, no-c-format
msgid "Print the value of a property."
msgstr "属性の値を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:2499
#, no-c-format
msgid "svn propget PROPNAME [TARGET[@REV]...]"
msgstr "svn propget PROPNAME [TARGET[@REV]...]"

#. Tag: programlisting
#: ch09-reference.xml:2500
#, no-c-format
msgid "svn propget PROPNAME --revprop -r REV [URL]"
msgstr "svn propget PROPNAME --revprop -r REV [URL]"

#. Tag: para
#: ch09-reference.xml:2505
#, no-c-format
msgid "Print the value of a property on files, directories, or revisions. The first form prints the versioned property of an item or items in your working copy, while the second prints unversioned remote property on a repository revision. See <xref linkend=\"svn.advanced.props\"/> for more information on properties."
msgstr "ファイル、ディレクトリ、リビジョンの属性値を表示します。 最初の形式は作業コピーにある一つ以上のアイテムのバージョン管理された属性を表示します。 二番目の形式ではあるリポジトリリビジョンのバージョン管理していない属性を 表示します。属性についての詳細は <xref linkend=\"svn.advanced.props\"/> を見てください。"

#. Tag: para
#: ch09-reference.xml:2516
#, no-c-format
msgid "pget, pg"
msgstr "pget, pg"

#. Tag: screen
#: ch09-reference.xml:2532
#, no-c-format
msgid ""
"--recursive (-R)\n"
"--revision (-r) REV\n"
"--revprop\n"
"--strict\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"
msgstr ""
"--recursive (-R)\n"
"--revision (-r) REV\n"
"--revprop\n"
"--strict\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:2538
#, no-c-format
msgid "Examine a property of a file in your working copy:"
msgstr "作業コピー中のアイテムの属性を調べる:"

#. Tag: screen
#: ch09-reference.xml:2541
#, no-c-format
msgid ""
"$ svn propget svn:keywords foo.c\n"
"Author\n"
"Date\n"
"Rev"
msgstr ""
"$ svn propget svn:keywords foo.c\n"
"Author\n"
"Date\n"
"Rev"

#. Tag: para
#: ch09-reference.xml:2543
#, no-c-format
msgid "The same goes for a revision property:"
msgstr "リビジョン属性についても同様:"

#. Tag: screen
#: ch09-reference.xml:2545
#, no-c-format
msgid ""
"$ svn propget svn:log --revprop -r 20 \n"
"Began journal."
msgstr ""
"$ svn propget svn:log --revprop -r 20 \n"
"Began journal."

#. Tag: tertiary
#: ch09-reference.xml:2555
#: ch09-reference.xml:5084
#, no-c-format
msgid "proplist"
msgstr "proplist"

#. Tag: refname
#: ch09-reference.xml:2559
#, no-c-format
msgid "svn proplist"
msgstr "svn proplist"

#. Tag: refpurpose
#: ch09-reference.xml:2560
#, no-c-format
msgid "List all properties."
msgstr "すべての属性を一覧表示します。"

#. Tag: programlisting
#: ch09-reference.xml:2564
#, no-c-format
msgid "svn proplist [TARGET[@REV]...]"
msgstr "svn proplist [TARGET[@REV]...]"

#. Tag: programlisting
#: ch09-reference.xml:2565
#, fuzzy, no-c-format
msgid "svn proplist --revprop -r REV [TARGET]"
msgstr "svn proplist --revprop -r REV [URL]"

#. Tag: para
#: ch09-reference.xml:2570
#, fuzzy, no-c-format
msgid "List all properties on files, directories, or revisions. The first form lists versioned properties in your working copy, while the second lists unversioned remote properties on a repository revision (<replaceable>TARGET</replaceable> only determines which repository to access)."
msgstr "ファイル、ディレクトリ、リビジョンのすべての属性を一覧表示します。 最初の形式では作業コピー中のバージョン管理された属性を表示しますが、二番目の 形式ではあるリポジトリリビジョンの属性を表示します。"

#. Tag: para
#: ch09-reference.xml:2580
#, no-c-format
msgid "plist, pl"
msgstr "plist, pl"

#. Tag: screen
#: ch09-reference.xml:2596
#, no-c-format
msgid ""
"--verbose (-v)\n"
"--recursive (-R)\n"
"--revision (-r) REV\n"
"--quiet (-q)\n"
"--revprop\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"
msgstr ""
"--verbose (-v)\n"
"--recursive (-R)\n"
"--revision (-r) REV\n"
"--quiet (-q)\n"
"--revprop\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:2602
#, no-c-format
msgid "You can use proplist to see the properties on an item in your working copy:"
msgstr "作業コピーのアイテムの属性の一覧を見たい場合は proplist コマンドを使うことができます:"

#. Tag: screen
#: ch09-reference.xml:2605
#, no-c-format
msgid ""
"$ svn proplist foo.c\n"
"Properties on 'foo.c':\n"
"  svn:mime-type\n"
"  svn:keywords\n"
"  owner"
msgstr ""
"$ svn proplist foo.c\n"
"Properties on 'foo.c':\n"
"  svn:mime-type\n"
"  svn:keywords\n"
"  owner"

#. Tag: para
#: ch09-reference.xml:2607
#, no-c-format
msgid "But with the <option>--verbose</option> flag, svn proplist is extremely handy as it also shows you the values for the properties:"
msgstr "しかし<option>--verbose</option> フラグを付けると、それぞれの属性の値も 一緒に表示することができるのでとても便利です:"

#. Tag: screen
#: ch09-reference.xml:2611
#, no-c-format
msgid ""
"$ svn proplist --verbose foo.c\n"
"Properties on 'foo.c':\n"
"  svn:mime-type : text/plain\n"
"  svn:keywords : Author Date Rev\n"
"  owner : sally"
msgstr ""
"$ svn proplist --verbose foo.c\n"
"Properties on 'foo.c':\n"
"  svn:mime-type : text/plain\n"
"  svn:keywords : Author Date Rev\n"
"  owner : sally"

#. Tag: tertiary
#: ch09-reference.xml:2621
#, fuzzy, no-c-format
msgid "propset"
msgstr "propget"

#. Tag: refname
#: ch09-reference.xml:2625
#, no-c-format
msgid "svn propset"
msgstr "svn propset"

#. Tag: refpurpose
#: ch09-reference.xml:2626
#, no-c-format
msgid "Set PROPNAME to PROPVAL on files, directories, or revisions."
msgstr "ファイル、ディレクトリ、リビジョンの PROPNAME の値 を PROPVALに設定する。"

#. Tag: programlisting
#: ch09-reference.xml:2630
#, no-c-format
msgid "svn propset PROPNAME [PROPVAL | -F VALFILE] PATH..."
msgstr "svn propset PROPNAME [PROPVAL | -F VALFILE] PATH [PATH [PATH ... ]]"

#. Tag: programlisting
#: ch09-reference.xml:2631
#, fuzzy, no-c-format
msgid "svn propset PROPNAME --revprop -r REV [PROPVAL | -F VALFILE] [TARGET]"
msgstr "svn propset PROPNAME --revprop -r REV [PROPVAL | -F VALFILE] [URL]"

#. Tag: para
#: ch09-reference.xml:2637
#, fuzzy, no-c-format
msgid "Set <replaceable>PROPNAME</replaceable> to <replaceable>PROPVAL</replaceable> on files, directories, or revisions. The first example creates a versioned, local property change in the working copy, and the second creates an unversioned, remote property change on a repository revision (<replaceable>TARGET</replaceable> only determines which repository to access)."
msgstr "ファイル、ディレクトリ、リビジョンの <replaceable>PROPNAME</replaceable>の値を <replaceable>PROPVAL</replaceable>に設定します。 最初の例はバージョン管理された作業コピー中の属性値の変更で、二番目は バージョン管理されていないリポジトリ上のリビジョン属性値の作成です。"

#. Tag: para
#: ch09-reference.xml:2647
#, fuzzy, no-c-format
msgid "Subversion has a number of <quote>special</quote> properties that affect its behavior. See <xref linkend=\"svn.ref.properties\"/> for more on these properties."
msgstr "Subversionは、動作に影響を与えるたくさんの<quote>特別な</quote>属性 を持っています。詳しくは <xref linkend=\"svn.advanced.props.special\"/>を見てください。"

#. Tag: para
#: ch09-reference.xml:2656
#, no-c-format
msgid "pset, ps"
msgstr "pset, ps"

#. Tag: screen
#: ch09-reference.xml:2672
#, no-c-format
msgid ""
"--file (-F) FILE\n"
"--quiet (-q)\n"
"--revision (-r) REV\n"
"--targets FILENAME\n"
"--recursive (-R)\n"
"--revprop\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--encoding ENC\n"
"--force\n"
"--config-dir DIR"
msgstr ""
"--file (-F) FILE\n"
"--quiet (-q)\n"
"--revision (-r) REV\n"
"--targets FILENAME\n"
"--recursive (-R)\n"
"--revprop\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--encoding ENC\n"
"--force\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:2678
#, fuzzy, no-c-format
msgid "Set the mime type on a file:"
msgstr "ファイルのMIMEタイプを設定する:"

#. Tag: screen
#: ch09-reference.xml:2680
#, no-c-format
msgid ""
"$ svn propset svn:mime-type image/jpeg foo.jpg \n"
"property 'svn:mime-type' set on 'foo.jpg'"
msgstr ""
"$ svn propset svn:mime-type image/jpeg foo.jpg \n"
"property 'svn:mime-type' set on 'foo.jpg'"

#. Tag: para
#: ch09-reference.xml:2682
#, no-c-format
msgid "On a UNIX system, if you want a file to have the executable permission set:"
msgstr "UNIX 上で、あるファイルに実行属性を付けたいときには:"

#. Tag: screen
#: ch09-reference.xml:2685
#, no-c-format
msgid ""
"$ svn propset svn:executable ON somescript\n"
"property 'svn:executable' set on 'somescript'"
msgstr ""
"$ svn propset svn:executable ON somescript\n"
"property 'svn:executable' set on 'somescript'"

#. Tag: para
#: ch09-reference.xml:2687
#, no-c-format
msgid "Perhaps you have an internal policy to set certain properties for the benefit of your coworkers:"
msgstr "多分、共同作業者の便宜を考えると、ある属性を設定 するには内部的なポリシーがなくてはなりません:"

#. Tag: screen
#: ch09-reference.xml:2690
#, no-c-format
msgid ""
"$ svn propset owner sally foo.c\n"
"property 'owner' set on 'foo.c'"
msgstr ""
"$ svn propset owner sally foo.c\n"
"property 'owner' set on 'foo.c'"

#. Tag: para
#: ch09-reference.xml:2692
#, no-c-format
msgid "If you made a mistake in a log message for a particular revision and want to change it, use <option>--revprop</option> and set <literal>svn:log</literal> to the new log message:"
msgstr "特定のリビジョンのログメッセージを間違ってしまい、それを変更したいとき、 <option>--revprop</option> を使って、<literal>svn:log</literal> に新し いメッセージを設定します:"

#. Tag: screen
#: ch09-reference.xml:2697
#, no-c-format
msgid ""
"$ svn propset --revprop -r 25 svn:log \"Journaled about trip to New York.\"\n"
"property 'svn:log' set on repository revision '25'"
msgstr ""
"$ svn propset --revprop -r 25 svn:log \"Journaled about trip to New York.\"\n"
"property 'svn:log' set on repository revision '25'"

#. Tag: para
#: ch09-reference.xml:2699
#, no-c-format
msgid "Or, if you don't have a working copy, you can provide a URL."
msgstr "あるいは、作業コピーを持っていない場合でも、URLを設定することが できます。"

#. Tag: screen
#: ch09-reference.xml:2702
#, no-c-format
msgid ""
"$ svn propset --revprop -r 26 svn:log \"Document nap.\" http://svn.red-bean.com/repos\n"
"property 'svn:log' set on repository revision '25'"
msgstr ""
"$ svn propset --revprop -r 26 svn:log \"Document nap.\" http://svn.red-bean.com/repos\n"
"property 'svn:log' set on repository revision '25'"

#. Tag: para
#: ch09-reference.xml:2704
#, no-c-format
msgid "Lastly, you can tell propset to take its input from a file. You could even use this to set the contents of a property to something binary:"
msgstr "最後に、属性値をファイルを入力として設定することもできます。 この方法で、属性値にバイナリ値を設定することさえできます:"

#. Tag: screen
#: ch09-reference.xml:2708
#, no-c-format
msgid ""
"$ svn propset owner-pic -F sally.jpg moo.c \n"
"property 'owner-pic' set on 'moo.c'"
msgstr ""
"$ svn propset owner-pic -F sally.jpg moo.c \n"
"property 'owner-pic' set on 'moo.c'"

#. Tag: para
#: ch09-reference.xml:2711
#, no-c-format
msgid "By default, you cannot modify revision properties in a Subversion repository. Your repository administrator must explicitly enable revision property modifications by creating a hook named <literal>pre-revprop-change</literal>. See <xref linkend=\"svn.reposadmin.create.hooks\"/> for more information on hook scripts."
msgstr "デフォルトではSubversionリポジトリ中のリビジョン属性は変更 できません。リポジトリ管理者は<literal>pre-revprop-change</literal>という 名前のフックを作ることで明示的にリビジョン属性の 修正を有効にしなくてはなりません。 フックスクリプトについて詳しくは <xref linkend=\"svn.reposadmin.create.hooks\"/> を見てください。"

#. Tag: tertiary
#: ch09-reference.xml:2728
#, fuzzy, no-c-format
msgid "resolved"
msgstr "svn resolved"

#. Tag: refpurpose
#: ch09-reference.xml:2733
#, no-c-format
msgid "Remove <quote>conflicted</quote> state on working copy files or directories."
msgstr "作業コピーのファイルまたはディレクトリの <quote>衝突</quote> 状態を取り除きます。"

#. Tag: programlisting
#: ch09-reference.xml:2738
#, no-c-format
msgid "svn resolved PATH..."
msgstr "svn resolved PATH..."

#. Tag: para
#: ch09-reference.xml:2743
#, no-c-format
msgid "Remove <quote>conflicted</quote> state on working copy files or directories. This routine does not semantically resolve conflict markers; it merely removes conflict-related artifact files and allows <replaceable>PATH</replaceable> to be committed again; that is, it tells Subversion that the conflicts have been <quote>resolved</quote>. See <xref linkend=\"svn.tour.cycle.resolve\"/> for an in-depth look at resolving conflicts."
msgstr "作業コピーのファイルまたはディレクトリの <quote>衝突</quote> 状態を取り除きます。 このコマンドは衝突マーカを意味的に解消するのではなく、単に 衝突に関係した中間ファイルを削除して、<replaceable>PATH</replaceable>でもう一度コミットする だけです。つまりSubversionにその衝突は既に<quote>解消された</quote>と伝えます。 衝突の解消についての詳細は <xref linkend=\"svn.tour.cycle.resolve\"/> を見てください。"

#. Tag: screen
#: ch09-reference.xml:2771
#: ch09-reference.xml:2846
#, no-c-format
msgid ""
"--targets FILENAME\n"
"--recursive (-R)\n"
"--quiet (-q)\n"
"--config-dir DIR"
msgstr ""
"--targets FILENAME\n"
"--recursive (-R)\n"
"--quiet (-q)\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:2777
#, no-c-format
msgid "If you get a conflict on an update, your working copy will sprout three new files:"
msgstr "更新操作中に衝突があった場合、作業コピーは三つの新しいファイルを 作ります:"

#. Tag: screen
#: ch09-reference.xml:2780
#, no-c-format
msgid ""
"$ svn update\n"
"C  foo.c\n"
"Updated to revision 31.\n"
"$ ls\n"
"foo.c\n"
"foo.c.mine\n"
"foo.c.r30\n"
"foo.c.r31"
msgstr ""
"$ svn update\n"
"C  foo.c\n"
"Updated to revision 31.\n"
"$ ls\n"
"foo.c\n"
"foo.c.mine\n"
"foo.c.r30\n"
"foo.c.r31"

#. Tag: para
#: ch09-reference.xml:2782
#, no-c-format
msgid "Once you've resolved the conflict and <filename>foo.c</filename> is ready to be committed, run <command>svn resolved</command> to let your working copy know you've taken care of everything."
msgstr "衝突を解消し、<filename>foo.c</filename> のコミットの準備が できた状態にある場合、<command>svn resolved</command> は あなたの作業コピーに、注意しなくてはならないすべてのことを 伝えます。"

#. Tag: para
#: ch09-reference.xml:2788
#, no-c-format
msgid "You <emphasis>can</emphasis> just remove the conflict files and commit, but <command>svn resolved</command> fixes up some bookkeeping data in the working copy administrative area in addition to removing the conflict files, so we recommend that you use this command."
msgstr "単に衝突ファイルを削除してからコミットすることも<emphasis>できます</emphasis> が <command>svn resolved</command> は作業コピー管理領域の記録として、衝突ファイルを削除した ことも付け加えるので、このコマンドを使うのをお勧めします。"

#. Tag: tertiary
#: ch09-reference.xml:2804
#, fuzzy, no-c-format
msgid "revert"
msgstr "recover"

#. Tag: refpurpose
#: ch09-reference.xml:2809
#, no-c-format
msgid "Undo all local edits."
msgstr "ローカルファイルへのすべての編集を取り消します。"

#. Tag: programlisting
#: ch09-reference.xml:2813
#, no-c-format
msgid "svn revert PATH..."
msgstr "svn revert PATH..."

#. Tag: para
#: ch09-reference.xml:2818
#, no-c-format
msgid "Reverts any local changes to a file or directory and resolves any conflicted states. <command>svn revert</command> will not only revert the contents of an item in your working copy, but also any property changes. Finally, you can use it to undo any scheduling operations that you may have done (e.g. files scheduled for addition or deletion can be <quote>unscheduled</quote>)."
msgstr "ファイル、ディレクトリに対する変更をすべて取り消して 衝突の状態を解消します。<command>svn revert</command>は 作業コピーのアイテムの内容だけではなく、属性の変更も取り消します。 さらに既にやった予告操作を取り消すのにも使えます。 (たとえば、ファイルにたいする追加または削除の予告 も<quote>取り消され</quote>ます。"

#. Tag: para
#: ch09-reference.xml:2852
#, no-c-format
msgid "Discard changes to a file:"
msgstr "ファイルに対する変更の取り消し:"

#. Tag: screen
#: ch09-reference.xml:2854
#, no-c-format
msgid ""
"$ svn revert foo.c\n"
"Reverted foo.c"
msgstr ""
"$ svn revert foo.c\n"
"Reverted foo.c"

#. Tag: para
#: ch09-reference.xml:2856
#, no-c-format
msgid "If you want to revert a whole directory of files, use the <option>--recursive</option> flag:"
msgstr "ディレクトリ全体を取り消したい場合は、 <option>--recursive</option> フラグを使います:"

#. Tag: screen
#: ch09-reference.xml:2859
#, no-c-format
msgid ""
"$ svn revert --recursive .\n"
"Reverted newdir/afile\n"
"Reverted foo.c\n"
"Reverted bar.txt"
msgstr ""
"$ svn revert --recursive .\n"
"Reverted newdir/afile\n"
"Reverted foo.c\n"
"Reverted bar.txt"

#. Tag: para
#: ch09-reference.xml:2861
#, no-c-format
msgid "Lastly, you can undo any scheduling operations:"
msgstr "最後に、どの予告操作も取り消すことができます:"

#. Tag: screen
#: ch09-reference.xml:2864
#, no-c-format
msgid ""
"$ svn add mistake.txt whoops\n"
"A         mistake.txt\n"
"A         whoops\n"
"A         whoops/oopsie.c\n"
"\n"
"$ svn revert mistake.txt whoops\n"
"Reverted mistake.txt\n"
"Reverted whoops\n"
"\n"
"$ svn status\n"
"?      mistake.txt\n"
"?      whoops"
msgstr ""
"$ svn add mistake.txt whoops\n"
"A         mistake.txt\n"
"A         whoops\n"
"A         whoops/oopsie.c\n"
"\n"
"$ svn revert mistake.txt whoops\n"
"Reverted mistake.txt\n"
"Reverted whoops\n"
"\n"
"$ svn status\n"
"?      mistake.txt\n"
"?      whoops"

#. Tag: para
#: ch09-reference.xml:2867
#, no-c-format
msgid "<command>svn revert</command> is inherently dangerous, since its entire purpose is to throw away data&mdash;namely, your uncommitted changes. Once you've reverted, Subversion provides <emphasis>no way</emphasis> to get back those uncommitted changes."
msgstr ""

#. Tag: para
#: ch09-reference.xml:2874
#, no-c-format
msgid "If you provide no targets to <command>svn revert</command>, it will do nothing&mdash;to protect you from accidentally losing changes in your working copy, <command>svn revert</command> requires you to provide at least one target."
msgstr "<command>svn revert</command> の対象を指定しなければ、それは何もしません&mdash; 間違った修正の破棄から作業コピーを守るために、<command>svn revert</command> 操作は 少なくとも一つの引数を指定するように求めます。"

#. Tag: tertiary
#: ch09-reference.xml:2889
#, fuzzy, no-c-format
msgid "status"
msgstr "Status"

#. Tag: refpurpose
#: ch09-reference.xml:2894
#, no-c-format
msgid "Print the status of working copy files and directories."
msgstr "作業コピーにあるファイルやディレクトリの状態を表示しす。"

#. Tag: programlisting
#: ch09-reference.xml:2898
#, no-c-format
msgid "svn status [PATH...]"
msgstr "svn status [PATH...]"

#. Tag: para
#: ch09-reference.xml:2903
#, fuzzy, no-c-format
msgid "Print the status of working copy files and directories. With no arguments, it prints only locally modified items (no repository access). With <option>--show-updates</option>, it adds working revision and server out-of-date information. With <option>--verbose</option>, it prints full revision information on every item."
msgstr "作業コピーにあるファイルやディレクトリの状態を表示します。 引数がない場合は、ローカルで修正されたアイテムだけが表示されます(リポジトリに 対するアクセスは発生しません <option>--show-updates</option>を使うと、作業リビジョンと、 サーバの最新ではない情報も追加されます。 <option>--verbose</option>を使うと、すべてのアイテムに対する 完全なリビジョン情報を表示します。"

#. Tag: para
#: ch09-reference.xml:2911
#, no-c-format
msgid "The first six columns in the output are each one character wide, and each column gives you information about different aspects of each working copy item."
msgstr "出力の最初の6列のコラムはそれぞれ一文字幅で、作業コピーアイテムごとに いろいろな情報を表示します。"

#. Tag: para
#: ch09-reference.xml:2915
#, no-c-format
msgid "The first column indicates that an item was added, deleted, or otherwise changed."
msgstr "最初のコラムは、アイテムが追加、削除、それ以外の変更、のどの状態かを を示します。"

#. Tag: term
#: ch09-reference.xml:2921
#: ch09-reference.xml:3016
#: ch09-reference.xml:3048
#: ch09-reference.xml:3069
#: ch09-reference.xml:3091
#: ch09-reference.xml:3111
#: ch09-reference.xml:3170
#, no-c-format
msgid "<term>' '</term>"
msgstr "<term>' '</term>"

#. Tag: para
#: ch09-reference.xml:2923
#: ch09-reference.xml:3018
#, no-c-format
msgid "No modifications."
msgstr "変更はありません。"

#. Tag: term
#: ch09-reference.xml:2928
#, no-c-format
msgid "<term>'A'</term>"
msgstr "<term>'A'</term>"

#. Tag: para
#: ch09-reference.xml:2930
#, no-c-format
msgid "Item is scheduled for Addition."
msgstr "アイテムは追加予告されています。"

#. Tag: term
#: ch09-reference.xml:2935
#, no-c-format
msgid "<term>'D'</term>"
msgstr "<term>'D'</term>"

#. Tag: para
#: ch09-reference.xml:2937
#, no-c-format
msgid "Item is scheduled for Deletion."
msgstr "アイテムは削除予告されています。"

#. Tag: term
#: ch09-reference.xml:2942
#: ch09-reference.xml:3023
#, no-c-format
msgid "<term>'M'</term>"
msgstr "<term>'M'</term>"

#. Tag: para
#: ch09-reference.xml:2944
#, no-c-format
msgid "Item has been modified."
msgstr "アイテムは修正されました。"

#. Tag: term
#: ch09-reference.xml:2949
#, no-c-format
msgid "<term>'R'</term>"
msgstr "<term>'R'</term>"

#. Tag: para
#: ch09-reference.xml:2951
#, no-c-format
msgid "Item has been replaced in your working copy. This means the file was scheduled for deletion, and then a new file with the same name was scheduled for addition in its place."
msgstr "アイテムは作業コピー中で置き換えられました。"

#. Tag: term
#: ch09-reference.xml:2959
#: ch09-reference.xml:3031
#, no-c-format
msgid "<term>'C'</term>"
msgstr "<term>'C'</term>"

#. Tag: para
#: ch09-reference.xml:2961
#, no-c-format
msgid "The contents (as opposed to the properties) of the item conflict with updates received from the repository."
msgstr "(属性ではなく)アイテムの内容はリポジトリから 受け取った更新によって衝突した状態にあります。"

#. Tag: term
#: ch09-reference.xml:2968
#, no-c-format
msgid "<term>'X'</term>"
msgstr "<term>'X'</term>"

#. Tag: para
#: ch09-reference.xml:2970
#, fuzzy, no-c-format
msgid "Item is present because of an externals definition."
msgstr "アイテムは何かの外部定義に関係しています。"

#. Tag: term
#: ch09-reference.xml:2975
#, no-c-format
msgid "<term>'I'</term>"
msgstr "<term>'I'</term>"

#. Tag: para
#: ch09-reference.xml:2977
#, no-c-format
msgid "Item is being ignored (e.g. with the <literal>svn:ignore</literal> property)."
msgstr "アイテムは無視されている属性です (たとえば、 <literal>svn:ignore</literal>のような)"

#. Tag: term
#: ch09-reference.xml:2983
#, no-c-format
msgid "<term>'?'</term>"
msgstr "<term>'?'</term>"

#. Tag: para
#: ch09-reference.xml:2985
#, no-c-format
msgid "Item is not under version control."
msgstr "アイテムはバージョン管理下にありません。"

#. Tag: term
#: ch09-reference.xml:2990
#, no-c-format
msgid "<term>'!'</term>"
msgstr "<term>'!'</term>"

#. Tag: para
#: ch09-reference.xml:2992
#, no-c-format
msgid "Item is missing (e.g. you moved or deleted it without using <command>svn</command>). This also indicates that a directory is incomplete (a checkout or update was interrupted)."
msgstr "アイテムは失われました(これはたとえば、 <command>svn</command>を使わずにファイルを削除したり移動した場合に 起こります)。また、これはディレクトリが不完全であることを示しています (チェックアウトや更新が中断された、など)。"

#. Tag: term
#: ch09-reference.xml:3000
#, no-c-format
msgid "<term>'~'</term>"
msgstr "<term>'‾'</term>"

#. Tag: para
#: ch09-reference.xml:3002
#, no-c-format
msgid "Item is versioned as one kind of object (file, directory, link), but has been replaced by different kind of object."
msgstr "アイテムはある種類のオブジェクト (ファイル、ディレクトリ、リンク)としてバージョン管理されていますが、 別の種類のオブジェクトで置き換えられてしまいました。"

#. Tag: para
#: ch09-reference.xml:3010
#, no-c-format
msgid "The second column tells the status of a file's or directory's properties."
msgstr "二番目のコラムはファイルやディレクトリの 属性の状態を示します。"

#. Tag: para
#: ch09-reference.xml:3025
#, no-c-format
msgid "Properties for this item have been modified."
msgstr "このアイテムの属性は修正されました。"

#. Tag: para
#: ch09-reference.xml:3033
#, no-c-format
msgid "Properties for this item are in conflict with property updates received from the repository."
msgstr "このアイテムの属性はリポジトリから受け取った属性更新によって 衝突した状態にあります。"

#. Tag: para
#: ch09-reference.xml:3041
#, fuzzy, no-c-format
msgid "The third column is populated only if the working copy directory is locked. (See <xref linkend=\"svn.tour.cleanup\"/>.)"
msgstr "三番目のコラムは作業コピーがロックされている場合にだけ使われます。"

#. Tag: para
#: ch09-reference.xml:3050
#, no-c-format
msgid "Item is not locked."
msgstr "アイテムはロックされていません。"

#. Tag: term
#: ch09-reference.xml:3055
#, no-c-format
msgid "<term>'L'</term>"
msgstr "<term>'L'</term>"

#. Tag: para
#: ch09-reference.xml:3057
#, no-c-format
msgid "Item is locked."
msgstr "アイテムはロックされています。"

#. Tag: para
#: ch09-reference.xml:3063
#, no-c-format
msgid "The fourth column is populated only if the item is scheduled for addition-with-history."
msgstr "四番目のコラムはアイテムが追加予告されている場合にのみ 使われます。"

#. Tag: para
#: ch09-reference.xml:3071
#, no-c-format
msgid "No history scheduled with commit."
msgstr "コミット待ちの予告はありません。"

#. Tag: term
#: ch09-reference.xml:3076
#, no-c-format
msgid "<term>'+'</term>"
msgstr "<term>'+'</term>"

#. Tag: para
#: ch09-reference.xml:3078
#, no-c-format
msgid "History scheduled with commit."
msgstr "コミット待ちの予告があります。"

#. Tag: para
#: ch09-reference.xml:3084
#, no-c-format
msgid "The fifth column is populated only if the item is switched relative to its parent (see <xref linkend=\"svn.branchmerge.switchwc\"/>)."
msgstr "五番目のコラムはアイテムが親に対して相対的に切り替えられた ときにだけ使われます。 (<xref linkend=\"svn.branchmerge.switchwc\"/>を見てください)。"

#. Tag: para
#: ch09-reference.xml:3093
#, no-c-format
msgid "Item is a child of its parent directory."
msgstr "アイテムは親ディレクトリの子供です。"

#. Tag: term
#: ch09-reference.xml:3098
#, no-c-format
msgid "<term>'S'</term>"
msgstr "<term>'S'</term>"

#. Tag: para
#: ch09-reference.xml:3100
#, no-c-format
msgid "Item is switched."
msgstr "アイテムは切り替わっています。"

#. Tag: para
#: ch09-reference.xml:3106
#, no-c-format
msgid "The sixth column is populated with lock information."
msgstr "六番目のコラムにはロック情報が表示されます。"

#. Tag: para
#: ch09-reference.xml:3113
#, no-c-format
msgid "When <option>--show-updates</option> is used, the file is not locked. If <option>--show-updates</option> is <emphasis>not</emphasis> used, this merely means that the file is not locked in this working copy."
msgstr "<option>--show-updates</option>が指定された場合ファイルはロックされて いません。<option>--show-updates</option>が指定 <emphasis>されない</emphasis> 場合、これは単にこの作業コピー中でファイルがロックされていないことを示すだけです。"

#. Tag: term
#: ch09-reference.xml:3122
#, no-c-format
msgid "<term>K</term>"
msgstr "<term>K</term>"

#. Tag: para
#: ch09-reference.xml:3124
#, no-c-format
msgid "File is locked in this working copy."
msgstr "ファイルはこの作業コピー中でロックされています。"

#. Tag: term
#: ch09-reference.xml:3129
#, no-c-format
msgid "<term>O</term>"
msgstr "<term>O</term>"

#. Tag: para
#: ch09-reference.xml:3131
#, no-c-format
msgid "File is locked either by another user or in another working copy. This only appears when <option>--show-updates</option> is used."
msgstr "ファイルは他のユーザあるいは他の作業コピーによってロックされています。 これは<option>--show-updates</option>が指定された場合にだけ現れます。"

#. Tag: term
#: ch09-reference.xml:3138
#, no-c-format
msgid "<term>T</term>"
msgstr "<term>T</term>"

#. Tag: para
#: ch09-reference.xml:3140
#, fuzzy, no-c-format
msgid "File was locked in this working copy, but the lock has been <quote>stolen</quote> and is invalid. The file is currently locked in the repository. This only appears when <option>--show-updates</option> is used."
msgstr "ファイルはこの作業コピー中でロックされていましたが、それは <quote>横取りされ</quote>、無効となりました。このファイルは現在 リポジトリ中でロックされています。これは <option>--show-updates</option> が指定された時だけ現れます。"

#. Tag: term
#: ch09-reference.xml:3149
#, no-c-format
msgid "<term>B</term>"
msgstr "<term>B</term>"

#. Tag: para
#: ch09-reference.xml:3151
#, fuzzy, no-c-format
msgid "File was locked in this working copy, but the lock has been <quote>broken</quote> and is invalid. The file is no longer locked This only appears when <option>--show-updates</option> is used."
msgstr "ファイルはこの作業コピーでロックされていましたが、それは <quote>破壊され</quote>て無効となりました。このファイルはもうロック状態には ありません。<option>--show-updates</option>が指定された時だけ現れます。"

#. Tag: para
#: ch09-reference.xml:3163
#, fuzzy, no-c-format
msgid "The out-of-date information appears in the seventh column (only if you pass the <option>--show-updates</option> option)."
msgstr "最新状態に関係した情報が7番目のコラムに表示されます (<option>--show-updates</option> スイッチを渡した場合)。"

#. Tag: para
#: ch09-reference.xml:3172
#, no-c-format
msgid "The item in your working copy is up-to-date."
msgstr "作業コピーのアイテムは最新です。"

#. Tag: term
#: ch09-reference.xml:3177
#, no-c-format
msgid "<term>'*'</term>"
msgstr "<term>'*'</term>"

#. Tag: para
#: ch09-reference.xml:3179
#, no-c-format
msgid "A newer revision of the item exists on the server."
msgstr "サーバにはアイテムのもっと新しいバージョンが 存在します。"

#. Tag: para
#: ch09-reference.xml:3186
#, fuzzy, no-c-format
msgid "The remaining fields are variable width and delimited by spaces. The working revision is the next field if the <option>--show-updates</option> or <option>--verbose</option> options are passed."
msgstr "残りのフィールドは空白で区切られた可変長です。 <option>--show-updates</option> か<option>--verbose</option> を指定した場合は作業リビジョンが次のフィールドになります。"

#. Tag: para
#: ch09-reference.xml:3191
#, fuzzy, no-c-format
msgid "If the <option>--verbose</option> option is passed, the last committed revision and last committed author are displayed next."
msgstr "<option>--verbose</option> スイッチを指定すると最後のコミットリビジョン とそれをした人が次に表示されます。"

#. Tag: para
#: ch09-reference.xml:3195
#, no-c-format
msgid "The working copy path is always the final field, so it can include spaces."
msgstr "作業コピーのパスは常に最後のフィールドになるので、空白を含むことが できます。"

#. Tag: para
#: ch09-reference.xml:3202
#, no-c-format
msgid "stat, st"
msgstr "stat, st"

#. Tag: para
#: ch09-reference.xml:3212
#, no-c-format
msgid "Only if using <option>--show-updates</option>"
msgstr "<option>--show-updates</option>が指定された場合に のみ発生する"

#. Tag: screen
#: ch09-reference.xml:3218
#, fuzzy, no-c-format
msgid ""
"--show-updates (-u)\n"
"--verbose (-v)\n"
"--non-recursive (-N)\n"
"--quiet (-q)\n"
"--no-ignore\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR\n"
"--ignore-externals"
msgstr ""
"--show-updates (-u)\n"
"--verbose (-v)\n"
"--non-recursive (-N)\n"
"--quiet (-q)\n"
"--no-ignore\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR\n"
"--ignore-externals"

#. Tag: para
#: ch09-reference.xml:3224
#, no-c-format
msgid "This is the easiest way to find out what changes you have made to your working copy:"
msgstr "作業コピーにした変更点を調べるための一番簡単な方法:"

#. Tag: screen
#: ch09-reference.xml:3227
#, no-c-format
msgid ""
"$ svn status wc\n"
" M     wc/bar.c\n"
"A  +   wc/qax.c"
msgstr ""
"$ svn status wc\n"
" M     wc/bar.c\n"
"A  +   wc/qax.c"

#. Tag: para
#: ch09-reference.xml:3229
#, fuzzy, no-c-format
msgid "If you want to find out what files in your working copy are out-of-date, pass the <option>--show-updates</option> option (this will <emphasis>not</emphasis> make any changes to your working copy). Here you can see that <filename>wc/foo.c</filename> has changed in the repository since we last updated our working copy:"
msgstr "作業コピー中、どのファイルが最新でないかを知りたい場合 は<option>--show-updates</option> スイッチを指定してください(これは 作業コピーの内容を<emphasis>決して</emphasis>変更しません)。 最後に自分の作業コピーを更新してからリポジトリの<filename>wc/foo.c</filename> に変更があったときには 次のようになります:"

#. Tag: screen
#: ch09-reference.xml:3238
#, no-c-format
msgid ""
"$ svn status --show-updates wc\n"
" M           965    wc/bar.c\n"
"       *     965    wc/foo.c\n"
"A  +         965    wc/qax.c\n"
"Status against revision:    981"
msgstr ""
"$ svn status --show-updates wc\n"
" M           965    wc/bar.c\n"
"       *     965    wc/foo.c\n"
"A  +         965    wc/qax.c\n"
"Status against revision:    981"

#. Tag: para
#: ch09-reference.xml:3241
#, fuzzy, no-c-format
msgid "<option>--show-updates</option> <emphasis>only</emphasis> places an asterisk next to items that are out of date (that is, items that will be updated from the repository if you run <command>svn update</command>). <option>--show-updates</option> does <emphasis>not</emphasis> cause the status listing to reflect the repository's version of the item (although you can see the revision number in the repository by passing the <option>--verbose</option> option)."
msgstr "<option>--show-updates</option>は、 最新ではないアイテムの隣にアスタリスクを置く<emphasis>だけ</emphasis> です(つまり、<command>svn update</command>を実行したとすればリポジトリから の情報で更新されるであろうアイテムの前にのみ、という意味です)。 <option>--show-updates</option> は、アイテムのリポジトリバージョンを反映 した状態一覧を表示するわけでは<emphasis>ありません</emphasis>。"

#. Tag: para
#: ch09-reference.xml:3252
#, no-c-format
msgid "And finally, the most information you can get out of the status subcommand:"
msgstr "最後に、statusサブコマンドで一番たくさんの情報を得るには:"

#. Tag: screen
#: ch09-reference.xml:3255
#, no-c-format
msgid ""
"$ svn status --show-updates --verbose wc\n"
" M           965       938 sally        wc/bar.c\n"
"       *     965       922 harry        wc/foo.c\n"
"A  +         965       687 harry        wc/qax.c\n"
"             965       687 harry        wc/zig.c\n"
"Head revision:   981"
msgstr ""
"$ svn status --show-updates --verbose wc\n"
" M           965       938 sally        wc/bar.c\n"
"       *     965       922 harry        wc/foo.c\n"
"A  +         965       687 harry        wc/qax.c\n"
"             965       687 harry        wc/zig.c\n"
"Head revision:   981"

#. Tag: para
#: ch09-reference.xml:3257
#, no-c-format
msgid "For many more examples of <command>svn status</command>, see <xref linkend=\"svn.tour.cycle.examine.status\"/>."
msgstr "<command>svn status</command> のもっとたくさんの例は <xref linkend=\"svn.tour.cycle.examine.status\"/>にあります。"

#. Tag: tertiary
#: ch09-reference.xml:3268
#, no-c-format
msgid "switch"
msgstr "switch"

#. Tag: refname
#: ch09-reference.xml:3272
#, no-c-format
msgid "svn switch"
msgstr "svn switch"

#. Tag: refpurpose
#: ch09-reference.xml:3273
#, no-c-format
msgid "Update working copy to a different URL."
msgstr "作業コピーを別のURLに更新します。"

#. Tag: programlisting
#: ch09-reference.xml:3277
#, no-c-format
msgid "svn switch URL [PATH]"
msgstr "svn switch URL [PATH]"

#. Tag: programlisting
#: ch09-reference.xml:3279
#, no-c-format
msgid "switch --relocate FROM TO [PATH...]"
msgstr "switch --relocate FROM TO [PATH...]"

#. Tag: para
#: ch09-reference.xml:3286
#, fuzzy, no-c-format
msgid "The first variant of this subcommand (without the <option>--relocate</option> option) updates your working copy to point to a new URL&mdash;usually a URL which shares a common ancestor with your working copy, although not necessarily. This is the Subversion way to move a working copy to a new branch. See <xref linkend=\"svn.branchmerge.switchwc\"/> for an in-depth look at switching."
msgstr "このサブコマンドは自分の作業コピーを新しいURLに更新し、 複製を作ります。&mdash;そうする必要はありませんが、普通は そのURLは元になる作業コピーと共通の祖先を持ちます。 これがSubversionで作業コピーを別のブランチに移動させる方法 です。 <xref linkend=\"svn.branchmerge.switchwc\"/> により詳しい説明があります。"

#. Tag: para
#: ch09-reference.xml:3295
#, no-c-format
msgid "The <option>--relocate</option> option causes <command>svn switch</command> to do something different: it updates your working copy to point to <emphasis>the same</emphasis> repository directory, only at a different URL (typically because an administrator has moved the repository to another server, or to another URL on the same server)."
msgstr ""

#. Tag: para
#: ch09-reference.xml:3308
#, no-c-format
msgid "<para>sw</para>"
msgstr "<para>sw</para>"

#. Tag: screen
#: ch09-reference.xml:3324
#, fuzzy, no-c-format
msgid ""
"--revision (-r) REV\n"
"--non-recursive (-N)\n"
"--quiet (-q)\n"
"--diff3-cmd CMD\n"
"--relocate FROM TO\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"
msgstr ""
"--revision (-r) REV\n"
"--non-recursive (-N)\n"
"--quiet (-q)\n"
"--diff3-cmd CMD\n"
"--relocate\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR"

#. Tag: para
#: ch09-reference.xml:3330
#, fuzzy, no-c-format
msgid "If you're currently inside the directory <filename>vendors</filename>, which was branched to <filename>vendors-with-fix</filename>, and you'd like to switch your working copy to that branch:"
msgstr "いま<filename>vendors-with-fix</filename>から分岐した <filename>vendors</filename>というディレクトリの 内部にいて、そのブランチの作業コピーに移りたいときには:"

#. Tag: screen
#: ch09-reference.xml:3335
#, no-c-format
msgid ""
"$ svn switch http://svn.red-bean.com/repos/branches/vendors-with-fix .\n"
"U  myproj/foo.txt\n"
"U  myproj/bar.txt\n"
"U  myproj/baz.c\n"
"U  myproj/qux.c\n"
"Updated to revision 31."
msgstr ""
"$ svn switch http://svn.red-bean.com/repos/branches/vendors-with-fix .\n"
"U  myproj/foo.txt\n"
"U  myproj/bar.txt\n"
"U  myproj/baz.c\n"
"U  myproj/qux.c\n"
"Updated to revision 31."

#. Tag: para
#: ch09-reference.xml:3337
#, no-c-format
msgid "And to switch back, just provide the URL to the location in the repository from which you originally checked out your working copy:"
msgstr "そして、元に戻りたいときには、最初に作業コピーをチェックアウトした リポジトリの場所をURLとして指定するだけです:"

#. Tag: screen
#: ch09-reference.xml:3341
#, no-c-format
msgid ""
"$ svn switch http://svn.red-bean.com/repos/trunk/vendors .\n"
"U  myproj/foo.txt\n"
"U  myproj/bar.txt\n"
"U  myproj/baz.c\n"
"U  myproj/qux.c\n"
"Updated to revision 31."
msgstr ""
"$ svn switch http://svn.red-bean.com/repos/trunk/vendors .\n"
"U  myproj/foo.txt\n"
"U  myproj/bar.txt\n"
"U  myproj/baz.c\n"
"U  myproj/qux.c\n"
"Updated to revision 31."

#. Tag: para
#: ch09-reference.xml:3344
#, no-c-format
msgid "You can just switch part of your working copy to a branch if you don't want to switch your entire working copy."
msgstr "作業コピー全体を切り替えたくない場合、その一部だけをブランチに 切り替えることもできます。"

#. Tag: para
#: ch09-reference.xml:3349
#, fuzzy, no-c-format
msgid "Sometimes an administrator might change the <quote>base location</quote> of your repository&mdash;in other words, the contents of the repository doesn't change, but the main URL used to reach the root of the repository does. For example, the hostname may change, the URL scheme may change, or any part of the URL which leads to the repository itself may change. Rather than check out a new working copy, you can have the <command>svn switch</command> command <quote>rewrite</quote> the beginnings of all the URLs in your working copy. Use the <option>--relocate</option> option to do the substitution. No file contents are changed, nor is the repository contacted. It's similar to running a Perl script over your working copy <filename>.svn/</filename> directories which runs <command>s/OldRoot/NewRoot/</command>."
msgstr "管理者はときどき、リポジトリの <quote>格納場所</quote> を変更したい と思うこともあります &mdash; 言い換えると、リポジトリの内容に変更はな くても、リポジトリの根元のディレクトリにアクセスするための URL を変え たいと思うことがあります。例えばホスト名が変更されたり、URLスキーマが 変更されたり、リポジトリパスURLの先頭部分のどこかが変更されるような場合もあるでしょう。 新しい作業コピーをチェックアウトするよりも、<command>svn switch</command>を使って作業コピーの中に記録されているすべての URL の 先頭部分を一括して <quote>書き換えて</quote> やるほうが良いでしょう。この置換には <option>--relocate</option>オプションを使ってください。ファイルには一切 修正を加えませんし、このコマンドでリポジトリにアクセスすることもありま せん。これは、Perl のスクリプトなどを使って、作業コピーの <filename>.svn/</filename>配下に対して <command>s/OldRoot/NewRoot/</command>コマンドを実行するのに似ています。"

#. Tag: screen
#: ch09-reference.xml:3365
#, no-c-format
msgid ""
"$ svn checkout file:///tmp/repos test\n"
"A  test/a\n"
"A  test/b\n"
"&hellip;\n"
"\n"
"$ mv repos newlocation\n"
"$ cd test/\n"
"\n"
"$ svn update\n"
"svn: Unable to open an ra_local session to URL\n"
"svn: Unable to open repository 'file:///tmp/repos'\n"
"\n"
"$ svn switch --relocate file:///tmp/repos file:///tmp/newlocation .\n"
"$ svn update\n"
"At revision 3."
msgstr ""
"$ svn checkout file:///tmp/repos test\n"
"A  test/a\n"
"A  test/b\n"
"&hellip;\n"
"\n"
"$ mv repos newlocation\n"
"$ cd test/\n"
"\n"
"$ svn update\n"
"svn: Unable to open an ra_local session to URL\n"
"svn: Unable to open repository 'file:///tmp/repos'\n"
"\n"
"$ svn switch --relocate file:///tmp/repos file:///tmp/newlocation .\n"
"$ svn update\n"
"At revision 3."

#. Tag: para
#: ch09-reference.xml:3368
#, no-c-format
msgid "Be careful when using the <option>--relocate</option> option. If you mistype the argument, you might end up creating nonsensical URLs within your working copy that render the whole workspace unusable and tricky to fix. It's also important to understand exactly when one should or shouldn't use <option>--relocate</option>. Here's the rule of thumb:"
msgstr "<option>--relocate</option>オプションの利用には注意してください。 引数を間違って入力すると作業コピー中に意味のない URL 情報ができて しまい、作業コピー全体が利用不能になり、修復にはちょっとしたコツが 必要になってしまいます。また <option>--relocate</option> を 利用すべきか、すべきでないかをはっきりと完全に理解していることも 重要です。以下が原則です:"

#. Tag: para
#: ch09-reference.xml:3378
#, no-c-format
msgid "If the working copy needs to reflect a new directory <emphasis>within</emphasis> the repository, then use just <command>svn switch</command>."
msgstr "作業コピーがリポジトリの <emphasis>中にある</emphasis>新しいディレクトリ に移る場合には、単に<command>svn switch</command>を使う。"

#. Tag: para
#: ch09-reference.xml:3383
#, no-c-format
msgid "If the working copy still reflects the same repository directory, but the location of the repository itself has changed, then use <command>svn switch --relocate</command>."
msgstr "作業コピーは同じリポジトリのディレクトリを指しているが、リポジトリ自身の 場所が移った場合には <command>svn switch --relocate</command>を使う。"

#. Tag: tertiary
#: ch09-reference.xml:3399
#, no-c-format
msgid "unlock"
msgstr "unlock"

#. Tag: refname
#: ch09-reference.xml:3403
#, no-c-format
msgid "svn unlock"
msgstr "svn unlock"

#. Tag: refpurpose
#: ch09-reference.xml:3404
#, no-c-format
msgid "Unlock working copy paths or URLs."
msgstr "作業コピーパスまたは URL をアンロックします"

#. Tag: programlisting
#: ch09-reference.xml:3408
#, no-c-format
msgid "svn unlock TARGET..."
msgstr "svn unlock TARGET..."

#. Tag: para
#: ch09-reference.xml:3413
#, no-c-format
msgid "Unlock each <replaceable>TARGET</replaceable>. If any <replaceable>TARGET</replaceable> is either locked by another user or no valid lock token exists in the working copy, print a warning and continue unlocking the rest of the <replaceable>TARGET</replaceable>s. Use <option>--force</option> to break a lock belonging to another user or working copy."
msgstr "<replaceable>TARGET</replaceable>それぞれをアンロックします。 <replaceable>TARGET</replaceable>のどれかが他のユーザによってロックされて いたり作業コピー中に正常なロックトークンが存在しない場合は警告を出して 残りの <replaceable>TARGET</replaceable>のアンロックを続けます。 他のユーザまたは作業コピーに属するロックを破壊するには <option>--force</option> を使ってください。"

#. Tag: screen
#: ch09-reference.xml:3441
#, no-c-format
msgid ""
"--targets FILENAME\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR\n"
"--force"
msgstr ""
"--targets FILENAME\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR\n"
"--force"

#. Tag: para
#: ch09-reference.xml:3447
#, no-c-format
msgid "Unlock two files in your working copy:"
msgstr "作業コピー中の二つのファイルをアンロックする:"

#. Tag: screen
#: ch09-reference.xml:3449
#, no-c-format
msgid ""
"$ svn unlock tree.jpg house.jpg\n"
"'tree.jpg' unlocked.\n"
"'house.jpg' unlocked."
msgstr ""
"$ svn unlock tree.jpg house.jpg\n"
"'tree.jpg' unlocked.\n"
"'house.jpg' unlocked."

#. Tag: para
#: ch09-reference.xml:3451
#, no-c-format
msgid "Unlock a file in your working copy that is currently locked by another user:"
msgstr "現在別のユーザによってロックされている作業コピー中のファイル をアンロックする:"

#. Tag: screen
#: ch09-reference.xml:3454
#, no-c-format
msgid ""
"$ svn unlock tree.jpg\n"
"svn: 'tree.jpg' is not locked in this working copy\n"
"$ svn unlock --force tree.jpg\n"
"'tree.jpg' unlocked."
msgstr ""
"$ svn unlock tree.jpg\n"
"svn: 'tree.jpg' is not locked in this working copy\n"
"$ svn unlock --force tree.jpg\n"
"'tree.jpg' unlocked."

#. Tag: para
#: ch09-reference.xml:3456
#, no-c-format
msgid "Unlock a file without a working copy:"
msgstr "作業コピーには無関係にファイルをアンロックする:"

#. Tag: screen
#: ch09-reference.xml:3458
#, no-c-format
msgid ""
"$ svn unlock http://svn.red-bean.com/repos/test/tree.jpg\n"
"'tree.jpg unlocked."
msgstr ""
"$ svn unlock http://svn.red-bean.com/repos/test/tree.jpg\n"
"'tree.jpg unlocked."

#. Tag: tertiary
#: ch09-reference.xml:3472
#, no-c-format
msgid "update"
msgstr "update"

#. Tag: refpurpose
#: ch09-reference.xml:3477
#, no-c-format
msgid "Update your working copy."
msgstr "作業コピーの更新。"

#. Tag: programlisting
#: ch09-reference.xml:3481
#, no-c-format
msgid "svn update [PATH...]"
msgstr "svn update [PATH...]"

#. Tag: para
#: ch09-reference.xml:3486
#, fuzzy, no-c-format
msgid "<command>svn update</command> brings changes from the repository into your working copy. If no revision is given, it brings your working copy up-to-date with the <literal>HEAD</literal> revision. Otherwise, it synchronizes the working copy to the revision given by the <option>--revision</option> option. As part of the synchronization, <command>svn update</command> also removes any stale locks (see <xref linkend=\"svn.tour.cleanup\"/>) found in the working copy."
msgstr "<command>svn update</command> は、リポジトリの修正を 作業コピーに反映します。リビジョンを指定しなければ、<literal>HEAD</literal>リビジョンの最新 の内容が反映されます。そうでなければ、<option>--revision</option> スイッチ で指定されたリビジョンに作業コピーを同期します。同期処理の一部として、 <command>svn update</command>は作業コピーに存在する未完了のロックを 取り除きます。"

#. Tag: para
#: ch09-reference.xml:3497
#, fuzzy, no-c-format
msgid "For each updated item, it prints a line that starts with a character reporting the action taken. These characters have the following meaning:"
msgstr "更新されるアイテムごとに、どのような動作を起こしたかを示す文字で始まる 行が表示されます。この文字は以下のような意味です:"

#. Tag: term
#: ch09-reference.xml:3504
#, no-c-format
msgid "<term>A</term>"
msgstr "<term>A</term>"

#. Tag: para
#: ch09-reference.xml:3506
#, no-c-format
msgid "Added"
msgstr "追加"

#. Tag: term
#: ch09-reference.xml:3511
#, no-c-format
msgid "<term>D</term>"
msgstr "<term>D</term>"

#. Tag: para
#: ch09-reference.xml:3513
#, no-c-format
msgid "Deleted"
msgstr "削除"

#. Tag: term
#: ch09-reference.xml:3518
#, no-c-format
msgid "<term>U</term>"
msgstr "<term>U</term>"

#. Tag: para
#: ch09-reference.xml:3520
#, no-c-format
msgid "Updated"
msgstr "更新"

#. Tag: term
#: ch09-reference.xml:3525
#, no-c-format
msgid "<term>C</term>"
msgstr "<term>C</term>"

#. Tag: para
#: ch09-reference.xml:3527
#, fuzzy, no-c-format
msgid "Conflicted"
msgstr "衝突"

#. Tag: term
#: ch09-reference.xml:3532
#, no-c-format
msgid "<term>G</term>"
msgstr "<term>G</term>"

#. Tag: para
#: ch09-reference.xml:3534
#, no-c-format
msgid "Merged"
msgstr "マージ"

#. Tag: para
#: ch09-reference.xml:3540
#, no-c-format
msgid "A character in the first column signifies an update to the actual file, while updates to the file's properties are shown in the second column."
msgstr "最初のコラムの文字は実際のファイルの更新を示しますが、 ファイルの属性の更新状況は二番目のコラムで示します。"

#. Tag: para
#: ch09-reference.xml:3547
#, no-c-format
msgid "<para>up</para>"
msgstr "<para>up</para>"

#. Tag: screen
#: ch09-reference.xml:3563
#, fuzzy, no-c-format
msgid ""
"--revision (-r) REV\n"
"--non-recursive (-N)\n"
"--quiet (-q)\n"
"--no-ignore\n"
"--incremental\n"
"--diff3-cmd CMD\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR\n"
"--ignore-externals"
msgstr ""
"--revision (-r) REV\n"
"--non-recursive (-N)\n"
"--quiet (-q)\n"
"--diff3-cmd CMD\n"
"--username USER\n"
"--password PASS\n"
"--no-auth-cache\n"
"--non-interactive\n"
"--config-dir DIR\n"
"--ignore-externals"

#. Tag: para
#: ch09-reference.xml:3569
#, no-c-format
msgid "Pick up repository changes that have happened since your last update:"
msgstr "最後の更新後に起きたリポジトリの修正を取り込みます:"

#. Tag: screen
#: ch09-reference.xml:3572
#, no-c-format
msgid ""
"$ svn update\n"
"A  newdir/toggle.c\n"
"A  newdir/disclose.c\n"
"A  newdir/launch.c\n"
"D  newdir/README\n"
"Updated to revision 32."
msgstr ""
"$ svn update\n"
"A  newdir/toggle.c\n"
"A  newdir/disclose.c\n"
"A  newdir/launch.c\n"
"D  newdir/README\n"
"Updated to revision 32."

#. Tag: para
#: ch09-reference.xml:3574
#, fuzzy, no-c-format
msgid "You can also <quote>update</quote> your working copy to an older revision (Subversion doesn't have the concept of <quote>sticky</quote> files like CVS does; see <xref linkend=\"svn.forcvs\"/>):"
msgstr "もっと古いリビジョンで作業コピーを更新することもできます。 (Subversion は CVS のような<quote>張り付き</quote> ファイル の概念を持ちません。 <xref linkend=\"svn.forcvs\"/>を見てください):"

#. Tag: screen
#: ch09-reference.xml:3579
#, no-c-format
msgid ""
"$ svn update -r30\n"
"A  newdir/README\n"
"D  newdir/toggle.c\n"
"D  newdir/disclose.c\n"
"D  newdir/launch.c\n"
"U  foo.c\n"
"Updated to revision 30."
msgstr ""
"$ svn update -r30\n"
"A  newdir/README\n"
"D  newdir/toggle.c\n"
"D  newdir/disclose.c\n"
"D  newdir/launch.c\n"
"U  foo.c\n"
"Updated to revision 30."

#. Tag: para
#: ch09-reference.xml:3582
#, fuzzy, no-c-format
msgid "If you want to examine an older revision of a single file, you may want to use <command>svn cat</command> instead&mdash;it won't change your working copy."
msgstr "一つのファイルの古いバージョンを調べたいときには <command>svn cat</command>を使いたくなるかも 知れません。"

#. Tag: command
#: ch09-reference.xml:3597
#, fuzzy, no-c-format
msgid "<command>svnadmin</command>"
msgstr "<command>svnadmin</command>スイッチ"

#. Tag: para
#: ch09-reference.xml:3599
#, no-c-format
msgid "<command>svnadmin</command> is the administrative tool for monitoring and repairing your Subversion repository. For detailed information, see <xref linkend=\"svn.reposadmin.maint.tk.svnadmin\"/>."
msgstr "<command>svnadmin</command> は Subversionリポジトリを監視したり修復したりするための管理ツールです。 詳しくは<xref linkend=\"svn.reposadmin.maint.tk.svnadmin\"/>を見てください。"

#. Tag: para
#: ch09-reference.xml:3604
#, no-c-format
msgid "Since <command>svnadmin</command> works via direct repository access (and thus can only be used on the machine that holds the repository), it refers to the repository with a path, not a URL."
msgstr "<command>svnadmin</command>は直接リポジトリに対するアクセスに より動作するので(そして、リポジトリが存在するマシン上でのみ利用することが できるので)、URLではなく、パス名によってリポジトリを参照します。"

#. Tag: title
#: ch09-reference.xml:3610
#, fuzzy, no-c-format
msgid "<command>svnadmin</command> Options"
msgstr "<command>svnadmin</command>スイッチ"

#. Tag: option
#: ch09-reference.xml:3615
#, no-c-format
msgid "--bdb-log-keep"
msgstr "--bdb-log-keep"

#. Tag: para
#: ch09-reference.xml:3617
#, no-c-format
msgid "(Berkeley DB specific) Disable automatic log removal of database log files. Having these log files around can be convenient if you need to restore from a catastrophic repository failure."
msgstr ""

#. Tag: option
#: ch09-reference.xml:3625
#, no-c-format
msgid "--bdb-txn-nosync"
msgstr "--bdb-txn-nosync"

#. Tag: para
#: ch09-reference.xml:3628
#, no-c-format
msgid "(Berkeley DB specific) Disables fsync when committing database transactions. Used with the <command>svnadmin create</command> command to create a Berkeley DB backed repository with <literal>DB_TXN_NOSYNC</literal> enabled (which improves speed but has some risks associated with it)."
msgstr ""

#. Tag: option
#: ch09-reference.xml:3638
#, no-c-format
msgid "--bypass-hooks"
msgstr "--bypass-hooks"

#. Tag: para
#: ch09-reference.xml:3640
#, no-c-format
msgid "Bypass the repository hook system."
msgstr "リポジトリフックシステムを迂回します。"

#. Tag: option
#: ch09-reference.xml:3645
#, no-c-format
msgid "<option>--clean-logs</option>"
msgstr "<option>--clean-logs</option>"

#. Tag: para
#: ch09-reference.xml:3647
#, no-c-format
msgid "Removes unused Berkeley DB logs."
msgstr "利用していないBerkeley DB ログを削除します。"

#. Tag: option
#: ch09-reference.xml:3654
#, no-c-format
msgid "--force-uuid"
msgstr "--force-uuid"

#. Tag: para
#: ch09-reference.xml:3656
#, fuzzy, no-c-format
msgid "By default, when loading data into repository that already contains revisions, <command>svnadmin</command> will ignore the <literal>UUID</literal> from the dump stream. This option will cause the repository's <literal>UUID</literal> to be set to the <literal>UUID</literal> from the stream."
msgstr "デフォルトではリポジトリに対して既に存在しているリビジョンを ロードする場合、<command>svnadmin</command>はダンプストリーム にある<literal>UUID</literal>を無視します。このスイッチは リポジトリの <literal>UUID</literal> をストリームからの <literal>UUID</literal> に設定します。"

#. Tag: option
#: ch09-reference.xml:3666
#, no-c-format
msgid "--ignore-uuid"
msgstr "--ignore-uuid"

#. Tag: para
#: ch09-reference.xml:3668
#, fuzzy, no-c-format
msgid "By default, when loading an empty repository, <command>svnadmin</command> will ignore the <literal>UUID</literal> from the dump stream. This option will force that UUID to be ignored (useful for overriding your configuration file if it has <option>--force-uuid</option> set)."
msgstr "デフォルトでは空のリポジトリをロードする場合<command>svnadmin</command> はダンプストリームからの <literal>UUID</literal>を利用します。 このスイッチはダンプストリームからの UUID を無視します。"

#. Tag: para
#: ch09-reference.xml:3680
#, no-c-format
msgid "Dump a revision only as a diff against the previous revision, instead of the usual fulltext."
msgstr "リビジョンの全体をダンプするのではなく、以前のリビジョンに対する差分として ダンプします。"

#. Tag: option
#: ch09-reference.xml:3687
#, no-c-format
msgid "--parent-dir <replaceable>DIR</replaceable>"
msgstr "--parent-dir <replaceable>DIR</replaceable>"

#. Tag: para
#: ch09-reference.xml:3690
#, no-c-format
msgid "When loading a dump file, root paths at <replaceable>DIR</replaceable> instead of <filename>/</filename>."
msgstr "ダンプファイルをロードするときルートパスとして<filename>/</filename> のかわりに<replaceable>DIR</replaceable>を使います。"

#. Tag: term
#: ch09-reference.xml:3697
#, no-c-format
msgid "<option>--revision</option> (<option>-r</option>) <replaceable>ARG</replaceable>"
msgstr "<option>--revision</option> (<option>-r</option>) <replaceable>ARG</replaceable>"

#. Tag: para
#: ch09-reference.xml:3700
#, no-c-format
msgid "Specify a particular revision to operate on."
msgstr "操作対象となる特定のリビジョンを指定します。"

#. Tag: option
#: ch09-reference.xml:3706
#, no-c-format
msgid "--quiet"
msgstr "--quiet"

#. Tag: para
#: ch09-reference.xml:3708
#, no-c-format
msgid "Do not show normal progress&mdash;show only errors."
msgstr "通常の進行状況を表示しません&mdash;エラーのみ表示します。"

#. Tag: option
#: ch09-reference.xml:3714
#, no-c-format
msgid "--use-post-commit-hook"
msgstr "--use-post-commit-hook"

#. Tag: para
#: ch09-reference.xml:3716
#, no-c-format
msgid "When loading a dump file, run the repository's post-commit hook after finalizing each newly loaded revision."
msgstr "ダンプファイルをロードする時、新規にロードされたそれぞれのリビジョンの完了 処理の後でリポジトリのpost-commitフックを実行します。"

#. Tag: option
#: ch09-reference.xml:3723
#, no-c-format
msgid "--use-pre-commit-hook"
msgstr "--use-pre-commit-hook"

#. Tag: para
#: ch09-reference.xml:3725
#, no-c-format
msgid "When loading a dump file, run the repository's pre-commit hook before finalizing each newly loaded revision. If the hook fails, abort the commit and terminate the load process."
msgstr "ダンプファイルをロードする時、新規にロードされたそれぞれのリビジョンの完了 処理の前にリポジトリのpre-commitフックを実行します。フック処理に失敗した 場合、コミットは中断されてロード処理は終了します。"

#. Tag: title
#: ch09-reference.xml:3737
#, no-c-format
msgid "<command>svnadmin</command> Subcommands"
msgstr "<command>svnadmin</command> サブコマンド"

#. Tag: primary
#: ch09-reference.xml:3741
#: ch09-reference.xml:3795
#: ch09-reference.xml:3832
#: ch09-reference.xml:3920
#: ch09-reference.xml:3953
#: ch09-reference.xml:4003
#: ch09-reference.xml:4036
#: ch09-reference.xml:4077
#: ch09-reference.xml:4124
#: ch09-reference.xml:4163
#: ch09-reference.xml:4199
#: ch09-reference.xml:4255
#: ch09-reference.xml:4297
#: ch09-reference.xml:4346
#: ch09-reference.xml:4403
#, no-c-format
msgid "<primary>svnadmin</primary>"
msgstr "<primary>svnadmin</primary>"

#. Tag: tertiary
#: ch09-reference.xml:3743
#, no-c-format
msgid "create"
msgstr "create"

#. Tag: refname
#: ch09-reference.xml:3747
#, no-c-format
msgid "svnadmin create"
msgstr "svnadmin create"

#. Tag: refpurpose
#: ch09-reference.xml:3748
#, no-c-format
msgid "Create a new, empty repository."
msgstr "新規の空のリポジトリを作ります。"

#. Tag: programlisting
#: ch09-reference.xml:3752
#, no-c-format
msgid "svnadmin create REPOS_PATH"
msgstr "svnadmin create REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:3757
#, no-c-format
msgid "Create a new, empty repository at the path provided. If the provided directory does not exist, it will be created for you.<footnote><para>Remember, <command>svnadmin</command> works only with local <emphasis>paths</emphasis>, not <emphasis>URLs</emphasis>.</para></footnote> As of Subversion 1.2, <command>svnadmin</command> creates new repositories with the <literal>fsfs</literal> filesystem backend by default."
msgstr "指定したパスに新規に空のリポジトリを作ります。 パスが存在しなければ自動的に作られます。 <footnote><para> <command>svnadmin</command> はローカル <emphasis>パス</emphasis>に対してのみ 動作し、<emphasis>URL</emphasis>には働かないことに注意 してください。</para></footnote> Subversion 1.2 では <command>svnadmin</command>はデフォルトで <literal>fsfs</literal>ファイルシステムのバックグラウンドで 新しいリポジトリを作成します。"

#. Tag: screen
#: ch09-reference.xml:3771
#, no-c-format
msgid ""
"--bdb-txn-nosync\n"
"--bdb-log-keep\n"
"--config-dir DIR\n"
"--fs-type TYPE"
msgstr ""
"--bdb-txn-nosync\n"
"--bdb-log-keep\n"
"--config-dir DIR\n"
"--fs-type TYPE"

#. Tag: para
#: ch09-reference.xml:3777
#, no-c-format
msgid "Creating a new repository is just this easy:"
msgstr "新しくリポジトリを作るには単に以下のようにします:"

#. Tag: screen
#: ch09-reference.xml:3779
#, no-c-format
msgid "$ svnadmin create /usr/local/svn/repos"
msgstr "$ svnadmin create /usr/local/svn/repos"

#. Tag: para
#: ch09-reference.xml:3781
#, no-c-format
msgid "In Subversion 1.0, a Berkeley DB repository is always created. In Subversion 1.1, a Berkeley DB repository is the default repository type, but an FSFS repository can be created using the <option>--fs-type</option> option:"
msgstr "Subversion 1.0 では Berkeley DB リポジトリが常に作られます。 Subversion 1.1 では Berkeley DB リポジトリがデフォルトですが <option>--fs-type</option>オプションで FSFS リポジトリを作る こともできます:"

#. Tag: screen
#: ch09-reference.xml:3787
#, no-c-format
msgid "$ svnadmin create /usr/local/svn/repos --fs-type fsfs"
msgstr "$ svnadmin create /usr/local/svn/repos --fs-type fsfs"

#. Tag: tertiary
#: ch09-reference.xml:3797
#, no-c-format
msgid "deltify"
msgstr "deltify"

#. Tag: refname
#: ch09-reference.xml:3801
#, no-c-format
msgid "svnadmin deltify"
msgstr "svnadmin deltify"

#. Tag: refpurpose
#: ch09-reference.xml:3802
#, no-c-format
msgid "Deltify changed paths in a revision range."
msgstr "あるリビジョン範囲にある変更パスを差分化します"

#. Tag: programlisting
#: ch09-reference.xml:3806
#, no-c-format
msgid "svnadmin deltify [-r LOWER[:UPPER]] REPOS_PATH"
msgstr "svnadmin deltify [-r LOWER[:UPPER]] REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:3811
#, fuzzy, no-c-format
msgid "<command>svnadmin deltify</command> exists in current versions of Subversion only for historical reasons. This command is deprecated and no longer needed."
msgstr "<command>svnadmin deltify</command> は歴史的な理由で 1.0.x のみに存在します。このコマンドは時代遅れであり、もう不 要です。"

#. Tag: para
#: ch09-reference.xml:3815
#, no-c-format
msgid "It dates from a time when Subversion offered administrators greater control over compression strategies in the repository. This turned out to be a lot of complexity for <emphasis>very</emphasis> little gain, and this <quote>feature</quote> was deprecated."
msgstr "これは Subversion がリポジトリ中の圧縮方法についてシス テム管理者に対してより大きな制御権限を与えるためのものでした。しかし <emphasis>非常に</emphasis>わずかな利益のために多くの複雑さを導入する ことになることがわかったため、この<quote>機能</quote>は廃止されました。"

#. Tag: screen
#: ch09-reference.xml:3825
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--quiet (-q)"
msgstr ""
"--revision (-r) REV\n"
"--quiet (-q)"

#. Tag: tertiary
#: ch09-reference.xml:3834
#, no-c-format
msgid "dump"
msgstr "dump"

#. Tag: refname
#: ch09-reference.xml:3838
#, no-c-format
msgid "svnadmin dump"
msgstr "svnadmin dump"

#. Tag: refpurpose
#: ch09-reference.xml:3839
#, no-c-format
msgid "Dump the contents of filesystem to stdout."
msgstr "ファイルシステムの内容を標準出力にダンプします。"

#. Tag: programlisting
#: ch09-reference.xml:3843
#, no-c-format
msgid "svnadmin dump REPOS_PATH [-r LOWER[:UPPER]] [--incremental]"
msgstr "svnadmin dump REPOS_PATH [-r LOWER[:UPPER]] [--incremental]"

#. Tag: para
#: ch09-reference.xml:3848
#, no-c-format
msgid "Dump the contents of filesystem to stdout in a <quote>dumpfile</quote> portable format, sending feedback to stderr. Dump revisions <replaceable>LOWER</replaceable> rev through <replaceable>UPPER</replaceable> rev. If no revisions are given, dump all revision trees. If only <replaceable>LOWER</replaceable> is given, dump that one revision tree. See <xref linkend=\"svn.reposadmin.maint.migrate\"/> for a practical use."
msgstr "ファイルシステムの内容を<quote>dumpfile</quote>可搬可能形式でダンプし、進行状況 を標準出力に表示します。 リビジョン <replaceable>LOWER</replaceable> から、 <replaceable>UPPER</replaceable>までをダンプします。リビジョンが指定 されなければすべてのリビジョンツリーをダンプします。 <replaceable>LOWER</replaceable>だけが 指定された場合は一つのリビジョンツリーのみダンプします。 実際の使い方については<xref linkend=\"svn.reposadmin.maint.migrate\"/> を見てください。"

#. Tag: para
#: ch09-reference.xml:3858
#, no-c-format
msgid "By default, the Subversion dumpfile stream contains a single revision (the first revision in the requested revision range) in which every file and directory in the repository in that revision is presented as if that whole tree was added at once, followed by other revisions (the remainder of the revisions in the requested range) which contain only the files and directories which were modified in those revisions. For a modified file, the complete fulltext representation of its contents, as well as all of its properties, are presented in the dumpfile; for a directory, all of its properties are presented."
msgstr "デフォルトでは、Subversion ダンプファイルの内容は 以下のようになります。まず要求されたリビジョン範囲の最初のリビジョン の内容が出力されます。ここにはそのリビジョンに含まれるすべてのファイルと ディレクトリが、すべて一度にリポジトリに追加されたかのような形式に なります。その後に、(要求されたリビジョン範囲内の)引き続くすべての リビジョンの内容が続きます。ここにはそれぞれのリビジョンで修正された ファイルとディレクトリの情報だけが含まれます。修正されたものがファイルの 場合には、そのファイルの完全な内容と、属性が出力されます。 ディレクトリの場合には、そのすべての属性が出力されます。"

#. Tag: para
#: ch09-reference.xml:3870
#, fuzzy, no-c-format
msgid "There are two useful options which modify the dumpfile generator's behavior. The first is the <option>--incremental</option> option, which simply causes that first revision in the dumpfile stream to contain only the files and directories modified in that revision, instead of being presented as the addition of a new tree, and in exactly the same way that every other revision in the dumpfile is presented. This is useful for generating a relatively small dumpfile to be loaded into another repository which already has the files and directories that exist in the original repository."
msgstr "ダンプファイル生成する際に有用な二つのオプションがあります。 一つ目は <option>--incremental</option> オプションで、これを指定すると ダンプファイル出力中の最初のリビジョンが、そのリビジョンを示す新しいツリー 全体ではなく、そのリビジョンで修正のあったファイルとディレクトリのみに なります。それ以降のリビジョンについてもまったく同様です。これは ダンプ元のリポジトリに存在しているファイルとディレクトリをすでに含んで いる別のリポジトリにロードするためのダンプファイルを生成する場合に便利です。"

#. Tag: para
#: ch09-reference.xml:3882
#, fuzzy, no-c-format
msgid "The second useful option is <option>--deltas</option>. This option causes <command>svnadmin dump</command> to, instead of emitting fulltext representations of file contents and property lists, emit only deltas of those items against their previous versions. This reduces (in some cases, drastically) the size of the dumpfile that <command>svnadmin dump</command> creates. There are, however, disadvantages to using this option&mdash;deltified dumpfiles are more CPU intensive to create, cannot be operated on by <command>svndumpfilter</command>, and tend not to compress as well as their non-deltified counterparts when using third-party tools like <command>gzip</command> and <command>bzip2</command>."
msgstr "もう一つの有用なオプションは <option>--deltas</option> です。 このスイッチは、ファイルの内容と属性についての完全なテキスト表現を出力 するかわりに、それぞれのリビジョンの直前のリビジョンとの差分だけを 出力するよう <command>svnadmin dump</command> に指示します。これは <command>svnadmin dump</command> が生成するダンプファイルのサイズを (場合によっては劇的に)減らします。欠点としてはこのオプション&mdash;差分化 ダンプファイルの指示&mdash;は生成にあたって CPU により大きな負荷が かかること、<command>svndumpfilter</command> によって処理できなくなって しまうこと、そして、サードパーティー製の<command>gzip</command> や <command>bzip2</command> を使う場合には、差分化しないものに対するほど圧縮されない傾向があること、 があります。"

#. Tag: screen
#: ch09-reference.xml:3899
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--incremental\n"
"--quiet (-q)\n"
"--deltas"
msgstr ""
"--revision (-r) REV\n"
"--incremental\n"
"--quiet (-q)\n"
"--deltas"

#. Tag: para
#: ch09-reference.xml:3905
#, no-c-format
msgid "Dump your whole repository:"
msgstr "リポジトリ全体のダンプ:"

#. Tag: screen
#: ch09-reference.xml:3907
#, no-c-format
msgid ""
"$ svnadmin dump /usr/local/svn/repos\n"
"SVN-fs-dump-format-version: 1\n"
"Revision-number: 0\n"
"* Dumped revision 0.\n"
"Prop-content-length: 56\n"
"Content-length: 56\n"
"&hellip;"
msgstr ""
"$ svnadmin dump /usr/local/svn/repos\n"
"SVN-fs-dump-format-version: 1\n"
"Revision-number: 0\n"
"* Dumped revision 0.\n"
"Prop-content-length: 56\n"
"Content-length: 56\n"
"&hellip;"

#. Tag: para
#: ch09-reference.xml:3909
#, no-c-format
msgid "Incrementally dump a single transaction from your repository:"
msgstr "リポジトリの一つのトランザクションの 差分ダンプ:"

#. Tag: screen
#: ch09-reference.xml:3912
#, no-c-format
msgid ""
"$ svnadmin dump /usr/local/svn/repos -r 21 --incremental \n"
"* Dumped revision 21.\n"
"SVN-fs-dump-format-version: 1\n"
"Revision-number: 21\n"
"Prop-content-length: 101\n"
"Content-length: 101\n"
"&hellip;"
msgstr ""
"$ svnadmin dump /usr/local/svn/repos -r 21 --incremental \n"
"* Dumped revision 21.\n"
"SVN-fs-dump-format-version: 1\n"
"Revision-number: 21\n"
"Prop-content-length: 101\n"
"Content-length: 101\n"
"&hellip;"

#. Tag: refname
#: ch09-reference.xml:3926
#, no-c-format
msgid "svnadmin help"
msgstr "svnadmin help"

#. Tag: programlisting
#: ch09-reference.xml:3930
#, no-c-format
msgid "svnadmin help [SUBCOMMAND...]"
msgstr "svnadmin help [SUBCOMMAND...]"

#. Tag: para
#: ch09-reference.xml:3936
#, no-c-format
msgid "This subcommand is useful when you're trapped on a desert island with neither a net connection nor a copy of this book."
msgstr "このサブコマンドはネットワーク接続がうまくいかなくなって この本のコピーが読めなくなったりしてどこかに迷い込んでしまった ようなときに役立ちます。"

#. Tag: tertiary
#: ch09-reference.xml:3955
#, no-c-format
msgid "hotcopy"
msgstr "hotcopy"

#. Tag: refname
#: ch09-reference.xml:3959
#, no-c-format
msgid "svnadmin hotcopy"
msgstr "svnadmin hotcopy"

#. Tag: refpurpose
#: ch09-reference.xml:3960
#, no-c-format
msgid "Make a hot copy of a repository."
msgstr "リポジトリのホットコピーを作ります。"

#. Tag: programlisting
#: ch09-reference.xml:3964
#, no-c-format
msgid "svnadmin hotcopy REPOS_PATH NEW_REPOS_PATH"
msgstr "svnadmin hotcopy REPOS_PATH NEW_REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:3970
#, fuzzy, no-c-format
msgid "This subcommand makes a full <quote>hot</quote> backup of your repository, including all hooks, configuration files, and, of course, database files. If you pass the <option>--clean-logs</option> option, <command>svnadmin</command> will perform a hotcopy of your repository, and then remove unused Berkeley DB logs from the original repository. You can run this command at any time and make a safe copy of the repository, regardless of whether other processes are using the repository."
msgstr "このサブコマンドはすべてのフック、設定ファイル、そしてもちろんデータベース ファイルを含む、リポジトリの完全な<quote>ホット</quote>バックアップを とります。 <option>--clean-logs</option>スイッチを渡すと<command>svnadmin</command> はリポジトリのホットコピー作成後、もとのリポジトリから利用していない Berkeley DB ログ を削除します。このコマンドは常に利用可能で、他のプロセスがリポジトリを利 用しているかどうかにかかわらずリポジトリのコピーを安全に作ることができ ます。"

#. Tag: screen
#: ch09-reference.xml:3985
#, no-c-format
msgid "<screen>--clean-logs</screen>"
msgstr "<screen>--clean-logs</screen>"

#. Tag: para
#: ch09-reference.xml:3988
#, no-c-format
msgid "As described in <xref linkend=\"svn.reposadmin.basics.backends.bdb\"/>, hot-copied Berkeley DB repositories are <emphasis>not</emphasis> portable across operating systems, nor will they work on machines with a different <quote>endianness</quote> than the machine where they were created."
msgstr ""

#. Tag: tertiary
#: ch09-reference.xml:4005
#, no-c-format
msgid "list-dblogs"
msgstr "list-dblogs"

#. Tag: refname
#: ch09-reference.xml:4009
#, no-c-format
msgid "svnadmin list-dblogs"
msgstr "svnadmin list-dblogs"

#. Tag: refpurpose
#: ch09-reference.xml:4009
#, no-c-format
msgid "Ask Berkeley DB which log files exist for a given Subversion repository (applies only to repositories using the <literal>bdb</literal> backend)."
msgstr "指定した Subversion リポジトリにどのような Berkeley DB ログファイルが あるか問い合わせます。(<literal>bdb</literal>バックエンドを利用しているリポジトリの場合だけです)。"

#. Tag: programlisting
#: ch09-reference.xml:4016
#, no-c-format
msgid "svnadmin list-dblogs REPOS_PATH"
msgstr "svnadmin list-dblogs REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4021
#: ch09-reference.xml:4054
#, no-c-format
msgid "Berkeley DB creates logs of all changes to the repository, which allow it to recover in the face of catastrophe. Unless you enable <literal>DB_LOG_AUTOREMOVE</literal>, the log files accumulate, although most are no longer used and can be deleted to reclaim disk space. See <xref linkend=\"svn.reposadmin.maint.diskspace\"/> for more information."
msgstr "Berkeley DB は障害から復旧できるようにリポジトリの すべての変更点のログをとります。 <literal>DB_LOG_AUTOREMOVE</literal> を有効にしない限りログファイルは蓄積されていきますが、そのほとんどは それ以上利用されることはなく、ディスク領域を確保するために削除可能な ものです。詳細は<xref linkend=\"svn.reposadmin.maint.diskspace\"/>を見てください。"

#. Tag: tertiary
#: ch09-reference.xml:4038
#, no-c-format
msgid "list-unused-dblogs"
msgstr "list-unused-dblogs"

#. Tag: refname
#: ch09-reference.xml:4042
#, no-c-format
msgid "svnadmin list-unused-dblogs"
msgstr "svnadmin list-unused-dblogs"

#. Tag: refpurpose
#: ch09-reference.xml:4043
#, no-c-format
msgid "Ask Berkeley DB which log files can be safely deleted (applies only to repositories using the <literal>bdb</literal> backend)."
msgstr "Berkeley DB にどのログファイルが安全に削除可能かを問い合わせます。 (<literal>bdb</literal>バックエンドを使っているリポジトリの場合だけです)。"

#. Tag: programlisting
#: ch09-reference.xml:4049
#, no-c-format
msgid "svnadmin list-unused-dblogs REPOS_PATH"
msgstr "svnadmin list-unused-dblogs REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4067
#, no-c-format
msgid "Remove all unused log files from a repository:"
msgstr "リポジトリからすべての未使用ログを削除するには:"

#. Tag: screen
#: ch09-reference.xml:4069
#, no-c-format
msgid ""
"$ svnadmin list-unused-dblogs /path/to/repos\n"
"/path/to/repos/log.0000000031\n"
"/path/to/repos/log.0000000032\n"
"/path/to/repos/log.0000000033\n"
"\n"
"$ svnadmin list-unused-dblogs /path/to/repos | xargs rm\n"
"## disk space reclaimed!"
msgstr ""
"$ svnadmin list-unused-dblogs /path/to/repos\n"
"/path/to/repos/log.0000000031\n"
"/path/to/repos/log.0000000032\n"
"/path/to/repos/log.0000000033\n"
"\n"
"$ svnadmin list-unused-dblogs /path/to/repos | xargs rm\n"
"## disk space reclaimed!"

#. Tag: tertiary
#: ch09-reference.xml:4079
#, no-c-format
msgid "load"
msgstr "load"

#. Tag: refname
#: ch09-reference.xml:4083
#, no-c-format
msgid "svnadmin load"
msgstr "svnadmin load"

#. Tag: refpurpose
#: ch09-reference.xml:4083
#, no-c-format
msgid "Read a <quote>dumpfile</quote>-formatted stream from stdin."
msgstr "標準入力から<quote>ダンプファイル</quote>形式 のデータを読み出します。"

#. Tag: programlisting
#: ch09-reference.xml:4089
#, no-c-format
msgid "svnadmin load REPOS_PATH"
msgstr "svnadmin load REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4094
#, no-c-format
msgid "Read a <quote>dumpfile</quote>-formatted stream from stdin, committing new revisions into the repository's filesystem. Send progress feedback to stdout."
msgstr "標準入力から<quote>ダンプ形式</quote> のデータを読み出し、リポジトリのファイルシステムに新しい リビジョンをコミットします。進行状況は標準出力に表示されます。"

#. Tag: screen
#: ch09-reference.xml:4102
#, no-c-format
msgid ""
"--quiet (-q)\n"
"--ignore-uuid\n"
"--force-uuid\n"
"--use-pre-commit-hook\n"
"--use-post-commit-hook\n"
"--parent-dir"
msgstr ""
"--quiet (-q)\n"
"--ignore-uuid\n"
"--force-uuid\n"
"--use-pre-commit-hook\n"
"--use-post-commit-hook\n"
"--parent-dir"

#. Tag: title
#: ch09-reference.xml:4106
#: ch09-reference.xml:4150
#: ch09-reference.xml:4282
#, no-c-format
msgid "Example"
msgstr "例"

#. Tag: para
#: ch09-reference.xml:4108
#, no-c-format
msgid "This shows the beginning of loading a repository from a backup file (made, of course, with <command>svnadmin dump</command>):"
msgstr "これはバックアップファイルからリポジトリをロードする最初の 部分です(もちろんあらかじめ<command>svnadmin dump</command>でダンプして おいたものです):"

#. Tag: screen
#: ch09-reference.xml:4112
#, no-c-format
msgid ""
"$ svnadmin load /usr/local/svn/restored &lt; repos-backup\n"
"&lt;&lt;&lt; Started new txn, based on original revision 1\n"
"     * adding path : test ... done.\n"
"     * adding path : test/a ... done.\n"
"&hellip;"
msgstr ""
"$ svnadmin load /usr/local/svn/restored &lt; repos-backup\n"
"&lt;&lt;&lt; Started new txn, based on original revision 1\n"
"     * adding path : test ... done.\n"
"     * adding path : test/a ... done.\n"
"&hellip;"

#. Tag: para
#: ch09-reference.xml:4114
#, no-c-format
msgid "Or if you want to load into a subdirectory:"
msgstr "あるいはサブディレクトリにロードしたい場合は:"

#. Tag: screen
#: ch09-reference.xml:4116
#, no-c-format
msgid ""
"$ svnadmin load --parent-dir new/subdir/for/project /usr/local/svn/restored &lt; repos-backup\n"
"&lt;&lt;&lt; Started new txn, based on original revision 1\n"
"     * adding path : test ... done.\n"
"     * adding path : test/a ... done.\n"
"&hellip;"
msgstr ""
"$ svnadmin load --parent-dir new/subdir/for/project /usr/local/svn/restored &lt; repos-backup\n"
"&lt;&lt;&lt; Started new txn, based on original revision 1\n"
"     * adding path : test ... done.\n"
"     * adding path : test/a ... done.\n"
"&hellip;"

#. Tag: tertiary
#: ch09-reference.xml:4126
#, no-c-format
msgid "lslocks"
msgstr "lslocks"

#. Tag: refname
#: ch09-reference.xml:4130
#, no-c-format
msgid "svnadmin lslocks"
msgstr "svnadmin lslocks"

#. Tag: refpurpose
#: ch09-reference.xml:4131
#, no-c-format
msgid "Print descriptions of all locks."
msgstr "すべてのロック状況を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:4135
#, no-c-format
msgid "svnadmin lslocks REPOS_PATH"
msgstr "svnadmin lslocks REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4140
#, no-c-format
msgid "Print descriptions of all locks in a repository."
msgstr "リポジトリ中のすべてのロックに関する情報を表示します。"

#. Tag: para
#: ch09-reference.xml:4153
#, fuzzy, no-c-format
msgid "This lists the one locked file in the repository at <filename>/svn/repos</filename>:"
msgstr "<filename>/svn/repos</filename>にあるリポジトリ中でロックされている 唯一のファイルを一覧表示しています。"

#. Tag: screen
#: ch09-reference.xml:4156
#, no-c-format
msgid ""
"$ svnadmin lslocks /svn/repos\n"
"Path: /tree.jpg\n"
"UUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753\n"
"Owner: harry\n"
"Created: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)\n"
"Expires: \n"
"Comment (1 line):\n"
"Rework the uppermost branches on the bald cypress in the foreground."
msgstr ""
"$ svnadmin lslocks /svn/repos\n"
"Path: /tree.jpg\n"
"UUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753\n"
"Owner: harry\n"
"Created: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)\n"
"Expires: \n"
"Comment (1 line):\n"
"Rework the uppermost branches on the bald cypress in the foreground."

#. Tag: tertiary
#: ch09-reference.xml:4165
#, no-c-format
msgid "lstxns"
msgstr "lstxns"

#. Tag: refname
#: ch09-reference.xml:4169
#, no-c-format
msgid "svnadmin lstxns"
msgstr "svnadmin lstxns"

#. Tag: refpurpose
#: ch09-reference.xml:4170
#, no-c-format
msgid "Print the names of all uncommitted transactions."
msgstr "コミットされていないすべてのトランザクションの名前の表示。"

#. Tag: programlisting
#: ch09-reference.xml:4174
#, no-c-format
msgid "svnadmin lstxns REPOS_PATH"
msgstr "svnadmin lstxns REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4179
#, fuzzy, no-c-format
msgid "Print the names of all uncommitted transactions. See <xref linkend=\"svn.reposadmin.maint.diskspace.deadtxns\"/> for information on how uncommitted transactions are created and what you should do with them."
msgstr "コミットされていないすべてのトランザクションの名前を表示します。 コミットされていないトランザクションはどのように作られ、どのように 扱うべきかについては<xref linkend=\"svn.reposadmin.maint.cleanup\"/> を見て ください。"

#. Tag: para
#: ch09-reference.xml:4188
#, no-c-format
msgid "List all outstanding transactions in a repository."
msgstr "リポジトリ中の未解決のトランザクション一覧の表示。"

#. Tag: screen
#: ch09-reference.xml:4191
#, no-c-format
msgid ""
"$ svnadmin lstxns /usr/local/svn/repos/ \n"
"1w\n"
"1x"
msgstr ""
"$ svnadmin lstxns /usr/local/svn/repos/ \n"
"1w\n"
"1x"

#. Tag: tertiary
#: ch09-reference.xml:4201
#, no-c-format
msgid "recover"
msgstr "recover"

#. Tag: refname
#: ch09-reference.xml:4205
#, no-c-format
msgid "svnadmin recover"
msgstr "svnadmin recover"

#. Tag: refpurpose
#: ch09-reference.xml:4207
#, no-c-format
msgid "Bring a repository database back into a consistent state (applies only to repositories using the <literal>bdb</literal> backend). In addition, if <filename>repos/conf/passwd</filename> does not exist, it will create a default password file ."
msgstr "リポジトリデータベースの一貫した状態への復帰。 (<literal>bdb</literal>バックエンドを使っているリポジトリの場合だけです)。 さらに<filename>repos/conf/passwd</filename>が存在しなければデフォルトの パスワードファイルも作ります。"

#. Tag: programlisting
#: ch09-reference.xml:4216
#, no-c-format
msgid "svnadmin recover REPOS_PATH"
msgstr "svnadmin recover REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4221
#, no-c-format
msgid "Run this command if you get an error indicating that your repository needs to be recovered."
msgstr "リポジトリは修復される必要があるというエラーメッセージを受け取った ときにはこのコマンドを実行してください。"

#. Tag: screen
#: ch09-reference.xml:4226
#, no-c-format
msgid "--wait"
msgstr "--wait"

#. Tag: para
#: ch09-reference.xml:4231
#, no-c-format
msgid "Recover a hung repository:"
msgstr "ハングしてしまったリポジトリの修復:"

#. Tag: screen
#: ch09-reference.xml:4233
#, no-c-format
msgid ""
"$ svnadmin recover /usr/local/svn/repos/ \n"
"Repository lock acquired.\n"
"Please wait; recovering the repository may take some time...\n"
"\n"
"Recovery completed.\n"
"The latest repos revision is 34."
msgstr ""
"$ svnadmin recover /usr/local/svn/repos/ \n"
"Repository lock acquired.\n"
"Please wait; recovering the repository may take some time...\n"
"\n"
"Recovery completed.\n"
"The latest repos revision is 34."

#. Tag: para
#: ch09-reference.xml:4235
#, no-c-format
msgid "Recovering the database requires an exclusive lock on the repository. (This is a <quote>database lock</quote>; see <xref linkend=\"svn.advanced.locking.meanings\"/>.) If another process is accessing the repository, then <command>svnadmin recover</command> will error:"
msgstr "データベースの修復にはリポジトリを排他的にロックする必要があります。他 のプロセスがリポジトリにアクセスしている場合、<command>svnadmin recover</command>はエラーになります:"

#. Tag: screen
#: ch09-reference.xml:4240
#, no-c-format
msgid ""
"$ svnadmin recover /usr/local/svn/repos\n"
"svn: Failed to get exclusive repository access; perhaps another process\n"
"such as httpd, svnserve or svn has it open?\n"
"\n"
"$"
msgstr ""
"$ svnadmin recover /usr/local/svn/repos\n"
"svn: Failed to get exclusive repository access; perhaps another process\n"
"such as httpd, svnserve or svn has it open?\n"
"\n"
"$"

#. Tag: para
#: ch09-reference.xml:4242
#, no-c-format
msgid "The <option>--wait</option> option, however, will cause <command>svnadmin recover</command> to wait indefinitely for other processes to disconnect:"
msgstr "しかし <option>--wait</option>オプションを指定すると <command>svnadmin recover</command>は他のプロセスの接続が切れるまで待ちつづけます:"

#. Tag: screen
#: ch09-reference.xml:4246
#, fuzzy, no-c-format
msgid ""
"$ svnadmin recover /usr/local/svn/repos --wait\n"
"Waiting on repository lock; perhaps another process has it open?\n"
"\n"
"### time goes by&hellip;\n"
"\n"
"Repository lock acquired.\n"
"Please wait; recovering the repository may take some time...\n"
"\n"
"Recovery completed.\n"
"The latest repos revision is 34."
msgstr ""
"$ svnadmin recover /usr/local/svn/repos --wait\n"
"Waiting on repository lock; perhaps another process has it open?\n"
"\n"
"### time goes by...\n"
"\n"
"Repository lock acquired.\n"
"Please wait; recovering the repository may take some time...\n"
"\n"
"Recovery completed.\n"
"The latest repos revision is 34."

#. Tag: tertiary
#: ch09-reference.xml:4257
#, no-c-format
msgid "rmlocks"
msgstr "rmlocks"

#. Tag: refname
#: ch09-reference.xml:4261
#, no-c-format
msgid "svnadmin rmlocks"
msgstr "svnadmin rmlocks"

#. Tag: refpurpose
#: ch09-reference.xml:4262
#, no-c-format
msgid "Unconditionally remove one or more locks from a repository."
msgstr "リポジトリにある一つ以上のロックを無条件に取り除きます。"

#. Tag: programlisting
#: ch09-reference.xml:4267
#, no-c-format
msgid "svnadmin rmlocks REPOS_PATH LOCKED_PATH..."
msgstr "svnadmin rmlocks REPOS_PATH LOCKED_PATH..."

#. Tag: para
#: ch09-reference.xml:4272
#, no-c-format
msgid "Remove lock from each <replaceable>LOCKED_PATH</replaceable>."
msgstr "<replaceable>LOCKED_PATH</replaceable>ごとにロックを取り除きます。"

#. Tag: para
#: ch09-reference.xml:4284
#, no-c-format
msgid "This deletes the locks on <filename>tree.jpg</filename> and <filename>house.jpg</filename> in the repository at <filename>/svn/repos</filename>"
msgstr "リポジトリ<filename>/svn/repos</filename>にある <filename>tree.jpg</filename>と<filename>house.jpg</filename>に 設定されているロックを削除しています。"

#. Tag: screen
#: ch09-reference.xml:4289
#, no-c-format
msgid ""
"$ svnadmin rmlocks /svn/repos tree.jpg house.jpg\n"
"Removed lock on '/tree.jpg.\n"
"Removed lock on '/house.jpg."
msgstr ""
"$ svnadmin rmlocks /svn/repos tree.jpg house.jpg\n"
"Removed lock on '/tree.jpg.\n"
"Removed lock on '/house.jpg."

#. Tag: tertiary
#: ch09-reference.xml:4299
#, no-c-format
msgid "rmtxns"
msgstr "rmtxns"

#. Tag: refname
#: ch09-reference.xml:4303
#, no-c-format
msgid "svnadmin rmtxns"
msgstr "svnadmin rmtxns"

#. Tag: refpurpose
#: ch09-reference.xml:4304
#, no-c-format
msgid "Delete transactions from a repository."
msgstr "リポジトリからトランザクションを削除します。"

#. Tag: programlisting
#: ch09-reference.xml:4308
#, no-c-format
msgid "svnadmin rmtxns REPOS_PATH TXN_NAME..."
msgstr "svnadmin rmtxns REPOS_PATH TXN_NAME..."

#. Tag: para
#: ch09-reference.xml:4313
#, fuzzy, no-c-format
msgid "Delete outstanding transactions from a repository. This is covered in detail in <xref linkend=\"svn.reposadmin.maint.diskspace.deadtxns\"/>."
msgstr "未解決のトランザクションをリポジトリから削除します。 これは、<xref linkend=\"svn.reposadmin.maint.cleanup\"/>で詳しく触れられています。"

#. Tag: screen
#: ch09-reference.xml:4321
#, no-c-format
msgid "--quiet (-q)"
msgstr "--quiet (-q)"

#. Tag: para
#: ch09-reference.xml:4327
#, no-c-format
msgid "Remove named transactions:"
msgstr "名前の付いたトランザクションの削除:"

#. Tag: screen
#: ch09-reference.xml:4329
#, no-c-format
msgid "$ svnadmin rmtxns /usr/local/svn/repos/ 1w 1x"
msgstr "$ svnadmin rmtxns /usr/local/svn/repos/ 1w 1x"

#. Tag: para
#: ch09-reference.xml:4331
#, no-c-format
msgid "Fortunately, the output of <command>lstxns</command> works great as the input for <command>rmtxns</command>:"
msgstr "幸運なことに、<command>lstxns</command> の出力は <command>rmtxns</command>の入力と同じくらいうまく動きます:"

#. Tag: screen
#: ch09-reference.xml:4334
#, no-c-format
msgid "$ svnadmin rmtxns /usr/local/svn/repos/  `svnadmin lstxns /usr/local/svn/repos/`"
msgstr "$ svnadmin rmtxns /usr/local/svn/repos/  `svnadmin lstxns /usr/local/svn/repos/`"

#. Tag: para
#: ch09-reference.xml:4336
#, no-c-format
msgid "Which will remove all uncommitted transactions from your repository."
msgstr "これはリポジトリからすべてのコミットされていないトランザクション を削除します。"

#. Tag: tertiary
#: ch09-reference.xml:4348
#, no-c-format
msgid "setlog"
msgstr "setlog"

#. Tag: refname
#: ch09-reference.xml:4352
#, no-c-format
msgid "svnadmin setlog"
msgstr "svnadmin setlog"

#. Tag: refpurpose
#: ch09-reference.xml:4353
#, no-c-format
msgid "Set the log-message on a revision."
msgstr "リビジョンにログメッセージを設定します。"

#. Tag: programlisting
#: ch09-reference.xml:4357
#, no-c-format
msgid "svnadmin setlog REPOS_PATH -r REVISION FILE"
msgstr "svnadmin setlog REPOS_PATH -r REVISION FILE"

#. Tag: para
#: ch09-reference.xml:4362
#, no-c-format
msgid "Set the log-message on revision REVISION to the contents of FILE."
msgstr "FILEの内容をリビジョン REVISIONのログメッセージとして設定します。"

#. Tag: para
#: ch09-reference.xml:4365
#, no-c-format
msgid "This is similar to using <command>svn propset --revprop</command> to set the <literal>svn:log</literal> property on a revision, except that you can also use the option <option>--bypass-hooks</option> to avoid running any pre- or post-commit hooks, which is useful if the modification of revision properties has not been enabled in the pre-revprop-change hook."
msgstr "これは、<command>svn propset --revprop</command>を使ってリビジョン上に <literal>svn:log</literal>属性を設定するのと似ていますが、 <option>--bypass-hooks</option>を使ってコミット前後のフックの実行を避ける ことができます。これは pre-revprop-change フック中でリビジョン属性の修正 が有効ではない場合に便利です。"

#. Tag: para
#: ch09-reference.xml:4374
#, no-c-format
msgid "Revision properties are not under version control, so this command will permanently overwrite the previous log message."
msgstr "リビジョン属性はバージョン管理下にはないのでこのコマンドは以前の ログメッセージを完全に上書きしてしまいます。"

#. Tag: screen
#: ch09-reference.xml:4384
#, fuzzy, no-c-format
msgid ""
"--revision (-r) REV\n"
"--bypass-hooks"
msgstr ""
"--revision (-r) ARG\n"
"--bypass-hooks"

#. Tag: para
#: ch09-reference.xml:4390
#, no-c-format
msgid "Set the log message for revision 19 to the contents of the file <filename>msg</filename>:"
msgstr "ファイル<filename>msg</filename>の内容をリビジョン19のログメッセージに設定します:"

#. Tag: screen
#: ch09-reference.xml:4393
#, no-c-format
msgid "$ svnadmin setlog /usr/local/svn/repos/ -r 19 msg"
msgstr "$ svnadmin setlog /usr/local/svn/repos/ -r 19 msg"

#. Tag: tertiary
#: ch09-reference.xml:4405
#, no-c-format
msgid "verify"
msgstr "verify"

#. Tag: refname
#: ch09-reference.xml:4409
#, no-c-format
msgid "svnadmin verify"
msgstr "svnadmin verify"

#. Tag: refpurpose
#: ch09-reference.xml:4410
#, no-c-format
msgid "Verify the data stored in the repository."
msgstr "リポジトリに保管されているデータを検証します。"

#. Tag: programlisting
#: ch09-reference.xml:4414
#, no-c-format
msgid "svnadmin verify REPOS_PATH"
msgstr "svnadmin verify REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4419
#, no-c-format
msgid "Run this command if you wish to verify the integrity of your repository. This basically iterates through all revisions in the repository by internally dumping all revisions and discarding the output&mdash;it's a good idea to run this on a regular basis to guard against latent hard disk failures and <quote>bitrot</quote>. If this command fails&mdash;which it will do at the first sign of a problem&mdash;that means that your repository has at least one corrupted revision and you should restore the corrupted revision from a backup (you did make a backup, didn't you?)."
msgstr ""

#. Tag: para
#: ch09-reference.xml:4436
#, no-c-format
msgid "Verify a hung repository:"
msgstr "固まってしまったリポジトリの検証:"

#. Tag: screen
#: ch09-reference.xml:4438
#, no-c-format
msgid ""
"$ svnadmin verify /usr/local/svn/repos/ \n"
"* Verified revision 1729."
msgstr ""
"$ svnadmin verify /usr/local/svn/repos/ \n"
"* Verified revision 1729."

#. Tag: command
#: ch09-reference.xml:4451
#, no-c-format
msgid "<command>svnlook</command>"
msgstr "<command>svnlook</command>"

#. Tag: para
#: ch09-reference.xml:4453
#, no-c-format
msgid "<command>svnlook</command> is a command-line utility for examining different aspects of a Subversion repository. It does not make any changes to the repository&mdash;it's just used for <quote>peeking</quote>. <command>svnlook</command> is typically used by the repository hooks, but a repository administrator might find it useful for diagnostic purposes."
msgstr "<command>svnlook</command> はSubversionリポジトリの 別の部分を調べるためのコマンドラインツールです。このコマンドは リポジトリには何の変更も加えません&mdash;単に<quote>調べる</quote>ため に利用されます。<command>svnlook</command>はリポジトリフックで利用されるのが 典型的ですが、リポジトリ管理者は診断の目的にも利用できることに気づくかも 知れません。"

#. Tag: para
#: ch09-reference.xml:4461
#, no-c-format
msgid "Since <command>svnlook</command> works via direct repository access (and thus can only be used on the machine that holds the repository), it refers to the repository with a path, not a URL."
msgstr "<command>svnlook</command> は直接リポジトリにアクセスする形で実行される ので(そして、それが理由でリポジトリの存在するマシン上でのみ利用することが できるのですが)、URLではなく、パス名称によってリポジトリを参照します。"

#. Tag: para
#: ch09-reference.xml:4465
#, no-c-format
msgid "If no revision or transaction is specified, <command>svnlook</command> defaults to the youngest (most recent) revision of the repository."
msgstr "リビジョンやトランザクションが指定されなければ、 <command>svnlook</command> はリポジトリの最新リビジョンを使います。"

#. Tag: title
#: ch09-reference.xml:4471
#, no-c-format
msgid "<command>svnlook</command> Options"
msgstr "<command>svnlook</command>オプション"

#. Tag: para
#: ch09-reference.xml:4473
#, no-c-format
msgid "Options in <command>svnlook</command> are global, just like in <command>svn</command> and <command>svnadmin</command>; however, most options only apply to one subcommand since the functionality of <command>svnlook</command> is (intentionally) limited in scope."
msgstr "<command>svnlook</command> 中のスイッチは <command>svn</command> や<command>svnadmin</command>などと一緒で グローバルに働きますが、ほとんどのスイッチは一つのサブコマンドに しか効果がありません。それは<command>svnlook</command>の機能の 有効範囲が(意図的に)限られているからです。"

#. Tag: para
#: ch09-reference.xml:4485
#, no-c-format
msgid "Prevents <command>svnlook</command> from printing differences for deleted files. The default behavior when a file is deleted in a transaction/revision is to print the same differences that you would see if you had left the file but removed all the content."
msgstr "<command>svnlook</command>が削除されたファイルの差異を表示しないようにします。 トランザクション/リビジョン中でファイルが削除されたときのデフォルト 動作は、そのファイルが空のファイルとして残っているときと同じに なります。"

#. Tag: term
#: ch09-reference.xml:4494
#, no-c-format
msgid "<option>--revision</option> (<option>-r</option>)"
msgstr "<option>--revision</option> (<option>-r</option>)"

#. Tag: para
#: ch09-reference.xml:4497
#, no-c-format
msgid "Specify a particular revision number that you wish to examine."
msgstr "調べたい特定のリビジョン番号を指定します。"

#. Tag: term
#: ch09-reference.xml:4514
#, no-c-format
msgid "<option>--transaction</option> (<option>-t</option>)"
msgstr "<option>--transaction</option> (<option>-t</option>)"

#. Tag: para
#: ch09-reference.xml:4517
#, no-c-format
msgid "Specify a particular transaction ID that you wish to examine."
msgstr "調べたい特定のトランザクション番号を指定します。"

#. Tag: option
#: ch09-reference.xml:4523
#, no-c-format
msgid "--show-ids"
msgstr "--show-ids"

#. Tag: para
#: ch09-reference.xml:4525
#, no-c-format
msgid "Show the filesystem node revision IDs for each path in the filesystem tree."
msgstr "ファイルシステムツリー中の、それぞれのパスごとのファイルシステム ノードリビジョン番号を表示します。"

#. Tag: title
#: ch09-reference.xml:4536
#, no-c-format
msgid "<command>svnlook</command> Subcommands"
msgstr "<command>svnlook</command> サブコマンド"

#. Tag: primary
#: ch09-reference.xml:4541
#: ch09-reference.xml:4581
#: ch09-reference.xml:4622
#: ch09-reference.xml:4710
#: ch09-reference.xml:4750
#: ch09-reference.xml:4793
#: ch09-reference.xml:4834
#: ch09-reference.xml:4865
#: ch09-reference.xml:4909
#: ch09-reference.xml:4951
#: ch09-reference.xml:4995
#: ch09-reference.xml:5034
#: ch09-reference.xml:5082
#: ch09-reference.xml:5134
#: ch09-reference.xml:5175
#: ch09-reference.xml:5211
#, no-c-format
msgid "<primary>svnlook</primary>"
msgstr ""

#. Tag: tertiary
#: ch09-reference.xml:4543
#, no-c-format
msgid "author"
msgstr "author"

#. Tag: refname
#: ch09-reference.xml:4547
#, no-c-format
msgid "svnlook author"
msgstr "svnlook author"

#. Tag: refpurpose
#: ch09-reference.xml:4548
#, no-c-format
msgid "Print the author."
msgstr "変更者の表示。"

#. Tag: programlisting
#: ch09-reference.xml:4552
#, no-c-format
msgid "svnlook author REPOS_PATH"
msgstr "svnlook author REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4557
#, no-c-format
msgid "Print the author of a revision or transaction in the repository."
msgstr "リポジトリのリビジョンやトランザクションを実行した 人を表示します。"

#. Tag: screen
#: ch09-reference.xml:4564
#: ch09-reference.xml:4604
#: ch09-reference.xml:4691
#: ch09-reference.xml:4733
#: ch09-reference.xml:4817
#: ch09-reference.xml:4933
#: ch09-reference.xml:5017
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--transaction (-t)"
msgstr ""
"--revision (-r) REV\n"
"--transaction (-t)"

#. Tag: para
#: ch09-reference.xml:4570
#, no-c-format
msgid "<command>svnlook author</command> is handy, but not very exciting:"
msgstr "<command>svnlook author</command>は便利ですが、 それほど面白いコマンドではありません:"

#. Tag: screen
#: ch09-reference.xml:4573
#, no-c-format
msgid ""
"$ svnlook author -r 40 /usr/local/svn/repos \n"
"sally"
msgstr ""
"$ svnlook author -r 40 /usr/local/svn/repos \n"
"sally"

#. Tag: refname
#: ch09-reference.xml:4587
#, no-c-format
msgid "svnlook cat"
msgstr "svnlook cat"

#. Tag: refpurpose
#: ch09-reference.xml:4588
#, no-c-format
msgid "<refpurpose>Print the contents of a file.</refpurpose>"
msgstr "<refpurpose>ファイルの内容を表示します</refpurpose>"

#. Tag: programlisting
#: ch09-reference.xml:4592
#, no-c-format
msgid "svnlook cat REPOS_PATH PATH_IN_REPOS"
msgstr "svnlook cat REPOS_PATH PATH_IN_REPOS"

#. Tag: para
#: ch09-reference.xml:4597
#, no-c-format
msgid "<para>Print the contents of a file.</para>"
msgstr "<para>ファイルの内容を表示します。</para>"

#. Tag: para
#: ch09-reference.xml:4610
#, no-c-format
msgid "This shows the contents of a file in transaction <literal>ax8</literal>, located at <filename>/trunk/README</filename>:"
msgstr "以下は<filename>/trunk/README</filename> にあるトランザクション <literal>ax8</literal>中のファイルの内容を表示しています:"

#. Tag: screen
#: ch09-reference.xml:4614
#, no-c-format
msgid ""
"$ svnlook cat -t ax8 /usr/local/svn/repos /trunk/README\n"
"\n"
"               Subversion, a version control system.\n"
"               =====================================\n"
"\n"
"$LastChangedDate: 2003-07-17 10:45:25 -0500 (Thu, 17 Jul 2003) $\n"
"\n"
"Contents:\n"
"\n"
"     I. A FEW POINTERS\n"
"    II. DOCUMENTATION\n"
"   III. PARTICIPATING IN THE SUBVERSION COMMUNITY\n"
"&hellip;"
msgstr ""
"$ svnlook cat -t ax8 /usr/local/svn/repos /trunk/README\n"
"\n"
"               Subversion, a version control system.\n"
"               =====================================\n"
"\n"
"$LastChangedDate: 2003-07-17 10:45:25 -0500 (Thu, 17 Jul 2003) $\n"
"\n"
"Contents:\n"
"\n"
"     I. A FEW POINTERS\n"
"    II. DOCUMENTATION\n"
"   III. PARTICIPATING IN THE SUBVERSION COMMUNITY\n"
"&hellip;"

#. Tag: tertiary
#: ch09-reference.xml:4624
#, no-c-format
msgid "changed"
msgstr "changed"

#. Tag: refname
#: ch09-reference.xml:4628
#, no-c-format
msgid "svnlook changed"
msgstr "svnlook changed"

#. Tag: refpurpose
#: ch09-reference.xml:4629
#, no-c-format
msgid "Print the paths that were changed."
msgstr "変更されたパスを表示します。"

#. Tag: programlisting
#: ch09-reference.xml:4633
#, no-c-format
msgid "svnlook changed REPOS_PATH"
msgstr "svnlook changed REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4638
#, no-c-format
msgid "Print the paths that were changed in a particular revision or transaction, as well as <quote>svn update-style</quote> status letters in the first two columns:"
msgstr "<quote>svn update-style</quote> の第一ステータス文字と同じように 特定のリビジョンやトランザクションで変更されたパスを表示します:"

#. Tag: term
#: ch09-reference.xml:4646
#, no-c-format
msgid "'<literal>A </literal>'"
msgstr "'<literal>A </literal>'"

#. Tag: para
#: ch09-reference.xml:4648
#, no-c-format
msgid "Item added to repository."
msgstr "アイテムはリポジトリに追加されました"

#. Tag: term
#: ch09-reference.xml:4653
#, no-c-format
msgid "'<literal>D </literal>'"
msgstr "'<literal>D </literal>'"

#. Tag: para
#: ch09-reference.xml:4655
#, no-c-format
msgid "Item deleted from repository."
msgstr "アイテムはリポジトリから削除されました"

#. Tag: term
#: ch09-reference.xml:4660
#, no-c-format
msgid "'<literal>U </literal>'"
msgstr "'<literal>U </literal>'"

#. Tag: para
#: ch09-reference.xml:4662
#, no-c-format
msgid "File contents changed."
msgstr "ファイル内容が変化しました"

#. Tag: term
#: ch09-reference.xml:4667
#, no-c-format
msgid "'<literal> U</literal>'"
msgstr "'<literal> U</literal>'"

#. Tag: para
#: ch09-reference.xml:4669
#, fuzzy, no-c-format
msgid "Properties of item changed. Note the leading space."
msgstr "アイテムの属性が変化しました"

#. Tag: term
#: ch09-reference.xml:4674
#, no-c-format
msgid "'<literal>UU</literal>'"
msgstr "'<literal>UU</literal>'"

#. Tag: para
#: ch09-reference.xml:4676
#, no-c-format
msgid "File contents and properties changed."
msgstr "ファイルの内容と属性が変化しました"

#. Tag: para
#: ch09-reference.xml:4682
#, no-c-format
msgid "Files and directories can be distinguished, as directory paths are displayed with a trailing '<literal>/</literal>' character."
msgstr "ディレクトリパスの最後には '<literal>/</literal>' がつくのでファイルと ディレクトリは区別することができます。"

#. Tag: para
#: ch09-reference.xml:4697
#, no-c-format
msgid "This shows a list of all the changed files and directories in revision 39 of a test repository. Note that the first changed item is a directory, as evidenced by the trailing <literal>/</literal>:"
msgstr ""

#. Tag: screen
#: ch09-reference.xml:4702
#, no-c-format
msgid ""
"$ svnlook changed -r 39 /usr/local/svn/repos\n"
"A   trunk/vendors/deli/\n"
"A   trunk/vendors/deli/chips.txt\n"
"A   trunk/vendors/deli/sandwich.txt\n"
"A   trunk/vendors/deli/pickle.txt\n"
"U   trunk/vendors/baker/bagel.txt\n"
" U  trunk/vendors/baker/croissant.txt\n"
"UU  trunk/vendors/baker/pretzel.txt\n"
"D   trunk/vendors/baker/baguette.txt"
msgstr ""
"$ svnlook changed -r 39 /usr/local/svn/repos\n"
"A   trunk/vendors/deli/\n"
"A   trunk/vendors/deli/chips.txt\n"
"A   trunk/vendors/deli/sandwich.txt\n"
"A   trunk/vendors/deli/pickle.txt\n"
"U   trunk/vendors/baker/bagel.txt\n"
" U  trunk/vendors/baker/croissant.txt\n"
"UU  trunk/vendors/baker/pretzel.txt\n"
"D   trunk/vendors/baker/baguette.txt"

#. Tag: tertiary
#: ch09-reference.xml:4712
#, no-c-format
msgid "date"
msgstr "date"

#. Tag: refname
#: ch09-reference.xml:4716
#, no-c-format
msgid "svnlook date"
msgstr "svnlook date"

#. Tag: refpurpose
#: ch09-reference.xml:4717
#, no-c-format
msgid "Print the datestamp."
msgstr "日付を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:4721
#, no-c-format
msgid "svnlook date REPOS_PATH"
msgstr "svnlook date REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4726
#, no-c-format
msgid "Print the datestamp of a revision or transaction in a repository."
msgstr "リポジトリ中の特定リビジョンやトランザクションの日付を表示します。"

#. Tag: para
#: ch09-reference.xml:4739
#, no-c-format
msgid "This shows the date of revision 40 of a test repository:"
msgstr "これは、テストリポジトリのリビジョン40の日付を表示します:"

#. Tag: screen
#: ch09-reference.xml:4742
#, no-c-format
msgid ""
"$ svnlook date -r 40 /tmp/repos/\n"
"2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)"
msgstr ""
"$ svnlook date -r 40 /tmp/repos/\n"
"2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)"

#. Tag: refname
#: ch09-reference.xml:4756
#, no-c-format
msgid "svnlook diff"
msgstr "svnlook diff"

#. Tag: refpurpose
#: ch09-reference.xml:4757
#, no-c-format
msgid "Print differences of changed files and properties."
msgstr "変更されたファイル、ディレクトリの差分を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:4761
#, no-c-format
msgid "svnlook diff REPOS_PATH"
msgstr "svnlook diff REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4766
#, no-c-format
msgid "Print GNU-style differences of changed files and properties in a repository."
msgstr "リポジトリ中で変更されたファイル、属性の差分をGNU形式で表示します。"

#. Tag: screen
#: ch09-reference.xml:4773
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--transaction (-t)\n"
"--no-diff-added\n"
"--no-diff-deleted"
msgstr ""
"--revision (-r) REV\n"
"--transaction (-t)\n"
"--no-diff-added\n"
"--no-diff-deleted"

#. Tag: para
#: ch09-reference.xml:4779
#, no-c-format
msgid "This shows a newly added (empty) file, a deleted file, and a copied file:"
msgstr "これは、新しく追加されたファイル(空のファイル)、削除されたファイル、コピーされた ファイルを表示します:"

#. Tag: screen
#: ch09-reference.xml:4782
#, no-c-format
msgid ""
"$ svnlook diff -r 40 /usr/local/svn/repos/\n"
"Copied: egg.txt (from rev 39, trunk/vendors/deli/pickle.txt)\n"
"\n"
"Added: trunk/vendors/deli/soda.txt\n"
"==============================================================================\n"
"\n"
"Modified: trunk/vendors/deli/sandwich.txt\n"
"==============================================================================\n"
"--- trunk/vendors/deli/sandwich.txt        (original)\n"
"+++ trunk/vendors/deli/sandwich.txt        2003-02-22 17:45:04.000000000 -0600\n"
"@@ -0,0 +1 @@\n"
"+Don't forget the mayo!\n"
"\n"
"Modified: trunk/vendors/deli/logo.jpg\n"
"==============================================================================\n"
"(Binary files differ)\n"
"\n"
"Deleted: trunk/vendors/deli/chips.txt\n"
"==============================================================================\n"
"\n"
"Deleted: trunk/vendors/deli/pickle.txt\n"
"=============================================================================="
msgstr ""
"$ svnlook diff -r 40 /usr/local/svn/repos/\n"
"Copied: egg.txt (from rev 39, trunk/vendors/deli/pickle.txt)\n"
"\n"
"Added: trunk/vendors/deli/soda.txt\n"
"==============================================================================\n"
"\n"
"Modified: trunk/vendors/deli/sandwich.txt\n"
"==============================================================================\n"
"--- trunk/vendors/deli/sandwich.txt        (original)\n"
"+++ trunk/vendors/deli/sandwich.txt        2003-02-22 17:45:04.000000000 -0600\n"
"@@ -0,0 +1 @@\n"
"+Don't forget the mayo!\n"
"\n"
"Modified: trunk/vendors/deli/logo.jpg\n"
"==============================================================================\n"
"(Binary files differ)\n"
"\n"
"Deleted: trunk/vendors/deli/chips.txt\n"
"==============================================================================\n"
"\n"
"Deleted: trunk/vendors/deli/pickle.txt\n"
"=============================================================================="

#. Tag: para
#: ch09-reference.xml:4784
#, no-c-format
msgid "If a file has a non-textual <literal>svn:mime-type</literal> property, then the differences are not explicitly shown."
msgstr "ファイルが非テキスト的な <literal>svn:mime-type</literal>属性を持っている場合、差分は明示的には表 示されません。"

#. Tag: tertiary
#: ch09-reference.xml:4795
#, no-c-format
msgid "dirs-changed"
msgstr "dirs-changed"

#. Tag: refname
#: ch09-reference.xml:4799
#, no-c-format
msgid "svnlook dirs-changed"
msgstr "svnlook dirs-changed"

#. Tag: refpurpose
#: ch09-reference.xml:4800
#, no-c-format
msgid "Print the directories that were themselves changed."
msgstr "変更のあったディレクトリを表示します。"

#. Tag: programlisting
#: ch09-reference.xml:4804
#, no-c-format
msgid "svnlook dirs-changed REPOS_PATH"
msgstr "svnlook dirs-changed REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4809
#, no-c-format
msgid "Print the directories that were themselves changed (property edits) or whose file children were changed."
msgstr "(属性を編集によって)それ自身に変更があったか、 その子供のファイルに変更があったディレクトリを表示します。"

#. Tag: para
#: ch09-reference.xml:4823
#, no-c-format
msgid "This shows the directories that changed in revision 40 in our sample repository:"
msgstr "私たちのサンプルリポジトリ中のリビジョン40で修正された ディレクトリを表示します:"

#. Tag: screen
#: ch09-reference.xml:4826
#, no-c-format
msgid ""
"$ svnlook dirs-changed -r 40 /usr/local/svn/repos\n"
"trunk/vendors/deli/"
msgstr ""
"$ svnlook dirs-changed -r 40 /usr/local/svn/repos\n"
"trunk/vendors/deli/"

#. Tag: refname
#: ch09-reference.xml:4840
#, no-c-format
msgid "svnlook help"
msgstr "svnlook help"

#. Tag: programlisting
#: ch09-reference.xml:4844
#, no-c-format
msgid "Also svnlook -h and svnlook -?."
msgstr "Also svnlook -h and svnlook -?."

#. Tag: para
#: ch09-reference.xml:4849
#, no-c-format
msgid "Displays the help message for svnlook. This command, like its brother <command>svn help</command>, is also your friend, even though you never call it anymore and forgot to invite it to your last party."
msgstr "svnlook のヘルプを表示します。 <command>svn help</command>のヘルプと同じで、何かがわからなくなったときには常に 役に立ちます。"

#. Tag: tertiary
#: ch09-reference.xml:4867
#, no-c-format
msgid "history"
msgstr "history"

#. Tag: refname
#: ch09-reference.xml:4871
#, no-c-format
msgid "svnlook history"
msgstr "svnlook history"

#. Tag: refpurpose
#: ch09-reference.xml:4872
#, no-c-format
msgid "<refpurpose>Print information about the history of a path in the repository (or the root directory if no path is supplied).</refpurpose>"
msgstr "<refpurpose>リポジトリ中のパスの履歴に関する情報を表示します (あるいはパスが指定されなかった場合にはルートディレクトリになります)。</refpurpose>"

#. Tag: programlisting
#: ch09-reference.xml:4878
#, no-c-format
msgid "svnlook history REPOS_PATH [PATH_IN_REPOS]"
msgstr "svnlook history REPOS_PATH [PATH_IN_REPOS]"

#. Tag: para
#: ch09-reference.xml:4883
#, no-c-format
msgid "<para>Print information about the history of a path in the repository (or the root directory if no path is supplied).</para>"
msgstr "<para>リポジトリ中のパスの履歴に関する情報を表示します (あるいはパスが指定されなかった場合にはルートディレクトリになります)。</para>"

#. Tag: screen
#: ch09-reference.xml:4891
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--show-ids"
msgstr ""
"--revision (-r) REV\n"
"--show-ids"

#. Tag: para
#: ch09-reference.xml:4897
#, no-c-format
msgid "This shows the history output for the path <filename>/tags/1.0</filename> as of revision 20 in our sample repository."
msgstr "以下は例として作ったリポジトリのリビジョン20 で見た パス<filename>/tags/1.0</filename>の履歴表示です。"

#. Tag: screen
#: ch09-reference.xml:4901
#, no-c-format
msgid ""
"$ svnlook history -r 20 /usr/local/svn/repos /tags/1.0 --show-ids\n"
"REVISION   PATH &lt;ID&gt;\n"
"--------   ---------\n"
"      19   /tags/1.0 &lt;1.2.12&gt;\n"
"      17   /branches/1.0-rc2 &lt;1.1.10&gt;\n"
"      16   /branches/1.0-rc2 &lt;1.1.x&gt;\n"
"      14   /trunk &lt;1.0.q&gt;\n"
"      13   /trunk &lt;1.0.o&gt;\n"
"      11   /trunk &lt;1.0.k&gt;\n"
"       9   /trunk &lt;1.0.g&gt;\n"
"       8   /trunk &lt;1.0.e&gt;\n"
"       7   /trunk &lt;1.0.b&gt;\n"
"       6   /trunk &lt;1.0.9&gt;\n"
"       5   /trunk &lt;1.0.7&gt;\n"
"       4   /trunk &lt;1.0.6&gt;\n"
"       2   /trunk &lt;1.0.3&gt;\n"
"       1   /trunk &lt;1.0.2&gt;"
msgstr ""
"$ svnlook history -r 20 /usr/local/svn/repos /tags/1.0 --show-ids\n"
"REVISION   PATH &lt;ID&gt;\n"
"--------   ---------\n"
"      19   /tags/1.0 &lt;1.2.12&gt;\n"
"      17   /branches/1.0-rc2 &lt;1.1.10&gt;\n"
"      16   /branches/1.0-rc2 &lt;1.1.x&gt;\n"
"      14   /trunk &lt;1.0.q&gt;\n"
"      13   /trunk &lt;1.0.o&gt;\n"
"      11   /trunk &lt;1.0.k&gt;\n"
"       9   /trunk &lt;1.0.g&gt;\n"
"       8   /trunk &lt;1.0.e&gt;\n"
"       7   /trunk &lt;1.0.b&gt;\n"
"       6   /trunk &lt;1.0.9&gt;\n"
"       5   /trunk &lt;1.0.7&gt;\n"
"       4   /trunk &lt;1.0.6&gt;\n"
"       2   /trunk &lt;1.0.3&gt;\n"
"       1   /trunk &lt;1.0.2&gt;"

#. Tag: refname
#: ch09-reference.xml:4915
#, no-c-format
msgid "svnlook info"
msgstr "svnlook info"

#. Tag: refpurpose
#: ch09-reference.xml:4916
#, no-c-format
msgid "<refpurpose>Print the author, datestamp, log message size, and log message.</refpurpose>"
msgstr "<refpurpose>作業者、日付、ログメッセージの大きさ、ログメッセージを表示します。</refpurpose>"

#. Tag: programlisting
#: ch09-reference.xml:4921
#, no-c-format
msgid "svnlook info REPOS_PATH"
msgstr "svnlook info REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:4926
#, no-c-format
msgid "<para>Print the author, datestamp, log message size, and log message.</para>"
msgstr "<para>作業者、日付、ログメッセージの大きさ、ログメッセージを表示します。</para>"

#. Tag: para
#: ch09-reference.xml:4939
#, no-c-format
msgid "This shows the info output for revision 40 in our sample repository."
msgstr "これはサンプルリポジトリのリビジョン40に対する info の出力です。"

#. Tag: screen
#: ch09-reference.xml:4942
#, no-c-format
msgid ""
"$ svnlook info -r 40 /usr/local/svn/repos\n"
"sally\n"
"2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)\n"
"15\n"
"Rearrange lunch."
msgstr ""
"$ svnlook info -r 40 /usr/local/svn/repos\n"
"sally\n"
"2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)\n"
"15\n"
"Rearrange lunch."

#. Tag: refname
#: ch09-reference.xml:4957
#, no-c-format
msgid "svnlook lock"
msgstr "svnlook lock"

#. Tag: refpurpose
#: ch09-reference.xml:4958
#, no-c-format
msgid "If a lock exists on a path in the repository, describe it."
msgstr "リポジトリ中の特定のパスがロックされている場合、それについての 情報を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:4963
#, no-c-format
msgid "svnlook lock REPOS_PATH PATH_IN_REPOS"
msgstr "svnlook lock REPOS_PATH PATH_IN_REPOS"

#. Tag: para
#: ch09-reference.xml:4968
#, no-c-format
msgid "Print all information available for the lock at <replaceable>PATH_IN_REPOS</replaceable>. If <replaceable>PATH_IN_REPOS</replaceable> is not locked, print nothing."
msgstr "<replaceable>PATH_IN_REPOS</replaceable>上のロックについて取得できるすべての 情報を表示します。 <replaceable>PATH_IN_REPOS</replaceable>がロックされて いなければ何も表示しません。"

#. Tag: para
#: ch09-reference.xml:4983
#, no-c-format
msgid "This describes the lock on the file <filename>tree.jpg</filename>."
msgstr "<filename>tree.jpg</filename>ファイル上のロックに関する 情報を表示しています。"

#. Tag: screen
#: ch09-reference.xml:4986
#, no-c-format
msgid ""
"$ svnlook lock /svn/repos tree.jpg\n"
"UUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753\n"
"Owner: harry\n"
"Created: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)\n"
"Expires: \n"
"Comment (1 line):\n"
"Rework the uppermost branches on the bald cypress in the foreground."
msgstr ""
"$ svnlook lock /svn/repos tree.jpg\n"
"UUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753\n"
"Owner: harry\n"
"Created: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)\n"
"Expires: \n"
"Comment (1 line):\n"
"Rework the uppermost branches on the bald cypress in the foreground."

#. Tag: refname
#: ch09-reference.xml:5001
#, no-c-format
msgid "svnlook log"
msgstr "svnlook log"

#. Tag: refpurpose
#: ch09-reference.xml:5002
#, no-c-format
msgid "<refpurpose>Print the log message.</refpurpose>"
msgstr "<refpurpose>ログメッセージを表示します。</refpurpose>"

#. Tag: programlisting
#: ch09-reference.xml:5006
#, no-c-format
msgid "svnlook log REPOS_PATH"
msgstr "svnlook log REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:5011
#, no-c-format
msgid "<para>Print the log message.</para>"
msgstr "<para>ログメッセージを表示します。</para>"

#. Tag: para
#: ch09-reference.xml:5023
#, no-c-format
msgid "This shows the log output for revision 40 in our sample repository:"
msgstr "これはサンプルリポジトリのリビジョン40のログ表示です:"

#. Tag: screen
#: ch09-reference.xml:5026
#, no-c-format
msgid ""
"$ svnlook log /tmp/repos/\n"
"Rearrange lunch."
msgstr ""
"$ svnlook log /tmp/repos/\n"
"Rearrange lunch."

#. Tag: refname
#: ch09-reference.xml:5040
#, no-c-format
msgid "svnlook propget"
msgstr "svnlook propget"

#. Tag: refpurpose
#: ch09-reference.xml:5041
#, no-c-format
msgid "Print the raw value of a property on a path in the repository."
msgstr "リポジトリ中のパス上に設定された属性値の生の値を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:5046
#, no-c-format
msgid "svnlook propget REPOS_PATH PROPNAME [PATH_IN_REPOS]"
msgstr "svnlook propget REPOS_PATH PROPNAME [PATH_IN_REPOS]"

#. Tag: para
#: ch09-reference.xml:5051
#, no-c-format
msgid "List the value of a property on a path in the repository."
msgstr "リポジトリ中のパス上に設定された属性値を一覧表示します。"

#. Tag: para
#: ch09-reference.xml:5058
#, no-c-format
msgid "pg, pget"
msgstr "pg, pget"

#. Tag: screen
#: ch09-reference.xml:5064
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--transaction (-t)\n"
"--revprop"
msgstr ""
"--revision (-r) REV\n"
"--transaction (-t)\n"
"--revprop"

#. Tag: para
#: ch09-reference.xml:5070
#, no-c-format
msgid "This shows the value of the <quote>seasonings</quote> property on the file <filename>/trunk/sandwich</filename> in the <literal>HEAD</literal> revision:"
msgstr "以下では <literal>HEAD</literal> リビジョンにある <filename>/trunk/sandwich</filename> ファイルの<quote>seasonings</quote>属性値を表示しています:"

#. Tag: screen
#: ch09-reference.xml:5074
#, no-c-format
msgid ""
"$ svnlook pg /usr/local/svn/repos seasonings /trunk/sandwich\n"
"mustard"
msgstr ""
"$ svnlook pg /usr/local/svn/repos seasonings /trunk/sandwich\n"
"mustard"

#. Tag: refname
#: ch09-reference.xml:5088
#, no-c-format
msgid "svnlook proplist"
msgstr "svnlook proplist"

#. Tag: refpurpose
#: ch09-reference.xml:5089
#, no-c-format
msgid "Print the names and values of versioned file and directory properties."
msgstr "バージョン化されたファイルとディレクトリの属性の 名前と値を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:5094
#, no-c-format
msgid "svnlook proplist REPOS_PATH [PATH_IN_REPOS]"
msgstr "svnlook proplist REPOS_PATH [PATH_IN_REPOS]"

#. Tag: para
#: ch09-reference.xml:5099
#, no-c-format
msgid "List the properties of a path in the repository. With <option>--verbose</option>, show the property values too."
msgstr "リポジトリ中のパスの属性を一覧表示します。<option>--verbose</option> を使って属性値も表示できます。"

#. Tag: para
#: ch09-reference.xml:5106
#, no-c-format
msgid "pl, plist"
msgstr "pl, plist"

#. Tag: screen
#: ch09-reference.xml:5112
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--transaction (-t)\n"
"--verbose (-v)\n"
"--revprop"
msgstr ""
"--revision (-r) REV\n"
"--transaction (-t)\n"
"--verbose (-v)\n"
"--revprop"

#. Tag: para
#: ch09-reference.xml:5118
#, no-c-format
msgid "This shows the names of properties set on the file <filename>/trunk/README</filename> in the <literal>HEAD</literal> revision:"
msgstr "これは <literal>HEAD</literal>リビジョンにあるファイル<filename>/trunk/README</filename> に設定された属性名を表示しています:"

#. Tag: screen
#: ch09-reference.xml:5122
#, no-c-format
msgid ""
"$ svnlook proplist /usr/local/svn/repos /trunk/README\n"
"  original-author\n"
"  svn:mime-type"
msgstr ""
"$ svnlook proplist /usr/local/svn/repos /trunk/README\n"
"  original-author\n"
"  svn:mime-type"

#. Tag: para
#: ch09-reference.xml:5124
#, no-c-format
msgid "This is the same command as in the previous example, but this time showing the property values as well:"
msgstr "これは前の例と同じコマンドですが、今回は属性値もいっしょに表示 しています:"

#. Tag: screen
#: ch09-reference.xml:5127
#, no-c-format
msgid ""
"$ svnlook --verbose proplist /usr/local/svn/repos /trunk/README\n"
"  original-author : fitz\n"
"  svn:mime-type : text/plain"
msgstr ""
"$ svnlook --verbose proplist /usr/local/svn/repos /trunk/README\n"
"  original-author : fitz\n"
"  svn:mime-type : text/plain"

#. Tag: tertiary
#: ch09-reference.xml:5136
#, no-c-format
msgid "tree"
msgstr "tree"

#. Tag: refname
#: ch09-reference.xml:5140
#, no-c-format
msgid "svnlook tree"
msgstr "svnlook tree"

#. Tag: refpurpose
#: ch09-reference.xml:5141
#, no-c-format
msgid "Print the tree."
msgstr "ツリーを表示します。"

#. Tag: programlisting
#: ch09-reference.xml:5145
#, no-c-format
msgid "svnlook tree REPOS_PATH [PATH_IN_REPOS]"
msgstr "svnlook tree REPOS_PATH [PATH_IN_REPOS]"

#. Tag: para
#: ch09-reference.xml:5149
#, no-c-format
msgid "Print the tree, starting at <replaceable>PATH_IN_REPOS</replaceable> (if supplied, at the root of the tree otherwise), optionally showing node revision IDs."
msgstr "<replaceable>PATH_IN_REPOS</replaceable> から始まるツリーを表示します。( <replaceable>PATH_IN_REPOS</replaceable> の指定がない場合にはルートから始まるツリーを表示します。)。オプションで ノードリビジョンIDを表示させることもできます。"

#. Tag: screen
#: ch09-reference.xml:5158
#, no-c-format
msgid ""
"--revision (-r) REV\n"
"--transaction (-t)\n"
"--show-ids"
msgstr ""
"--revision (-r) REV\n"
"--transaction (-t)\n"
"--show-ids"

#. Tag: para
#: ch09-reference.xml:5164
#, no-c-format
msgid "This shows the tree output (with node-IDs) for revision 40 in our sample repository:"
msgstr "これは、(ノード番号付きで)サンプルリポジトリのリビジョン40のツリーを 表示したものです:"

#. Tag: screen
#: ch09-reference.xml:5167
#, no-c-format
msgid ""
"$ svnlook tree -r 40 /usr/local/svn/repos --show-ids\n"
"/ &lt;0.0.2j&gt;\n"
" trunk/ &lt;p.0.2j&gt;\n"
"  vendors/ &lt;q.0.2j&gt;\n"
"   deli/ &lt;1g.0.2j&gt;\n"
"    egg.txt &lt;1i.e.2j&gt;\n"
"    soda.txt &lt;1k.0.2j&gt;\n"
"    sandwich.txt &lt;1j.0.2j&gt;"
msgstr ""
"$ svnlook tree -r 40 /usr/local/svn/repos --show-ids\n"
"/ &lt;0.0.2j&gt;\n"
" trunk/ &lt;p.0.2j&gt;\n"
"  vendors/ &lt;q.0.2j&gt;\n"
"   deli/ &lt;1g.0.2j&gt;\n"
"    egg.txt &lt;1i.e.2j&gt;\n"
"    soda.txt &lt;1k.0.2j&gt;\n"
"    sandwich.txt &lt;1j.0.2j&gt;"

#. Tag: tertiary
#: ch09-reference.xml:5177
#, no-c-format
msgid "uuid"
msgstr "uuid"

#. Tag: refname
#: ch09-reference.xml:5181
#, no-c-format
msgid "svnlook uuid"
msgstr "svnlook uuid"

#. Tag: refpurpose
#: ch09-reference.xml:5182
#, no-c-format
msgid "Print the repository's <literal>UUID</literal>."
msgstr "リポジトリの<literal>UUID</literal>を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:5187
#, no-c-format
msgid "svnlook uuid REPOS_PATH"
msgstr "svnlook uuid REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:5192
#, no-c-format
msgid "Print the <literal>UUID</literal> for the repository. the UUID is the repository's <emphasis>u</emphasis>niversal <emphasis>u</emphasis>nique <emphasis>id</emphasis>entifier. The Subversion client uses this identifier to differentiate between one repository and another."
msgstr "リポジトリの<literal>UUID</literal>を表示します。UUID はリポジトリ の<emphasis>u</emphasis>niversal <emphasis>u</emphasis>nique <emphasis>id</emphasis>entifier(訳者:生成するたびに 常に一意であることが保証されるような性質をもった番号のことです。 この一意性は特定のマシン内に限定されているわけではなく、異なるマシン 間でも一意になるような性質があります)のことです。 Subversion クライアントはあるリポジトリと別のリポジトリを区別する のにこの識別子を使います。"

#. Tag: screen
#: ch09-reference.xml:5203
#, no-c-format
msgid ""
"$ svnlook uuid /usr/local/svn/repos\n"
"e7fe1b91-8cd5-0310-98dd-2f12e793c5e8"
msgstr ""
"$ svnlook uuid /usr/local/svn/repos\n"
"e7fe1b91-8cd5-0310-98dd-2f12e793c5e8"

#. Tag: tertiary
#: ch09-reference.xml:5213
#, no-c-format
msgid "youngest"
msgstr "youngest"

#. Tag: refname
#: ch09-reference.xml:5217
#, no-c-format
msgid "svnlook youngest"
msgstr "svnlook youngest"

#. Tag: refpurpose
#: ch09-reference.xml:5218
#, no-c-format
msgid "Print the youngest revision number."
msgstr "最新のリビジョン番号を表示します。"

#. Tag: programlisting
#: ch09-reference.xml:5222
#, no-c-format
msgid "svnlook youngest REPOS_PATH"
msgstr "svnlook youngest REPOS_PATH"

#. Tag: para
#: ch09-reference.xml:5227
#, no-c-format
msgid "Print the youngest revision number of a repository."
msgstr "リポジトリにある最新のリビジョン番号を表示します。"

#. Tag: para
#: ch09-reference.xml:5233
#, no-c-format
msgid "This shows the youngest revision of our sample repository:"
msgstr "これは、サンプルリポジトリの最新のリビジョン番号を表示しています:"

#. Tag: screen
#: ch09-reference.xml:5236
#, no-c-format
msgid ""
"$ svnlook youngest /tmp/repos/ \n"
"42"
msgstr ""
"$ svnlook youngest /tmp/repos/ \n"
"42"

#. Tag: command
#: ch09-reference.xml:5249
#, no-c-format
msgid "<command>svnsync</command>"
msgstr "<command>svnsync</command>"

#. Tag: para
#: ch09-reference.xml:5251
#, no-c-format
msgid "<command>svnsync</command> is the Subversion remote repository mirroring tool. Put simply, it allows you to replay the revisions of one repository into another one."
msgstr ""

#. Tag: para
#: ch09-reference.xml:5255
#, no-c-format
msgid "In any mirroring scenario, there are two repositories: the source repository, and the mirror (or <quote>sink</quote>) repository. The source repository is the repository from which <command>svnsync</command> pulls revisions. The mirror repository is the destination for the revisions pulled from the source repository. Each of the repositories may be local or remote&mdash;they are only ever addressed by their URLs."
msgstr ""

#. Tag: para
#: ch09-reference.xml:5263
#, no-c-format
msgid "The <command>svnsync</command> process requires only read access to the source repository; it never attempts to modify it. But obviously, <command>svnsync</command> requires both read and write access to the mirror repository."
msgstr ""

#. Tag: para
#: ch09-reference.xml:5269
#, no-c-format
msgid "<command>svnsync</command> is very sensitive to changes made in the mirror repository that weren't made as part of a mirroring operation. To prevent this from happening, it's best if the <command>svnsync</command> process is the only process permitted to modify the mirror repository."
msgstr ""

#. Tag: title
#: ch09-reference.xml:5278
#, no-c-format
msgid "<command>svnsync</command> Options"
msgstr "<command>svnsync</command> のスイッチ"

#. Tag: title
#: ch09-reference.xml:5342
#, no-c-format
msgid "<command>svnsync</command> Subcommands"
msgstr "<command>svnsync</command> サブコマンド"

#. Tag: primary
#: ch09-reference.xml:5349
#: ch09-reference.xml:5406
#: ch09-reference.xml:5465
#, no-c-format
msgid "<primary>svnsync</primary>"
msgstr ""

#. Tag: tertiary
#: ch09-reference.xml:5351
#, no-c-format
msgid "copy-revprops"
msgstr "copy-revprops"

#. Tag: refname
#: ch09-reference.xml:5355
#, no-c-format
msgid "svnsync copy-revprops"
msgstr ""

#. Tag: refpurpose
#: ch09-reference.xml:5356
#, no-c-format
msgid "Copy all revision properties for a given revision from the source repository to the mirror repository."
msgstr ""

#. Tag: programlisting
#: ch09-reference.xml:5362
#, no-c-format
msgid "svnsync copy-revprops DEST_URL REV"
msgstr ""

#. Tag: para
#: ch09-reference.xml:5367
#, no-c-format
msgid "Because Subversion revision properties can be changed at any time, it's possible that the properties for some revision might be changed after that revision has already been synchronized to another repository. Because the <command>svnsync synchronize</command> command operates only on the range of revisions that have not yet been synchronized, it won't notice a revision property change outside that range. Left as is, this causes a deviation in the values of that revision's properties between the source and mirror repositories. <command>svnsync copy-revprops</command> is the answer to this problem. Use it to re-synchronize the revision properties for a particular revision."
msgstr ""

#. Tag: screen
#: ch09-reference.xml:5390
#: ch09-reference.xml:5442
#: ch09-reference.xml:5501
#, no-c-format
msgid ""
"--non-interactive\n"
"--no-auth-cache\n"
"--username NAME\n"
"--password PASS\n"
"--config-dir DIR"
msgstr ""

#. Tag: para
#: ch09-reference.xml:5396
#, no-c-format
msgid "Re-synchronize revision properties for a single revision:"
msgstr ""

#. Tag: screen
#: ch09-reference.xml:5398
#, no-c-format
msgid ""
"$ svnsync copy-revprops file:///opt/svn/repos-mirror 6\n"
"Copied properties for revision 6.\n"
"$"
msgstr ""

#. Tag: tertiary
#: ch09-reference.xml:5408
#, no-c-format
msgid "initialize"
msgstr ""

#. Tag: refname
#: ch09-reference.xml:5412
#, no-c-format
msgid "svnsync initialize"
msgstr ""

#. Tag: refpurpose
#: ch09-reference.xml:5413
#, no-c-format
msgid "Initialize a destination repository for synchronization from another repository."
msgstr ""

#. Tag: programlisting
#: ch09-reference.xml:5418
#, no-c-format
msgid "svnsync initialize DEST_URL SOURCE_URL"
msgstr ""

#. Tag: para
#: ch09-reference.xml:5423
#, no-c-format
msgid "<command>svnsync initialize</command> verifies that a repository meets the requirements of a new mirror repository&mdash;that it has no previous existing version history, and that it allows revision property modifications&mdash;and records the initial administrative information which associates the mirror repository with the source repository. This is the first <command>svnsync</command> operation you run on a would-be mirror repository."
msgstr ""

#. Tag: para
#: ch09-reference.xml:5436
#, no-c-format
msgid "init"
msgstr ""

#. Tag: para
#: ch09-reference.xml:5448
#, no-c-format
msgid "Fail to initialize a mirror repository due to inability to modify revision properties:"
msgstr ""

#. Tag: screen
#: ch09-reference.xml:5451
#, no-c-format
msgid ""
"$ svnsync initialize file:///opt/svn/repos-mirror http://svn.example.com/repos\n"
"svnsync: Repository has not been enabled to accept revision propchanges;\n"
"ask the administrator to create a pre-revprop-change hook\n"
"$"
msgstr ""

#. Tag: para
#: ch09-reference.xml:5453
#, no-c-format
msgid "Initialize a repository as a mirror, having already created a pre-revprop-change hook which permits all revision property changes:"
msgstr ""

#. Tag: screen
#: ch09-reference.xml:5457
#, no-c-format
msgid ""
"$ svnsync initialize file:///opt/svn/repos-mirror http://svn.example.com/repos\n"
"Copied properties for revision 0.\n"
"$"
msgstr ""

#. Tag: tertiary
#: ch09-reference.xml:5467
#, no-c-format
msgid "synchronize"
msgstr ""

#. Tag: refname
#: ch09-reference.xml:5471
#, no-c-format
msgid "svnsync synchronize"
msgstr ""

#. Tag: refpurpose
#: ch09-reference.xml:5472
#, no-c-format
msgid "Transfer all pending revisions from the source repository to the mirror repository."
msgstr ""

#. Tag: programlisting
#: ch09-reference.xml:5477
#, no-c-format
msgid "svnsync synchronize DEST_URL"
msgstr ""

#. Tag: para
#: ch09-reference.xml:5482
#, no-c-format
msgid "The <command>svnsync synchronize</command> command does all the heavy lifting of a repository mirroring operation. After consulting with the mirror repository to see which revisions have already been copied into it, it then begins copying any not-yet-mirrored revisions from the source repository."
msgstr ""

#. Tag: para
#: ch09-reference.xml:5489
#, no-c-format
msgid "<command>svnsync synchronize</command> can be gracefully cancelled and restarted."
msgstr ""

#. Tag: para
#: ch09-reference.xml:5495
#, no-c-format
msgid "sync"
msgstr ""

#. Tag: para
#: ch09-reference.xml:5507
#, no-c-format
msgid "Copy unsynchronized revisions from the source repository to the mirror repository:"
msgstr ""

#. Tag: screen
#: ch09-reference.xml:5510
#, no-c-format
msgid ""
"$ svnsync synchronize file:///opt/svn/repos-mirror\n"
"Committed revision 1.\n"
"Copied properties for revision 1.\n"
"Committed revision 2.\n"
"Copied properties for revision 2.\n"
"Committed revision 3.\n"
"Copied properties for revision 3.\n"
"&hellip;\n"
"Committed revision 45.\n"
"Copied properties for revision 45.\n"
"Committed revision 46.\n"
"Copied properties for revision 46.\n"
"Committed revision 47.\n"
"Copied properties for revision 47.\n"
"$"
msgstr ""

#. Tag: para
#: ch09-reference.xml:5526
#, no-c-format
msgid "<command>svnserve</command> allows access to Subversion repositories using Subversion's custom network protocol."
msgstr ""

#. Tag: para
#: ch09-reference.xml:5529
#, no-c-format
msgid "You can run <command>svnserve</command> as a standalone server process (for clients that are using the <literal>svn://</literal> access method); you can have a daemon such as <command>inetd</command> or <command>xinetd</command> launch it for you on demand (also for <literal>svn://</literal>), or you can have <command>sshd</command> launch it on demand for the <literal>svn+ssh://</literal> access method."
msgstr ""

#. Tag: para
#: ch09-reference.xml:5538
#, fuzzy, no-c-format
msgid "Regardless of the access method, once the client has selected a repository by transmitting its URL, <command>svnserve</command> reads a file named <filename>conf/svnserve.conf</filename> in the repository directory to determine repository-specific settings such as what authentication database to use and what authorization policies to apply. See <xref linkend=\"svn.serverconfig.svnserve\"/> for details of the <filename>svnserve.conf</filename> file."
msgstr "クライアントが URL を送ることでリポジトリを選択すると <command>svnserve</command>はリポジトリディレクトリにある <filename>conf/svnserve.conf</filename>という名前のファイルを読んで どのような認証用データベースを使い、またどのような認証方法を使うかの ような設定をリポジトリごとに決めます。 <filename>svnserve.conf</filename>ファイルの詳細は<xref linkend=\"svn.serverconfig.svnserve\"/>を見てください。"

#. Tag: title
#: ch09-reference.xml:5550
#, fuzzy, no-c-format
msgid "<command>svnserve</command> Options"
msgstr "<command>svnserve</command> スイッチ"

#. Tag: para
#: ch09-reference.xml:5552
#, fuzzy, no-c-format
msgid "Unlike the previous commands we've described, <command>svnserve</command> has no subcommands&mdash;<command>svnserve</command> is controlled exclusively by options."
msgstr "既に説明してきたコマンドとは違い、 <command>svnserve</command>はサブコマンドがありません&mdash; <command>svnserve</command>はスイッチによって排他的に制御されます。"

#. Tag: term
#: ch09-reference.xml:5560
#, no-c-format
msgid "<option>--daemon</option> (<option>-d</option>)"
msgstr "<option>--daemon</option> (<option>-d</option>)"

#. Tag: para
#: ch09-reference.xml:5562
#, no-c-format
msgid "Causes <command>svnserve</command> to run in daemon mode. <command>svnserve</command> backgrounds itself and accepts and serves TCP/IP connections on the svn port (3690, by default)."
msgstr "<command>svnserve</command>がデーモンモードで実行 するようにします。<command>svnserve</command>自身がバックグラウンドで 実行され、svn ポート(通常は 3690)上に TCP/IP 接続を受け付け、接続を 用意します。"

#. Tag: term
#: ch09-reference.xml:5570
#, no-c-format
msgid "<option>--listen-port</option>=<replaceable>PORT</replaceable>"
msgstr "<option>--listen-port</option>=<replaceable>PORT</replaceable>"

#. Tag: para
#: ch09-reference.xml:5572
#, fuzzy, no-c-format
msgid "Causes svnserve to listen on <replaceable>PORT</replaceable> when run in daemon mode. (FreeBSD daemons only listen on tcp6 by default&mdash;this option tells them to also listen on tcp4.)"
msgstr "デーモンモード時に<replaceable>PORT</replaceable>で 待ち受けるように指定します。"

#. Tag: term
#: ch09-reference.xml:5580
#, no-c-format
msgid "<option>--listen-host</option>=<replaceable>HOST</replaceable>"
msgstr "<option>--listen-host</option>=<replaceable>HOST</replaceable>"

#. Tag: para
#: ch09-reference.xml:5582
#, no-c-format
msgid "Causes <command>svnserve</command> to listen on the interface specified by <replaceable>HOST</replaceable>, which may be either a hostname or an IP address."
msgstr "<command>svnserve</command>が <replaceable>HOST</replaceable>で指定されるインターフェー ス上で待ち受けるように指定します。ホスト名か IP アドレスの いずれかで指定できます。"

#. Tag: option
#: ch09-reference.xml:5589
#, no-c-format
msgid "--foreground"
msgstr "--foreground"

#. Tag: para
#: ch09-reference.xml:5591
#, fuzzy, no-c-format
msgid "When used together with <option>-d</option>, this option causes <command>svnserve</command> to stay in the foreground. This option is mainly useful for debugging."
msgstr "<option>-d</option>と一緒に利用すると <command>svnserve</command>がフォアグラウントで待機するよ うにできます。このスイッチは主にデバッグ時に利用されます。"

#. Tag: term
#: ch09-reference.xml:5599
#, no-c-format
msgid "<option>--inetd</option> (<option>-i</option>)"
msgstr "<option>--inetd</option> (<option>-i</option>)"

#. Tag: para
#: ch09-reference.xml:5601
#, no-c-format
msgid "Causes <command>svnserve</command> to use the stdin/stdout file descriptors, as is appropriate for a daemon running out of <command>inetd</command>."
msgstr "<command>svnserve</command>が標準入力/標準出力のファ イル記述子を利用するように指定します。<command>inetd</command>と共に 利用する場合に適しています。"

#. Tag: term
#: ch09-reference.xml:5608
#: ch09-reference.xml:5768
#, no-c-format
msgid "<option>--help</option> (<option>-h</option>)"
msgstr "<option>--help</option> (<option>-h</option>)"

#. Tag: para
#: ch09-reference.xml:5610
#, no-c-format
msgid "Displays a usage summary and exits."
msgstr "利用方法の概略を表示し抜けます。"

#. Tag: para
#: ch09-reference.xml:5617
#, no-c-format
msgid "Displays version information, a list of repository back-end modules available, and exits."
msgstr "バージョン情報と、利用可能なリポジトリバックエンドモジュール一覧を 表示してから終了します。"

#. Tag: term
#: ch09-reference.xml:5623
#, no-c-format
msgid "<option>--root</option>=<replaceable>ROOT</replaceable> (<option>-r</option>=<replaceable>ROOT</replaceable>)"
msgstr "<option>--root</option>=<replaceable>ROOT</replaceable> (<option>-r</option>=<replaceable>ROOT</replaceable>)"

#. Tag: para
#: ch09-reference.xml:5626
#, no-c-format
msgid "Sets the virtual root for repositories served by <command>svnserve</command>. The pathname in URLs provided by the client will be interpreted relative to this root, and will not be allowed to escape this root."
msgstr "<command>svnserve</command>によって提供されるリポジ トリの仮想的なルートを設定します。クライアントによって指定される URL 中のパス名はこのルートに相対的なものと解釈され、その外にアクセスするこ とを許しません。"

#. Tag: term
#: ch09-reference.xml:5635
#, no-c-format
msgid "<option>--tunnel</option> (<option>-t</option>)"
msgstr "<option>--tunnel</option> (<option>-t</option>)"

#. Tag: para
#: ch09-reference.xml:5637
#, fuzzy, no-c-format
msgid "Causes <command>svnserve</command> to run in tunnel mode, which is just like the <command>inetd</command> mode of operation (both modes serve one connection over stdin/stdout, then exit), except that the connection is considered to be pre-authenticated with the username of the current uid. This flag is automatically passed for you by the client when running over a tunnel agent such as <command>ssh</command>. That means there's rarely any need for <emphasis>you</emphasis> to pass this option to <command>svnserve</command>. So if you find yourself typing <literal>svnserve --tunnel</literal> on the command line, and wondering what to do next, see <xref linkend=\"svn.serverconfig.svnserve.sshauth\"/>."
msgstr "<command>svnserve</command>がトンネルモードで実行す るように指定します。<command>inetd</command>と(標準入出力を使って接続 するという意味で)同様ですが、現在の uid に対応したユーザ名であらかじめ 認証されていると考えます。このフラグは <command>ssh</command>のような トンネル用エージェント越しに実行するときクライアントによって指定される ものです。"

#. Tag: option
#: ch09-reference.xml:5655
#, no-c-format
msgid "--tunnel-user NAME"
msgstr "--tunnel-user NAME"

#. Tag: para
#: ch09-reference.xml:5657
#, fuzzy, no-c-format
msgid "Used in conjunction with the <option>--tunnel</option> option; tells svnserve to assume that <replaceable>NAME</replaceable> is the authenticated user, rather than the UID of the svnserve process. Useful for users wishing to share a single system account over SSH, but maintaining separate commit identities."
msgstr "<option>--tunnel</option>スイッチと一緒に使うとsvnserve は svnserveプロセスの UID のかわりに <replaceable>NAME</replaceable> が認証されたユーザであると見なします。SSH 越しに 一つのシステムアカウントを共有しながら、コミットの主体としては分離して 管理したいようなユーザ間では便利です。"

#. Tag: term
#: ch09-reference.xml:5668
#, no-c-format
msgid "<option>--threads</option> (<option>-T</option>)"
msgstr "<option>--threads</option> (<option>-T</option>)"

#. Tag: para
#: ch09-reference.xml:5670
#, fuzzy, no-c-format
msgid "When running in daemon mode, causes <command>svnserve</command> to spawn a thread instead of a process for each connection (e.g. for when running on Windows). The <command>svnserve</command> process still backgrounds itself at startup time."
msgstr "デーモンモードで実行される場合、接続ごとに <command>svnserve</command>がプロセスを起動するかわりに スレッドを起動するように指定します。 <command>svnserve</command>自身は やはり起動時にバックグラウンドに常駐します。"

#. Tag: term
#: ch09-reference.xml:5679
#, no-c-format
msgid "<option>--listen-once</option> (<option>-X</option>)"
msgstr "<option>--listen-once</option> (<option>-X</option>)"

#. Tag: para
#: ch09-reference.xml:5681
#, no-c-format
msgid "Causes <command>svnserve</command> to accept one connection on the svn port, serve it, and exit. This option is mainly useful for debugging."
msgstr "<command>svnserve</command>が svn ポート上の接続を ひとつだけ受け入れ、サービスを提供後抜けるようにします。この オプションは主にデバッグ時に利用されます。"

#. Tag: command
#: ch09-reference.xml:5698
#, no-c-format
msgid "<command>svnversion</command>"
msgstr "<command>svnversion</command>"

#. Tag: primary
#: ch09-reference.xml:5703
#, fuzzy, no-c-format
msgid "<primary>svnversion</primary>"
msgstr "<command>svnversion</command>"

#. Tag: refname
#: ch09-reference.xml:5707
#, no-c-format
msgid "<refname>svnversion</refname>"
msgstr "<refname>svnversion</refname>"

#. Tag: refpurpose
#: ch09-reference.xml:5708
#, no-c-format
msgid "Summarize the local revision(s) of a working copy."
msgstr "作業コピーのローカルリビジョンについて簡単に表示します。"

#. Tag: programlisting
#: ch09-reference.xml:5714
#, fuzzy, no-c-format
msgid "svnversion [OPTIONS] [WC_PATH [TRAIL_URL]]"
msgstr "svnversion [OPTIONS] WC_PATH [TRAIL_URL]"

#. Tag: para
#: ch09-reference.xml:5720
#, no-c-format
msgid "<command>svnversion</command> is a program for summarizing the revision mixture of a working copy. The resultant revision number, or revision range, is written to standard output."
msgstr "<command>svnversion</command> は作業コピーの混合リビジョン状況を表示します。 リビジョン番号またはリビジョン範囲が標準出力に出力されます。"

#. Tag: para
#: ch09-reference.xml:5725
#, no-c-format
msgid "It's common to use this output in your build process when defining the version number of your program."
msgstr ""

#. Tag: para
#: ch09-reference.xml:5728
#, no-c-format
msgid "<replaceable>TRAIL_URL</replaceable>, if present, is the trailing portion of the URL used to determine if <replaceable>WC_PATH</replaceable> itself is switched (detection of switches within <replaceable>WC_PATH</replaceable> does not rely on <replaceable>TRAIL_URL</replaceable>)."
msgstr "<replaceable>TRAIL_URL</replaceable> を指定した場合は、 <replaceable>WC_PATH</replaceable> 自身がスイッチされた場合の URL の終わりの部分として利用されます。(<replaceable>WC_PATH</replaceable> 内部でのスイッチの検出は <replaceable>TRAIL_URL</replaceable> にはよりません)。"

#. Tag: para
#: ch09-reference.xml:5735
#, no-c-format
msgid "When <replaceable>WC_PATH</replaceable> is not defined, the current directory will be used as the working copy path. <replaceable>TRAIL_URL</replaceable> cannot be defined if <replaceable>WC_PATH</replaceable> is not explicitly given."
msgstr ""

#. Tag: para
#: ch09-reference.xml:5746
#, fuzzy, no-c-format
msgid "Like <command>svnserve</command>, <command>svnversion</command> has no subcommands, it only has options."
msgstr "<command>svnserve</command> と同様 <command>svnversion</command> に サブコマンドはありません。スイッチがあるだけです。"

#. Tag: term
#: ch09-reference.xml:5753
#, no-c-format
msgid "<option>--no-newline</option> (<option>-n</option>)"
msgstr "<option>--no-newline</option> (<option>-n</option>)"

#. Tag: para
#: ch09-reference.xml:5755
#, no-c-format
msgid "Omit the usual trailing newline from the output."
msgstr "通常は出力する末尾の改行文字を省略します。"

#. Tag: term
#: ch09-reference.xml:5760
#, no-c-format
msgid "<option>--committed</option> (<option>-c</option>)"
msgstr "<option>--committed</option> (<option>-c</option>)"

#. Tag: para
#: ch09-reference.xml:5762
#, no-c-format
msgid "Use the last-changed revisions rather than the current (i.e., highest locally available) revisions."
msgstr "現在の(つまりローカルで一番新しい)リビジョンのかわりに 最終的な更新があったリビジョンを使います。"

#. Tag: para
#: ch09-reference.xml:5770
#, no-c-format
msgid "Print a help summary."
msgstr "簡単なヘルプを表示します。"

#. Tag: para
#: ch09-reference.xml:5777
#, no-c-format
msgid "Print the version of <command>svnversion</command> and exit with no error."
msgstr "<command>svnversion</command>のバージョンを表示してから プログラムを正常終了します。"

#. Tag: para
#: ch09-reference.xml:5788
#, no-c-format
msgid "If the working copy is all at the same revision (for example, immediately after an update), then that revision is printed out:"
msgstr "作業コピーが完全に単一リビジョン状態にある場合(たとえば update コマンドの 直後など)、リビジョンは以下のように表示されます:"

#. Tag: screen
#: ch09-reference.xml:5792
#, no-c-format
msgid ""
"$ svnversion\n"
"4168"
msgstr ""
"$ svnversion\n"
"4168"

#. Tag: para
#: ch09-reference.xml:5794
#, no-c-format
msgid "You can add <replaceable>TRAIL_URL</replaceable> to make sure that the working copy is not switched from what you expect. Note that the <replaceable>WC_PATH</replaceable> is required in this command:"
msgstr ""

#. Tag: screen
#: ch09-reference.xml:5799
#, no-c-format
msgid ""
"$ svnversion . /repos/svn/trunk\n"
"4168"
msgstr ""
"$ svnversion . /repos/svn/trunk\n"
"4168"

#. Tag: para
#: ch09-reference.xml:5801
#, no-c-format
msgid "For a mixed-revision working copy, the range of revisions present is printed:"
msgstr "混合リビジョンの作業コピーの場合には、リビジョン範囲が 表示されます:"

#. Tag: screen
#: ch09-reference.xml:5804
#, no-c-format
msgid ""
"$ svnversion\n"
"4123:4168"
msgstr ""
"$ svnversion\n"
"4123:4168"

#. Tag: para
#: ch09-reference.xml:5806
#, no-c-format
msgid "If the working copy contains modifications, a trailing \"M\" is added:"
msgstr "作業コピーに修正がある場合には \"M\" を追加して表示します:"

#. Tag: screen
#: ch09-reference.xml:5809
#, no-c-format
msgid ""
"$ svnversion\n"
"4168M"
msgstr ""
"$ svnversion\n"
"4168M"

#. Tag: para
#: ch09-reference.xml:5811
#, no-c-format
msgid "If the working copy is switched, a trailing \"S\" is added:"
msgstr "作業コピーがスイッチされた場合には \"S\" を追加して表示します:"

#. Tag: screen
#: ch09-reference.xml:5814
#, no-c-format
msgid ""
"$ svnversion\n"
"4168S"
msgstr ""
"$ svnversion\n"
"4168S"

#. Tag: para
#: ch09-reference.xml:5816
#, no-c-format
msgid "Thus, here is a mixed-revision, switched working copy containing some local modifications:"
msgstr "それで、たとえば混合リビジョンであり、作業コピーはスイッチされて いて、さらにローカルな修正があった場合には以下のようになります:"

#. Tag: screen
#: ch09-reference.xml:5819
#, no-c-format
msgid ""
"$ svnversion\n"
"4212:4168MS"
msgstr ""
"$ svnversion\n"
"4212:4168MS"

#. Tag: para
#: ch09-reference.xml:5821
#, no-c-format
msgid "If invoked on a directory that is not a working copy, <command>svnversion</command> assumes it is an exported working copy and prints \"exported\":"
msgstr "作業コピーではないディレクトリで実行されると、 <command>svnversion</command> はそれがエクスポートされた 作業コピーであると仮定し \"exported\" と表示します:"

#. Tag: screen
#: ch09-reference.xml:5825
#, no-c-format
msgid ""
"$ svnversion\n"
"exported"
msgstr ""
"$ svnversion\n"
"exported"

#. Tag: refname
#: ch09-reference.xml:5842
#, no-c-format
msgid "<literal>mod_dav_svn</literal> Configuration Directives"
msgstr "<literal>mod_dav_svn</literal> 設定ディレクティブ"

#. Tag: refpurpose
#: ch09-reference.xml:5843
#, no-c-format
msgid "Apache configuration directives for serving Subversion repositories through Apache HTTP Server."
msgstr "Apache の HTTP サーバを通じて Subversion リポジトリを管理する場合の Apache の設定ディレクティブです。"

#. Tag: para
#: ch09-reference.xml:5852
#, no-c-format
msgid "This section briefly describes each of the Subversion Apache configuration directives. For an in-depth description of configuring Apache with Subversion, see <xref linkend=\"svn.serverconfig.httpd\"/>.)"
msgstr "この節では Subversion に関係した Apache の設定ディレクティブをそれぞれ 簡単に説明します。(Subversion 利用時の Apache の設定についてのより詳しい説明は <xref linkend=\"svn.serverconfig.httpd\"/>を見てください。)"

#. Tag: title
#: ch09-reference.xml:5860
#, no-c-format
msgid "Directives"
msgstr "ディレクティブ"

#. Tag: literal
#: ch09-reference.xml:5865
#, no-c-format
msgid "DAV svn"
msgstr "DAV svn"

#. Tag: para
#: ch09-reference.xml:5868
#, no-c-format
msgid "This directive must be included in any <literal>Directory</literal> or <literal>Location</literal> block for a Subversion repository. It tells httpd to use the Subversion backend for mod_dav to handle all requests."
msgstr "このディレクティブは Subversion リポジトリのあるすべての <literal>Directory</literal> あるいは <literal>Location</literal>ブロックに 含めなくてはなりません。すべての要求の処理にたいして mod_dav のバックエンドとして Subversion を使うよう httpd に指示します。"

#. Tag: literal
#: ch09-reference.xml:5878
#, no-c-format
msgid "SVNAutoversioning On"
msgstr "SVNAutoversioning On"

#. Tag: para
#: ch09-reference.xml:5881
#, no-c-format
msgid "This directive allows write requests from WebDAV clients to result in automatic commits. A generic log message is auto-generated and attached to each revision. If you enable Autoversioning, you'll likely want to set <literal>ModMimeUsePathInfo On</literal> so that <literal>mod_mime</literal> can set <literal>svn:mime-type</literal> to the correct mime-type automatically (as best as <literal>mod_mime</literal> is able to, of course). For more information, see"
msgstr "このディレクティブは WebDAV クライアントからの書き込み要求を認め、 それが不分割なコミットになるようにします。一般的なログメッセージが 自動生成されリビジョンごとに付与されます。自動バージョン化を有効に する場合、おそらく <literal>ModMimeUsePathInfo On</literal>も 設定したくなるかも知れません。これによって <literal>mod_mime</literal>は 自動的に正しい mime-type を <literal>svn:mime-type</literal>に設定 できるようになります(もちろん <literal>mod_mime</literal>が可能な 範囲で、です)。より詳細は <xref linkend=\"svn.webdav\"/> を見てください。"

#. Tag: literal
#: ch09-reference.xml:5897
#, no-c-format
msgid "SVNPath"
msgstr "SVNPath"

#. Tag: para
#: ch09-reference.xml:5900
#, no-c-format
msgid "This directive specifies the location in the filesystem for a Subversion repository's files. In a configuration block for a Subversion repository, either this directive or <literal>SVNParentPath</literal> must be present, but not both."
msgstr "このディレクティブは Subversion リポジトリが使うファイルを置くための ファイルシステム中の場所を指定します。Subversion リポジトリのための 設定ブロック中では、このディレクティブか、<literal>SVNParentPath</literal> のどちらか一方が存在しなてくはなりません。しかし両方存在してはいません。"

#. Tag: literal
#: ch09-reference.xml:5911
#, no-c-format
msgid "SVNSpecialURI"
msgstr "SVNSpecialURI"

#. Tag: para
#: ch09-reference.xml:5914
#, no-c-format
msgid "Specifies the URI component (namespace) for special Subversion resources. The default is <quote><literal>!svn</literal></quote>, and most administrators will never use this directive. Only set this if there is a pressing need to have a file named <filename>!svn</filename> in your repository. If you change this on a server already in use, it will break all of the outstanding working copies and your users will hunt you down with pitchforks and flaming torches."
msgstr "Subversion 用の特殊なリソースのための URI 名(名前空間)を指定します。 デフォルトは <quote><literal>!svn</literal></quote> で、ほとんどの 管理者は実際にこのディレクティブを使うことはないでしょう。 リポジトリ中で <filename>!svn</filename>という名前のファイルを 使う特殊な事情がある場合にだけ設定します。サーバ上ですでに利用している 値を変更したりすれば、外部にあるすべての作業コピーが壊れてしまい、 あなたはユーザに捕らえられ、何か恐ろしい目にあうでしょう。"

#. Tag: literal
#: ch09-reference.xml:5929
#, no-c-format
msgid "SVNReposName"
msgstr "SVNReposName"

#. Tag: para
#: ch09-reference.xml:5932
#, fuzzy, no-c-format
msgid "Specifies the name of a Subversion repository for use in <literal>HTTP GET</literal> responses. This value will be prepended to the title of all directory listings (which are served when you navigate to a Subversion repository with a web browser). This directive is optional."
msgstr "<literal>HTTP GET</literal>要求で利用する Subversion リポジトリの 名前を指定します。この値はすべてのディレクトリ一覧表示のタイトル として利用されます(これは Web ブラウザで Subversion リポジトリを 閲覧するときに使われます)。このディレクティブはオプションです。"

#. Tag: literal
#: ch09-reference.xml:5943
#, no-c-format
msgid "SVNIndexXSLT"
msgstr "SVNIndexXSLT"

#. Tag: para
#: ch09-reference.xml:5946
#, no-c-format
msgid "Specifies the URI of an XSL transformation for directory indexes. This directive is optional."
msgstr "ディレクトリインデックスのための XSL 変換の URI を指定します。 このディレクティブはオプションです。"

#. Tag: literal
#: ch09-reference.xml:5953
#, no-c-format
msgid "SVNParentPath"
msgstr "SVNParentPath"

#. Tag: para
#: ch09-reference.xml:5956
#, no-c-format
msgid "Specifies the location in the filesystem of a parent directory whose child directories are Subversion repositories. In a configuration block for a Subversion repository, either this directive or <literal>SVNPath</literal> must be present, but not both."
msgstr "そのディレクトリのサブディレクトリが Subversion のリポジトリである ような親ディレクトリの、ファイルシステム中での位置を指定します。 Subversion リポジトリの設定ブロック中には、このディレクティブか <literal>SVNPath</literal>のどちらかが存在しなくてはなりません。 しかし両方存在してはいません。"

#. Tag: literal
#: ch09-reference.xml:5967
#, no-c-format
msgid "SVNPathAuthz"
msgstr "SVNPathAuthz"

#. Tag: para
#: ch09-reference.xml:5970
#, no-c-format
msgid "Control path-based authorization by enabling or disabling subrequests. See <xref linkend=\"svn.serverconfig.httpd.authz.pathauthzoff\"/> for details."
msgstr "パス名にもとづいた認可を許可したり禁止したりするのに使います。 詳しくは <xref linkend=\"svn.serverconfig.httpd.authz.pathauthzoff\"/>を見てください。"

#. Tag: title
#: ch09-reference.xml:5987
#, no-c-format
msgid "Subversion properties"
msgstr "Subversion properties"

#. Tag: para
#: ch09-reference.xml:5989
#, fuzzy, no-c-format
msgid "Subversion allows users to invent arbitrarily-named versioned properties on files and directories, as well as unversioned properties on revisions. The only restriction is on properties whose names begin with <literal>svn:</literal> (those are reserved for Subversion's own use). While these properties may be set by users to control Subversion's behavior, users may not invent new <literal>svn:</literal> properties."
msgstr "Subversion allows users to invent arbitrarily-named versioned properties on files and directories, as well as unversioned properties on revisions. The only restriction is on properties prefixed with <quote>svn:</quote>. Properties in that namespace are reserved for Subversion's own use. While these properties may be set by users to control Subversion's behavior, users may not invent new <quote>svn:</quote> properties."

#. Tag: title
#: ch09-reference.xml:5998
#, no-c-format
msgid "Versioned Properties"
msgstr "Versioned Properties"

#. Tag: literal
#: ch09-reference.xml:6003
#, no-c-format
msgid "svn:executable"
msgstr "svn:executable"

#. Tag: para
#: ch09-reference.xml:6006
#, no-c-format
msgid "If present on a file, the client will make the file executable in Unix-hosted working copies. See <xref linkend=\"svn.advanced.props.special.executable\"/>."
msgstr "If present on a file, the client will make the file executable in Unix-hosted working copies. See <xref linkend=\"svn.advanced.props.special.executable\"/>."

#. Tag: literal
#: ch09-reference.xml:6015
#, no-c-format
msgid "svn:mime-type"
msgstr "svn:mime-type"

#. Tag: para
#: ch09-reference.xml:6018
#, no-c-format
msgid "If present on a file, the value indicates the file's mime-type. This allows the client to decide whether line-based contextual merging is safe to perform during updates, and can also affect how the file behaves when fetched via web browser. See <xref linkend=\"svn.advanced.props.special.mime-type\"/>."
msgstr "If present on a file, the value indicates the file's mime-type. This allows the client to decide whether line-based contextual merging is safe to perform during updates, and can also affect how the file behaves when fetched via web browser. See <xref linkend=\"svn.advanced.props.special.mime-type\"/>."

#. Tag: literal
#: ch09-reference.xml:6030
#, no-c-format
msgid "svn:ignore"
msgstr "svn:ignore"

#. Tag: para
#: ch09-reference.xml:6033
#, fuzzy, no-c-format
msgid "If present on a directory, the value is a list of <emphasis>unversioned</emphasis> file patterns to be ignored by <command>svn status</command> and other subcommands. See"
msgstr "If present on a directory, the value is a list of unversioned file patterns to be ignored by <command>svn status</command> and other subcommands. See"

#. Tag: literal
#: ch09-reference.xml:6044
#, no-c-format
msgid "svn:keywords"
msgstr "svn:keywords"

#. Tag: para
#: ch09-reference.xml:6047
#, no-c-format
msgid "If present on a file, the value tells the client how to expand particular keywords within the file. See <xref linkend=\"svn.advanced.props.special.keywords\"/>."
msgstr "If present on a file, the value tells the client how to expand particular keywords within the file. See <xref linkend=\"svn.advanced.props.special.keywords\"/>."

#. Tag: literal
#: ch09-reference.xml:6057
#, no-c-format
msgid "svn:eol-style"
msgstr "svn:eol-style"

#. Tag: para
#: ch09-reference.xml:6060
#, fuzzy, no-c-format
msgid "If present on a file, the value tells the client how to manipulate the file's line-endings in the working copy, and in exported trees. See <xref linkend=\"svn.advanced.props.special.eol-style\"/> and <xref linkend=\"svn.ref.svn.c.export\"/>."
msgstr "If present on a file, the value tells the client how to manipulate the file's line-endings in the working copy. See <xref linkend=\"svn.advanced.props.special.eol-style\"/>."

#. Tag: literal
#: ch09-reference.xml:6070
#, no-c-format
msgid "svn:externals"
msgstr "svn:externals"

#. Tag: para
#: ch09-reference.xml:6073
#, fuzzy, no-c-format
msgid "If present on a directory, the value is a multi-line list of other paths and URLs the client should check out. See <xref linkend=\"svn.advanced.externals\"/>."
msgstr "If present on a directory, the value is a multi-line list of other paths and URLs the client should check out. See <xref linkend=\"svn.advanced.props.special.externals\"/>."

#. Tag: literal
#: ch09-reference.xml:6083
#, no-c-format
msgid "svn:special"
msgstr "svn:special"

#. Tag: para
#: ch09-reference.xml:6086
#, fuzzy, no-c-format
msgid "If present on a file, indicates that the file is not an ordinary file, but a symbolic link or other special object<footnote><para>As of this writing, symbolic links are indeed the only <quote>special</quote> objects. But there might be more in future releases of Subversion.</para></footnote>."
msgstr "If present on a file, indicates that the file is not an ordinary file, but a symbolic link or other special object. See <xref linkend=\"svn.advanced.props.special.special\"/>."

#. Tag: literal
#: ch09-reference.xml:6097
#, no-c-format
msgid "svn:needs-lock"
msgstr "svn:needs-lock"

#. Tag: para
#: ch09-reference.xml:6100
#, no-c-format
msgid "If present on a file, tells the client to make the file read-only in the working copy, as a reminder that the file should be locked before editing begins. See <xref linkend=\"svn.advanced.locking.lock-communication\"/>."
msgstr "If present on a file, tells the client to make the file read-only in the working copy, as a reminder that the file should be locked before editing begins. See <xref linkend=\"svn.advanced.locking.lock-communication\"/>."

#. Tag: title
#: ch09-reference.xml:6113
#, no-c-format
msgid "Unversioned Properties"
msgstr "バージョン化されない属性"

#. Tag: literal
#: ch09-reference.xml:6118
#, no-c-format
msgid "svn:author"
msgstr "svn:author"

#. Tag: para
#: ch09-reference.xml:6121
#, no-c-format
msgid "If present, contains the authenticated username of the person who created the revision. (If not present, then the revision was committed anonymously.)"
msgstr "If present, contains the authenticated username of the person who created the revision. (If not present, then the revision was committed anonymously.)"

#. Tag: literal
#: ch09-reference.xml:6129
#, no-c-format
msgid "svn:date"
msgstr "svn:date"

#. Tag: para
#: ch09-reference.xml:6132
#, fuzzy, no-c-format
msgid "Contains the UTC time the revision was created, in ISO 8601 format. The value comes from the <emphasis>server</emphasis> machine's clock, not the client's."
msgstr "Contains the UTC time the revision was created, in ISO format. The value comes from the server machine's clock."

#. Tag: literal
#: ch09-reference.xml:6141
#, no-c-format
msgid "svn:log"
msgstr "svn:log"

#. Tag: para
#: ch09-reference.xml:6144
#, no-c-format
msgid "Contains the log message describing the revision."
msgstr "Contains the log message describing the revision."

#. Tag: literal
#: ch09-reference.xml:6151
#, no-c-format
msgid "svn:autoversioned"
msgstr "svn:autoversioned"

#. Tag: para
#: ch09-reference.xml:6154
#, no-c-format
msgid "If present, the revision was created via the autoversioning feature. See <xref linkend=\"svn.webdav.autoversioning\"/>."
msgstr "If present, the revision was created via the autoversioning feature. See <xref linkend=\"svn.webdav.autoversioning\"/>."

#. Tag: title
#: ch09-reference.xml:6171
#, no-c-format
msgid "Repository Hooks"
msgstr "リポジトリのフック"

#. Tag: primary
#: ch09-reference.xml:6177
#: ch09-reference.xml:6232
#: ch09-reference.xml:6287
#: ch09-reference.xml:6339
#: ch09-reference.xml:6410
#: ch09-reference.xml:6480
#: ch09-reference.xml:6537
#: ch09-reference.xml:6591
#: ch09-reference.xml:6650
#, no-c-format
msgid "repository"
msgstr "リポジトリ"

#. Tag: tertiary
#: ch09-reference.xml:6179
#, no-c-format
msgid "<tertiary>start-commit</tertiary>"
msgstr ""

#. Tag: refname
#: ch09-reference.xml:6183
#, no-c-format
msgid "<refname>start-commit</refname>"
msgstr "<refname>start-commit</refname>"

#. Tag: refpurpose
#: ch09-reference.xml:6184
#, no-c-format
msgid "Notification of the beginning of a commit."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6190
#, no-c-format
msgid "The start-commit hook is run before the commit transaction is even created. It is typically used to decide if the user has commit privileges at all."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6194
#, no-c-format
msgid "If the start-commit hook program returns a non-zero exit value, the commit is stopped before the commit transaction is even created, and anything printed to stderr is marshalled back to the client."
msgstr ""

#. Tag: title
#: ch09-reference.xml:6202
#: ch09-reference.xml:6261
#: ch09-reference.xml:6313
#: ch09-reference.xml:6369
#: ch09-reference.xml:6439
#: ch09-reference.xml:6507
#: ch09-reference.xml:6560
#: ch09-reference.xml:6620
#: ch09-reference.xml:6673
#, no-c-format
msgid "Input Parameter(s)"
msgstr ""

#. Tag: para
#: ch09-reference.xml:6204
#: ch09-reference.xml:6263
#: ch09-reference.xml:6315
#: ch09-reference.xml:6371
#: ch09-reference.xml:6441
#: ch09-reference.xml:6509
#: ch09-reference.xml:6562
#: ch09-reference.xml:6622
#: ch09-reference.xml:6675
#, no-c-format
msgid "The command-line arguments passed to the hook program, in order, are:"
msgstr ""

#. Tag: para
#: ch09-reference.xml:6209
#: ch09-reference.xml:6268
#: ch09-reference.xml:6320
#: ch09-reference.xml:6376
#: ch09-reference.xml:6446
#: ch09-reference.xml:6514
#: ch09-reference.xml:6567
#: ch09-reference.xml:6627
#: ch09-reference.xml:6680
#, no-c-format
msgid "repository path"
msgstr "リポジトリパス"

#. Tag: para
#: ch09-reference.xml:6212
#, no-c-format
msgid "authenticated username attempting the commit"
msgstr ""

#. Tag: title
#: ch09-reference.xml:6218
#: ch09-reference.xml:6277
#: ch09-reference.xml:6329
#: ch09-reference.xml:6400
#: ch09-reference.xml:6470
#: ch09-reference.xml:6527
#: ch09-reference.xml:6581
#: ch09-reference.xml:6640
#: ch09-reference.xml:6694
#, fuzzy, no-c-format
msgid "Common Uses"
msgstr "典型的な利用方法"

#. Tag: para
#: ch09-reference.xml:6220
#: ch09-reference.xml:6528
#: ch09-reference.xml:6641
#, no-c-format
msgid "access control"
msgstr "アクセス制御"

#. Tag: tertiary
#: ch09-reference.xml:6234
#, no-c-format
msgid "<tertiary>pre-commit</tertiary>"
msgstr ""

#. Tag: refname
#: ch09-reference.xml:6238
#, no-c-format
msgid "<refname>pre-commit</refname>"
msgstr "<refname>pre-commit</refname>"

#. Tag: refpurpose
#: ch09-reference.xml:6239
#, no-c-format
msgid "Notification just prior to commit completion."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6245
#, fuzzy, no-c-format
msgid "The pre-commit hook is run just before a commit transaction is promoted to a new revision. Typically, this hook is used to protect against commits that are disallowed due to content or location (for example, your site might require that all commits to a certain branch include a ticket number from the bug tracker, or that the incoming log message is non-empty)."
msgstr "これは、トランザクションの完結後、実際のコミットの前に実行 されます。典型的には、コミットの内容や場所(たとえば あなたのサイトでは、すべてのコミットはバグトラッカーの管理番号 を含むようなブランチに対してしなくてはならないとか、 ログメッセージが空であってはいけないというようなポリシーが あるかも知れません) によってコミットを許可しないようにするために使われます。 リポジトリはこのプログラムに二つの引数を渡します: リポジトリのパスと、コミットされるはずのトランザクションの名前 です。もしこのプログラムがゼロ以外の値を返した場合、 コミットは中断され、トランザクションは削除されます。 フックが標準エラー出力にデータ を書き込むと、それは適切なデータ形式でクライアントに戻されます。"

#. Tag: para
#: ch09-reference.xml:6253
#, no-c-format
msgid "If the pre-commit hook program returns a non-zero exit value, the commit is aborted, the commit transaction is removed, and anything printed to stderr is marshalled back to the client."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6271
#, fuzzy, no-c-format
msgid "commit transaction name"
msgstr "トランザクションのコミット"

#. Tag: para
#: ch09-reference.xml:6278
#, no-c-format
msgid "change validation and control"
msgstr ""

#. Tag: tertiary
#: ch09-reference.xml:6289
#, no-c-format
msgid "<tertiary>post-commit</tertiary>"
msgstr "<tertiary>post-commit</tertiary>"

#. Tag: refname
#: ch09-reference.xml:6293
#, fuzzy, no-c-format
msgid "<refname>post-commit</refname>"
msgstr "<refname>svnversion</refname>"

#. Tag: refpurpose
#: ch09-reference.xml:6294
#, no-c-format
msgid "Notification of a successful commit."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6300
#, fuzzy, no-c-format
msgid "The post-commit hook is run after the transaction is committed, and a new revision created. Most people use this hook to send out descriptive emails about the commit or to notify some other tool (such as an issue tracker) that a commit has happened. Some configurations also use this hook to trigger backup processes."
msgstr "これはトランザクションがコミットされ、新しいリビジョンが 作られた後に実行されます。ほとんどの人はこのフックを リポジトリのコミットやバックアップに関する連絡メールを 送るのに使います。リポジトリはこのプログラムに二つの引数を 渡します:リポジトリのパスと、今回作られた新しいリビジョン番号 です。このプログラムの終了コードは無視されます。"

#. Tag: para
#: ch09-reference.xml:6307
#, no-c-format
msgid "The output from, and exit value returned by the post-commit hook program are ignored."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6323
#, fuzzy, no-c-format
msgid "revision number created by the commit"
msgstr "最後のコミットのリビジョン番号"

#. Tag: para
#: ch09-reference.xml:6330
#, no-c-format
msgid "commit notification, tool integration"
msgstr "コミット通知、ツール連携"

#. Tag: tertiary
#: ch09-reference.xml:6341
#, no-c-format
msgid "<tertiary>pre-revprop-change</tertiary>"
msgstr "<tertiary>pre-revprop-change</tertiary>"

#. Tag: refname
#: ch09-reference.xml:6345
#, no-c-format
msgid "<refname>pre-revprop-change</refname>"
msgstr "<refname>pre-revprop-change</refname>"

#. Tag: refpurpose
#: ch09-reference.xml:6346
#, no-c-format
msgid "Notification of a revision property change attempt."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6353
#, no-c-format
msgid "The pre-revprop-change hook is run immediately prior to the modification of a revision property when performed outside the scope of a normal commit. Unlike the other hooks, the default state of this one is to deny the proposed action. The hook must actually exist and return a zero exit value before a revision property modification can happen."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6361
#, no-c-format
msgid "If the pre-revprop-change hook doesn't exist, isn't executable, or returns a non-zero exit value, no change to the property will be made, and anything printed to stderr is marshalled back to the client."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6379
#, no-c-format
msgid "revision whose property is about to be modified"
msgstr ""

#. Tag: para
#: ch09-reference.xml:6382
#, no-c-format
msgid "authenticated username attempting the propchange"
msgstr ""

#. Tag: para
#: ch09-reference.xml:6385
#: ch09-reference.xml:6455
#, no-c-format
msgid "name of the property changed"
msgstr "属性名が変化しました"

#. Tag: para
#: ch09-reference.xml:6388
#: ch09-reference.xml:6458
#, no-c-format
msgid "change description: <literal>A</literal> (added), <literal>D</literal> (deleted), or <literal>M</literal> (modified)"
msgstr ""

#. Tag: para
#: ch09-reference.xml:6394
#, no-c-format
msgid "Additionally, Subversion passes to the hook program via standard input the proposed value of the property."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6401
#, no-c-format
msgid "access control, change validation and control"
msgstr ""

#. Tag: tertiary
#: ch09-reference.xml:6412
#, no-c-format
msgid "<tertiary>post-revprop-change</tertiary>"
msgstr "<tertiary>post-revprop-change</tertiary>"

#. Tag: refname
#: ch09-reference.xml:6416
#, no-c-format
msgid "<refname>post-revprop-change</refname>"
msgstr "<refname>post-revprop-change</refname>"

#. Tag: refpurpose
#: ch09-reference.xml:6417
#, no-c-format
msgid "Notification of a successful revision property change."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6424
#, no-c-format
msgid "The post-revprop-change hook is run immediately after to the modification of a revision property when performed outside the scope of a normal commit. As can be derived from the description of its counterpart, the pre-revprop-change hook, this hook will not run at all unless the pre-revprop-change hook is implemented. It is typically used to send email notification of the property change."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6433
#, no-c-format
msgid "The output from, and exit value returned by, the post-revprop-change hook program are ignored."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6449
#, no-c-format
msgid "revision whose property was modified"
msgstr ""

#. Tag: para
#: ch09-reference.xml:6452
#, no-c-format
msgid "authenticated username of the person making the change"
msgstr ""

#. Tag: para
#: ch09-reference.xml:6464
#, no-c-format
msgid "Additionally, Subversion passes to the hook program, via standard input, the previous value of the property."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6471
#, no-c-format
msgid "propchange notification"
msgstr "属性の変更通知"

#. Tag: tertiary
#: ch09-reference.xml:6482
#, no-c-format
msgid "<tertiary>pre-lock</tertiary>"
msgstr "<tertiary>pre-lock</tertiary>"

#. Tag: refname
#: ch09-reference.xml:6486
#, no-c-format
msgid "<refname>pre-lock</refname>"
msgstr "<refname>pre-lock</refname>"

#. Tag: refpurpose
#: ch09-reference.xml:6487
#, no-c-format
msgid "Notification of a path lock attempt."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6493
#, fuzzy, no-c-format
msgid "The pre-lock hook runs whenever someone attempts to lock a path. It can be used to prevent locks altogether, or to create a more complex policy specifying exactly which users are allowed to lock particular paths. If the hook notices a pre-existing lock, then it can also decide whether a user is allowed to <quote>steal</quote> the existing lock."
msgstr "このフックは誰かがファイルをロックしようとしたときには常に実行されます。 これはロックを防ぐのにも利用するこどかできますし、誰が特定のパスに対して ロックできるかという複雑なポリシーを正確に設定するのにも使えます。 フックが既にロックがかかっていることに気づいた場合にはユーザはそのロック が外れるのを <quote>待つ</quote> かどうかを決めることもできます。リポジトリはフックに 三つの引数を渡します: リポジトリへのパス、ロックされているパス、そして ロックしようとしているユーザです。プログラムが 0 ではない値で終了すると ロック処理は異常終了し、標準エラー出力へのメッセージはすべてクライアント 側に転送されます。"

#. Tag: para
#: ch09-reference.xml:6500
#, no-c-format
msgid "If the pre-lock hook program returns a non-zero exit value, the lock action is aborted and anything printed to stderr is marshalled back to the client."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6517
#: ch09-reference.xml:6630
#, no-c-format
msgid "versioned path which is to be locked"
msgstr ""

#. Tag: para
#: ch09-reference.xml:6520
#: ch09-reference.xml:6633
#, no-c-format
msgid "authenticated username of the person attempting the lock"
msgstr ""

#. Tag: tertiary
#: ch09-reference.xml:6539
#, no-c-format
msgid "<tertiary>post-lock</tertiary>"
msgstr ""

#. Tag: refname
#: ch09-reference.xml:6543
#, no-c-format
msgid "<refname>post-lock</refname>"
msgstr "<refname>post-lock</refname>"

#. Tag: refpurpose
#: ch09-reference.xml:6544
#, no-c-format
msgid "Notification of a successful path lock."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6550
#, no-c-format
msgid "The post-lock hook runs after one or more paths has been locked. It is typically used to send email notification of the lock event."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6554
#, no-c-format
msgid "The output from and exit value returned by the post-lock hook program are ignored."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6570
#, no-c-format
msgid "authenticated username of the person who locked the paths"
msgstr ""

#. Tag: para
#: ch09-reference.xml:6575
#, no-c-format
msgid "Additionally, the list of paths locked is passed to the hook program via standard input, one path per line."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6582
#, no-c-format
msgid "lock notification"
msgstr "ロック通知"

#. Tag: tertiary
#: ch09-reference.xml:6593
#, no-c-format
msgid "<tertiary>pre-unlock</tertiary>"
msgstr "<tertiary>pre-unlock</tertiary>"

#. Tag: refname
#: ch09-reference.xml:6597
#, no-c-format
msgid "<refname>pre-unlock</refname>"
msgstr "<refname>pre-unlock</refname>"

#. Tag: refpurpose
#: ch09-reference.xml:6598
#, no-c-format
msgid "Notification of a path unlock attempt."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6604
#, fuzzy, no-c-format
msgid "The pre-unlock hook runs whenever someone attempts to remove a lock on a file. It can be used to create policies that specify which users are allowed to unlock particular paths. It's particularly important for determining policies about lock breakage. If user A locks a file, is user B allowed to break the lock? What if the lock is more than a week old? These sorts of things can be decided and enforced by the hook."
msgstr "このフックは誰かがファイルのロックを取り除こうとした時には常に 実行されます。これを使ってどのユーザがどの特定のパスに対して ロック解除できるかを決めるポリシーを作るために利用できます。 ロック解除に関するポシリーを決めることは非常に重要です。 ユーザ A がファイルをロックした場合、B はそのロックを解除できる でしょうか? ロックが一週間以上も前のものだった場合は? これらの ことはフックによって決定され、強制することができます。リポジトリ は三つの引数をフックに送ります: リポジトリのパス、ロック解除される パス、ロックを解除しようとしているユーザ。プログラムが 0 以外の 終了値を返した場合、ロック解除の処理は異常終了し標準エラーへの 出力はすべてクライアント側に転送されます。"

#. Tag: para
#: ch09-reference.xml:6613
#, no-c-format
msgid "If the pre-unlock hook program returns a non-zero exit value, the unlock action is aborted and anything printed to stderr is marshalled back to the client."
msgstr ""

#. Tag: tertiary
#: ch09-reference.xml:6652
#, fuzzy, no-c-format
msgid "<tertiary>post-unlock</tertiary>"
msgstr "<entry>いいえ</entry>"

#. Tag: refname
#: ch09-reference.xml:6656
#, fuzzy, no-c-format
msgid "<refname>post-unlock</refname>"
msgstr "<refname>svnversion</refname>"

#. Tag: refpurpose
#: ch09-reference.xml:6657
#, no-c-format
msgid "Notification of a successful path unlock."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6663
#, no-c-format
msgid "The post-unlock hook runs after one or more paths has been unlocked. It is typically used to send email notification of the unlock event."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6667
#, no-c-format
msgid "The output from and exit value returned by, the post-unlock hook program are ignored."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6683
#, no-c-format
msgid "authenticated username of the person who unlocked the paths"
msgstr ""

#. Tag: para
#: ch09-reference.xml:6688
#, no-c-format
msgid "Additionally, the list of paths unlocked is passed to the hook program via standard input, one path per line."
msgstr ""

#. Tag: para
#: ch09-reference.xml:6695
#, no-c-format
msgid "unlock notification"
msgstr "ロック解除通知"

#. Tag: title
#: copyright.xml:2
#, no-c-format
msgid "Copyright"
msgstr "Copyright"

#. Tag: programlisting
#: copyright.xml:4
#, no-c-format
msgid ""
"Copyright (c) 2002-2007\n"
"Ben Collins-Sussman, Brian W. Fitzpatrick, C. Michael Pilato.  \n"
"\n"
"This work is licensed under the Creative Commons Attribution License.\n"
"To view a copy of this license, visit\n"
"http://creativecommons.org/licenses/by/2.0/ or send a letter to\n"
"Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305,\n"
"USA.\n"
"\n"
"A summary of the license is given below, followed by the full legal\n"
"text.\n"
"\n"
"--------------------------------------------------------------------\n"
"\n"
"You are free:\n"
"\n"
"    * to copy, distribute, display, and perform the work\n"
"    * to make derivative works\n"
"    * to make commercial use of the work\n"
"\n"
"Under the following conditions:\n"
"        \n"
"Attribution. You must give the original author credit.\n"
"\n"
"    * For any reuse or distribution, you must make clear to others the\n"
"      license terms of this work.\n"
"\n"
"    * Any of these conditions can be waived if you get permission from\n"
"      the author.\n"
"\n"
"Your fair use and other rights are in no way affected by the above.\n"
"\n"
"The above is a summary of the full license below.\n"
"\n"
"====================================================================\n"
"\n"
"Creative Commons Legal Code\n"
"Attribution 2.0\n"
"\n"
"CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\n"
"LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN\n"
"ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\n"
"INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\n"
"REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS LIABILITY FOR\n"
"DAMAGES RESULTING FROM ITS USE.\n"
"\n"
"License\n"
"\n"
"THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS\n"
"CREATIVE COMMONS PUBLIC LICENSE (\"CCPL\" OR \"LICENSE\"). THE WORK IS\n"
"PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE\n"
"WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS\n"
"PROHIBITED.\n"
"\n"
"BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND\n"
"AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. THE LICENSOR GRANTS\n"
"YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF\n"
"SUCH TERMS AND CONDITIONS.\n"
"\n"
"1. Definitions\n"
"\n"
"   a. \"Collective Work\" means a work, such as a periodical issue,\n"
"      anthology or encyclopedia, in which the Work in its entirety in\n"
"      unmodified form, along with a number of other contributions,\n"
"      constituting separate and independent works in themselves, are\n"
"      assembled into a collective whole. A work that constitutes a\n"
"      Collective Work will not be considered a Derivative Work (as\n"
"      defined below) for the purposes of this License.\n"
"\n"
"   b. \"Derivative Work\" means a work based upon the Work or upon the\n"
"      Work and other pre-existing works, such as a translation,\n"
"      musical arrangement, dramatization, fictionalization, motion\n"
"      picture version, sound recording, art reproduction, abridgment,\n"
"      condensation, or any other form in which the Work may be recast,\n"
"      transformed, or adapted, except that a work that constitutes a\n"
"      Collective Work will not be considered a Derivative Work for the\n"
"      purpose of this License. For the avoidance of doubt, where the\n"
"      Work is a musical composition or sound recording, the\n"
"      synchronization of the Work in timed-relation with a moving\n"
"      image (\"synching\") will be considered a Derivative Work for the\n"
"      purpose of this License.\n"
"\n"
"   c. \"Licensor\" means the individual or entity that offers the Work\n"
"      under the terms of this License.\n"
"\n"
"   d. \"Original Author\" means the individual or entity who created the Work.\n"
"\n"
"   e. \"Work\" means the copyrightable work of authorship offered under\n"
"      the terms of this License.\n"
"\n"
"   f. \"You\" means an individual or entity exercising rights under this\n"
"      License who has not previously violated the terms of this\n"
"      License with respect to the Work, or who has received express\n"
"      permission from the Licensor to exercise rights under this\n"
"      License despite a previous violation.\n"
"\n"
"2. Fair Use Rights. Nothing in this license is intended to reduce,\n"
"   limit, or restrict any rights arising from fair use, first sale or\n"
"   other limitations on the exclusive rights of the copyright owner\n"
"   under copyright law or other applicable laws.\n"
"\n"
"3. License Grant. Subject to the terms and conditions of this License,\n"
"   Licensor hereby grants You a worldwide, royalty-free,\n"
"   non-exclusive, perpetual (for the duration of the applicable\n"
"   copyright) license to exercise the rights in the Work as stated\n"
"   below:\n"
"\n"
"   a. to reproduce the Work, to incorporate the Work into one or more\n"
"      Collective Works, and to reproduce the Work as incorporated in\n"
"      the Collective Works;\n"
"\n"
"   b. to create and reproduce Derivative Works;\n"
"\n"
"   c. to distribute copies or phonorecords of, display publicly,\n"
"      perform publicly, and perform publicly by means of a digital\n"
"      audio transmission the Work including as incorporated in\n"
"      Collective Works;\n"
"\n"
"   d. to distribute copies or phonorecords of, display publicly,\n"
"      perform publicly, and perform publicly by means of a digital\n"
"      audio transmission Derivative Works.\n"
"\n"
"   e.\n"
"\n"
"      For the avoidance of doubt, where the work is a musical composition:\n"
"\n"
"         i. Performance Royalties Under Blanket Licenses. Licensor\n"
"            waives the exclusive right to collect, whether\n"
"            individually or via a performance rights society\n"
"            (e.g. ASCAP, BMI, SESAC), royalties for the public\n"
"            performance or public digital performance (e.g. webcast)\n"
"            of the Work.\n"
"\n"
"        ii. Mechanical Rights and Statutory Royalties. Licensor waives\n"
"            the exclusive right to collect, whether individually or\n"
"            via a music rights agency or designated agent (e.g. Harry\n"
"            Fox Agency), royalties for any phonorecord You create from\n"
"            the Work (\"cover version\") and distribute, subject to the\n"
"            compulsory license created by 17 USC Section 115 of the US\n"
"            Copyright Act (or the equivalent in other jurisdictions).\n"
"\n"
"   f. Webcasting Rights and Statutory Royalties. For the avoidance of\n"
"      doubt, where the Work is a sound recording, Licensor waives the\n"
"      exclusive right to collect, whether individually or via a\n"
"      performance-rights society (e.g. SoundExchange), royalties for\n"
"      the public digital performance (e.g. webcast) of the Work,\n"
"      subject to the compulsory license created by 17 USC Section 114\n"
"      of the US Copyright Act (or the equivalent in other\n"
"      jurisdictions).\n"
"\n"
"The above rights may be exercised in all media and formats whether now\n"
"known or hereafter devised. The above rights include the right to make\n"
"such modifications as are technically necessary to exercise the rights\n"
"in other media and formats. All rights not expressly granted by\n"
"Licensor are hereby reserved.\n"
"\n"
"4. Restrictions.The license granted in Section 3 above is expressly\n"
"   made subject to and limited by the following restrictions:\n"
"\n"
"   a. You may distribute, publicly display, publicly perform, or\n"
"      publicly digitally perform the Work only under the terms of this\n"
"      License, and You must include a copy of, or the Uniform Resource\n"
"      Identifier for, this License with every copy or phonorecord of\n"
"      the Work You distribute, publicly display, publicly perform, or\n"
"      publicly digitally perform. You may not offer or impose any\n"
"      terms on the Work that alter or restrict the terms of this\n"
"      License or the recipients' exercise of the rights granted\n"
"      hereunder. You may not sublicense the Work. You must keep intact\n"
"      all notices that refer to this License and to the disclaimer of\n"
"      warranties. You may not distribute, publicly display, publicly\n"
"      perform, or publicly digitally perform the Work with any\n"
"      technological measures that control access or use of the Work in\n"
"      a manner inconsistent with the terms of this License\n"
"      Agreement. The above applies to the Work as incorporated in a\n"
"      Collective Work, but this does not require the Collective Work\n"
"      apart from the Work itself to be made subject to the terms of\n"
"      this License. If You create a Collective Work, upon notice from\n"
"      any Licensor You must, to the extent practicable, remove from\n"
"      the Collective Work any reference to such Licensor or the\n"
"      Original Author, as requested. If You create a Derivative Work,\n"
"      upon notice from any Licensor You must, to the extent\n"
"      practicable, remove from the Derivative Work any reference to\n"
"      such Licensor or the Original Author, as requested.\n"
"\n"
"   b. If you distribute, publicly display, publicly perform, or\n"
"      publicly digitally perform the Work or any Derivative Works or\n"
"      Collective Works, You must keep intact all copyright notices for\n"
"      the Work and give the Original Author credit reasonable to the\n"
"      medium or means You are utilizing by conveying the name (or\n"
"      pseudonym if applicable) of the Original Author if supplied; the\n"
"      title of the Work if supplied; to the extent reasonably\n"
"      practicable, the Uniform Resource Identifier, if any, that\n"
"      Licensor specifies to be associated with the Work, unless such\n"
"      URI does not refer to the copyright notice or licensing\n"
"      information for the Work; and in the case of a Derivative Work,\n"
"      a credit identifying the use of the Work in the Derivative Work\n"
"      (e.g., \"French translation of the Work by Original Author,\" or\n"
"      \"Screenplay based on original Work by Original Author\"). Such\n"
"      credit may be implemented in any reasonable manner; provided,\n"
"      however, that in the case of a Derivative Work or Collective\n"
"      Work, at a minimum such credit will appear where any other\n"
"      comparable authorship credit appears and in a manner at least as\n"
"      prominent as such other comparable authorship credit.\n"
"\n"
"5. Representations, Warranties and Disclaimer\n"
"\n"
"UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING,\n"
"LICENSOR OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR\n"
"WARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED,\n"
"STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF\n"
"TITLE, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE,\n"
"NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY,\n"
"OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT\n"
"DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED\n"
"WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.\n"
"\n"
"6. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY\n"
"   APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY\n"
"   LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE\n"
"   OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE\n"
"   WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n"
"   DAMAGES.\n"
"\n"
"7. Termination\n"
"\n"
"   a. This License and the rights granted hereunder will terminate\n"
"      automatically upon any breach by You of the terms of this\n"
"      License. Individuals or entities who have received Derivative\n"
"      Works or Collective Works from You under this License, however,\n"
"      will not have their licenses terminated provided such\n"
"      individuals or entities remain in full compliance with those\n"
"      licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any\n"
"      termination of this License.\n"
"\n"
"   b. Subject to the above terms and conditions, the license granted\n"
"      here is perpetual (for the duration of the applicable copyright\n"
"      in the Work). Notwithstanding the above, Licensor reserves the\n"
"      right to release the Work under different license terms or to\n"
"      stop distributing the Work at any time; provided, however that\n"
"      any such election will not serve to withdraw this License (or\n"
"      any other license that has been, or is required to be, granted\n"
"      under the terms of this License), and this License will continue\n"
"      in full force and effect unless terminated as stated above.\n"
"\n"
"8. Miscellaneous\n"
"\n"
"   a. Each time You distribute or publicly digitally perform the Work\n"
"      or a Collective Work, the Licensor offers to the recipient a\n"
"      license to the Work on the same terms and conditions as the\n"
"      license granted to You under this License.\n"
"\n"
"   b. Each time You distribute or publicly digitally perform a\n"
"      Derivative Work, Licensor offers to the recipient a license to\n"
"      the original Work on the same terms and conditions as the\n"
"      license granted to You under this License.\n"
"\n"
"   c. If any provision of this License is invalid or unenforceable\n"
"      under applicable law, it shall not affect the validity or\n"
"      enforceability of the remainder of the terms of this License,\n"
"      and without further action by the parties to this agreement,\n"
"      such provision shall be reformed to the minimum extent necessary\n"
"      to make such provision valid and enforceable.\n"
"\n"
"   d. No term or provision of this License shall be deemed waived and\n"
"      no breach consented to unless such waiver or consent shall be in\n"
"      writing and signed by the party to be charged with such waiver\n"
"      or consent.\n"
"\n"
"   e. This License constitutes the entire agreement between the\n"
"      parties with respect to the Work licensed here. There are no\n"
"      understandings, agreements or representations with respect to\n"
"      the Work not specified here. Licensor shall not be bound by any\n"
"      additional provisions that may appear in any communication from\n"
"      You. This License may not be modified without the mutual written\n"
"      agreement of the Licensor and You.\n"
"\n"
"Creative Commons is not a party to this License, and makes no warranty\n"
"whatsoever in connection with the Work. Creative Commons will not be\n"
"liable to You or any party on any legal theory for any damages\n"
"whatsoever, including without limitation any general, special,\n"
"incidental or consequential damages arising in connection to this\n"
"license. Notwithstanding the foregoing two (2) sentences, if Creative\n"
"Commons has expressly identified itself as the Licensor hereunder, it\n"
"shall have all rights and obligations of Licensor.\n"
"\n"
"Except for the limited purpose of indicating to the public that the\n"
"Work is licensed under the CCPL, neither party will use the trademark\n"
"\"Creative Commons\" or any related trademark or logo of Creative\n"
"Commons without the prior written consent of Creative Commons. Any\n"
"permitted use will be in compliance with Creative Commons'\n"
"then-current trademark usage guidelines, as may be published on its\n"
"website or otherwise made available upon request from time to time.\n"
"\n"
"Creative Commons may be contacted at http://creativecommons.org/.\n"
"\n"
"===================================================================="
msgstr ""
"Copyright (c) 2002-2007\n"
"Ben Collins-Sussman, Brian W. Fitzpatrick, C. Michael Pilato.  \n"
"\n"
"This work is licensed under the Creative Commons Attribution License.\n"
"To view a copy of this license, visit\n"
"http://creativecommons.org/licenses/by/2.0/ or send a letter to\n"
"Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305,\n"
"USA.\n"
"\n"
"A summary of the license is given below, followed by the full legal\n"
"text.\n"
"\n"
"--------------------------------------------------------------------\n"
"\n"
"You are free:\n"
"\n"
"    * to copy, distribute, display, and perform the work\n"
"    * to make derivative works\n"
"    * to make commercial use of the work\n"
"\n"
"Under the following conditions:\n"
"        \n"
"Attribution. You must give the original author credit.\n"
"\n"
"    * For any reuse or distribution, you must make clear to others the\n"
"      license terms of this work.\n"
"\n"
"    * Any of these conditions can be waived if you get permission from\n"
"      the author.\n"
"\n"
"Your fair use and other rights are in no way affected by the above.\n"
"\n"
"The above is a summary of the full license below.\n"
"\n"
"====================================================================\n"
"\n"
"Creative Commons Legal Code\n"
"Attribution 2.0\n"
"\n"
"CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\n"
"LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN\n"
"ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\n"
"INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\n"
"REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS LIABILITY FOR\n"
"DAMAGES RESULTING FROM ITS USE.\n"
"\n"
"License\n"
"\n"
"THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS\n"
"CREATIVE COMMONS PUBLIC LICENSE (\"CCPL\" OR \"LICENSE\"). THE WORK IS\n"
"PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE\n"
"WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS\n"
"PROHIBITED.\n"
"\n"
"BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND\n"
"AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. THE LICENSOR GRANTS\n"
"YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF\n"
"SUCH TERMS AND CONDITIONS.\n"
"\n"
"1. Definitions\n"
"\n"
"   a. \"Collective Work\" means a work, such as a periodical issue,\n"
"      anthology or encyclopedia, in which the Work in its entirety in\n"
"      unmodified form, along with a number of other contributions,\n"
"      constituting separate and independent works in themselves, are\n"
"      assembled into a collective whole. A work that constitutes a\n"
"      Collective Work will not be considered a Derivative Work (as\n"
"      defined below) for the purposes of this License.\n"
"\n"
"   b. \"Derivative Work\" means a work based upon the Work or upon the\n"
"      Work and other pre-existing works, such as a translation,\n"
"      musical arrangement, dramatization, fictionalization, motion\n"
"      picture version, sound recording, art reproduction, abridgment,\n"
"      condensation, or any other form in which the Work may be recast,\n"
"      transformed, or adapted, except that a work that constitutes a\n"
"      Collective Work will not be considered a Derivative Work for the\n"
"      purpose of this License. For the avoidance of doubt, where the\n"
"      Work is a musical composition or sound recording, the\n"
"      synchronization of the Work in timed-relation with a moving\n"
"      image (\"synching\") will be considered a Derivative Work for the\n"
"      purpose of this License.\n"
"\n"
"   c. \"Licensor\" means the individual or entity that offers the Work\n"
"      under the terms of this License.\n"
"\n"
"   d. \"Original Author\" means the individual or entity who created the Work.\n"
"\n"
"   e. \"Work\" means the copyrightable work of authorship offered under\n"
"      the terms of this License.\n"
"\n"
"   f. \"You\" means an individual or entity exercising rights under this\n"
"      License who has not previously violated the terms of this\n"
"      License with respect to the Work, or who has received express\n"
"      permission from the Licensor to exercise rights under this\n"
"      License despite a previous violation.\n"
"\n"
"2. Fair Use Rights. Nothing in this license is intended to reduce,\n"
"   limit, or restrict any rights arising from fair use, first sale or\n"
"   other limitations on the exclusive rights of the copyright owner\n"
"   under copyright law or other applicable laws.\n"
"\n"
"3. License Grant. Subject to the terms and conditions of this License,\n"
"   Licensor hereby grants You a worldwide, royalty-free,\n"
"   non-exclusive, perpetual (for the duration of the applicable\n"
"   copyright) license to exercise the rights in the Work as stated\n"
"   below:\n"
"\n"
"   a. to reproduce the Work, to incorporate the Work into one or more\n"
"      Collective Works, and to reproduce the Work as incorporated in\n"
"      the Collective Works;\n"
"\n"
"   b. to create and reproduce Derivative Works;\n"
"\n"
"   c. to distribute copies or phonorecords of, display publicly,\n"
"      perform publicly, and perform publicly by means of a digital\n"
"      audio transmission the Work including as incorporated in\n"
"      Collective Works;\n"
"\n"
"   d. to distribute copies or phonorecords of, display publicly,\n"
"      perform publicly, and perform publicly by means of a digital\n"
"      audio transmission Derivative Works.\n"
"\n"
"   e.\n"
"\n"
"      For the avoidance of doubt, where the work is a musical composition:\n"
"\n"
"         i. Performance Royalties Under Blanket Licenses. Licensor\n"
"            waives the exclusive right to collect, whether\n"
"            individually or via a performance rights society\n"
"            (e.g. ASCAP, BMI, SESAC), royalties for the public\n"
"            performance or public digital performance (e.g. webcast)\n"
"            of the Work.\n"
"\n"
"        ii. Mechanical Rights and Statutory Royalties. Licensor waives\n"
"            the exclusive right to collect, whether individually or\n"
"            via a music rights agency or designated agent (e.g. Harry\n"
"            Fox Agency), royalties for any phonorecord You create from\n"
"            the Work (\"cover version\") and distribute, subject to the\n"
"            compulsory license created by 17 USC Section 115 of the US\n"
"            Copyright Act (or the equivalent in other jurisdictions).\n"
"\n"
"   f. Webcasting Rights and Statutory Royalties. For the avoidance of\n"
"      doubt, where the Work is a sound recording, Licensor waives the\n"
"      exclusive right to collect, whether individually or via a\n"
"      performance-rights society (e.g. SoundExchange), royalties for\n"
"      the public digital performance (e.g. webcast) of the Work,\n"
"      subject to the compulsory license created by 17 USC Section 114\n"
"      of the US Copyright Act (or the equivalent in other\n"
"      jurisdictions).\n"
"\n"
"The above rights may be exercised in all media and formats whether now\n"
"known or hereafter devised. The above rights include the right to make\n"
"such modifications as are technically necessary to exercise the rights\n"
"in other media and formats. All rights not expressly granted by\n"
"Licensor are hereby reserved.\n"
"\n"
"4. Restrictions.The license granted in Section 3 above is expressly\n"
"   made subject to and limited by the following restrictions:\n"
"\n"
"   a. You may distribute, publicly display, publicly perform, or\n"
"      publicly digitally perform the Work only under the terms of this\n"
"      License, and You must include a copy of, or the Uniform Resource\n"
"      Identifier for, this License with every copy or phonorecord of\n"
"      the Work You distribute, publicly display, publicly perform, or\n"
"      publicly digitally perform. You may not offer or impose any\n"
"      terms on the Work that alter or restrict the terms of this\n"
"      License or the recipients' exercise of the rights granted\n"
"      hereunder. You may not sublicense the Work. You must keep intact\n"
"      all notices that refer to this License and to the disclaimer of\n"
"      warranties. You may not distribute, publicly display, publicly\n"
"      perform, or publicly digitally perform the Work with any\n"
"      technological measures that control access or use of the Work in\n"
"      a manner inconsistent with the terms of this License\n"
"      Agreement. The above applies to the Work as incorporated in a\n"
"      Collective Work, but this does not require the Collective Work\n"
"      apart from the Work itself to be made subject to the terms of\n"
"      this License. If You create a Collective Work, upon notice from\n"
"      any Licensor You must, to the extent practicable, remove from\n"
"      the Collective Work any reference to such Licensor or the\n"
"      Original Author, as requested. If You create a Derivative Work,\n"
"      upon notice from any Licensor You must, to the extent\n"
"      practicable, remove from the Derivative Work any reference to\n"
"      such Licensor or the Original Author, as requested.\n"
"\n"
"   b. If you distribute, publicly display, publicly perform, or\n"
"      publicly digitally perform the Work or any Derivative Works or\n"
"      Collective Works, You must keep intact all copyright notices for\n"
"      the Work and give the Original Author credit reasonable to the\n"
"      medium or means You are utilizing by conveying the name (or\n"
"      pseudonym if applicable) of the Original Author if supplied; the\n"
"      title of the Work if supplied; to the extent reasonably\n"
"      practicable, the Uniform Resource Identifier, if any, that\n"
"      Licensor specifies to be associated with the Work, unless such\n"
"      URI does not refer to the copyright notice or licensing\n"
"      information for the Work; and in the case of a Derivative Work,\n"
"      a credit identifying the use of the Work in the Derivative Work\n"
"      (e.g., \"French translation of the Work by Original Author,\" or\n"
"      \"Screenplay based on original Work by Original Author\"). Such\n"
"      credit may be implemented in any reasonable manner; provided,\n"
"      however, that in the case of a Derivative Work or Collective\n"
"      Work, at a minimum such credit will appear where any other\n"
"      comparable authorship credit appears and in a manner at least as\n"
"      prominent as such other comparable authorship credit.\n"
"\n"
"5. Representations, Warranties and Disclaimer\n"
"\n"
"UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING,\n"
"LICENSOR OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR\n"
"WARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED,\n"
"STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF\n"
"TITLE, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE,\n"
"NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY,\n"
"OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT\n"
"DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED\n"
"WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.\n"
"\n"
"6. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY\n"
"   APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY\n"
"   LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE\n"
"   OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE\n"
"   WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n"
"   DAMAGES.\n"
"\n"
"7. Termination\n"
"\n"
"   a. This License and the rights granted hereunder will terminate\n"
"      automatically upon any breach by You of the terms of this\n"
"      License. Individuals or entities who have received Derivative\n"
"      Works or Collective Works from You under this License, however,\n"
"      will not have their licenses terminated provided such\n"
"      individuals or entities remain in full compliance with those\n"
"      licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any\n"
"      termination of this License.\n"
"\n"
"   b. Subject to the above terms and conditions, the license granted\n"
"      here is perpetual (for the duration of the applicable copyright\n"
"      in the Work). Notwithstanding the above, Licensor reserves the\n"
"      right to release the Work under different license terms or to\n"
"      stop distributing the Work at any time; provided, however that\n"
"      any such election will not serve to withdraw this License (or\n"
"      any other license that has been, or is required to be, granted\n"
"      under the terms of this License), and this License will continue\n"
"      in full force and effect unless terminated as stated above.\n"
"\n"
"8. Miscellaneous\n"
"\n"
"   a. Each time You distribute or publicly digitally perform the Work\n"
"      or a Collective Work, the Licensor offers to the recipient a\n"
"      license to the Work on the same terms and conditions as the\n"
"      license granted to You under this License.\n"
"\n"
"   b. Each time You distribute or publicly digitally perform a\n"
"      Derivative Work, Licensor offers to the recipient a license to\n"
"      the original Work on the same terms and conditions as the\n"
"      license granted to You under this License.\n"
"\n"
"   c. If any provision of this License is invalid or unenforceable\n"
"      under applicable law, it shall not affect the validity or\n"
"      enforceability of the remainder of the terms of this License,\n"
"      and without further action by the parties to this agreement,\n"
"      such provision shall be reformed to the minimum extent necessary\n"
"      to make such provision valid and enforceable.\n"
"\n"
"   d. No term or provision of this License shall be deemed waived and\n"
"      no breach consented to unless such waiver or consent shall be in\n"
"      writing and signed by the party to be charged with such waiver\n"
"      or consent.\n"
"\n"
"   e. This License constitutes the entire agreement between the\n"
"      parties with respect to the Work licensed here. There are no\n"
"      understandings, agreements or representations with respect to\n"
"      the Work not specified here. Licensor shall not be bound by any\n"
"      additional provisions that may appear in any communication from\n"
"      You. This License may not be modified without the mutual written\n"
"      agreement of the Licensor and You.\n"
"\n"
"Creative Commons is not a party to this License, and makes no warranty\n"
"whatsoever in connection with the Work. Creative Commons will not be\n"
"liable to You or any party on any legal theory for any damages\n"
"whatsoever, including without limitation any general, special,\n"
"incidental or consequential damages arising in connection to this\n"
"license. Notwithstanding the foregoing two (2) sentences, if Creative\n"
"Commons has expressly identified itself as the Licensor hereunder, it\n"
"shall have all rights and obligations of Licensor.\n"
"\n"
"Except for the limited purpose of indicating to the public that the\n"
"Work is licensed under the CCPL, neither party will use the trademark\n"
"\"Creative Commons\" or any related trademark or logo of Creative\n"
"Commons without the prior written consent of Creative Commons. Any\n"
"permitted use will be in compliance with Creative Commons'\n"
"then-current trademark usage guidelines, as may be published on its\n"
"website or otherwise made available upon request from time to time.\n"
"\n"
"Creative Commons may be contacted at http://creativecommons.org/.\n"
"\n"
"===================================================================="

#. Tag: preface
#: foreword.xml:6
#, fuzzy, no-c-format
msgid "<prefaceinfo> <author> <firstname>Karl</firstname> <surname>Fogel</surname> </author> <pubdate>Chicago, March 14, 2004</pubdate> </prefaceinfo> <title>Foreword</title> <para>A bad Frequently Asked Questions (FAQ) sheet is one that is composed not of the questions people actually asked, but of the questions the FAQ's author <emphasis>wished</emphasis> people had asked. Perhaps you've seen the type before:</para> <blockquote> <para>Q: How can I use Glorbosoft XYZ to maximize team productivity?</para> </blockquote> <blockquote> <para>A: Many of our customers want to know how they can maximize productivity through our patented office groupware innovations. The answer is simple: first, click on the <quote><literal>File</literal></quote> menu, scroll down to <quote><literal>Increase&nbsp;Productivity</literal></quote>, then&hellip;</para> </blockquote>"
msgstr "<blockquote> <para>Q: チームの生産性を最大にするにはどうやって Glorboソフト社の XYZ を使えばよいのでしょう?</para> </blockquote> <blockquote> <para>A: 顧客の多くは私たちの特許であるオフィスグループ ウェアテクノロジを通じた生産性の向上の方法について知りたいと考えて います。答えは簡単: まず<quote><literal>ファイル</literal></quote> メニューをクリックし、<quote><literal>生産性&nbsp;向上</literal></quote> メニューを選択しましょう、それから &hellip; </para> </blockquote>"

#. Tag: para
#: foreword.xml:37
#, no-c-format
msgid "The problem with such FAQs is that they are not, in a literal sense, FAQs at all. No one ever called the tech support line and asked, <quote>How can we maximize productivity?</quote>. Rather, people asked highly specific questions, like, <quote>How can we change the calendaring system to send reminders two days in advance instead of one?</quote> and so on. But it's a lot easier to make up imaginary Frequently Asked Questions than it is to discover the real ones. Compiling a true FAQ sheet requires a sustained, organized effort: over the lifetime of the software, incoming questions must be tracked, responses monitored, and all gathered into a coherent, searchable whole that reflects the collective experience of users in the wild. It calls for the patient, observant attitude of a field naturalist. No grand hypothesizing, no visionary pronouncements here&mdash;open eyes and accurate note-taking are what's needed most."
msgstr "このような FAQ の問題点は、文字通り FAQ でも何でもないというところ です。技術サポートに電話をして<quote>どうやったら生産性が最大になる のでしょうか?</quote>などと聞く人は一人もいないのです。そうではなく、 本当はもっとずっと具体的な質問がしたいのです、たとえば<quote>どうやったら カレンダーシステムを変更して一日前でなく、二日前に通知するように できますか?</quote>のような。しかし本当の問題点を明らかにするより、 仮想的な FAQ を作るほうがずっとやさしいのです。本当の FAQ を作るには 忍耐強い、組織的な努力が必要なのです: ソフトウェアの一生を通じて やってくる問いを追いかけ、それに対する答えを見守り、それらすべてを 集めて経験の浅いユーザの集約的な経験を反映するように検索可能な形に まとめる必要があります。それは忍耐が必要で、自然主義者のように物事 を黙って観察する態度が必要になります。ここには権威に基づいた仮定や 希望的な観測が入り込む余地はありません&mdash;開かれた態度と正確に 物事を記録する態度こそが必要なのです。"

#. Tag: para
#: foreword.xml:54
#, no-c-format
msgid "What I love about this book is that it grew out of just such a process, and shows it on every page. It is the direct result of the authors' encounters with users. It began with Ben Collins-Sussman's observation that people were asking the same basic questions over and over on the Subversion mailing lists: What are the standard workflows to use with Subversion? Do branches and tags work the same way as in other version control systems? How can I find out who made a particular change?"
msgstr "この本について私が気に入っているところは、そんな過程を通じて絶えず 本が育っていくところであり、それはすべてのページに現れています。 この本はユーザに対する著者の対峙そのものの結果なのです。それは Subversion メーリングリストで繰り返し問われた基本的な質問を Ben Collins-Sussman が観察することから始まりました: Subversion を使う場合の標準的なワークフローとはいったいどのような ものなのだろうか? ブランチやタグは他のバージョン管理システムと 同じように機能するのだろうか? 誰が特定の変更を加えたということを どうやって把握すればよいのだろうか?"

#. Tag: para
#: foreword.xml:63
#, no-c-format
msgid "Frustrated at seeing the same questions day after day, Ben worked intensely over a month in the summer of 2002 to write <citetitle>The Subversion Handbook</citetitle>, a sixty page manual that covered all the basics of using Subversion. The manual made no pretense of being complete, but it was distributed with Subversion and got users over that initial hump in the learning curve. When O'Reilly and Associates decided to publish a full-length Subversion book, the path of least resistance was obvious: just expand the Subversion handbook."
msgstr "毎日毎日同じ質問を目にすることに強い不満を感じ、Ben は 2002 年の 夏に一ヵ月以上かけて <citetitle>The Subversion ハンドブック</citetitle> を書き上げました。これは 60 ページのマニュアルで、Subversion を利用 する際のすべての基本を扱っていました。マニュアルは完成したような 顔をしませんでしたが、Subversion と共に配布され、学習曲線の最初の 障害を取り除きました。O'Reilly and Associates が完全な Subversion の本を出版しようと決めたとき一番手っ取り早い方法は明らかでした: 単に Subversion ハンドブックを拡張すればよかったのです。"

#. Tag: para
#: foreword.xml:74
#, no-c-format
msgid "The three co-authors of the new book were thus presented with an unusual opportunity. Officially, their task was to write a book top-down, starting from a table of contents and an initial draft. But they also had access to a steady stream&mdash;indeed, an uncontrollable geyser&mdash;of bottom-up source material. Subversion was already in the hands of thousands of early adopters, and those users were giving tons of feedback, not only about Subversion, but about its existing documentation."
msgstr "新しい本の三人の共著者は普通ではない幸運に恵まれていました。醐ｷｺ�には 彼らの仕事は本をトップダウンに書き下すために目次を作ることからはじめ、 最初の版を作ることでした。しかし彼らはまた確固とした&mdash; 確かにそれは制御不能な形でわきあがるような性質のものでしたが&mdash; 生の素材に直接触れることもしました。Subversion はすでに何千と言う 初期ユーザの手にあり、それらのユーザは無数のフィードバックをもたらし それは Subversion 本体のみならず、すでに存在しているドキュメントに 対してもそうなのでした。"

#. Tag: para
#: foreword.xml:84
#, fuzzy, no-c-format
msgid "During the entire time they wrote this book, Ben, Mike, and Brian haunted the Subversion mailing lists and chat rooms incessantly, carefully noting the problems users were having in real-life situations. Monitoring such feedback was part of their job descriptions at CollabNet anyway, and it gave them a huge advantage when they set out to document Subversion. The book they produced is grounded firmly in the bedrock of experience, not in the shifting sands of wishful thinking; it combines the best aspects of user manual and FAQ sheet. This duality might not be noticeable on a first reading. Taken in order, front to back, the book is simply a straightforward description of a piece of software. There's the overview, the obligatory guided tour, the chapter on administrative configuration, some advanced topics, and of course a command reference and troubleshooting guide. Only when you come back to it later, seeking the solution to some specific problem, does its authenticity shine out: the telling details that can only result from encounters with the unexpected, the examples honed from genuine use cases, and most of all the sensitivity to the user's needs and the user's point of view."
msgstr "彼らがこの本を書いている間じゅう、Ben, Mike そして Brian は Subversion メーリングリストとチャットチャンネルをうろつき、 注意深く実際の状況下でユーザが実際に陥る本当の問題を記録してきました。 そのようなフィードバックを監視することは、とにかく CollabNet での彼ら の作業の一部だったわけで、このフィードバックは Subversion をドキュメン ト化する上で非常に有益なものでした。 彼らが書き上げたこの本は、そんな作業を反映しています。しっかりとした 経験を基礎とし、希望的観測に流されず、この本はユーザマニュアルと FAQ の最良の部分をまとめたものです。この二重性は一度読んだだけでは 気がつかないでしょう。順序良く、最初から最後まで、この本はソフトウェア の一片の率直な記述になっています。概略について書かれ、不可欠な同伴 ガイドがあり、管理用設定の章があり、いくつかの進んだトピックに触れ、 そしてもちろんコマンドリファレンスと、障害時の対応法があります。 それは具体的な問題の解法を探しに後で戻ってきてはじめて意味が理解 できるでしょう: そこで語られている詳細は不測の事態に陥った時にしか 関係してきませんし、利用例は本当のユースケースを洗練したものですし ほとんどすべての部分がユーザのニーズとユーザの視点への配慮であふれて います。"

#. Tag: para
#: foreword.xml:105
#, no-c-format
msgid "Of course, no one can promise that this book will answer every question you have about Subversion. Sometimes, the precision with which it anticipates your questions will seem eerily telepathic; yet occasionally, you will stumble into a hole in the community's knowledge, and come away empty-handed. When this happens, the best thing you can do is email <email>users@subversion.tigris.org</email> and present your problem. The authors are still there, still watching, and they include not just the three listed on the cover, but many others who contributed corrections and original material. From the community's point of view, solving your problem is merely a pleasant side effect of a much larger project&mdash;namely, slowly adjusting this book, and ultimately Subversion itself, to more closely match the way people actually use it. They are eager to hear from you not merely because they can help you, but because you can help them. With Subversion as with all active free software projects, <emphasis>you are not alone</emphasis>."
msgstr "もちろん、誰もこの本がSubversion についてのすべての疑問に 答えられるとは約束できる人はいません。質問の期待に、ときどき テレパシーのような精密さで答えることがあるかと思えば、Subversion コミュニティーの知識の中の落とし穴にはまりこんでしまい、手ぶらで 出てくるようなことも、しばしばおこるでしょう。そんな時の一番よい 方法は、<email>users@subversion.tigris.org</email>にメールを 送って自分の問題を示すことです。著者らはまだそこにいますし、依然と してリストを監視していますし、本の扉に書かれた三人以外にもたくさんの 人が誤りの訂正や最初の資料について貢献してくれています。コミュニティー の観点から言うと、あなたの問題の解決は単にもっとずっと大きなプロジェクト の喜ばしい副作用でしかありません&mdash; そのプロジェクトとはつまり、 ゆっくりとこの本の内容を調整し、そして最終的には Subversion そのものが 実際に利用する人々に、より役立つものにすることです。皆は単にあなたを 助けることができるということだけではなく逆に皆を助けるということができる という理由であなたの話しによろこんで耳を貸すでしょう。これはSubversion も 他のすべての活発なフリーソフトウェアプロジェクトでも同じです。 <emphasis>あなたは一人ではないのです</emphasis>。"

#. Tag: para
#: foreword.xml:124
#, no-c-format
msgid "Let this book be your first companion."
msgstr "どうかこの本をあなたの最良の共とせんことを。"

#~ msgid "svn status"
#~ msgstr "svn status"
#~ msgid "svn diff"
#~ msgstr "svn diff"
#~ msgid "svn revert"
#~ msgstr "svn revert"
#~ msgid ""
#~ "Lastly, here's a quick summary of the most common status codes that you "
#~ "may see:"
#~ msgstr ""
#~ "最後に、最もよく表示されるステータスコードの簡単なまとめを載せておきます:"
#~ msgid ""
#~ "One such tool is cvs2svn (<ulink url=\"http://cvs2svn.tigris.org/\"></"
#~ "ulink>), a Python script originally created by members of Subversion's "
#~ "own development community. Others include Lev Serebryakov's RefineCVS "
#~ "(<ulink url=\"http://lev.serebryakov.spb.ru/refinecvs/\"></ulink>). These "
#~ "tools have various levels of completeness, and may make entirely "
#~ "different decisions about how to handle your CVS repository history. "
#~ "Whichever tool you decide to use, be sure to perform as much verification "
#~ "as you can stand on the conversion results&mdash;after all, you've worked "
#~ "hard to build that history!"
#~ msgstr ""
#~ "そのようなツールのひとつにcvs2svn (<ulink url=\"http://cvs2svn.tigris.org/"
#~ "\"></ulink>)が ありますが、これはもともと Subversion 自身の開発メンバに"
#~ "よって作られた Python のスクリプトです。他にはChia-liang Kaoが作ったVCP "
#~ "ツール (<ulink url=\"http://svn.clkao.org/revml/branches/svn-perl/\"></"
#~ "ulink>) のプラグインである Subversion コンバータやLev Serebryakovの作った"
#~ "RefineCVS (<ulink url=\"http://lev.serebryakov.spb.ru/refinecvs/\"></"
#~ "ulink>) があります。これらのツールの完成度はさまざまで CVS リポジトリの履"
#~ "歴の扱い方に ついて全くことなる考え方にもとづいているかも知れません。どの"
#~ "ツールを使う場合 でも変換結果について納得がいくまで十分な確認をしてくださ"
#~ "い&mdash; ようするに この履歴を作り上げるにはかなり労力が必要になります。"
#~ msgid ""
#~ "For an updated collection of links to known converter tools, visit the "
#~ "Links page of the Subversion website (<ulink url=\"http://subversion."
#~ "tigris.org/project_links.html\"></ulink>)."
#~ msgstr ""
#~ "知られている変換ツールへのリンクの最新情報については Subversion ウェブサイ"
#~ "ト (<ulink url=\"http://subversion.tigris.org/project_links.html\"></"
#~ "ulink>) のリンクページを見てください。"
#~ msgid "ROLES_OF_TRANSLATORS"
#~ msgstr "<!--TRANS:ROLES_OF_TRANSLATORS-->"
#~ msgid "CREDIT_FOR_TRANSLATORS"
#~ msgstr "<!--TRANS:CREDIT_FOR_TRANSLATORS-->"
#~ msgid "Basic WebDAV Concepts"
#~ msgstr "WebDAV の基本的な概念"
#~ msgid ""
#~ "This section provides a very brief, very general overview to the ideas "
#~ "behind WebDAV. It should lay the foundation for understanding WebDAV "
#~ "compatibility issues between clients and servers."
#~ msgstr ""
#~ "この節はWebDAVの背後にあるアイディアについての、とても簡単で 一般的な概要"
#~ "を示します。それはクライアントとサーバの間のWebDAV の互換性に関する問題を"
#~ "理解するための基礎になります。"
#~ msgid "Original WebDAV"
#~ msgstr "単純な WebDAV"
#~ msgid "Here are the concepts and terms introduced in basic WebDAV:"
#~ msgstr "基本的な WebDAVで導入された新しい概念とメソッドは:"
#~ msgid "Resources"
#~ msgstr "リソース"
#~ msgid ""
#~ "WebDAV lingo refers to any server-side object (that can be described with "
#~ "a URI) as a <firstterm>resource</firstterm>."
#~ msgstr ""
#~ "WebDAV の世界ではサーバ側にあるすべてのオブジェクト (それは URI によって記"
#~ "述されるものですが)は、 <firstterm>リソース</firstterm>と言われます。"
#~ msgid "New write methods"
#~ msgstr "新しい書き込みメソッド"
#~ msgid ""
#~ "Beyond the standard HTTP <literal>PUT</literal> method (which creates or "
#~ "overwrites a web resource), WebDAV defines new <literal>COPY</literal> "
#~ "and <literal>MOVE</literal> methods for duplicating or rearranging "
#~ "resources."
#~ msgstr ""
#~ "標準的なHTTP <literal>PUT</literal>メソッドに 加えて(それはwebリソースを"
#~ "作ったり上書きしたりしますが)、WebDAV は新しい<literal>COPY</literal> と "
#~ "<literal>MOVE</literal> メソッドを定義し、リソースを複製したり移動したりす"
#~ "ることができます。"
#~ msgid "Collections"
#~ msgstr "集合"
#~ msgid ""
#~ "A <firstterm>collection</firstterm> is the WebDAV term for a grouping of "
#~ "resources. In most cases, it is analogous to a directory. Whereas file "
#~ "resources can be written or created with a <literal>PUT</literal> method, "
#~ "collection resources are created with the new <literal>MKCOL</literal> "
#~ "method."
#~ msgstr ""
#~ "<firstterm>集合</firstterm> は WebDAV の用語では ひとまとまりのリソースの"
#~ "ことを言います。ほとんどの場合、それは ディレクトリのようなものになりま"
#~ "す。ファイルリソースは <literal>PUT</literal>メソッドで書き込まれたり作ら"
#~ "れたりしますが、 集合リソースは新しい <literal>MKCOL</literal>メソッドで作"
#~ "られます。"
#~ msgid ""
#~ "This is the same idea present in Subversion&mdash;metadata attached to "
#~ "files and collections. A client can list or retrieve properties attached "
#~ "to a resource with the new <literal>PROPFIND</literal> method, and can "
#~ "change them with the <literal>PROPPATCH</literal> method. Some properties "
#~ "are wholly created and controlled by users (e.g. a property called "
#~ "<quote>color</quote>), and others are wholly created and controlled by "
#~ "the WebDAV server (e.g. a property that contains the last modification "
#~ "time of a file). The former kind are called <firstterm>dead properties</"
#~ "firstterm>, and the latter kind are called <firstterm>live properties</"
#~ "firstterm>."
#~ msgstr ""
#~ "これはSubversionに出てるのと同じアイディアです&mdash; ファイルと集合に付随"
#~ "したメタデータです。クライアントは新しい <literal>PROPFIND</literal> メ"
#~ "ソッドを使ってリソースに付随 した属性を一覧表示したり抽出したりできます。"
#~ "そして、 <literal>PROPPATCH</literal> メソッドを使って変更できます。 いく"
#~ "つかの属性は完全にユーザによって作られ制御されます( たとえば、"
#~ "<quote>color</quote>と呼ばれる属性)、また他のものは 完全にWebDAVサーバに"
#~ "よって作られ制御されます(たとえば、ファイル の最後の修正時刻を含む属性)。"
#~ "最初のものは<quote>死んだ</quote> 属性と呼ばれ、あとのものは<quote>生きた"
#~ "</quote> 属性と呼ばれます。"
#~ msgid ""
#~ "A WebDAV server may decide to offer a locking feature to clients&mdash;"
#~ "this part of the specification is optional, although most WebDAV servers "
#~ "do offer the feature. If present, then clients can use the new "
#~ "<literal>LOCK</literal> and <literal>UNLOCK</literal> methods to mediate "
#~ "access to a resource. In most cases these methods are used to create "
#~ "exclusive write locks (as discussed in <xref linkend=\"svn.basic.vsn-"
#~ "models.lock-unlock\"/>), although shared write locks are also possible in "
#~ "some server implementations."
#~ msgstr ""
#~ "WebDAVサーバはクライアントに対するロックの機能を与える ことができます。 "
#~ "&mdash;この機能は任意です。ほとんどのWebDAVサーバはこの機能を 提供していま"
#~ "すが。もし存在すれば、クライアントは新しい <literal>LOCK</literal> と "
#~ "<literal>UNLOCK</literal>メソッドを 使ってリソースへのアクセスを調停するこ"
#~ "とができます。 ほとんどの場合、これらのメソッドは排他的な書き込みロックを"
#~ "作る ために利用されます(<xref linkend=\"svn.basic.vsn-models.lock-unlock"
#~ "\"/>で議論した ように)、ただしサーバの実装によっては共有書き込みロックも可"
#~ "能です。"
#~ msgid ""
#~ "A more recent specification (RFC 3744) defines a system for defining "
#~ "access control lists (ACLs) on WebDAV resources. Some clients and servers "
#~ "have begun to implement this feature."
#~ msgstr ""
#~ "より最近の仕様(RFC 3744)では WebDAV リソースに対するアクセス制御 リスト"
#~ "(ACL)を定義するためのシステムを規定しています。クライアントや サーバによっ"
#~ "てはこの機能を実装し始めているものもあります。"
#~ msgid "DeltaV Extensions"
#~ msgstr "DeltaV 拡張"
#~ msgid ""
#~ "DeltaV introduces a whole slew of new acronyms, but don't be intimidated. "
#~ "The ideas are fairly straightforward:"
#~ msgstr ""
#~ "DeltaV はまったく新しい単語を導入しましたが、 びっくりしないでください。考"
#~ "え方は非常に直接的です:"
#~ msgid "Per-resource versioning"
#~ msgstr "リソースごとのバージョン化"
#~ msgid ""
#~ "Like CVS and other version-control systems, DeltaV assumes that each "
#~ "resource has a potentially infinite number of states. A client begins by "
#~ "placing a resource under version control using the new <literal>VERSION-"
#~ "CONTROL</literal> method."
#~ msgstr ""
#~ "CVSや他のバージョン管理システムのようにDeltaVはそれぞれのリソースは 無限の"
#~ "数の状態をとりうると仮定しています。クライアントは新しい <literal>VERSION-"
#~ "CONTROL</literal> メソッドを使ってリソースを バージョン管理下に置くことに"
#~ "よって始めます。これには新しい <literal>VERSION-CONTROL</literal> メソッド"
#~ "を使います。"
#~ msgid "Server-side working-copy model"
#~ msgstr "サーバ側作業コピーモデル"
#~ msgid ""
#~ "Some DeltaV servers support the ability to create a virtual workspace on "
#~ "the server, where all of your work is performed. Clients use the "
#~ "<literal>MKWORKSPACE</literal> method to create a private area, then "
#~ "indicate they want to change specific resources by <quote>checking them "
#~ "out</quote> into the workspace, editing them, and <quote>checking them "
#~ "in</quote> again. In HTTP terms, the sequence of methods would be "
#~ "<literal>CHECKOUT</literal>, <literal>PUT</literal>, <literal>CHECKIN</"
#~ "literal>."
#~ msgstr ""
#~ "DeltaV サーバによっては仮想的な作業スペースをサーバ上に作る能力が ありま"
#~ "す。すべての作業はそこで実行されます。クライアントは "
#~ "<literal>MKWORKSPACE</literal>メソッドを使ってプライベートな領域を 作り、"
#~ "作業スペースに<quote>チェックアウト</quote>することで 特定のリソースを変更"
#~ "したいということを示し、編集した後、もう一度 <quote>チェックイン</quote>し"
#~ "ます。 HTTPの言葉で言えば、メソッドの 流れとしては、 <literal>CHECKOUT</"
#~ "literal>, <literal>PUT</literal>, <literal>CHECKIN</literal> となります。"
#~ msgid "Client-side working-copy model"
#~ msgstr "クライアント側作業コピーモデル"
#~ msgid ""
#~ "Some DeltaV servers also support the idea that the client may have a "
#~ "private working copy on local disk. When the client wants to commit "
#~ "changes to the server, it begins by creating a temporary server "
#~ "transaction (called an <firstterm>activity</firstterm>) with the "
#~ "<literal>MKACTIVITY</literal> method. The client then performs a "
#~ "<literal>CHECKOUT</literal> on each resource it wishes to change and "
#~ "sends <literal>PUT</literal> requests. Finally, the client performs a "
#~ "<literal>CHECKIN</literal> resource, or sends a <literal>MERGE</literal> "
#~ "request to check in all resources at once."
#~ msgstr ""
#~ "DeltaV サーバによってはクライアントがローカルディスク上にプライベート な作"
#~ "業コピーを持つこともできるという考え方をサポートします。 クライアントが"
#~ "サーバに変更点をコミットしたい場合、まず <literal>MKACTIVITY</literal> メ"
#~ "ソッドによって一時的なサーバトランザクション( <firstterm>アクティビティー"
#~ "</firstterm> と呼ばれます)を作ることで処理を開始します。 それからクライア"
#~ "ントは変更したいリソースごとに<literal>CHECKOUT</literal> を実行し、"
#~ "<literal>PUT</literal>要求を送ります。最後にクライアントは リソースに対す"
#~ "る <literal>CHECKIN</literal>を実行するか <literal>MERGE</literal>要求を"
#~ "送ってすべてのリソースを一度に チェックインします。"
#~ msgid "Configurations"
#~ msgstr "設定"
#~ msgid ""
#~ "DeltaV allows you define flexible collections of resources called "
#~ "<quote>configurations</quote>, which don't necessarily correspond to "
#~ "particular directories. A configuration can be made to point to specific "
#~ "versions of files, and then a <quote>baseline</quote> snapshot can be "
#~ "made, much like a tag."
#~ msgstr ""
#~ "DeltaV では<quote>設定</quote>と呼ばれるリソースの 汎用的な集まりを定義す"
#~ "ることができますが、かならずしもそれは特定の ディレクトリに対応する必要は"
#~ "ありません。設定はファイルの特定のバージョン を指し示すのに作成したり、"
#~ "<quote>ベースライン</quote>のスナップショット を作ったりできます。後者はタ"
#~ "グによく似たものです。"
#~ msgid ""
#~ "DeltaV defines a new method, <literal>REPORT</literal>, which allows the "
#~ "client and server to perform customized data exchanges. While DeltaV "
#~ "defines a number of standardized history reports that a client can "
#~ "request, the server is also free to define custom reports. The client "
#~ "sends a <literal>REPORT</literal> request with a properly-labeled XML "
#~ "body full of custom data; assuming the server understands the specific "
#~ "report-type, it responds with an equally custom XML body. This technique "
#~ "is very similar to XML-RPC."
#~ msgstr ""
#~ "DeltaV は新しいメソッド<literal>REPORT</literal>を定義しますが それはクラ"
#~ "イアントとサーバが独自データ交換を実行するのを許す ものです。DeltaV はクラ"
#~ "イアントが要求可能な標準化された履歴情報 をいくつも定義してありますが、さ"
#~ "らに自由にカスタム情報を定義することも できます。クライアントは"
#~ "<literal>REPORT</literal> 要求を 独自のデータのある属性ラベルの付いたXMLの"
#~ "ボディーをともなって 送信します。サーバがこの特定のレポート型を理解できる"
#~ "ことを 仮定して、それはやはり独自のXMLボディーを応答します。この技術は "
#~ "XML-RPCとよく似ています。"
#~ msgid "Subversion and DeltaV"
#~ msgstr "Subversion と DeltaV"
#~ msgid "The upshot is that"
#~ msgstr "結論としては"
#~ msgid "The Subversion client is not a fully-implemented DeltaV client."
#~ msgstr ""
#~ "Subversion クライアントは完全な DeltaV クライアントを実装している わけでは"
#~ "ない。"
#~ msgid "mod_dav_svn is not a fully-implemented DeltaV server."
#~ msgstr "mod_dav_svn は DeltaV サーバの完全な実装ではない。"
#~ msgid "Description"
#~ msgstr "説明"
#~ msgid "<title>Standalone WebDAV applications</title>"
#~ msgstr "<title>スタンドアロン WebDAV アプリケーション</title>"
#~ msgid "<title>File-explorer WebDAV extensions</title>"
#~ msgstr "<title>ファイルエクスプローラの WebDAV 拡張</title>"
#~ msgid ""
#~ "Explores the Subversion client configuration files, file and directory "
#~ "properties, how to <literal>ignore</literal> files in your working copy, "
#~ "how to include external trees in your working copy, and lastly, how to "
#~ "handle vendor branches."
#~ msgstr ""
#~ "Subversion クライアントの設定ファイル、ファイルとディレクトリの 属性、作業"
#~ "コピー中のファイルを<literal>無視</literal>する方法、 作業コピー中に外部ツ"
#~ "リーを含める方法、そして最後にベンダーブランチ の取り扱いについて説明しま"
#~ "す。"
#~ msgid ""
#~ "A relatively recent online version of this book can be found at <ulink "
#~ "url=\"http://svnbook.red-bean.com\"></ulink>."
#~ msgstr ""
#~ "この本の比較的最近のバージョンは、 <ulink url=\"http://svnbook.red-bean."
#~ "com\"></ulink>にあります。"
#~ msgid ""
#~ "Special thanks to my wife, Amy, for her love and patient support, for "
#~ "putting up with late nights, and for even reviewing entire sections of "
#~ "this book&mdash;you always go the extra mile, and do so with incredible "
#~ "grace. Gavin, when you're old enough to read, I hope you're as proud of "
#~ "your Daddy as he is of you. Mom and Dad (and the rest of the family), "
#~ "thanks for your constant support and enthusiasm."
#~ msgstr ""
#~ "Special thanks to my wife, Amy, for her love and patient support, for "
#~ "putting up with late nights, and for even reviewing entire sections of "
#~ "this book&mdash;you always go the extra mile, and do so with incredible "
#~ "grace. Gavin, when you're old enough to read, I hope you're as proud of "
#~ "your Daddy as he is of you. Mom and Dad (and the rest of the family), "
#~ "thanks for your constant support and enthusiasm."
#~ msgid "Introduction"
#~ msgstr "導入"
#~ msgid ""
#~ "Version control is the art of managing changes to information. It has "
#~ "long been a critical tool for programmers, who typically spend their time "
#~ "making small changes to software and then undoing those changes the next "
#~ "day. But the usefulness of version control software extends far beyond "
#~ "the bounds of the software development world. Anywhere you can find "
#~ "people using computers to manage information that changes often, there is "
#~ "room for version control. And that's where Subversion comes into play."
#~ msgstr ""
#~ "バージョン管理は情報に対する変更を管理するための技法です。 それは小さな変"
#~ "更をソフトウェアにしたあと、次の日にはその変更を取り消すという ような作業"
#~ "をするプログラマにとっては、長い間非常に重要なことでした。 しかしバージョ"
#~ "ン管理ソフトウェアの有用性はソフトウェア開発の世界をはる かに越えた汎用性"
#~ "があります。頻繁に変更されるような情報を管理しなくては ならないようなコン"
#~ "ピュータを使っている人々がいる場所では常にバージョン 管理システムを導入す"
#~ "る余地があります。そしてSubversionが力を発器ｷ駈ｷる のはそのような場所にお"
#~ "いてです。"
#~ msgid ""
#~ "This chapter contains a high-level introduction to Subversion&mdash;what "
#~ "it is; what it does; how to get it."
#~ msgstr ""
#~ "この章にはSubversion の高レベルの導入があります&mdash;つまりそれは何であ"
#~ "り、 何をするものであり、そしてそのためにはどうしたらよいか、についての導"
#~ "入 です。"
#~ msgid ""
#~ "Alternately, you can build Subversion directly from source code. From the "
#~ "Subversion website, download the latest source-code release. After "
#~ "unpacking it, follow the instructions in the <filename>INSTALL</filename> "
#~ "file to build it. Note that a released source package contains everything "
#~ "you need to build a command-line client capable of talking to a remote "
#~ "repository (in particular, the apr, apr-util, and neon libraries). But "
#~ "optional portions of Subversion have many other dependencies, such as "
#~ "Berkeley DB and possibly Apache httpd. If you want to do a complete "
#~ "build, make sure you have all of the packages documented in the "
#~ "<filename>INSTALL</filename> file. If you plan to work on Subversion "
#~ "itself, you can use your client program to grab the latest, bleeding-edge "
#~ "source code. This is documented in <xref linkend=\"svn.developer.contrib."
#~ "get-code\"/>."
#~ msgstr ""
#~ "あるいは直接ソースコードからSubversionを作ることもできます。Subversion "
#~ "ウェブサイトから最新のソースコードリリースを取得してください。解凍した あ"
#~ "と<filename>INSTALL</filename> ファイル中の説明に従って作ってください。"
#~ "ソースパッケージには リモートリポジトリにアクセスするためのコマンドライン"
#~ "クライアントを 作るのに必要なものはすべてそろっていますが、(特に apr, apr-"
#~ "util, そして neon ライブラリなど)、Subversionのオプション部分は Berkeley "
#~ "DB や、 潜在的にはApache httpd など、ほかのいろいろなソフトに依存している"
#~ "ことに 注意してください。もし完全に ビルドしようとするなら、"
#~ "<filename>INSTALL</filename>ファイルに書かれた すべてのパッケージが手元に"
#~ "あることを確認してください。既にある Subversion リポジトリの上で作業するな"
#~ "ら、クライアントプログラムを使っ て、最新の一番新しいソースコードを取得す"
#~ "ることができます。 このやり方は<xref linkend=\"svn.developer.contrib.get-"
#~ "code\"/> の章に書いてあります。"
#~ msgid "svnlook"
#~ msgstr "svnlook"
#~ msgid "svnadmin"
#~ msgstr "svnadmin"
#~ msgid "svndumpfilter"
#~ msgstr "svndumpfilter"
#~ msgid "mod_dav_svn"
#~ msgstr "mod_dav_svn"
#~ msgid "A Quick Start"
#~ msgstr "クイックスタート"
#~ msgid ""
#~ "Some people have trouble absorbing a new technology by reading the sort "
#~ "of <quote>top down</quote> approach provided by this book. This section "
#~ "is a very short introduction to Subversion, and is designed to give "
#~ "<quote>bottom up</quote> learners a fighting chance. If you prefer to "
#~ "learn by experimentation, the following demonstration will get you up and "
#~ "running. Along the way, we give links to the relevant chapters of this "
#~ "book."
#~ msgstr ""
#~ "人によってはこの本での<quote>トップダウン</quote>的なアプローチによって新"
#~ "しい技術を習得するのが困難かも知れません。この節では Subversion の 非常に"
#~ "短い導入方法を用意し、<quote>ボトムアップ</quote>的な読者にも挑戦の機会を"
#~ "与える ことにします。あなたが経験によって学ぶやり方を好むようなタイプの人"
#~ "であ れば、以下のやり方がうまくいくでしょう。途中、この本の関連した章への"
#~ "リ ンクをつけてあります。"
#~ msgid "Basic Concepts"
#~ msgstr "基本概念"
#~ msgid ""
#~ "The core mission of a version control system is to enable collaborative "
#~ "editing and sharing of data. But different systems use different "
#~ "strategies to achieve this."
#~ msgstr ""
#~ "バージョン管理システムの中核となる役割は共同作業での編集とデー タの共有を"
#~ "可能にすることです。しかしこれにはシステムごとに違った戦略が必要 になりま"
#~ "す。"
#~ msgid "Summary"
#~ msgstr "まとめ"
#~ msgid "Guided Tour"
#~ msgstr "同伴ツアー"
#~ msgid ""
#~ "You use <command>svn import</command> to import a new project into a "
#~ "Subversion repository. While this is most likely the very first thing you "
#~ "will do when you set up your Subversion server, it's not something that "
#~ "happens very often. For a detailed description of import, see <xref "
#~ "linkend=\"svn.tour.other.import\"/> later in this chapter."
#~ msgstr ""
#~ "<command>svn import</command>で、Subversionのリポジトリに新しいプロジェク"
#~ "トを インポートできます。Subversionサーバを設定するときには、一番最初に 実"
#~ "行するコマンドかも知れませんが、それほどしばしば利用するものでは ありませ"
#~ "ん。import の詳細についてはこの章の後のほうにある、 <xref linkend=\"svn."
#~ "tour.other.import\"/> を見て ください。"
#~ msgid "Revisions: Numbers, Keywords, and Dates, Oh My!"
#~ msgstr "リビジョン: 番号、キーワード、そして、時刻、おやおや・・・"
#~ msgid ""
#~ "Before we go on, you should know a bit about how to identify a particular "
#~ "revision in your repository. As you learned in <xref linkend=\"svn.basic."
#~ "in-action.revs\"/>, a revision is a <quote>snapshot</quote> of the "
#~ "repository at a particular moment in time. As you continue to commit and "
#~ "grow your repository, you need a mechanism for identifying these "
#~ "snapshots."
#~ msgstr ""
#~ "話を進める前に、リポジトリ中の特定のリビジョンを特定する方法について少し "
#~ "知っておく必要があります。 <xref linkend=\"svn.basic.in-action.revs\"/> "
#~ "で 見たように、リビジョンは、リポジトリのある特定の時点における <quote>ス"
#~ "ナップショット</quote>です。 コミットを繰り返してリポジトリが大きくなるに"
#~ "つれ、スナップショットを特定する 仕組みが必要になってきます。"
#~ msgid ""
#~ "You specify these revisions by using the <option>--revision</option> "
#~ "(<option>-r</option>) switch plus the revision you want (<command>svn --"
#~ "revision REV</command>) or you can specify a range by separating two "
#~ "revisions with a colon (<command>svn --revision REV1:REV2</command>). And "
#~ "Subversion lets you refer to these revisions by number, keyword, or date."
#~ msgstr ""
#~ "リビジョンの特定には、 <option>--revision</option> (<option>-r</option>) "
#~ "スイッチの あとにほしいリビジョン番号を続けます。 (<command>svn --"
#~ "revision REV</command>) とするか、 二つのリビジョンをコロンで区切って範囲"
#~ "指定することもできます (<command>svn --revision REV1:REV2</command>). ま"
#~ "た、リビジョンは、番号、キーワード、日付で参照することもできます。"
#~ msgid ""
#~ "When you create a new Subversion repository, it begins its life at "
#~ "revision zero and each successive commit increases the revision number by "
#~ "one. After your commit completes, the Subversion client informs you of "
#~ "the new revision number:"
#~ msgstr ""
#~ "新しいSubversionのリポジトリを作ると、最初はリビジョンゼロとなり、その後"
#~ "の コミットのたびにリビジョン番号は一つずつ大きくなります。 コミットが完了"
#~ "した後では、Subversionクライアントはあなたに一番新しい リビジョン番号を知"
#~ "らせます:"
#~ msgid ""
#~ "If at any point in the future you want to refer to that revision (we'll "
#~ "see how and why we might want to do that later in this chapter), you can "
#~ "refer to it as <quote>3</quote>."
#~ msgstr ""
#~ "その後、いつでもこのリビジョンを参照したければ、 (この章の後のほうで、どう"
#~ "してそんなことが必要かを説明します。) <quote>3</quote>として参照することが"
#~ "できます。"
#~ msgid ""
#~ "Each directory in your working copy contains an administrative "
#~ "subdirectory called <filename>.svn</filename>. For every file in a "
#~ "directory, Subversion keeps a copy of each file in the administrative "
#~ "area. This copy is an unmodified (no keyword expansion, no end-of-line "
#~ "translation, no nothing) copy of the file as it existed in the last "
#~ "revision (called the <quote>BASE</quote> revision) that you updated it to "
#~ "in your working copy. We refer to this file as the <firstterm>pristine "
#~ "copy</firstterm> or <firstterm>text-base</firstterm> version of your "
#~ "file, and it's always an exact byte-for-byte copy of the file as it "
#~ "exists in the repository."
#~ msgstr ""
#~ "作業コピーのすべてのディレクトリには<filename>.svn</filename> と呼ばれる管"
#~ "理用のサブディレクトリがあります。Subversionはディレクトリ 中のそれぞれの"
#~ "ファイルごとの コピーをこの管理領域中に保存しています。このコピーは修正さ"
#~ "れることは なく(キーワード展開は起こりませんし、行末変換もしませんし、その"
#~ "他 いっさい何もしません)、最後のリビジョン(これを<quote>BASE</quote>リビ"
#~ "ジョン といいます)に存在しているファイルで、作業コピーを更新したときのファ"
#~ "イルその もののコピーです。このファイルのことを、 <firstterm>プリスティ"
#~ "ン・コピー</firstterm>あるいはファイルの <firstterm>テキスト-ベース</"
#~ "firstterm>バージョンと言い、 リポジトリに存在している元のファイルの厳密な"
#~ "コピーです。"
#~ msgid "HEAD"
#~ msgstr "HEAD"
#~ msgid "BASE"
#~ msgstr "BASE"
#~ msgid "COMMITTED"
#~ msgstr "COMMITTED"
#~ msgid "PREV"
#~ msgstr "PREV"
#~ msgid ""
#~ "Here are some examples of revision keywords in action. Don't worry if the "
#~ "commands don't make sense yet; we'll be explaining these commands as we "
#~ "go through the chapter:"
#~ msgstr ""
#~ "コマンド実行時のリビジョンキーワードの例です。 コマンドの意味はわからなく"
#~ "ても大丈夫です。章を進めるごとに 説明します:"
#~ msgid ""
#~ "These keywords allow you to perform many common (and helpful) operations "
#~ "without having to look up specific revision numbers or remember the exact "
#~ "revision of your working copy."
#~ msgstr ""
#~ "これらのキーワードを使って特定のリビジョン番号や作業コピーの正確な リビ"
#~ "ジョンを憶えておくことなしに、いろいろな(役に立つ)処理を することができま"
#~ "す。"
#~ msgid ""
#~ "Anywhere that you specify a revision number or revision keyword, you can "
#~ "also specify a date inside curly braces <quote>{}</quote>. You can even "
#~ "access a range of changes in the repository using both dates and "
#~ "revisions together!"
#~ msgstr ""
#~ "リビジョン番号やリビジョンキーワードを指定できるところではどこでも、 中"
#~ "かっこ、<quote>{}</quote> の中に日付を入れて指定することもできます。 日付"
#~ "とリビジョン番号の両方を使ってリポジトリ中の変更範囲にアクセスする ことさ"
#~ "えできます。"
#~ msgid ""
#~ "Here are examples of the date formats that Subversion accepts. Remember "
#~ "to use quotes around any date that contains spaces."
#~ msgstr ""
#~ "ここでは Subversion が受け入れることのできる日付形式の例をあげておきま"
#~ "す。 空白を含むような日付は常に引用符でくくるのを忘れないでください。"
#~ msgid "As we pointed out, you can also mix dates and revisions:"
#~ msgstr "既に指摘したように、日付とリビジョン番号を混在させることもできます:"
#~ msgid "$ svn log --revision {2002-11-20}:4040"
#~ msgstr "$ svn log --revision {2002-11-20}:4040"
#~ msgid ""
#~ "Users should be aware of a subtlety that can become quite a stumbling-"
#~ "block when dealing with dates in Subversion. Since the timestamp of a "
#~ "revision is stored as a property of the revision&mdash;an unversioned, "
#~ "modifiable property&mdash;revision timestamps can be changed to represent "
#~ "complete falsifications of true chronology, or even removed altogether. "
#~ "This will wreak havoc on the internal date-to-revision conversion that "
#~ "Subversion performs."
#~ msgstr ""
#~ "Subversion で日付を扱う場合、面倒なことが起こるかも知れないことに注意 して"
#~ "ください。リビジョンのタイムスタンプはリビジョン属性として保存 されます"
#~ "&mdash;つまりバージョン化されていない、修正可能な属性と して、ということで"
#~ "す&mdash;リビジョンのタイムスタンプは本当の時間 を完全に偽造する形で変更可"
#~ "能ですし、削除してしまうことすら可能です。 このようなことは Subversion が"
#~ "処理する内部的な日付-リビジョン変換 に大混乱を与えるかも知れません。"
#~ msgid "svn update"
#~ msgstr "svn update"
#~ msgid "svn add"
#~ msgstr "svn add"
#~ msgid "svn delete"
#~ msgstr "svn delete"
#~ msgid "svn copy"
#~ msgstr "svn copy"
#~ msgid "Merge others' changes into your working copy"
#~ msgstr "他の人の変更の、作業コピーへのマージ"
#~ msgid "U foo"
#~ msgstr "U foo"
#~ msgid ""
#~ "File <filename>foo</filename> was <computeroutput>U</"
#~ "computeroutput>pdated (received changes from the server)."
#~ msgstr ""
#~ "ファイル <filename>foo</filename> は 更新(<computeroutput>U</"
#~ "computeroutput>pdated) されました(サーバから 変更を受け取りました)。"
#~ msgid "A foo"
#~ msgstr "A foo"
#~ msgid ""
#~ "File or directory <filename>foo</filename> was <computeroutput>A</"
#~ "computeroutput>dded to your working copy."
#~ msgstr ""
#~ "ファイルかディレクトリである <filename>foo</filename> は あなたの作業コ"
#~ "ピーに追加(<computeroutput>A</computeroutput>dded) されました。"
#~ msgid "D foo"
#~ msgstr "D foo"
#~ msgid ""
#~ "File or directory <filename>foo</filename> was <computeroutput>D</"
#~ "computeroutput>eleted from your working copy."
#~ msgstr ""
#~ "ファイルかディレクトリである <filename>foo</filename> は あなたの作業コ"
#~ "ピーから削除(<computeroutput>D</computeroutput>eleted) されました。"
#~ msgid "R foo"
#~ msgstr "R foo"
#~ msgid ""
#~ "File or directory <filename>foo</filename> was <computeroutput>R</"
#~ "computeroutput>eplaced in your working copy; that is, <filename>foo</"
#~ "filename> was deleted, and a new item with the same name was added. While "
#~ "they may have the same name, the repository considers them to be distinct "
#~ "objects with distinct histories."
#~ msgstr ""
#~ "ファイルかディレクトリである <filename>foo</filename> は あなたの作業コ"
#~ "ピー中で置き換え(<computeroutput>R</computeroutput>eplaced) られました。つ"
#~ "まり <filename>foo</filename> は削除されて、同じ名前の 新しいファイルまた"
#~ "はディレクトリが追加されました。両方は同じ名前ですが、 リポジトリはそれら"
#~ "を別の履歴を持った別のものであるとみなします。"
#~ msgid "G foo"
#~ msgstr "G foo"
#~ msgid ""
#~ "File <filename>foo</filename> received new changes from the repository, "
#~ "but your local copy of the file had your modifications. Either the "
#~ "changes did not intersect, or the changes were exactly the same as your "
#~ "local modifications, so Subversion has successfully mer<computeroutput>G</"
#~ "computeroutput>ed the repository's changes into the file without a "
#~ "problem."
#~ msgstr ""
#~ "ファイル <filename>foo</filename> は新しい変更点を リポジトリから受け取り"
#~ "ましたが、そのファイルのローカルコピーにも 修正が加えられていました。しか"
#~ "し両方の修正は重なっていないか、あるいは 変更の内容が自分自身のものとまっ"
#~ "たく同じであったため、Subversion はリポジトリの変更を、問題を起こすことな"
#~ "しにマージ (mer<computeroutput>G</computeroutput>ed)しました。"
#~ msgid "C foo"
#~ msgstr "C foo"
#~ msgid ""
#~ "File <filename>foo</filename> received <computeroutput>C</"
#~ "computeroutput>onflicting changes from the server. The changes from the "
#~ "server directly overlap your own changes to the file. No need to panic, "
#~ "though. This overlap needs to be resolved by a human (you); we discuss "
#~ "this situation later in this chapter."
#~ msgstr ""
#~ "ファイル <filename>foo</filename> は、サーバから 衝突(<computeroutput>C</"
#~ "computeroutput>onflicting)のある変更を 受け取りました。サーバからの変更"
#~ "は、あなた自身の変更と直接重なっています。 でも心配はいりません。この衝突"
#~ "は人間(つまりあなた)が解消しなくては なりません。この章の後でこの状況につ"
#~ "いて議論します。"
#~ msgid "File changes"
#~ msgstr "ファイルの変更"
#~ msgid ""
#~ "This is the simplest sort of change. You don't need to tell Subversion "
#~ "that you intend to change a file; just make your changes. Subversion will "
#~ "be able to automatically detect which files have been changed."
#~ msgstr ""
#~ "これは一番単純なタイプの変更です。ファイルを変更することについて "
#~ "Subversionに報告する必要はありません。どのファイルが変更された については"
#~ "Subversion自身が自動的に検出することができます。"
#~ msgid "Tree changes"
#~ msgstr "ツリーの変更"
#~ msgid ""
#~ "You can ask Subversion to <quote>mark</quote> files and directories for "
#~ "scheduled removal, addition, copying, or moving. While these changes may "
#~ "take place immediately in your working copy, no additions or removals "
#~ "will happen in the repository until you commit them."
#~ msgstr ""
#~ "Subversionに対して、削除、追加、コピー、移動の予告として ファイルやディレ"
#~ "クトリを<quote>マーク</quote>するように 依頼することができます。このような"
#~ "変更は作業コピー上では直ちに 起こりますが、次にあなたがコミットするまでリ"
#~ "ポジトリ上では 追加削除は一切起きません。"
#~ msgid ""
#~ "To make file changes, use your text editor, word processor, graphics "
#~ "program, or whatever tool you would normally use. Subversion handles "
#~ "binary files just as easily as it handles text files&mdash;and just as "
#~ "efficiently too."
#~ msgstr ""
#~ "ファイルを変更するには、テキストエディタ、ワードプロセッサ、 グラフィック"
#~ "プログラム、その他の通常利用しているツールなら なんでも使うことができま"
#~ "す。Subversionはバイナリファイルを テキストファイルを扱うのと同じくらい簡"
#~ "単に扱うことができます&mdash; し、十分効率的にあつかえます。"
#~ msgid ""
#~ "While you can edit your files with whatever tool you like, you shouldn't "
#~ "change the structure of your working copy without letting Subversion know "
#~ "what you're doing. Use the <command>svn copy</command>, <command>svn "
#~ "delete</command>, and <command>svn move</command> commands to change the "
#~ "structure of your working copy, and use the <command>svn add</command> "
#~ "command to place new files and directories under version control."
#~ msgstr ""
#~ "どんなツールを使ってファイルを編集する場合でも、その内容 を Subversion に"
#~ "伝えずに作業コピーの構成を変えるべきではあり ません。作業コピーの構成を変"
#~ "えるときには <command>svn copy</command>, <command>svn delete</command>, "
#~ "<command>svn move</command> コマンドを使い、新たにファイルやディレクトリ "
#~ "をバージョン管理下におく場合には<command>svn add</command>コ マンドを使う"
#~ "ようにしてください。"
#~ msgid "svn add foo"
#~ msgstr "svn add foo"
#~ msgid ""
#~ "Schedule file, directory, or symbolic link <filename>foo</filename> to be "
#~ "added to the repository. When you next commit, <filename>foo</filename> "
#~ "will become a child of its parent directory. Note that if <filename>foo</"
#~ "filename> is a directory, everything underneath <filename>foo</filename> "
#~ "will be scheduled for addition. If you only want to add <filename>foo</"
#~ "filename> itself, pass the <option>--non-recursive</option> (<option>-N</"
#~ "option>) switch."
#~ msgstr ""
#~ "通常ファイル、ディレクトリ、シンボリックリンクのどれかである "
#~ "<filename>foo</filename> をリポジトリに追加する予告をします。 次のコミット"
#~ "で<filename>foo</filename> は正式に親ディレクトリの 子供になります。"
#~ "<filename>foo</filename>がディレクトリの場合は <filename>foo</filename>に"
#~ "あるすべてのファイルは追加予告の対象に なります。<filename>foo</filename>"
#~ "だけを追加予告したい場合は <option>--non-recursive</option> (<option>-N</"
#~ "option>) スイッチを指定してください。"
#~ msgid "svn delete foo"
#~ msgstr "svn delete foo"
#~ msgid ""
#~ "Schedule file, directory, or symbolic link <filename>foo</filename> to be "
#~ "deleted from the repository. If <filename>foo</filename> is a file or "
#~ "link, it is immediately deleted from your working copy. If <filename>foo</"
#~ "filename> is a directory, it is not deleted, but Subversion schedules it "
#~ "for deletion. When you commit your changes, <filename>foo</filename> will "
#~ "be removed from your working copy and the repository."
#~ msgstr ""
#~ "通常ファイル、ディレクトリ、シンボリックリンクのどれかである "
#~ "<filename>foo</filename> をリポジトリから削除する予告をします。 "
#~ "<filename>foo</filename> が通常ファイルまたはシンボリックリンクの場合は作"
#~ "業コピーから直ちに 削除されます。ディレクトリの場合は削除されませんが、"
#~ "Subversion はそれを削除予告の状態に設定します。変更をコミットすると "
#~ "<filename>foo</filename> は作業コピーとリポジトリから削除されます。"
#~ msgid ""
#~ "Of course, nothing is ever totally deleted from the repository&mdash;just "
#~ "from the <literal>HEAD</literal> of the repository. You can get back "
#~ "anything you delete by checking out (or updating your working copy) a "
#~ "revision earlier than the one in which you deleted it."
#~ msgstr ""
#~ "もちろんリポジトリから完全に削除されてしまうわけではありません&mdash; 単"
#~ "に、リポジトリの<literal>HEAD</literal>から削除されるだけです。削除したリ"
#~ "ビジョンより 前のリビジョンを指定してチェックアウトすれば(あるいは作業コ"
#~ "ピーを 更新すれば)削除前の状態に戻ることができます。"
#~ msgid "svn copy foo bar"
#~ msgstr "svn copy foo bar"
#~ msgid ""
#~ "Create a new item <filename>bar</filename> as a duplicate of "
#~ "<filename>foo</filename>. <filename>bar</filename> is automatically "
#~ "scheduled for addition. When <filename>bar</filename> is added to the "
#~ "repository on the next commit, its copy history is recorded (as having "
#~ "originally come from <filename>foo</filename>). <command>svn copy</"
#~ "command> does not create intermediate directories."
#~ msgstr ""
#~ "新しいアイテム<filename>bar</filename> を<filename>foo</filename> の複製と"
#~ "して作ります。<filename>bar</filename>は自動的に 追加予告されます。"
#~ "<filename>bar</filename>が次のコミットでリポジトリ に追加される時点で、コ"
#~ "ピーの履歴が記録されます(それが <filename>foo</filename>のコピーである、と"
#~ "いう履歴)。 <command>svn copy</command>は中間ディレクトリを作成しません。"
#~ msgid "svn move foo bar"
#~ msgstr "svn move foo bar"
#~ msgid ""
#~ "This command is exactly the same as running <command>svn copy foo bar; "
#~ "svn delete foo</command>. That is, <filename>bar</filename> is scheduled "
#~ "for addition as a copy of <filename>foo</filename>, and <filename>foo</"
#~ "filename> is scheduled for removal. <command>svn move</command> does not "
#~ "create intermediate directories."
#~ msgstr ""
#~ "このコマンドは<command>svn copy foo bar; svn delete foo</command> を実行す"
#~ "ることとまったく同じです。つまり、 <filename>bar</filename> は"
#~ "<filename>foo</filename>のコピーとして 追加予告され、<filename>foo</"
#~ "filename> は削除予告されます。 <command>svn move</command>は中間ディレクト"
#~ "リを作成しません。"
#~ msgid "Changing the Repository Without a Working Copy"
#~ msgstr "作業コピーなしでリポジトリを変更すること"
#~ msgid ""
#~ "Earlier in this chapter, we said that you have to commit any changes that "
#~ "you make in order for the repository to reflect these changes. That's not "
#~ "entirely true&mdash;there <emphasis>are</emphasis> some use cases that "
#~ "immediately commit tree changes to the repository. This only happens when "
#~ "a subcommand is operating directly on a URL, rather than on a working-"
#~ "copy path. In particular, specific uses of <command>svn mkdir</command>, "
#~ "<command>svn copy</command>, <command>svn move</command>, and "
#~ "<command>svn delete</command> can work with URLs."
#~ msgstr ""
#~ "以前この章で、変更をリポジトリに反映させるためにはどんな変更も コミットす"
#~ "る必要があるといいました。これは完全に正しいとはいえません &mdash;リポジト"
#~ "リに対して、ツリーの変更を直接コミットするようないくつかの コマンドも"
#~ "<emphasis>あります</emphasis>。 これは、サブコマンドが、作業コピーパスでは"
#~ "なく、直接 URLを操作する 場合にだけ起こります。特に<command>svn mkdir</"
#~ "command>, <command>svn copy</command>, <command>svn move</command>, "
#~ "<command>svn delete</command> の特殊な利用は、URLを直接操作します。"
#~ msgid ""
#~ "URL operations behave in this manner because commands that operate on a "
#~ "working copy can use the working copy as a sort of <quote>staging area</"
#~ "quote> to set up your changes before committing them to the repository. "
#~ "Commands that operate on URLs don't have this luxury, so when you operate "
#~ "directly on a URL, any of the above actions represent an immediate commit."
#~ msgstr ""
#~ "URLの操作がそのような方法で振る舞うのは、作業コピーに対する操作 コマンド"
#~ "は、作業コピーを、リポジトリにコミットする前に変更点を セットしておくある"
#~ "種の<quote>中間領域</quote> として使うため です。 URLに働くコマンドはこの"
#~ "余裕がないので、直接URLに操作するときには 上で述べたアクションはどれも直接"
#~ "のコミットを引き起こすことになります。"
#~ msgid ""
#~ "L     some_dir            # svn left a lock in the .svn area of some_dir\n"
#~ "M       bar.c               # the content in bar.c has local "
#~ "modifications\n"
#~ " M      baz.c               # baz.c has property but no content "
#~ "modifications\n"
#~ "X       3rd_party           # dir is part of an externals definition\n"
#~ "?       foo.o               # svn doesn't manage foo.o\n"
#~ "!       some_dir            # svn manages this, but it's missing or "
#~ "incomplete\n"
#~ "~       qux                 # versioned as file/dir/link, but type has "
#~ "changed\n"
#~ "I       .screenrc           # svn doesn't manage this, and is set to "
#~ "ignore it\n"
#~ "A  +    moved_dir           # added with history of where it came from\n"
#~ "M  +    moved_dir/README    # added with history and has local "
#~ "modifications\n"
#~ "D       stuff/fish.c        # file is scheduled for deletion\n"
#~ "A       stuff/loot/bloo.h   # file is scheduled for addition\n"
#~ "C       stuff/loot/lump.c   # file has textual conflicts from an update\n"
#~ " C      stuff/loot/glub.c   # file has property conflicts from an update\n"
#~ "R       xyz.c               # file is scheduled for replacement\n"
#~ "    S   stuff/squawk        # file or dir has been switched to a branch\n"
#~ "     K  dog.jpg             # file is locked locally; lock-token "
#~ "present \n"
#~ "     O  cat.jpg             # file is locked in the repository by other "
#~ "user\n"
#~ "     B  bird.jpg            # file is locked locally, but lock has been "
#~ "broken\n"
#~ "     T  fish.jpg            # file is locked locally, but lock has been "
#~ "stolen"
#~ msgstr ""
#~ "L     some_dir            # svn left a lock in the .svn area of some_dir\n"
#~ "M       bar.c               # the content in bar.c has local "
#~ "modifications\n"
#~ " M      baz.c               # baz.c has property but no content "
#~ "modifications\n"
#~ "X       3rd_party           # dir is part of an externals definition\n"
#~ "?       foo.o               # svn doesn't manage foo.o\n"
#~ "!       some_dir            # svn manages this, but it's missing or "
#~ "incomplete\n"
#~ "‾       qux                 # versioned as file/dir/link, but type has "
#~ "changed\n"
#~ "I       .screenrc           # svn doesn't manage this, and is set to "
#~ "ignore it\n"
#~ "A  +    moved_dir           # added with history of where it came from\n"
#~ "M  +    moved_dir/README    # added with history and has local "
#~ "modifications\n"
#~ "D       stuff/fish.c        # file is scheduled for deletion\n"
#~ "A       stuff/loot/bloo.h   # file is scheduled for addition\n"
#~ "C       stuff/loot/lump.c   # file has textual conflicts from an update\n"
#~ " C      stuff/loot/glub.c   # file has property conflicts from an update\n"
#~ "R       xyz.c               # file is scheduled for replacement\n"
#~ "    S   stuff/squawk        # file or dir has been switched to a branch\n"
#~ "     K  dog.jpg             # file is locked locally; lock-token "
#~ "present \n"
#~ "     O  cat.jpg             # file is locked in the repository by other "
#~ "user\n"
#~ "     B  bird.jpg            # file is locked locally, but lock has been "
#~ "broken\n"
#~ "     T  fish.jpg            # file is locked locally, but lock has been "
#~ "stolen"
#~ msgid "R item"
#~ msgstr "R item"
#~ msgid ""
#~ "The file, directory, or symbolic link <filename>item</filename> has been "
#~ "scheduled to replace <filename>item</filename> in the repository. This "
#~ "means that the object is first deleted, then another object of the same "
#~ "name is added, all within a single revision."
#~ msgstr ""
#~ "ファイル、ディレクトリ、シンボリックリンクのいずれか である"
#~ "<filename>item</filename> はリポジトリ中の <filename>item</filename> を置"
#~ "き換えるように準被ｳ駈ｳれています。 これはまずそのオブジェクトがいったん削"
#~ "除され、次に同じ名前の 別のオブジェクトが追加されます。そしてそれは単一の"
#~ "リビジョンで ひとまとまりに実行されます。"
#~ msgid "X item"
#~ msgstr "X item"
#~ msgid ""
#~ "The directory <filename>item</filename> is unversioned, but is related to "
#~ "a Subversion externals definition. To find out more about externals "
#~ "definitions, see <xref linkend=\"svn.advanced.externals\"/>."
#~ msgstr ""
#~ "ディレクトリ <filename>item</filename> はバージョン化 されていませんが"
#~ "Subversionの外部定義に関連付けられています。外部定義についての 詳細は"
#~ "<xref linkend=\"svn.advanced.externals\"/>を見てください。"
#~ msgid "? item"
#~ msgstr "? item"
#~ msgid ""
#~ "The file, directory, or symbolic link <filename>item</filename> is not "
#~ "under version control. You can silence the question marks by either "
#~ "passing the <option>--quiet</option> (<option>-q</option>) switch to "
#~ "<command>svn status</command>, or by setting the <literal>svn:ignore</"
#~ "literal> property on the parent directory. For more information on "
#~ "ignored files, see <xref linkend=\"svn.advanced.props.special.ignore\"/>."
#~ msgstr ""
#~ "通常ファイル、ディレクトリ、シンボリックリンクのいずれかである "
#~ "<filename>item</filename> は バージョン管理下にはありません。<option>--"
#~ "quiet</option> (<option>-q</option>) スイッチを<command>svn status</"
#~ "command> に渡すか、親ディレクトリに<literal>svn:ignore</literal> 属性を 設"
#~ "定することで疑問符の表示を抑制できます。 無視できるファイルについての詳細"
#~ "は <xref linkend=\"svn.advanced.props.special.ignore\"/>を見てください。"
#~ msgid "! item"
#~ msgstr "! item"
#~ msgid ""
#~ "The file, directory, or symbolic link <filename>item</filename> is under "
#~ "version control but is missing or somehow incomplete. The item can be "
#~ "missing if it's removed using a non-Subversion command. In the case of a "
#~ "directory, it can be incomplete if you happened to interrupt a checkout "
#~ "or update. A quick <command>svn update</command> will refetch the file or "
#~ "directory from the repository, or <command>svn revert file</command> will "
#~ "restore a missing file."
#~ msgstr ""
#~ "通常ファイル、ディレクトリ、シンボリックリンクのいずれかである "
#~ "<filename>item</filename> は バージョン管理下にありますが、それは失われて"
#~ "いるか、何か不完全な 状態にあります。Subversion以外のコマンドを使って削除"
#~ "された場合 には、そのアイテムは失われてしまいます。ディレクトリの場合、 "
#~ "チェックアウトか、更新が中断された場合、不完全な状態になることが ありま"
#~ "す。<command>svn update</command>を使えばすぐにリポジトリから ファイルまた"
#~ "はディレクトリをもう一度取り出すことができます。 <command>svn revert "
#~ "file</command>を使えば、失われたファイルを 復元することができます。"
#~ msgid "~ item"
#~ msgstr "‾ item"
#~ msgid ""
#~ "The file, directory, or symbolic link <filename>item</filename> is in the "
#~ "repository as one kind of object, but what's actually in your working "
#~ "copy is some other kind. For example, Subversion might have a file in the "
#~ "repository, but you removed the file and created a directory in its "
#~ "place, without using the <command>svn delete</command> or <command>svn "
#~ "add</command> command."
#~ msgstr ""
#~ "通常ファイル、ディレクトリ、シンボリックリンクのいずれかである "
#~ "<filename>item</filename> は あるタイプのオブジェクトとして存在しますが、"
#~ "作業コピーには別の タイプのオブジェクトとして存在しています。 たとえば"
#~ "Subversionはリポジトリ中にファイルを持っているが、 <command>svn delete</"
#~ "command> や <command>svn add</command>を 使わずに、作業コピー中の対応する"
#~ "ファイルを削除し、同じ名前の ディレクトリを作ったような場合です。"
#~ msgid "I item"
#~ msgstr "I item"
#~ msgid ""
#~ "The file, directory, or symbolic link <filename>item</filename> is not "
#~ "under version control, and Subversion is configured to ignore it during "
#~ "<command>svn add</command>, <command>svn import</command> and "
#~ "<command>svn status</command> operations. For more information on ignored "
#~ "files, see <xref linkend=\"svn.advanced.props.special.ignore\"/>. Note "
#~ "that this symbol only shows up if you pass the <option>--no-ignore</"
#~ "option> option to <command>svn status</command>&mdash;otherwise the file "
#~ "would be ignored and not listed at all!"
#~ msgstr ""
#~ "ファイル、ディレクトリ、シンボリックリンクのいずれかである "
#~ "<filename>item</filename> はバージョン管理下にはなく、Subversion は "
#~ "<command>svn add</command>, <command>svn import</command> <command>svn "
#~ "status</command> の実行時にはこれを 無視します。無視されるファイルについて"
#~ "のより詳しい情報は <xref linkend=\"svn.advanced.props.special.ignore\"/> "
#~ "を見てください。 このシンボルは <command>svn status</command>に<option>--"
#~ "no-ignore</option> オプションを渡したときにだけ表示されることに注意してく"
#~ "ださい。 &mdash;そうでなければファイルは無視され、まったく表示されません!"
#~ msgid ""
#~ "The second column tells the status of a file or directory's properties "
#~ "(see <xref linkend=\"svn.advanced.props\"/> for more information on "
#~ "properties). If an <computeroutput>M</computeroutput> appears in the "
#~ "second column, then the properties have been modified, otherwise a "
#~ "whitespace will be printed."
#~ msgstr ""
#~ "二番目のコラムはファイルまたはディレクトリの属性を示しています (詳しくは"
#~ "<xref linkend=\"svn.advanced.props\"/> 参照してください)。 もし"
#~ "<computeroutput>M</computeroutput> が表示されていれば 属性は修正されたこと"
#~ "を示しています。そうでなければ空白が 表示されます。"
#~ msgid ""
#~ "The third column will only show whitespace or an <computeroutput>L</"
#~ "computeroutput> which means that Subversion has locked the directory's "
#~ "<filename>.svn</filename> working area. You will see an "
#~ "<computeroutput>L</computeroutput> if you run <command>svn status</"
#~ "command> in a directory where an <command>svn commit</command> is in "
#~ "progress&mdash;perhaps when you are editing the log message. If "
#~ "Subversion is not running, then presumably Subversion was interrupted and "
#~ "the lock needs to be cleaned up by running <command>svn cleanup</command> "
#~ "(more about that later in this chapter)."
#~ msgstr ""
#~ "三番目のコラムは空白か、<computeroutput>L</computeroutput> が 表示され、後"
#~ "者の場合は Subversionがそのディレクトリの <filename>.svn</filename> 作業領"
#~ "域をロックしていることを意味して います。<command>svn commit</command> が"
#~ "実行されている途中で <command>svn status</command> を実行すると "
#~ "<computeroutput>L</computeroutput> が表示されます&mdash; 多分ログメッセー"
#~ "ジを変更している最中かも知れません。 Subversionが実行されていないのなら、"
#~ "Subversionは多分中断され たため、ロックは、<command>svn cleanup</command>"
#~ "の実行によって 解除しなくてはなりません。(これについてはこの章の後で触れま"
#~ "す)"
#~ msgid ""
#~ "The fourth column will only show whitespace or a <computeroutput>+</"
#~ "computeroutput> which means that the file or directory is scheduled to be "
#~ "added or modified with additional attached history. This typically "
#~ "happens when you <command>svn move</command> or <command>svn copy</"
#~ "command> a file or directory. If you see <computeroutput>A&nbsp;&nbsp;+</"
#~ "computeroutput>, this means the item is scheduled for addition-with-"
#~ "history. It could be a file, or the root of a copied directory. "
#~ "<computeroutput>+</computeroutput> means the item is part of a subtree "
#~ "scheduled for addition-with-history, i.e. some parent got copied, and "
#~ "it's just coming along for the ride. <computeroutput>M&nbsp;&nbsp;+</"
#~ "computeroutput> means the item is part of a subtree scheduled for "
#~ "addition-with-history, <emphasis>and</emphasis> it has local "
#~ "modifications. When you commit, first the parent will be added-with-"
#~ "history (copied), which means this file will automatically exist in the "
#~ "copy. Then the local modifications will be uploaded into the copy."
#~ msgstr ""
#~ "四番目のコラムは空白か<computeroutput>+</computeroutput> が 表示され、あと"
#~ "の場合はファイルまたはディレクトリは 追加または修正され、それが履歴に追加"
#~ "予告されていることを意味します。 これはファイルやディレクトリに対して"
#~ "<command>svn move</command> か <command>svn copy</command> をしたときによ"
#~ "く起こります。 <computeroutput>A&nbsp;&nbsp;+</computeroutput>の表示がある"
#~ "場合 そのアイテムは履歴付きの追加予告されていることを意味します。 それは"
#~ "ファイルか、コピーされたディレクトリのルートであるかです。 "
#~ "<computeroutput>+</computeroutput>はそのアイテムが、履歴に追加 予告された"
#~ "サブツリーの一部であることを意味します。つまり、 そのアイテムのどれかの親"
#~ "がコピーされ、コミットを待っています。 <computeroutput>M&nbsp;&nbsp;+</"
#~ "computeroutput> はアイテムが履歴 に追加予告されたサブツリーの一部であり、 "
#~ "<emphasis>かつ</emphasis> ローカルの修正も受けているという場合です。 コ"
#~ "ミットするとき、最初に親が履歴付き追加されます(コピーされます) その意味は"
#~ "このファイルはコピーによって自動的に存在するということ です。次いでローカ"
#~ "ルの修正はコピーにアップロードされます。"
#~ msgid ""
#~ "The fifth column will only show whitespace or an <computeroutput>S</"
#~ "computeroutput>. This signifies that the file or directory has been "
#~ "switched from the path of the rest of the working copy (using "
#~ "<command>svn switch</command>) to a branch."
#~ msgstr ""
#~ "五番目のコラムは空白か、<computeroutput>S</computeroutput>に なります。こ"
#~ "れはファイルかディレクトリは作業コピーの残り パスから、ブランチに"
#~ "(<command>svn switch</command>コマンドで) 切り替わっていることを意味しま"
#~ "す。"
#~ msgid ""
#~ "The sixth column shows information about locks, which is further "
#~ "explained in <xref linkend=\"svn.advanced.locking\"/>. (These are not the "
#~ "same locks as the ones indicated by an <computeroutput>L</computeroutput> "
#~ "in the third column; see <xref linkend=\"svn.advanced.locking.meanings\"/"
#~ ">.)"
#~ msgstr ""
#~ "六番目のコラムはロックに関する情報を示しています。 詳細は <xref linkend="
#~ "\"svn.advanced.locking\"/>で説明します。"
#~ msgid ""
#~ "Now suppose you see the above diff output, and realize that your changes "
#~ "to <filename>README</filename> are a mistake; perhaps you accidentally "
#~ "typed that text into the wrong file in your editor."
#~ msgstr ""
#~ "上のdiff出力を見て、<filename>README</filename> に対する修正が間違っている"
#~ "ことがわかったとしましょう: 多分 エディタで間違ったファイルに保存してし"
#~ "まったりしたのでしょう。"
#~ msgid "svn log"
#~ msgstr "svn log"
#~ msgid "Shows you the specific details of how a file changed over time."
#~ msgstr "時間とともにあるファイルがどのように変更されてきたかを 表示します。"
#~ msgid "svn cat"
#~ msgstr "svn cat"
#~ msgid "Compare repository to repository"
#~ msgstr "リポジトリとリポジトリの比較"
#~ msgid ""
#~ "Not only can you use <command>svn diff</command> to compare files in your "
#~ "working copy to the repository, but if you supply a URL argument, you can "
#~ "examine the differences between items in the repository without even "
#~ "having a working copy. This is especially useful if you wish to inspect "
#~ "changes in a file when you don't have a working copy on your local "
#~ "machine:"
#~ msgstr ""
#~ "作業コピーとリポジトリのファイルを比較するためにだけ <command>svn diff</"
#~ "command> を利用できるのではなく、URL引数を与えることで作業コピー を用意し"
#~ "なくてもリポジトリ中のアイテムの間の差を調べることができます。 これは、"
#~ "ローカルマシンに作業コピーがないときに、ファイルの変更点を 知りたいような"
#~ "場合に非常に便利です:"
#~ msgid ""
#~ "You're probably wondering why we don't just use <command>svn update --"
#~ "revision</command> to update the file to the older revision. There are a "
#~ "few reasons why we might prefer to use <command>svn cat</command>."
#~ msgstr ""
#~ "もしかすると、どうして古いリビジョンに戻すためのファイルの更新に 単に"
#~ "<command>svn update --revision</command>を使わないのか、と 思うかも知れま"
#~ "せん。 <command>svn cat</command>を使ったほうが 良い理由がいくつかありま"
#~ "す。"
#~ msgid ""
#~ "First, you may want to see the differences between two revisions of a "
#~ "file using an external diff program (perhaps a graphical one, or perhaps "
#~ "your file is in such a format that the output of unified diff is "
#~ "nonsensical). In this case, you'll need to grab a copy of the old "
#~ "revision, redirect it to a file, and pass both that and the file in your "
#~ "working copy to your external diff program."
#~ msgstr ""
#~ "まず、外部のdiff(多分、GUIかも知れないし、unified diff 形式の出力が 意味を"
#~ "持たないようなファイルなのかも知れません) プログラムによって二つのリビジョ"
#~ "ンのファイル間の差分を見たいかも知れません。 この場合、古いバージョンのコ"
#~ "ピーを取得する必要があり、その内容をファイル に出力したものと、作業コピー"
#~ "中のファイルの両方を外部diffプログラムに 渡さなくてはなりません。"
#~ msgid ""
#~ "Sometimes it's easier to look at an older version of a file in its "
#~ "entirety as opposed to just the differences between it and another "
#~ "revision."
#~ msgstr ""
#~ "しばしば、他のリビジョンとの間の差分をとるよりも、その古いバージョン の"
#~ "ファイル全体を見るほうが簡単なことがあります。"
#~ msgid "A Final Word on History"
#~ msgstr "履歴機能について、最後に"
#~ msgid "Other Useful Commands"
#~ msgstr "その他の役に立つコマンド"
#~ msgid ""
#~ "While not as frequently used as the commands previously discussed in this "
#~ "chapter, you will occasionally need these commands."
#~ msgstr ""
#~ "この章でいままで述べてきたほど利用されるわけではありませんが、 以下のコマ"
#~ "ンドがときどき必要になります。"
#~ msgid "svn import"
#~ msgstr "svn import"
#~ msgid ""
#~ "The <command>svn import</command> command is a quick way to copy an "
#~ "unversioned tree of files into a repository, creating intermediate "
#~ "directories as necessary."
#~ msgstr ""
#~ "<command>svn import</command>コマンドはバージョン管理されていない複数の"
#~ "ファイル をリポジトリにコピーし、必要に応じて直ちにディレクトリを作るため"
#~ "の簡単 な方法です。"
#~ msgid ""
#~ "There are two important lessons that you should remember from this "
#~ "section."
#~ msgstr "この節での重要事項は二つです。"
#~ msgid ""
#~ "Unlike many other version control systems, Subversion's branches exist as "
#~ "<emphasis>normal filesystem directories</emphasis> in the repository, not "
#~ "in an extra dimension. These directories just happen to carry some extra "
#~ "historical information."
#~ msgstr ""
#~ "他のたくさんのバージョン管理システムとは違ってSubversionの ブランチはリポ"
#~ "ジトリ中の<emphasis>普通のファイルシステム のディレクトリ</emphasis> とし"
#~ "て存在します。特別な仕組みが あるわけではありません。これらのディレクトリ"
#~ "は単にある特別な 履歴情報も保持しているというだけのことです。"
#~ msgid ""
#~ "In these situations, you'll want <command>svn merge</command> to do a "
#~ "path-based comparison only, ignoring any relations between files and "
#~ "directories. Add the <option>--ignore-ancestry</option> option to your "
#~ "merge command, and it will behave just like <command>svn diff</command>. "
#~ "(And conversely, the <option>--notice-ancestry</option> option will cause "
#~ "<command>svn diff</command> to behave like the <literal>merge</literal> "
#~ "command.)"
#~ msgstr ""
#~ "このような場合、<command>svn merge</command>は単にファイ ル名ベースの比較"
#~ "のみを実行し、ファイルやディレクトリの系統上の 関係を無視したいと考えるで"
#~ "しょう。こんなときはマージコマンドに <option>--ignore-ancestry</option>オ"
#~ "プションをつければ ちょうど<command>svn diff</command>と同じように振舞うよ"
#~ "うにな ります。(逆に<command>svn diff</command>コマンドに <option>--"
#~ "notice-ancestry</option>オプションをつけると <command>svn diff</command>コ"
#~ "マンドは<literal>merge</literal>コマンドと同じよう に振舞うことになりま"
#~ "す。)。"
#~ msgid "Switching a Working Copy"
#~ msgstr "作業コピーの切り替え"
#~ msgid ""
#~ "Remember the Subversion mantra: branches and tags are cheap. So use them "
#~ "liberally!"
#~ msgstr ""
#~ "Subversionについて、このことだけは憶えておいてください: ブランチやタグを作"
#~ "る処理はとても軽いのです。好きなだけ使ってください!"
#~ msgid "Repository Basics"
#~ msgstr "リポジトリの基礎"
#~ msgid "Understanding Transactions and Revisions"
#~ msgstr "トランザクションとリビジョンの理解"
#~ msgid ""
#~ "Conceptually speaking, a Subversion repository is a sequence of directory "
#~ "trees. Each tree is a snapshot of how the files and directories versioned "
#~ "in your repository looked at some point in time. These snapshots are "
#~ "created as a result of client operations, and are called revisions."
#~ msgstr ""
#~ "概念的に言うと、Subversionのリポジトリはディレクトリツリーの 並びです。そ"
#~ "れぞれのツリーはある時刻で、リポジトリ中に 管理されたファイルやディレクト"
#~ "リがどのように見えるか、という ことについてのスナップショットです。 このク"
#~ "ライアントの操作によって作られるスナップショットを リビジョンといいます。"
#~ msgid ""
#~ "Every revision begins life as a transaction tree. When doing a commit, a "
#~ "client builds a Subversion transaction that mirrors their local changes "
#~ "(plus any additional changes that might have been made to the repository "
#~ "since the beginning of the client's commit process), and then instructs "
#~ "the repository to store that tree as the next snapshot in the sequence. "
#~ "If the commit succeeds, the transaction is effectively promoted into a "
#~ "new revision tree, and is assigned a new revision number. If the commit "
#~ "fails for some reason, the transaction is destroyed and the client is "
#~ "informed of the failure."
#~ msgstr ""
#~ "それぞれのリビジョンはトランザクションツリーとして生まれます。 コミットす"
#~ "ると、クライアントは、自分のローカルな変更(と、クライアント のコミット処理"
#~ "の最初にリポジトリに起きる附加的な変更)を反映 したSubversionのトランザク"
#~ "ションを作り、次のスナップショットとして このツリーを格納するようにリポジ"
#~ "トリに命令します。 コミットが成醐ｻ駈ｷれば、トランザクションは新しいリビ"
#~ "ジョンツリーが できたことを知らせ、新しいリビジョン番号を割り当てます。 コ"
#~ "ミットが何かの理由で失敗すれば、トランザクションは消されて、クライアント "
#~ "は失敗した旨の通知を受けます。"
#~ msgid ""
#~ "Updates work in a similar way. The client builds a temporary transaction "
#~ "tree that mirrors the state of the working copy. The repository then "
#~ "compares that transaction tree with the revision tree at the requested "
#~ "revision (usually the most recent, or <quote>youngest</quote> tree), and "
#~ "sends back information that informs the client about what changes are "
#~ "needed to transform their working copy into a replica of that revision "
#~ "tree. After the update completes, the temporary transaction is deleted."
#~ msgstr ""
#~ "更新処理も同様に動作します。クライアントは作業コピー の状態を反映した一時"
#~ "的なトランザクションツリーを作ります。リポジトリは そのトランザクションツ"
#~ "リーを要求されたリビジョンのツリー(普通は 最新の、あるいは<quote>一番若い"
#~ "</quote>ツリー)と比較し、作業コピーを リビジョンツリーの形に変形するにはど"
#~ "のような変更が必要であるかに ついての情報を戻します。更新が完了した後、そ"
#~ "の一時的なトランザクションは 削除されます。"
#~ msgid ""
#~ "The use of transaction trees is the only way to make permanent changes to "
#~ "a repository's versioned filesystem. However, it's important to "
#~ "understand that the lifetime of a transaction is completely flexible. In "
#~ "the case of updates, transactions are temporary trees that are "
#~ "immediately destroyed. In the case of commits, transactions are "
#~ "transformed into permanent revisions (or removed if the commit fails). In "
#~ "the case of an error or bug, it's possible that a transaction can be "
#~ "accidentally left lying around in the repository (not really affecting "
#~ "anything, but still taking up space)."
#~ msgstr ""
#~ "トランザクションツリーの利用がリポジトリのバージョン管理された ファイルシ"
#~ "ステムに普遍的な変更を起こす唯一の方法です。しかし、 トランザクションの生"
#~ "存時間が完全に任意であることを理解するのは 重要です。更新の場合トランザク"
#~ "ションはすぐに消滅する一時的なツリー です。コミットの場合は、トランザク"
#~ "ションは普遍的なリビジョンに 変わります。(あるいはコミットが失敗したときは"
#~ "削除されますが) エラーやバグがあると、トランザクションはリポジトリの周辺"
#~ "に 取り残されてしまうかも知れません(しかしこれは領域を食うだけで、 何かに"
#~ "悪い影響を与えたりはしませんが)"
#~ msgid ""
#~ "In theory, someday whole workflow applications might revolve around more "
#~ "fine-grained control of transaction lifetime. It is feasible to imagine a "
#~ "system whereby each transaction slated to become a revision is left in "
#~ "stasis well after the client finishes describing its changes to "
#~ "repository. This would enable each new commit to be reviewed by someone "
#~ "else, perhaps a manager or engineering QA team, who can choose to promote "
#~ "the transaction into a revision, or abort it."
#~ msgstr ""
#~ "理論的には、いつの日か、統合された作業環境をサポートする アプリケーション"
#~ "はトランザクションの生存期間をもっと柔軟に 管理することができるようになる"
#~ "かも知れません。 クライアントがリポジトリに対する修正内容の記述を終えたあ"
#~ "とでも、 リビジョンになる候補のトランザクションが 静止した状態にとどまるよ"
#~ "うなシステムを考えることもできます。 これはそれぞれの新しいコミットを別の"
#~ "人、たとえば管理者やエンジニアの QAチームによって再検討することを可能に"
#~ "し、そのトランザクション を本当のリビジョンにしたり、取り下げたりすること"
#~ "ができるようになるでしょう。"
#~ msgid ""
#~ "Transactions and revisions in the Subversion repository can have "
#~ "properties attached to them. These properties are generic key-to-value "
#~ "mappings, and are generally used to store information about the tree to "
#~ "which they are attached. The names and values of these properties are "
#~ "stored in the repository's filesystem, along with the rest of your tree "
#~ "data."
#~ msgstr ""
#~ "Subversionリポジトリでのトランザクションとリビジョンは 付随した属性を持つ"
#~ "ことができます。そのような属性は 一般的なキー・値のマッピングで、関連した"
#~ "ツリーについての 情報を格納するのに一般的に利用されます。属性の名前と値は"
#~ "リポジトリの ファイルシステム中に、残りのツリーデータと一緒に格納されま"
#~ "す。"
#~ msgid ""
#~ "Revision and transaction properties are useful for associating "
#~ "information with a tree that is not strictly related to the files and "
#~ "directories in that tree&mdash;the kind of information that isn't managed "
#~ "by client working copies. For example, when a new commit transaction is "
#~ "created in the repository, Subversion adds a property to that transaction "
#~ "named <literal>svn:date</literal>&mdash;a datestamp representing the time "
#~ "that the transaction was created. By the time the commit process is "
#~ "finished, and the transaction is promoted to a permanent revision, the "
#~ "tree has also been given a property to store the username of the "
#~ "revision's author (<literal>svn:author</literal>) and a property to store "
#~ "the log message attached to that revision (<literal>svn:log</literal>)."
#~ msgstr ""
#~ "リビジョンとトランザクションの属性はファイルやディレクトリ にそれほど強く"
#~ "結びついていないツリーの情報を記憶して おくのに便利です&mdash;作業コピーに"
#~ "よって管理できないような 情報です。たとえば新しいコミットトランザクション"
#~ "が リポジトリに作られるとSubversionはそのトランザクションに <literal>svn:"
#~ "date</literal>という名前の属性を追加します &mdash;トランザクションが作られ"
#~ "た時刻を示すタイムスタンプです。 コミットが完了し、トランザクションが普遍"
#~ "的なリビジョンとなる 時点で、ツリーにはリビジョン作成者のユーザ名称"
#~ "(<literal>svn:author</literal>) とリビジョンに付けられたログメッセージ"
#~ "(<literal>svn:log</literal>)の 属性が追加されます。"
#~ msgid ""
#~ "Revision and transaction properties are <firstterm>unversioned "
#~ "properties</firstterm>&mdash;as they are modified, their previous values "
#~ "are permanently discarded. Also, while revision trees themselves are "
#~ "immutable, the properties attached to those trees are not. You can add, "
#~ "remove, and modify revision properties at any time in the future. If you "
#~ "commit a new revision and later realize that you had some misinformation "
#~ "or spelling error in your log message, you can simply replace the value "
#~ "of the <literal>svn:log</literal> property with a new, corrected log "
#~ "message."
#~ msgstr ""
#~ "リビジョンとトランザクションの属性は <firstterm>バージョン化されない属性</"
#~ "firstterm>です&mdash; 修正されると、それ以前の値は永久に失われてしまいま"
#~ "す。 同様にリビジョンツリー自身は不変ですが、ツリーに付けられた 属性はそう"
#~ "ではありません。いつでもリビジョン属性を追加、削除、修正 することができま"
#~ "す。新しいリビジョンをコミットしたあとで、 間違った情報だったり、ログメッ"
#~ "セージにスペルミスがあったり したことがわかったときには、単に<literal>svn:"
#~ "log</literal> 属性の値を正しいログメッセージで置き換えてやるだけです。"
#~ msgid ""
#~ "When a repository is created, an administrator must decide whether it "
#~ "will use Berkeley DB or FSFS. There are advantages and disadvantages to "
#~ "each, which we'll describe in a bit. Neither back-end is more "
#~ "<quote>official</quote> than another, and programs which access the "
#~ "repository are insulated from this implementation detail. Programs have "
#~ "no idea how a repository is storing data; they only see revision and "
#~ "transaction trees through the repository API."
#~ msgstr ""
#~ "リポジトリを作成する時には、管理者は Berkeley DB を使うか、FSFS を使うかを"
#~ "決めなくてはなりません。両方とも、利点と欠点がありますが、そ れについては"
#~ "後で少し触れます。どちらか一方がもう一方よりも<quote>公式 のもの</quote>で"
#~ "あるということはありませんし、リポジトリへのアクセスは これらの実装の詳細"
#~ "とは分離されています。プログラムはどうやって保存して いるデータにアクセス"
#~ "するかを知ることはありません; リポジトリ API 全体 を通じて、抽象化されたリ"
#~ "ビジョンとトランザクションツリーが見えるだけで す。"
#~ msgid "Feature"
#~ msgstr "<entry>機能</entry>"
#~ msgid "slightly larger"
#~ msgstr "わずかに大きい"
#~ msgid "slightly smaller"
#~ msgstr "わずかに小さい"
#~ msgid "slower, but work is spread throughout commit"
#~ msgstr "遅いが、処理の負荷はコミット全体に分散する"
#~ msgid "Code maturity"
#~ msgstr "コードは枯れているか"
#~ msgid "in use since 2001"
#~ msgstr "2001 年から使われている"
#~ msgid "in use since 2004"
#~ msgstr "2004 年から使われている"
#~ msgid ""
#~ "The only real argument against FSFS is its relative immaturity compared "
#~ "to Berkeley DB. It hasn't been used or stress-tested nearly as much, and "
#~ "so a lot of these assertions about speed and scalability are just that: "
#~ "assertions, based on good guesses. In theory, it promises a lower barrier "
#~ "to entry for new administrators and is less susceptible to problems. In "
#~ "practice, only time will tell."
#~ msgstr ""
#~ "FSFS に対する唯一の問題は Berkeley DB に比較してそれほど枯れてい ないとこ"
#~ "ろです。 Berkeley DBほどの耐久性テストはされていないので、スピー ドとス"
#~ "ケール性についてここで述べた多くの内容は: 妥当な推測に基づくもの です。理"
#~ "屈の上では FSFS は新しい管理者がとりかかる時の敷居を下げて、問 題の影響を"
#~ "受けにくくするはずです。実際にどうかは、いずれ時が答えてくれ るでしょう。"
#~ msgid "Repository Creation and Configuration"
#~ msgstr "リポジトリの作成と設定"
#~ msgid ""
#~ "In Subversion 1.2, a repository is created with an FSFS back-end by "
#~ "default (see <xref linkend=\"svn.reposadmin.basics.backends\"/>). The "
#~ "back-end can be explicitly chosen with the <option>--fs-type</option> "
#~ "argument:"
#~ msgstr ""
#~ "Subversion 1.2 では、リポジトリはデフォルトで FSFS のバッ クエンドになりま"
#~ "す。(<xref linkend=\"svn.reposadmin.basics.backends\"/> を見てください)。"
#~ "バックエンドは<option>--fs-type</option>の引数で 明示的に指定することがで"
#~ "きます:"
#~ msgid ""
#~ "If you need multiple computers to access the repository, you create an "
#~ "FSFS repository on the network share, not a Berkeley DB repository. Or "
#~ "better yet, set up a real server process (such as Apache or "
#~ "<command>svnserve</command>), store the repository on a local filesystem "
#~ "which the server can access, and make the repository available over a "
#~ "network. <xref linkend=\"svn.serverconfig\"/> covers this process in "
#~ "detail."
#~ msgstr ""
#~ "もしリポジトリに対して複数のコンピュータがアクセスする必要がある なら、"
#~ "ネットワーク共有上に Berkeley DB リポジトリではなく、FSFS リポジ トリを"
#~ "作ってください。あるいはもっと良い方法として、実際の(Apache か "
#~ "<command>svnserve</command>のような)サーバプロセ スを設定し、サーバがアク"
#~ "セスできるようなローカルファイルシステム上にリ ポジトリを格納し、リポジト"
#~ "リがネットワークからも利用できるようにしてく ださい。<xref linkend=\"svn."
#~ "serverconfig\"/>でこのやり方の詳細を説明しています。"
#~ msgid ""
#~ "So, after you've run the <command>svnadmin create</command> command, you "
#~ "have a shiny new Subversion repository in its own directory. Let's take a "
#~ "peek at what is actually created inside that subdirectory."
#~ msgstr ""
#~ "<command>svnadmin create</command>コマンド実行後には、ディレクトリ にはピ"
#~ "カピカの新しいSubversionリポジトリができます。サブディレクトリ には実際に"
#~ "は何ができたかをちょっと見てみましょう。"
#~ msgid ""
#~ "With the exception of the <filename>README.txt</filename> and "
#~ "<filename>format</filename> files, the repository directory is a "
#~ "collection of subdirectories. As in other areas of the Subversion design, "
#~ "modularity is given high regard, and hierarchical organization is "
#~ "preferred to cluttered chaos. Here is a brief description of all of the "
#~ "items you see in your new repository directory:"
#~ msgstr ""
#~ "<filename>README.txt</filename> ファイルと <filename>format</filename> "
#~ "ファイル以外は、リポジトリディレクトリは サブディレクトリの集まりです。"
#~ "Subversionの一般的な設計思想と同様 モジュール化に非常に配慮されています。"
#~ "階層化した編成は混沌とした 状態よりも望ましいものです。新しいリポジトリ"
#~ "ディレクトリについて 簡単に説明しておきます:"
#~ msgid ""
#~ "Where all of your versioned data resides. This directory is either a "
#~ "Berkeley DB environment (full of DB tables and other things), or is an "
#~ "FSFS environment containing revision files."
#~ msgstr ""
#~ "すべてのバージョン化されたデータが可能されています。こ のディレクトリは "
#~ "Berkeley DB 環境 (DB テーブルとその他必要な全体)か、 リビジョンファイルを"
#~ "含む FSFS 環境になります。"
#~ msgid "hooks"
#~ msgstr "hooks"
#~ msgid "Hook Scripts"
#~ msgstr "フックスクリプト"
#~ msgid ""
#~ "A <firstterm>hook</firstterm> is a program triggered by some repository "
#~ "event, such as the creation of a new revision or the modification of an "
#~ "unversioned property. Each hook is handed enough information to tell what "
#~ "that event is, what target(s) it's operating on, and the username of the "
#~ "person who triggered the event. Depending on the hook's output or return "
#~ "status, the hook program may continue the action, stop it, or suspend it "
#~ "in some way."
#~ msgstr ""
#~ "<firstterm>hook</firstterm> は、新しいリビジョンの生成やバージョン化され"
#~ "て いない属性の修正といったリポジトリに対するイベントをきっかけに実行され"
#~ "る プログラムです。フックのそれぞれは、どんなイベントが起こったか、 何を対"
#~ "象にして操作をしたのか、そのイベントを起こした人のユーザ名 などの情報を扱"
#~ "うことができます。フックの出力や戻り値によって フックプログラムは処理を続"
#~ "けたり終了したり、いくつかの方法で中断したりします。"
#~ msgid "start-commit"
#~ msgstr "start-commit"
#~ msgid ""
#~ "This is run before the commit transaction is even created. It is "
#~ "typically used to decide if the user has commit privileges at all. The "
#~ "repository passes two arguments to this program: the path to the "
#~ "repository, and username which is attempting the commit. If the program "
#~ "returns a non-zero exit value, the commit is stopped before the "
#~ "transaction is even created. If the hook program writes data to stderr, "
#~ "it will be marshalled back to the client."
#~ msgstr ""
#~ "これは、コミットトランザクションが作られる前に実行されます。 典型的には"
#~ "ユーザがコミット権限があるかどうかを決定するのに 使われます。リポジトリは"
#~ "このプログラムに二つの引数を渡します: リポジトリへのパスと、コミットしよう"
#~ "としているユーザ名です。 もしプログラムがゼロ以外の値を返した場合、コミッ"
#~ "トは ランザクションが作られる前に中止します。フックが標準エラー出力にデー"
#~ "タ を書き込むと、それは適切なデータ形式でクライアントに戻されます。"
#~ msgid "pre-commit"
#~ msgstr "pre-commit"
#~ msgid ""
#~ "The Subversion distribution includes some access control scripts (located "
#~ "in the <filename>tools/hook-scripts</filename> directory of the "
#~ "Subversion source tree) that can be called from <command>pre-commit</"
#~ "command> to implement fine-grained write-access control. Another option "
#~ "is to use the <command>mod_authz_svn</command> Apache httpd module, which "
#~ "provides both read and write access control on individual directories "
#~ "(see <xref linkend=\"svn.serverconfig.httpd.authz.perdir\"/>). In a "
#~ "future version of Subversion, we plan to implement access control lists "
#~ "(ACLs) directly in the filesystem."
#~ msgstr ""
#~ "Subversionの配布パッケージは、アクセス制御を細かく実装するために "
#~ "<command>pre-commit</command>から呼び出すことのできるいくつかの アクセス制"
#~ "御スクリプトを含んでいます(Subversionソースツリーの <filename>tools/hook-"
#~ "scripts</filename> ディレクトリにあります)。 他の選択子はApache の httpd "
#~ "モジュールである<command>mod_authz_svn</command> を使うもので、個別のディ"
#~ "レクトリに対する読みこみ書き込みのアクセス制御 をすることができます(<xref "
#~ "linkend=\"svn.serverconfig.httpd.authz.perdir\"/>を見てください)。 "
#~ "Subversion の今後のバージョンでは、ファイルシステムに直接アクセス制御リス "
#~ "ト(ACL)を実装する計画があります。"
#~ msgid "post-commit"
#~ msgstr "post-commit"
#~ msgid ""
#~ "The Subversion distribution includes <command>mailer.py</command> and "
#~ "<command>commit-email.pl</command> scripts (located in the "
#~ "<filename>tools/hook-scripts/</filename> directory of the Subversion "
#~ "source tree) that can be used to send email with (and/or append to a log "
#~ "file) a description of a given commit. This mail contains a list of the "
#~ "paths that were changed, the log message attached to the commit, the "
#~ "author and date of the commit, as well as a GNU diff-style display of the "
#~ "changes made to the various versioned files as part of the commit."
#~ msgstr ""
#~ "Subversion配布パッケージは<command>mailer.py</command>と <command>commit-"
#~ "email.pl</command> スクリプトを含んでいます。(Subversionソースツリーの "
#~ "<filename>tools/hook-scripts/</filename> ディレクトリにあります) それは、"
#~ "今回のコミットに付けられた説明をメールするために使う ことができます。この"
#~ "メールの内容は変更されたパスの一覧、コミットに 付けたログメッセージ、コ"
#~ "ミットした人、コミットの時刻、そして、 コミットの変更部分のGNU のdiffスタ"
#~ "イルでの表示です。"
#~ msgid ""
#~ "Another useful tool provided by Subversion is the <command>hot-backup.py</"
#~ "command> script (located in the <filename>tools/backup/</filename> "
#~ "directory of the Subversion source tree). This script performs hot "
#~ "backups of your Subversion repository (a feature supported by the "
#~ "Berkeley DB database back-end), and can be used to make a per-commit "
#~ "snapshot of your repository for archival or emergency recovery purposes."
#~ msgstr ""
#~ "Subversionが提供するほかの役に立つツールは<command>hot-backup.py</"
#~ "command> スクリプトです。(Subversionソースツリーの<filename>tools/backup/"
#~ "</filename> ディレクトリにあります)。このスクリプトはSubversionリポジトリ"
#~ "の オンラインバックアップをとるので、(今後はBerkeleyDBデータベース のバッ"
#~ "クエンドとしてサポートする予定です)リポジトリのアーカイブ化 や緊急リカバリ"
#~ "のためのコミットごとのスナップショットを作るのに 使うことができます。"
#~ msgid ""
#~ "Because Subversion's revision properties are not versioned, making "
#~ "modifications to such a property (for example, the <literal>svn:log</"
#~ "literal> commit message property) will overwrite the previous value of "
#~ "that property forever. Since data can be potentially lost here, "
#~ "Subversion supplies this hook (and its counterpart, <filename>post-"
#~ "revprop-change</filename>) so that repository administrators can keep "
#~ "records of changes to these items using some external means if they so "
#~ "desire. As a precaution against losing unversioned property data, "
#~ "Subversion clients will not be allowed to remotely modify revision "
#~ "properties at all unless this hook is implemented for your repository."
#~ msgstr ""
#~ "Subversionのリビジョン属性はバージョン化されていないので、そのような 属性"
#~ "に対する修正は(たとえば、コミットメッセージ属性である <literal>svn:log</"
#~ "literal> )以前の属性値を永久に上書きしてしまいます。 データはここで失われ"
#~ "てしまうので、Subversionはこのフック(そして この相補的な部分である "
#~ "<filename>post-revprop-change</filename>) を使って、必要に応じてリポジトリ"
#~ "管理者がこのような変更記録を残すことが 出来ます。バージョン化されていない"
#~ "属性データを失うことに対するあらかじめ の警告の意味で、Subversion クライア"
#~ "ントはこのフックが自分のリポジトリに 実装されているのではない限りリビジョ"
#~ "ン属性をリモートに変更することは 決してありません。"
#~ msgid ""
#~ "This hook runs just before such a modification is made to the repository. "
#~ "The repository passes four arguments to this hook: the path to the "
#~ "repository, the revision on which the to-be-modified property exists, the "
#~ "authenticated username of the person making the change, and the name of "
#~ "the property itself."
#~ msgstr ""
#~ "このフックはリポジトリにそのような変更が発生する直前に実行されます。 リポ"
#~ "ジトリはこのフックに四つの引数を与えます: リポジトリのパス、修正される属性"
#~ "があるリビジョン、 変更しようとしている、認証の済んだユーザ名、そして属性"
#~ "の名前自身です。"
#~ msgid ""
#~ "As mentioned earlier, this hook is the counterpart of the <filename>pre-"
#~ "revprop-change</filename> hook. In fact, for the sake of paranoia this "
#~ "script will not run unless the <filename>pre-revprop-change</filename> "
#~ "hook exists. When both of these hooks are present, the <filename>post-"
#~ "revprop-change</filename> hook runs just after a revision property has "
#~ "been changed, and is typically used to send an email containing the new "
#~ "value of the changed property. The repository passes four arguments to "
#~ "this hook: the path to the repository, the revision on which the property "
#~ "exists, the authenticated username of the person making the change, and "
#~ "the name of the property itself."
#~ msgstr ""
#~ "以前に指摘したように、このフックは<filename>pre-revprop-change</filename> "
#~ "フックのもう片割れです。実際、神経質な人のことを考えて、このスクリプト は"
#~ "<filename>pre-revprop-change</filename> フックが存在しなければ 実行されま"
#~ "せん。両方のフックが存在する場合、 <filename>post-revprop-change</"
#~ "filename> フックはリビジョン属性が変更 された直後に実行されます。典型的に"
#~ "は、変更された属性の新しい値を メールするのに使います。リポジトリは四つの"
#~ "引数をこのフックに渡します: リポジトリへのパス、属性があるリビジョン番号、"
#~ "変更しようと している認証済みのユーザ名称、そして属性の名前自身です。"
#~ msgid ""
#~ "The Subversion distribution includes a <command>propchange-email.pl</"
#~ "command> script (located in the <filename>tools/hook-scripts/</filename> "
#~ "directory of the Subversion source tree) that can be used to send email "
#~ "with (and/or append to a log file) the details of a revision property "
#~ "change. This mail contains the revision and name of the changed property, "
#~ "the user who made the change, and the new property value."
#~ msgstr ""
#~ "Subversion配布パッケージは <command>propchange-email.pl</command> スクリプ"
#~ "トを含んでいます。(これは、<filename>tools/hook-scripts/</filename> ディレ"
#~ "クトリにあります)これは、リビジョン属性の変更についての詳細を メールするた"
#~ "めに使われます。Emailはリビジョンと変更属性の名前、 変更した人、そして新し"
#~ "い属性値です。"
#~ msgid "pre-lock"
#~ msgstr "pre-lock"
#~ msgid "post-lock"
#~ msgstr "post-lock"
#~ msgid ""
#~ "This hook runs after a path is locked. The locked path is passed to the "
#~ "hook's stdin, and the hook also receives two arguments: the path to the "
#~ "repository, and the user who performed the lock. The hook is then free to "
#~ "send email notification or record the event in any way it chooses. "
#~ "Because the lock already happened, the output of the hook is ignored."
#~ msgstr ""
#~ "このロックはパスがロックされた後に実行されます。ロックされたパスはフック"
#~ "の 標準入力に渡されるほか、フックはまた二つの引数も受け取ります: リポジト"
#~ "リ へのパスと、ロックを実行したユーザです。その後フックは email 通知を送っ"
#~ "たり 好きな方法で出来事を記録したりすることが自由にできます。ロックはすで"
#~ "に 実行されてしまっているのでフックの出力は無視されます。"
#~ msgid "pre-unlock"
#~ msgstr "pre-unlock"
#~ msgid "post-unlock"
#~ msgstr "post-unlock"
#~ msgid ""
#~ "This hook runs after a path is unlocked. The unlocked path is passed to "
#~ "the hook's stdin, and the hook also receives two arguments: the path to "
#~ "the repository, and the user who removed the lock. The hook is then free "
#~ "to send email notification or record the event in any way it chooses. "
#~ "Because the lock removal already happened, the output of the hook is "
#~ "ignored."
#~ msgstr ""
#~ "このフックはパスがロック解除された後で実行されます。ロックが解除 されたパ"
#~ "スはフックの標準入力に渡され、その他にも二つの引数がフック に渡されます: "
#~ "リポジトリのパスと、ロックを解除したユーザです。 その後フックは email 通知"
#~ "を送ったり、好きな方法で出来事を記録する ことができます。ロックの解除は既"
#~ "に起こってしまっているのでフックの 出力は無視されます。"
#~ msgid ""
#~ "Do not attempt to modify the transaction using hook scripts. A common "
#~ "example of this would be to automatically set properties such as "
#~ "<literal>svn:eol-style</literal> or <literal>svn:mime-type</literal> "
#~ "during the commit. While this might seem like a good idea, it causes "
#~ "problems. The main problem is that the client does not know about the "
#~ "change made by the hook script, and there is no way to inform the client "
#~ "that it is out-of-date. This inconsistency can lead to surprising and "
#~ "unexpected behavior."
#~ msgstr ""
#~ "フックスクリプトによってトランザクションを修正しようとしないで ください。"
#~ "このような例としてよくあるのは、コミットの途中に <literal>svn:eol-style</"
#~ "literal> や <literal>svn:mime-type</literal> のような属性を自動的に設定し"
#~ "てしまうことです。いっけん良いアイディア に見えますが、問題を起こします。"
#~ "一番の問題はクライアントはフックスクリ プトでされた変更について知ることが"
#~ "できないので、クライアントに対して 最新ではなくなったことを伝える方法がな"
#~ "いことです。この矛盾した状況 が予測できないような動作の原因になることがあ"
#~ "ります。"
#~ msgid ""
#~ "Instead of attempting to modify the transaction, it is much better to "
#~ "<emphasis>check</emphasis> the transaction in the <filename>pre-commit</"
#~ "filename> hook and reject the commit if it does not meet the desired "
#~ "requirements."
#~ msgstr ""
#~ "トランザクションで修正するかわりに<filename>pre-commit</filename> フック中"
#~ "のトランザクションで <emphasis>チェック</emphasis>をし、 正しい要件を満た"
#~ "さない場合にはコミットを拒否するのがずっと良い 方法です。"
#~ msgid ""
#~ "The folks at Sleepycat (the producers of Berkeley DB) understand that "
#~ "different databases have different requirements, and so they have "
#~ "provided a mechanism for overriding at runtime many of the configuration "
#~ "values for the Berkeley DB environment. Berkeley checks for the presence "
#~ "of a file named <filename>DB_CONFIG</filename> in each environment "
#~ "directory, and parses the options found in that file for use with that "
#~ "particular Berkeley environment."
#~ msgstr ""
#~ "Sleepycat 系のプログラム(Berkeley DBの手続き)は異なるデータベース が異なる"
#~ "要求を持つことを理解していて、Berkeley DB環境のいろいろな 設定値を実行時に"
#~ "上書きするような仕組みがあります。Berkeley は それぞれの環境ディレクトリ中"
#~ "の<filename>DB_CONFIG</filename> という名前のファイルの存在をチェックし"
#~ "て、特別の Berkeley 環境 を使う場合には、その中のオプションを調べます。"
#~ msgid ""
#~ "In the absence of both the <option>--revision</option> and <option>--"
#~ "transaction</option> options, <command>svnlook</command> will examine the "
#~ "youngest (or <quote>HEAD</quote>) revision in the repository. So the "
#~ "following two commands do exactly the same thing when 19 is the youngest "
#~ "revision in the repository located at <filename>/path/to/repos</filename>:"
#~ msgstr ""
#~ "<option>--revision</option>も <option>--transaction</option> も指定しない"
#~ "と、 <command>svnlook</command> は最新の(あるいは<quote>HEAD</quote>) リビ"
#~ "ジョンをリポジトリの調査対象とします。それで、以下の二つの コマンドは"
#~ "<filename>/path/to/repos</filename>にあるリポジトリで 19が最新リビジョンで"
#~ "ある場合はまったく同じ意味になります:"
#~ msgid ""
#~ "Another common use of <command>svnlook</command> is to actually view the "
#~ "contents of a revision or transaction tree. The <command>svnlook tree</"
#~ "command> command displays the directories and files in the requested "
#~ "tree. If you supply the <option>--show-ids</option> option, it will also "
#~ "show the filesystem node revision IDs for each of those paths (which is "
#~ "generally of more use to developers than to users)."
#~ msgstr ""
#~ "よくある別の <command>svnlook</command> の使い方はリビジョンまたは トラン"
#~ "ザクションツリーの実際の内容を見ることです。 <command>svnlook tree</"
#~ "command> コマンドは要求されたツリー中の ディレクトリとファイルを表示しま"
#~ "す。<option>--show-ids</option>オプション を指定するとそれらのパスごとの"
#~ "ファイルシステムノードリビジョン ID も 表示します(そのようなパスは一般的に"
#~ "言ってユーザよりも開発者に有用なもの でしょう)。"
#~ msgid ""
#~ "$ svnlook tree /path/to/repos --show-ids\n"
#~ "/ &lt;0.0.1&gt;\n"
#~ " A/ &lt;2.0.1&gt;\n"
#~ "  B/ &lt;4.0.1&gt;\n"
#~ "   lambda &lt;5.0.1&gt;\n"
#~ "   E/ &lt;6.0.1&gt;\n"
#~ "    alpha &lt;7.0.1&gt;\n"
#~ "    beta &lt;8.0.1&gt;\n"
#~ "   F/ &lt;9.0.1&gt;\n"
#~ "  mu &lt;3.0.1&gt;\n"
#~ "  C/ &lt;a.0.1&gt;\n"
#~ "  D/ &lt;b.0.1&gt;\n"
#~ "   gamma &lt;c.0.1&gt;\n"
#~ "   G/ &lt;d.0.1&gt;\n"
#~ "    pi &lt;e.0.1&gt;\n"
#~ "    rho &lt;f.0.1&gt;\n"
#~ "    tau &lt;g.0.1&gt;\n"
#~ "   H/ &lt;h.0.1&gt;\n"
#~ "    chi &lt;i.0.1&gt;\n"
#~ "    omega &lt;k.0.1&gt;\n"
#~ "    psi &lt;j.0.1&gt;\n"
#~ " iota &lt;1.0.1&gt;"
#~ msgstr ""
#~ "$ svnlook tree /path/to/repos --show-ids\n"
#~ "/ &lt;0.0.1&gt;\n"
#~ " A/ &lt;2.0.1&gt;\n"
#~ "  B/ &lt;4.0.1&gt;\n"
#~ "   lambda &lt;5.0.1&gt;\n"
#~ "   E/ &lt;6.0.1&gt;\n"
#~ "    alpha &lt;7.0.1&gt;\n"
#~ "    beta &lt;8.0.1&gt;\n"
#~ "   F/ &lt;9.0.1&gt;\n"
#~ "  mu &lt;3.0.1&gt;\n"
#~ "  C/ &lt;a.0.1&gt;\n"
#~ "  D/ &lt;b.0.1&gt;\n"
#~ "   gamma &lt;c.0.1&gt;\n"
#~ "   G/ &lt;d.0.1&gt;\n"
#~ "    pi &lt;e.0.1&gt;\n"
#~ "    rho &lt;f.0.1&gt;\n"
#~ "    tau &lt;g.0.1&gt;\n"
#~ "   H/ &lt;h.0.1&gt;\n"
#~ "    chi &lt;i.0.1&gt;\n"
#~ "    omega &lt;k.0.1&gt;\n"
#~ "    psi &lt;j.0.1&gt;\n"
#~ " iota &lt;1.0.1&gt;"
#~ msgid ""
#~ "Once you've seen the layout of directories and files in your tree, you "
#~ "can use commands like <command>svnlook cat</command>, <command>svnlook "
#~ "propget</command>, and <command>svnlook proplist</command> to dig into "
#~ "the details of those files and directories."
#~ msgstr ""
#~ "ツリー中のディレクトリのファイルの構成が理解できれば<command>svnlook cat</"
#~ "command>, <command>svnlook propget</command>, そして <command>svnlook "
#~ "proplist</command>のようなコマンドを 使ってそれらのファイルやディレクトリ"
#~ "についてのより詳細な情報を 取得することができます。"
#~ msgid "Print the tree's author."
#~ msgstr "そのツリーの実行者です"
#~ msgid "Print the contents of a file in the tree."
#~ msgstr "ツリーの特定のファイルの内容を表示します。"
#~ msgid "List all files and directories that changed in the tree."
#~ msgstr "ツリー中で変更のあったファイルとディレクトリの一覧"
#~ msgid "Print the tree's datestamp."
#~ msgstr "ツリーのタイムスタンプです"
#~ msgid "Print unified diffs of changed files."
#~ msgstr "変更されたファイルの unified diffの表示"
#~ msgid ""
#~ "List the directories in the tree that were themselves changed, or whose "
#~ "file children were changed."
#~ msgstr ""
#~ "ツリー自身に変更があるか、その子供のファイルに変更が あったディレクトリの"
#~ "一覧表示"
#~ msgid ""
#~ "Display interesting points in the history of a versioned path (places "
#~ "where modifications or copies occurred)."
#~ msgstr ""
#~ "バージョン化されたパスの履歴中での、興味深い場所の表示 (どこで変更やコピー"
#~ "が起きたかを示します)。"
#~ msgid ""
#~ "Print the tree's author, datestamp, log message character count, and log "
#~ "message."
#~ msgstr ""
#~ "ツリーの変更者、タイムスタンプ、ログメッセージ文字数、そして ログメッセー"
#~ "ジの表示"
#~ msgid "If a path is locked, describe the lock attributes."
#~ msgstr "パスがロックされている場合にロックの属性を表示します。"
#~ msgid "Print the tree's log message."
#~ msgstr "ツリーのログメッセージの表示"
#~ msgid "Print the value of a property on a path in the tree."
#~ msgstr "ツリー中のパスに設定された属性値を表示します。"
#~ msgid "Print the names and values of properties set on paths in the tree."
#~ msgstr "ツリー中のパスに対して設定された属性の名前と値を表示します。"
#~ msgid ""
#~ "Print the tree listing, optionally revealing the filesystem node revision "
#~ "IDs associated with each path."
#~ msgstr ""
#~ "ツリーの一覧表示をします。オプションでそれぞれのパスに 結びついたファイル"
#~ "システムノードリビジョンのIDを 表示します。"
#~ msgid ""
#~ "Print the repository's UUID&mdash; <emphasis>U</emphasis>niversal "
#~ "<emphasis>U</emphasis>nique <emphasis>ID</emphasis>entifier."
#~ msgstr ""
#~ "リポジトリの UUID &mdash; つまり <emphasis>U</emphasis>niversal "
#~ "<emphasis>U</emphasis>nique <emphasis>ID</emphasis>entifier(普遍的に一意な"
#~ "識別子) を表示します。"
#~ msgid ""
#~ "Run over a specified revision range, performing predecessor deltification "
#~ "on the paths changed in those revisions. If no revisions are specified, "
#~ "this command will simply deltify the <literal>HEAD</literal> revision."
#~ msgstr ""
#~ "リビジョン範囲を指定して実行すると、それらの リビジョンで変更されたパス上"
#~ "で祖先の差分を計算します。リビジョンが指定 されなければこのコマンドは単に "
#~ "<literal>HEAD</literal> リビジョンの差分を計算します。"
#~ msgid ""
#~ "Dump the contents of the repository, bounded by a given set of revisions, "
#~ "using a portable dump format."
#~ msgstr ""
#~ "指定範囲のリビジョンのリポジトリの内容をダンプ します。ポータブルダンプ形"
#~ "式で出力します。"
#~ msgid ""
#~ "Make a hot copy of a repository. You can run this command at any time and "
#~ "make a safe copy of the repository, regardless if other processes are "
#~ "using the repository."
#~ msgstr ""
#~ "リポジトリのホットコピーをとります。いつでも実行することが でき、他のプロ"
#~ "セスがリポジトリを利用しているかどうかにかかわらず、安心して リポジトリの"
#~ "コピーをとることができます。"
#~ msgid ""
#~ "(Berkeley DB repositories only.) List the paths of Berkeley DB log files "
#~ "associated with the repository. This list includes all log files&mdash;"
#~ "those still in use by Subversion, as well as those no longer in use."
#~ msgstr ""
#~ "(Berkeley DB リポジトリの場合のみ)リポジトリに関係したBerkeley DBログファ"
#~ "イルのパスを一覧表示します。 このリストはすべてのログファイルを含みます"
#~ "&mdash;現在Subversionが利用しているもの、もう 利用していないものも含みま"
#~ "す。"
#~ msgid ""
#~ "(Berkeley DB repositories only.) List the paths of Berkeley DB log files "
#~ "associated with, but no longer used by, the repository. You may safely "
#~ "remove these log files from the repository layout, possibly archiving "
#~ "them for use in the event that you ever need to perform a catastrophic "
#~ "recovery of the repository."
#~ msgstr ""
#~ "(Berkeley DB リポジトリの場合のみ)リポジトリに関係したBerkeley DBログファ"
#~ "イルで、既に利用していない もののパスを一覧表示します。そのようなログファ"
#~ "イルはリポジトリレイアウトから 安全に削除することができますが、リポジトリ"
#~ "の壊滅からの復旧には必要となる事態にそなえて アーカイブすることもできま"
#~ "す。"
#~ msgid ""
#~ "Load a set of revisions into a repository from a stream of data that uses "
#~ "the same portable dump format generated by the <literal>dump</literal> "
#~ "subcommand."
#~ msgstr ""
#~ "データストリームから、リビジョンの集まりをリポジトリにロードします。 デー"
#~ "タストリームは<literal>dump</literal> サブコマンドで生成されたのと 同じ"
#~ "ポータブルダンプ形式です:"
#~ msgid "List and describe any locks that exist in the repository."
#~ msgstr "リポジトリに存在するロックを説明つきで一覧表示します。"
#~ msgid ""
#~ "List the names of uncommitted Subversion transactions that currently "
#~ "exist in the repository."
#~ msgstr ""
#~ "現時点でリポジトリに存在しているコミットされていない Subversionトランザク"
#~ "ションの名前を一覧表示します。"
#~ msgid ""
#~ "Perform recovery steps on a repository that is in need of such, generally "
#~ "after a fatal error has occurred that prevented a process from cleanly "
#~ "shutting down its communication with the repository."
#~ msgstr ""
#~ "必要に応じてリポジトリの回復ステップを実行します。普通は リポジトリとの間"
#~ "の通信をきれいに終了できなかったプロセスによって 起きた致命的なエラーの後"
#~ "で実行します。"
#~ msgid "Unconditionally remove locks from listed paths."
#~ msgstr "一覧されたパスからロックを無条件に取り除きます。"
#~ msgid ""
#~ "Cleanly remove Subversion transactions from the repository (conveniently "
#~ "fed by output from the <literal>lstxns</literal> subcommand)."
#~ msgstr ""
#~ "リポジトリからSubversionトランザクションをきれいに削除します。 "
#~ "(<literal>lstxns</literal> サブコマンドからの出力をこの プログラムに入力す"
#~ "ると便利です)"
#~ msgid ""
#~ "Replace the current value of the <literal>svn:log</literal> (commit log "
#~ "message) property on a given revision in the repository with a new value."
#~ msgstr ""
#~ "リポジトリ中の指定リビジョンの<literal>svn:log</literal> (コミットログメッ"
#~ "セージ)属性の値を新しい値で置き換えます。"
#~ msgid ""
#~ "Verify the contents of the repository. This includes, among other things, "
#~ "checksum comparisons of the versioned data stored in the repository."
#~ msgstr ""
#~ "リポジトリの内容を確認します。これはリポジトリに格納されたバージョン化され"
#~ "た データのチェックサム比較、なども含まれます。"
#~ msgid "Repository Cleanup"
#~ msgstr "リポジトリのお掃除"
#~ msgid ""
#~ "Your Subversion repository will generally require very little attention "
#~ "once it is configured to your liking. However, there are times when some "
#~ "manual assistance from an administrator might be in order. The "
#~ "<command>svnadmin</command> utility provides some helpful functionality "
#~ "to assist you in performing such tasks as:"
#~ msgstr ""
#~ "Subversionリポジトリは一般的にいったん設定してしまえばほとんど 注意を払う"
#~ "必要はありません。しかし、管理者による、いくつかの 補助が必要かも知れませ"
#~ "ん。<command>svnadmin</command> ユーティリティー には以下のような作業を助"
#~ "けるための機能があります。それは"
#~ msgid "modifying commit log messages,"
#~ msgstr "コミットログメッセージの修正。"
#~ msgid "recovering <quote>wedged</quote> repositories, and"
#~ msgstr "<quote>固まってしまった</quote> リポジトリの復旧。"
#~ msgid "migrating repository contents to a different repository."
#~ msgstr "リポジトリの内容を別のリポジトリに移すこと。"
#~ msgid ""
#~ "Perhaps the most commonly used of <command>svnadmin</command>'s "
#~ "subcommands is <literal>setlog</literal>. When a transaction is committed "
#~ "to the repository and promoted to a revision, the descriptive log message "
#~ "associated with that new revision (and provided by the user) is stored as "
#~ "an unversioned property attached to the revision itself. In other words, "
#~ "the repository remembers only the latest value of the property, and "
#~ "discards previous ones."
#~ msgstr ""
#~ "<command>svnadmin</command>のサブコマンドで一番よく使われるのは 多分 "
#~ "<literal>setlog</literal>です。トランザクションがリポジトリに コミットし、"
#~ "リビジョンを表示したとき、新しいリビジョンに関連した ログメッセージは、そ"
#~ "のリビジョン自体のバージョン化されない属性として 格納されます。言い換える"
#~ "と、リポジトリはその属性の最後の値だけを 記憶していて、以前のものは捨てて"
#~ "しまいます。"
#~ msgid ""
#~ "As mentioned in <xref linkend=\"svn.reposadmin.basics.backends.bdb\"/>, a "
#~ "Berkeley DB repository can sometimes be left in frozen state if not "
#~ "closed properly. When this happens, an administrator needs to rewind the "
#~ "database back into a consistent state."
#~ msgstr ""
#~ "で触れたように、Berkeley DB リポジトリは正しく閉じられなかった場合には中間"
#~ "的な状態に固まってしまう ことがあります。こうなった場合管理者はデータベー"
#~ "スを以前の一貫した状態 にまで戻してやる必要があります。"
#~ msgid ""
#~ "The most common reason to dump and load a Subversion repository is due to "
#~ "changes in Subversion itself. As Subversion matures, there are times when "
#~ "certain changes made to the back-end database schema cause Subversion to "
#~ "be incompatible with previous versions of the repository. Other reasons "
#~ "for dumping and loading might be to migrate a Berkeley DB repository to a "
#~ "new OS or CPU architecture, or to switch between Berkeley DB and FSFS "
#~ "back-ends. The recommended course of action is relatively simple:"
#~ msgstr ""
#~ "Subversionリポジトリをダンプしたりロードしたりする一番よくある理由は "
#~ "Subversion自身の変更にあります。Subversion が完成に近づくにつれ、 バックエ"
#~ "ンドデータベースのスキーマ変更によっては リポジトリの前のバージョンとの互"
#~ "換性がなくなってしまいます。 ダンプとロードが必要になる他の理由としては、"
#~ "Berkeley DB を他の OS や CPU アーキテクチャに以降する場合、あるいは"
#~ "Berkeley DB と FSFS バックエ ンド間を切り替えて使う場合です。このために推"
#~ "奨されている作業ステップは比較 的簡単です:"
#~ msgid ""
#~ "Using your <emphasis>current</emphasis> version of <command>svnadmin</"
#~ "command>, dump your repositories to dump files."
#~ msgstr ""
#~ "<emphasis>現行</emphasis> バージョンの<command>svnadmin</command> を使って"
#~ "リポジトリをダンプファイルにダンプしてください。"
#~ msgid "Upgrade to the new version of Subversion."
#~ msgstr "Subversionの新しいバージョンへのアップグレード。"
#~ msgid ""
#~ "Move your old repositories out of the way, and create new empty ones in "
#~ "their place using your <emphasis>new</emphasis> <command>svnadmin</"
#~ "command>."
#~ msgstr ""
#~ "古いリポジトリをどけて、新しい空のリポジトリをそこに作りますが、 これには"
#~ "<emphasis>新しい</emphasis> <command>svnadmin</command> を使ってください。"
#~ msgid ""
#~ "Again using your <emphasis>new</emphasis> <command>svnadmin</command>, "
#~ "load your dump files into their respective, just-created repositories."
#~ msgstr ""
#~ "もう一度<emphasis>新しい</emphasis><command>svnadmin</command>を 使って、"
#~ "ダンプファイルを、それぞれ作ったばかりのリポジトリに ロードしてください。"
#~ msgid ""
#~ "Be sure to copy any customizations from your old repositories to the new "
#~ "ones, including <filename>DB_CONFIG</filename> files and hook scripts. "
#~ "You'll want to pay attention to the release notes for the new release of "
#~ "Subversion to see if any changes since your last upgrade affect those "
#~ "hooks or configuration options."
#~ msgstr ""
#~ "古いリポジトリから新しいものに必要なカスタマイズ部分を すべてコピーしてく"
#~ "ださい。これには<filename>DB_CONFIG</filename> ファイルと、フックのスクリ"
#~ "プトが含まれます。新しいリリースの Subversionのリリースノートに注意して、"
#~ "最後のアップグレードでフック や設定オプションに変更がないかどうかを見てく"
#~ "ださい。"
#~ msgid ""
#~ "If the migration process made your repository accessible at a different "
#~ "URL (e.g. moved to a different computer, or is being accessed via a "
#~ "different schema), then you'll probably want to tell your users to run "
#~ "<command>svn switch --relocate</command> on their existing working "
#~ "copies. See <xref linkend=\"svn.ref.svn.c.switch\"/>."
#~ msgstr ""
#~ "もし移行によってリポジトリが別の URL からアクセスされるようになった場 合"
#~ "(例えば別のコンピュータに移したり、別のスキーマを経由して アクセスしたりす"
#~ "るような場合)、おそらくユーザには既存の作業 コピー上で<command>svn switch "
#~ "--relocate</command>を実行する ように言わなくてはならないかも知れません。 "
#~ "<xref linkend=\"svn.ref.svn.c.switch\"/>を見てください。"
#~ msgid ""
#~ "There are generally two types of backup methods available for Subversion "
#~ "repository administrators&mdash;incremental and full. We discussed in an "
#~ "earlier section of this chapter how to use <command>svnadmin dump --"
#~ "incremental</command> to perform an incremental backup (see <xref linkend="
#~ "\"svn.reposadmin.maint.migrate\"/>). Essentially, the idea is to only "
#~ "backup at a given time the changes to the repository since the last time "
#~ "you made a backup."
#~ msgstr ""
#~ "一般的に、Subversionのリポジトリ管理者にとって、二つのバックアップ方法が "
#~ "あります&mdash;差分バックアップと、フルバックアップです。この章の前の節で "
#~ "どうやって<command>svnadmin dump --incremental</command> を使って差分 バッ"
#~ "クアップをとるかを議論しました (<xref linkend=\"svn.reposadmin.maint."
#~ "migrate\"/>参照)。本質的にこのアイディアは最後に バックアップをとってから"
#~ "起きたリポジトリの変更部分だけをバックアップ する方法です。"
#~ msgid ""
#~ "A full backup of the repository is quite literally a duplication of the "
#~ "entire repository directory (which includes either Berkeley database or "
#~ "FSFS environment). Now, unless you temporarily disable all other access "
#~ "to your repository, simply doing a recursive directory copy runs the risk "
#~ "of generating a faulty backup, since someone might be currently writing "
#~ "to the database."
#~ msgstr ""
#~ "リポジトリのフルバックアップは文字通りリポジトリディレクトリ全体の 複製を"
#~ "作ることです(これはBerkeleyデータベース環境も含まれます) さて、一時的にリ"
#~ "ポジトリに対するすべてのアクセスを禁止しなければ、 単純な再帰的なディレク"
#~ "トリコピーの実行は、不完全なバックアップを作って しまう危険を持っていま"
#~ "す。というのは誰かが並行してデータベースに書き込んで いるかも知れないから"
#~ "です。"
#~ msgid ""
#~ "In the case of Berkeley DB, Sleepycat documents describe a certain order "
#~ "in which database files can be copied that will guarantee a valid backup "
#~ "copy. And a similar ordering exists for FSFS data. Better still, you "
#~ "don't have to implement these algorithms yourself, because the Subversion "
#~ "development team has already done so. The <command>hot-backup.py</"
#~ "command> script is found in the <filename>tools/backup/</filename> "
#~ "directory of the Subversion source distribution. Given a repository path "
#~ "and a backup location, <command>hot-backup.py</command>&mdash;which is "
#~ "really just a more intelligent wrapper around the <command>svnadmin "
#~ "hotcopy</command> command&mdash;will perform the necessary steps for "
#~ "backing up your live repository&mdash;without requiring that you bar "
#~ "public repository access at all&mdash;and then will clean out the dead "
#~ "Berkeley log files from your live repository."
#~ msgstr ""
#~ "Berkeley DB の場合、Sleepycat のドキュメントは正しいバックアップコピーを "
#~ "保証するようにデータベースファイルをコピーする場合の順序が書いて ありま"
#~ "す。同様の順序が FSFS データにもあります。しかしこのよう なプログラムを自"
#~ "分で書く必要はありません。Subversion 開発チー ムがすでにしているからで"
#~ "す。 <command>hot-backup.py</command> スクリプトはSubversionのソース パッ"
#~ "ケージの<filename>tools/backup/</filename> ディレクトリにあります。 リポジ"
#~ "トリパスとバックアップ位置を指定すると、<command>hot-backup.py</command> "
#~ "&mdash;それは単に<command>svnadmin hotcopy</command>コマンドのより賢い "
#~ "ラッパープログラムでしかありませんが&mdash; は、動作中のリポジトリをハック"
#~ "アップするのに必要なステップを実行します &mdash;あなたにリポジトリアクセス"
#~ "を禁止することなしに、です&mdash; ついでに、動作中のリポジトリから、死んで"
#~ "いる Berkeley ログファイルを きれいに削除します。"
#~ msgid ""
#~ "Even if you also have an incremental backup, you might want to run this "
#~ "program on a regular basis. For example, you might consider adding "
#~ "<command>hot-backup.py</command> to a program scheduler (such as "
#~ "<command>cron</command> on Unix systems). Or, if you prefer fine-grained "
#~ "backup solutions, you could have your post-commit hook script call "
#~ "<command>hot-backup.py</command> (see <xref linkend=\"svn.reposadmin."
#~ "create.hooks\"/>), which will then cause a new backup of your repository "
#~ "to occur with every new revision created. Simply add the following to the "
#~ "<filename>hooks/post-commit</filename> script in your live repository "
#~ "directory:"
#~ msgstr ""
#~ "差分バックアップがあるとしても、規則的にこのプログラムを実行したく なるか"
#~ "も知れません。たとえば<command>hot-backup.py</command> を プログラムスケ"
#~ "ジューラに追加しようと考えるかも知れません (Unix であれば<command>crond</"
#~ "command> のようなもの)。 あるいは、細かい粒度のバックアップが好きなら、"
#~ "<command>hot-backup.py</command> を呼ぶような、post-commitフックスクリプト"
#~ "を書くこともできます。 (<xref linkend=\"svn.reposadmin.create.hooks\"/>参"
#~ "照)。これは新しいリビジョンが 作られるたひにリポジトリの新しいバックアップ"
#~ "ができる方式です。 単に、以下を動作中のリポジトリディレクトリにある "
#~ "<filename>hooks/post-commit</filename> に追加してください:"
#~ msgid ""
#~ "(cd /path/to/hook/scripts; ./hot-backup.py ${REPOS} /path/to/backups "
#~ "&amp;)"
#~ msgstr ""
#~ "(cd /path/to/hook/scripts; ./hot-backup.py ${REPOS} /path/to/backups "
#~ "&amp;)"
#~ msgid ""
#~ "Incremental backups using the repository dump format are excellent to "
#~ "have on hand if the database schema changes between successive versions "
#~ "of Subversion itself. Since a complete repository dump and load are "
#~ "generally required to upgrade your repository to the new schema, it's "
#~ "very convenient to already have half of that process (the dump part) "
#~ "finished. Unfortunately, the creation of&mdash;and restoration from&mdash;"
#~ "incremental backups takes longer, as each commit is effectively replayed "
#~ "into either the dump file or the repository."
#~ msgstr ""
#~ "リポジトリダンプ形式を使った差分バックアップはデータベーススキーマ が引き"
#~ "続くSubversion自身のバージョン間で変更されるときには非常に 役に立ちます。"
#~ "リポジトリの完全なダンプとロードは一般的に リポジトリを新しいスキーマに"
#~ "アップグレードすることが必要です。 そのような作業の半分(つまり、ダンプの部"
#~ "分)については既に 済んでいるのでとても便利です。不幸にも、差分バックアップ"
#~ "の 作成&mdash;そしてそのリストア&mdash;は長い時間がかかりますが、 それは、"
#~ "それぞれのコミットがダンプファイル、またはリポジトリの 中で、実際に再実行"
#~ "されるからです。"
#~ msgid "Adding Projects"
#~ msgstr "プロジェクトの追加"
#~ msgid ""
#~ "Once your repository is created and configured, all that remains is to "
#~ "begin using it. If you have a collection of existing data that is ready "
#~ "to be placed under version control, you will more than likely want to use "
#~ "the <command>svn</command> client program's <literal>import</literal> "
#~ "subcommand to accomplish that. Before doing this, though, you should "
#~ "carefully consider your long-term plans for the repository. In this "
#~ "section, we will offer some advice on how to plan the layout of your "
#~ "repository, and how to get your data arranged in that layout."
#~ msgstr ""
#~ "リポジトリが作られて設定されれば、後は使うだけです。もし 既にデータの集ま"
#~ "りを持っていて、それをバージョン管理したい 場合は、きっと<command>svn</"
#~ "command>クライアントプログラムの <literal>import</literal> サブコマンドを"
#~ "使いたいと思うでしょう。 しかしそうする前に、リポジトリについて長期的な視"
#~ "点で注意深く 考えるべきです。この節では、リポジトリのレイアウトをどのよう"
#~ "に 計画するか、そしてそのレイアウトの中にどのようにデータを配置する のが良"
#~ "いかについて、少しアドバイスします。"
#~ msgid "Choosing a Repository Layout"
#~ msgstr "リポジトリレイアウトの選択"
#~ msgid "Creating the Layout, and Importing Initial Data"
#~ msgstr "レイアウトの作成と、初期データのインポート"
#~ msgid ""
#~ "After deciding how to arrange the projects in your repository, you'll "
#~ "probably want to actually populate the repository with that layout and "
#~ "with initial project data. There are a couple of ways to do this in "
#~ "Subversion. You could use the <command>svn mkdir</command> command (see "
#~ "<xref linkend=\"svn.ref\"/>) to create each directory in your skeletal "
#~ "repository layout, one-by-one. A quicker way to accomplish the same task "
#~ "is to use the <command>svn import</command> command (see <xref linkend="
#~ "\"svn.tour.other.import\"/>). By first creating the layout in a temporary "
#~ "location on your drive, you can import the whole layout tree into the "
#~ "repository in a single commit:"
#~ msgstr ""
#~ "リポジトリ中でのプロジェクトのレイアウトが決まったら、 そのレイアウトの形"
#~ "にリポジトリを構成して、プロジェクトの初期データを ロードしたいと思うで"
#~ "しょう。これにはいろいろな方法があります。 一つ一つリポジトリレイアウトに"
#~ "従ってディレクトリを 作るのに、<command>svn mkdir</command> コマンドを使う"
#~ "ことができます ( <xref linkend=\"svn.ref\"/>参照)。 もっと手っ取り早いの"
#~ "は、<command>svn import</command> コマンドを 使うことです。(<xref linkend="
#~ "\"svn.tour.other.import\"/>参照) 最初にディスクの一時的な場所にレイアウト"
#~ "を作っておいて、その全体を 一回のコミットでリポジトリにインポートすること"
#~ "ができます:"
#~ msgid ""
#~ "$ mkdir tmpdir\n"
#~ "$ cd tmpdir\n"
#~ "$ mkdir projectA\n"
#~ "$ mkdir projectA/trunk\n"
#~ "$ mkdir projectA/branches\n"
#~ "$ mkdir projectA/tags\n"
#~ "$ mkdir projectB\n"
#~ "$ mkdir projectB/trunk\n"
#~ "$ mkdir projectB/branches\n"
#~ "$ mkdir projectB/tags\n"
#~ "&hellip;\n"
#~ "$ svn import . file:///path/to/repos --message 'Initial repository "
#~ "layout'\n"
#~ "Adding         projectA\n"
#~ "Adding         projectA/trunk\n"
#~ "Adding         projectA/branches\n"
#~ "Adding         projectA/tags\n"
#~ "Adding         projectB\n"
#~ "Adding         projectB/trunk\n"
#~ "Adding         projectB/branches\n"
#~ "Adding         projectB/tags\n"
#~ "&hellip;\n"
#~ "Committed revision 1.\n"
#~ "$ cd ..\n"
#~ "$ rm -rf tmpdir\n"
#~ "$"
#~ msgstr ""
#~ "$ mkdir tmpdir\n"
#~ "$ cd tmpdir\n"
#~ "$ mkdir projectA\n"
#~ "$ mkdir projectA/trunk\n"
#~ "$ mkdir projectA/branches\n"
#~ "$ mkdir projectA/tags\n"
#~ "$ mkdir projectB\n"
#~ "$ mkdir projectB/trunk\n"
#~ "$ mkdir projectB/branches\n"
#~ "$ mkdir projectB/tags\n"
#~ "&hellip;\n"
#~ "$ svn import . file:///path/to/repos --message 'Initial repository "
#~ "layout'\n"
#~ "Adding         projectA\n"
#~ "Adding         projectA/trunk\n"
#~ "Adding         projectA/branches\n"
#~ "Adding         projectA/tags\n"
#~ "Adding         projectB\n"
#~ "Adding         projectB/trunk\n"
#~ "Adding         projectB/branches\n"
#~ "Adding         projectB/tags\n"
#~ "&hellip;\n"
#~ "Committed revision 1.\n"
#~ "$ cd ..\n"
#~ "$ rm -rf tmpdir\n"
#~ "$"
#~ msgid ""
#~ "You can verify the results of the import by running the <command>svn "
#~ "list</command> command:"
#~ msgstr ""
#~ "<command>svn list</command>コマンドでインポート結果を 確認することができま"
#~ "す:"
#~ msgid ""
#~ "$ svn list --verbose file:///path/to/repos\n"
#~ "      1 harry               May 08 21:48 projectA/\n"
#~ "      1 harry               May 08 21:48 projectB/\n"
#~ "&hellip;\n"
#~ "$"
#~ msgstr ""
#~ "$ svn list --verbose file:///path/to/repos\n"
#~ "      1 harry               May 08 21:48 projectA/\n"
#~ "      1 harry               May 08 21:48 projectB/\n"
#~ "&hellip;\n"
#~ "$"
#~ msgid ""
#~ "Once you have your skeletal layout in place, you can begin importing "
#~ "actual project data into your repository, if any such data exists yet. "
#~ "Once again, there are several ways to do this. You could use the "
#~ "<command>svn import</command> command. You could checkout a working copy "
#~ "from your new repository, move and arrange project data inside the "
#~ "working copy, and use the <command>svn add</command> and <command>svn "
#~ "commit</command> commands. But once we start talking about such things, "
#~ "we're no longer discussing repository administration. If you aren't "
#~ "already familiar with the <command>svn</command> client program, see "
#~ "<xref linkend=\"svn.tour\"/>."
#~ msgstr ""
#~ "骨組みとなるレイアウトができて、もし既にインポートしたい データが存在して"
#~ "いるならそれをリポジトリにインポートすることができます。 これにも、やはり"
#~ "いろいろな方法をとることができます。 <command>svn import</command>を使うか"
#~ "も知れません。新しいリポジトリから 作業コピーをいったんチェックアウトし"
#~ "て、作業コピー中でデータを移動したり 編成しなおしてから、<command>svn "
#~ "add</command> と<command>svn commit</command> コマンドを使うこともできま"
#~ "す。しかし、いったんそのような 話を始めると、もう既にリポジトリ管理につい"
#~ "ては議論しません。 もし、まだ<command>svn</command> クライアントプログラム"
#~ "に なじみがないのなら、 <xref linkend=\"svn.tour\"/>を参照してください。"
#~ msgid ""
#~ "Note that Subversion, as an open-source project, does not officially "
#~ "endorse any server as <quote>primary</quote> or <quote>official</quote>. "
#~ "Neither network implementation is treated as a second-class citizen; each "
#~ "server has advantages and disadvantages. In fact, it's possible for "
#~ "different servers to run in parallel, each accessing your repositories in "
#~ "its own way, and each without hindering the other (see <xref linkend="
#~ "\"svn.serverconfig.multimethod\"/>). <xref linkend=\"svn.serverconfig."
#~ "overview.tbl-1\"/> gives a brief overview and comparison of the two "
#~ "available Subversion servers&mdash;as an administrator, it's up to you to "
#~ "choose whatever works best for you and your users."
#~ msgstr ""
#~ "Subversion はオープンソースプロジェクトの性質上、どのようなタイプのサーバ "
#~ "も<quote>最重要なもの</quote>であるとか、<quote>醐ｷｺ�のもの</quote> であ"
#~ "る として勧めたりすることはありません。またどのようなネットワーク実装につ"
#~ "いても 副次的な価値しかないものとして扱うこともありません; それぞれのサー"
#~ "バは それぞれの長所と短所があります。実際、複数の異なるサーバを並行して動"
#~ "作させ、 それぞれの方法でリポジトリにアクセスし、お互いの邪魔をすることが"
#~ "ないように 設定できます。(<xref linkend=\"svn.serverconfig.multimethod\"/"
#~ "> を見てください)。 <xref linkend=\"svn.serverconfig.overview.tbl-1\"/> に"
#~ "は、二つの利用可能な Subversion サーバの簡単な説明と比較があります&mdash; "
#~ "管理者は、自分とそのユーザにとって最良の動作をする構成を自由に選ぶ ことが"
#~ "できます。"
#~ msgid "Network Server Comparison"
#~ msgstr "ネットワークサーバの比較"
#~ msgid "private 'users' file, or existing system (SSH) accounts"
#~ msgstr "固有の 'users' ファイルまたは既存のシステム (SSH) アカウント"
#~ msgid "blanket read/write access, or per-directory read/write control"
#~ msgstr "自由な読み書きアクセス、あるいはディレクトリごとの 読み書き制御"
#~ msgid ""
#~ "blanket read/write access, or per-directory write (but not read) control "
#~ "using a pre-commit hook"
#~ msgstr ""
#~ "自由な読み書きアクセス、あるいはフックスクリプトに よるディレクトリごとの"
#~ "書き込み(読み込みは不可)アクセス制御"
#~ msgid "via optional SSH tunnel"
#~ msgstr "オプションでSSH トンネルを利用することで"
#~ msgid "not interoperable"
#~ msgstr "相互運用不能"
#~ msgid ""
#~ "This section is a general discussion of how a Subversion client and "
#~ "server interact with one another, regardless of the network "
#~ "implementation you're using. After reading, you'll have a good "
#~ "understanding of how a server can behave and the different ways in which "
#~ "a client can be configured to respond."
#~ msgstr ""
#~ "この節は実際に利用する具体的なネットワーク実装にかかわらず、 Subversion ク"
#~ "ライアントがどのようにしてサーバと通信するかの一般的な議論です。 この節を"
#~ "読み終えた後では、クライアントの応答についての設定によって サーバがどんな"
#~ "風に違った形で振る舞うかについて詳しく理解していることでしょう。"
#~ msgid ""
#~ "This problem is actually a FAQ, resulting from a misconfigured server "
#~ "setup."
#~ msgstr ""
#~ "この問題は実際によくある質問で、サーバの設定に間違いがあると起こります。"
#~ msgid ""
#~ "Many servers are configured to require authentication on every request. "
#~ "This can become a big annoyance to users, who are forced to type their "
#~ "passwords over and over again."
#~ msgstr ""
#~ "多くのサーバは要求ごとに認証を要求するように設定されます。 これはユーザに"
#~ "とっては大きな苦痛となることがあります。常にパスワード を入力しなくてはな"
#~ "らないからです。"
#~ msgid ""
#~ "For the truly paranoid willing to sacrifice all convenience, it's "
#~ "possible to disable credential caching altogether."
#~ msgstr ""
#~ "すべての利便性を犠牲にしてまでセキュリティーを確保したいという、本当にスジ"
#~ "ガネ入り のセキュリティー狂には、すべての認証キャッシュを完全に無効にする"
#~ "ことも可能です。"
#~ msgid ""
#~ "Or, if you want to disable credential caching permanently, you can edit "
#~ "your runtime <filename>config</filename> file (located next to the "
#~ "<filename>auth/</filename> directory). Simply set <literal>store-auth-"
#~ "creds</literal> to <literal>no</literal>, and no credentials will be "
#~ "cached on disk, ever."
#~ msgstr ""
#~ "あるいは、証明のキャッシュをずっと無効にし続けたい場合は実行時 "
#~ "<filename>config</filename>ファイルを編集してください( <filename>auth/</"
#~ "filename>ディレクトリの隣にあります)。 単に<literal>store-auth-creds</"
#~ "literal>を<literal>no</literal>に 設定すればディスク上に証明書をキャッシュ"
#~ "しなくなります。"
#~ msgid ""
#~ "the user wants to authenticate as a different user than her system login "
#~ "name, or"
#~ msgstr "ユーザは自分のログイン名称とは違うユーザで認証を 受けたいか、"
#~ msgid "a script wants to authenticate without using cached credentials."
#~ msgstr "あるスクリプトがキャッシュされている証明なしに 認証を受けたい。"
#~ msgid "Resort to prompting the user."
#~ msgstr "ユーザに対して証明の入力をうながします。"
#~ msgid ""
#~ "There are a few different ways to invoke the <command>svnserve</command> "
#~ "program. If invoked with no options, you'll see nothing but a help "
#~ "message. However, if you're planning to have <command>inetd</command> "
#~ "launch the process, then you can pass the <option>-i</option> (<option>--"
#~ "inetd</option>) option:"
#~ msgstr ""
#~ "<command>svnserve</command>プログラムの起動にはいくつかの異なる方法が あり"
#~ "ます。オプションなしで起動した場合は何もせずヘルプメッセージを 表示するだ"
#~ "けです。しかし<command>inetd</command>経由で起動するなら <option>-i</"
#~ "option>(<option>--inetd</option>) オプションを指定すること ができます:"
#~ msgid ""
#~ "On a Windows system, third-party tools exist to run <command>svnserve</"
#~ "command> as a service. Look on Subversion's website for a list of these "
#~ "tools."
#~ msgstr ""
#~ "Windows システムでは<command>svnserve</command>をサービスとして 起動するた"
#~ "めのサードパーティーのツールがあります。このようなツールの 一覧については "
#~ "Subversion のウェブサイトを見てください。"
#~ msgid "Servers and Permissions: A Word of Warning"
#~ msgstr "サーバとパーミッション: 留意点"
#~ msgid ""
#~ "First, remember that a Subversion repository is a collection of database "
#~ "files; any process which accesses the repository directly needs to have "
#~ "proper read and write permissions on the entire repository. If you're not "
#~ "careful, this can lead to a number of headaches, especially if you're "
#~ "using a Berkeley DB database rather than FSFS. Be sure to read <xref "
#~ "linkend=\"svn.serverconfig.multimethod\"/>."
#~ msgstr ""
#~ "まず、Subversion リポジトリはデータベースファイルの集まり であることを思い"
#~ "出してください; リポジトリにアクセスするプロセスは すべてリポジトリ全体に"
#~ "対して適切な読み書きのパーミッションを持って いる必要があります。このこと"
#~ "に注意していないと、いろいろな問題に 悩むことになります。とくに FSFS では"
#~ "なく Berkeley DB データベースを 使っている場合はそうです。<xref linkend="
#~ "\"svn.serverconfig.multimethod\"/>をよく読んで ください。"
#~ msgid ""
#~ "Secondly, when configuring <command>svnserve</command>, Apache "
#~ "<command>httpd</command>, or any other server process, keep in mind that "
#~ "you might not want to launch the server process as the user "
#~ "<literal>root</literal> (or as any other user with unlimited "
#~ "permissions). Depending on the ownership and permissions of the "
#~ "repositories you're exporting, it's often prudent to use a "
#~ "different&mdash;perhaps custom&mdash;user. For example, many "
#~ "administrators create a new user named <literal>svn</literal>, grant that "
#~ "user exclusive ownership and rights to the exported Subversion "
#~ "repositories, and only run their server processes as that user."
#~ msgstr ""
#~ "次に、<command>svnserve</command>を設定するときには Apache の "
#~ "<command>httpd</command>あるいは他のどのようなサーバプロセスも サーバプロ"
#~ "セスを <literal>root</literal>ユーザで(あるいはパーミッションに制限のない "
#~ "ユーザならどのユーザでも)起動したくは ないということを忘れないでください。"
#~ "あなたが公開しようとするリポジトリ の所有者とパーミッションに応じて、普通"
#~ "は異なる&mdash;多分専用の&mdash;ユーザ を使うの賢明でしょう。たとえば多く"
#~ "の管理者は<literal>svn</literal> という名前の新しいユーザを作り、公開する "
#~ "Subversion リポジトリに対して 排他的な所有と権利を与え、そのユーザでのみ"
#~ "サーバプロセスを起動します。"
#~ msgid ""
#~ "Notice that <command>svnserve</command> only understands <quote>blanket</"
#~ "quote> access control. A user either has universal read/write access, "
#~ "universal read access, or no access. There is no detailed control over "
#~ "access to specific paths within the repository. For many projects and "
#~ "sites, this level of access control is more than adequate. However, if "
#~ "you need per-directory access control, you'll need to use either use "
#~ "Apache with <command>mod_authz_svn</command> (see <xref linkend=\"svn."
#~ "serverconfig.httpd.authz.perdir\"/>) or use a <command>pre-commit</"
#~ "command> hook script to control write access (see <xref linkend=\"svn."
#~ "reposadmin.create.hooks\"/>). The Subversion distribution comes with "
#~ "<command>commit-access-control.pl</command> and the more sophisticated "
#~ "<command>svnperms.py</command> scripts for use in pre-commit scripts."
#~ msgstr ""
#~ "<command>svnserve</command>は単に<quote>無制限の</quote>アクセスコントロー"
#~ "ルのみ を理解することに注意してください。ユーザは完全な読み書きアクセス、 "
#~ "完全な読み出しアクセス、あるいは、まったくアクセスできない、のいずれか で"
#~ "す。リポジトリ中の特定のパスに対する詳細なアクセス制御は 存在しません。多"
#~ "くのプロジェクトとサイトではこのレベルのアクセス制御 は十分すぎるもので"
#~ "す。しかしもしディレクトリごとのアクセス制御が必要 なら、Apache を"
#~ "<command>mod_authz_svn</command> と一緒に使うか (<xref linkend=\"svn."
#~ "serverconfig.httpd.authz.perdir\"/>を見てください)、書き込み制御を 行う "
#~ "<command>pre-commit</command> フックスクリプトを使う必要があります (<xref "
#~ "linkend=\"svn.reposadmin.create.hooks\"/>を見てください)。Subversion の "
#~ "ディストリビューション中には <command>commit-access-control.pl</command> "
#~ "と、さらに洗練された <command>svnperms.py</command> スクリプトがあって、 "
#~ "pre-commit スクリプトの中で利用することができます。"
#~ msgid "SSH authentication and authorization"
#~ msgstr "SSH 認証と認可"
#~ msgid ""
#~ "Once your basic <literal>Location</literal> block is configured, you can "
#~ "create an access file and define some authorization rules in it."
#~ msgstr ""
#~ "いったん基本的な <literal>Location</literal>ブロックが設定されて しまえば"
#~ "その中にアクセスファイルを作り、認証の規則を定義すること ができます。"
#~ msgid ""
#~ "The syntax of the access file is the same familiar one used by "
#~ "<command>svnserve.conf</command> and the runtime configuration files. "
#~ "Lines that start with a hash (<literal>#</literal>) are ignored. In its "
#~ "simplest form, each section names a repository and path within it, and "
#~ "the authenticated usernames are the option names within each section. The "
#~ "value of each option describes the user's level of access to the "
#~ "repository path: either <literal>r</literal> (read-only) or <literal>rw</"
#~ "literal> (read-write). If the user is not mentioned at all, no access is "
#~ "allowed."
#~ msgstr ""
#~ "アクセスファイルの形式は<command>svnserve.conf</command>や 実行時設定ファ"
#~ "イルで利用されるのと同じです。 ハッシュ文字(<literal>#</literal>)で始まる"
#~ "行は無視されます。 一番単純な形では、それぞれのセクションはリポジトリ との"
#~ "その中にあるパスの名前を決め、認証用のユーザ名はセクションごと の中にくる"
#~ "オプション名になります。それぞれのオプションの値は リポジトリパスにアクセ"
#~ "スするユーザレベルを記述します; <literal>r</literal> (読み込み専用)か、 "
#~ "<literal>rw</literal>(読み書き可能)のどちらか になります。ユーザがまったく"
#~ "含まれていなければ、アクセスは全面的 に禁止されます。"
#~ msgid ""
#~ "To be more specific: the value of the section-names are either of the "
#~ "form <literal>[repos-name:path]</literal> or the form <literal>[path]</"
#~ "literal>. If you're using the <literal>SVNParentPath</literal> directive, "
#~ "then it's important to specify the repository names in your sections. If "
#~ "you omit them, then a section like <literal>[/some/dir]</literal> will "
#~ "match the path <filename>/some/dir</filename> in <emphasis>every</"
#~ "emphasis> repository. If you're using the <literal>SVNPath</literal> "
#~ "directive, however, then it's fine to only define paths in your "
#~ "sections&mdash;after all, there's only one repository."
#~ msgstr ""
#~ "もっと具体的に言うと; セクション名は<literal>[repos-name:path]</literal> "
#~ "か、<literal>[path]</literal>の形になります。<literal>SVNParentPath</"
#~ "literal> ディレクティブを使っている場合はセクション中でリポジトリ名を指定"
#~ "するのが 重要です。それを省略すると<literal>[/some/dir]</literal>のような"
#~ "セクション は <emphasis>すべての</emphasis>リポジトリのパス <filename>/"
#~ "some/dir</filename> にマッチしてしまいます。しかし<literal>SVNPath</"
#~ "literal>ディレクティブ を使っている場合はセクションで唯一のパスを定義する"
#~ "のが良い方法です&mdash; 結局そこには唯一のリポジトリしか無いのですから。"
#~ msgid ""
#~ "[calc:/branches/calc/bug-142]\n"
#~ "harry = rw\n"
#~ "sally = r"
#~ msgstr ""
#~ "[calc:/branches/calc/bug-142]\n"
#~ "harry = rw\n"
#~ "sally = r"
#~ msgid ""
#~ "In this first example, the user <literal>harry</literal> has full read "
#~ "and write access on the <filename>/branches/calc/bug-142</filename> "
#~ "directory in the <literal>calc</literal> repository, but the user "
#~ "<literal>sally</literal> has read-only access. Any other users are "
#~ "blocked from accessing this directory."
#~ msgstr ""
#~ "この最初の例ではユーザ <literal>harry</literal> は<literal>calc</literal>"
#~ "リポジトリ中の <filename>/branches/calc/bug-142</filename> ディレクトリに"
#~ "対して完全な読み書きアクセスが可能ですが、 <literal>sally</literal> は読み"
#~ "出し アクセスのみです。それ以外のユーザにはこのディレクトリのアクセスは 禁"
#~ "止されます。"
#~ msgid ""
#~ "Of course, permissions are inherited from parent to child directory. That "
#~ "means that we can specify a subdirectory with a different access policy "
#~ "for Sally:"
#~ msgstr ""
#~ "もちろんパーミッションは親ディレクトリから子ディレクトリに継承 されます。"
#~ "これは Sally のために、サブディレクトリ中では異なる アクセス方式を指定する"
#~ "ことができるという意味です:"
#~ msgid ""
#~ "[calc:/branches/calc/bug-142]\n"
#~ "harry = rw\n"
#~ "sally = r\n"
#~ "\n"
#~ "# give sally write access only to the 'testing' subdir\n"
#~ "[calc:/branches/calc/bug-142/testing]\n"
#~ "sally = rw"
#~ msgstr ""
#~ "[calc:/branches/calc/bug-142]\n"
#~ "harry = rw\n"
#~ "sally = r\n"
#~ "\n"
#~ "# give sally write access only to the 'testing' subdir\n"
#~ "[calc:/branches/calc/bug-142/testing]\n"
#~ "sally = rw"
#~ msgid ""
#~ "Now Sally can write to the <filename>testing</filename> subdirectory of "
#~ "the branch, but can still only read other parts. Harry, meanwhile, "
#~ "continues to have complete read-write access to the whole branch."
#~ msgstr ""
#~ "これで Sally はブランチの<filename>testing</filename>サブディレクトリ では"
#~ "書き込みができますが、ディレクトリのほかの部分では依然として読み出し のみ"
#~ "が可能です。一方 Harry はブランチ全体に対して依然として 完全な読み書きアク"
#~ "セスが可能です。"
#~ msgid ""
#~ "It's also possible to explicitly deny permission to someone via "
#~ "inheritance rules, by setting the username variable to nothing:"
#~ msgstr ""
#~ "ユーザ名変数を設定しなければ、他の人を継承の規則に従って許可する のを明示"
#~ "的に拒否することもできます:"
#~ msgid ""
#~ "[calc:/branches/calc/bug-142]\n"
#~ "harry = rw\n"
#~ "sally = r\n"
#~ "\n"
#~ "[calc:/branches/calc/bug-142/secret]\n"
#~ "harry ="
#~ msgstr ""
#~ "[calc:/branches/calc/bug-142]\n"
#~ "harry = rw\n"
#~ "sally = r\n"
#~ "\n"
#~ "[calc:/branches/calc/bug-142/secret]\n"
#~ "harry ="
#~ msgid ""
#~ "In this example, Harry has read-write access to the entire <filename>bug-"
#~ "142</filename> tree, but has absolutely no access at all to the "
#~ "<filename>secret</filename> subdirectory within it."
#~ msgstr ""
#~ "この例では Harry は<filename>bug-142</filename>のツリーに 対して完全な読み"
#~ "書きアクセスが可能ですが、その中のサブディレクトリ <filename>secret</"
#~ "filename>にはまったくアクセスできません。"
#~ msgid ""
#~ "The thing to remember is that the most specific path always matches "
#~ "first. The <command>mod_authz_svn</command> module tries to match the "
#~ "path itself, and then the parent of the path, then the parent of that, "
#~ "and so on. The net effect is that mentioning a specific path in the "
#~ "accessfile will always override any permissions inherited from parent "
#~ "directories."
#~ msgstr ""
#~ "留意しておくことは、一番詳しく指定したパスが常に最初にマッ チするというこ"
#~ "とです。<command>mod_authz_svn</command>モジュー ルはまず最初にパス自身に"
#~ "マッチするかどうかを調べ、次にその親 ディレクトリ、さらにその親ディレクト"
#~ "リ、と調べていきます。結 果はアクセスファイル中の具体的なパスが有効になる"
#~ "と、親ディレ クトリから引き継いでいるパーミッション情報は常に上書きされて "
#~ "しまいます。"
#~ msgid ""
#~ "By default, nobody has any access to the repository at all. That means "
#~ "that if you're starting with an empty file, you'll probably want to give "
#~ "at least read permission to all users at the root of the repository. You "
#~ "can do this by using the asterisk variable (<literal>*</literal>), which "
#~ "means <quote>all users</quote>:"
#~ msgstr ""
#~ "デフォルトでは、誰であれリポジトリに対するすべてのアクセスは禁止 されま"
#~ "す。これは、もし空のファイルで始めた場合、リポジトリのルート ですべての"
#~ "ユーザに対して少なくとも読み出しパーミッションを与えたい だろうということ"
#~ "を意味します。これはアスタリスク変数(<literal>*</literal>) を使って、"
#~ "<quote>すべてのユーザ</quote>をあらわすことで可能です。 :"
#~ msgid ""
#~ "[/]\n"
#~ "* = r"
#~ msgstr ""
#~ "[/]\n"
#~ "* = r"
#~ msgid ""
#~ "This is a common setup; notice that there's no repository name mentioned "
#~ "in the section name. This makes all repositories world readable to all "
#~ "users, whether you're using <literal>SVNPath</literal> or "
#~ "<literal>SVNParentPath</literal>. Once all users have read-access to the "
#~ "repositories, you can give explicit <literal>rw</literal> permission to "
#~ "certain users on specific subdirectories within specific repositories."
#~ msgstr ""
#~ "これはよくある設定です; セクション名の中にリポジトリ名が存在しないことに "
#~ "注意してください。これは<literal>SVNPath</literal>を使っていようが "
#~ "<literal>SVNParentPath</literal>を使っていようが、すべてのリポジトリが す"
#~ "べてのユーザによってどこからでも読み込めるようにします。 すべてのユーザが"
#~ "リポジトリに読み込みアクセスできるようになってしまえば 特定のリポジトリの"
#~ "特定のサブディレクトリに特定のユーザが読み書き可能と するため、明示的に "
#~ "<literal>rw</literal>の許可を与えることができます。"
#~ msgid ""
#~ "The asterisk variable (<literal>*</literal>) is also worth special "
#~ "mention here: it's the <emphasis>only</emphasis> pattern which matches an "
#~ "anonymous user. If you've configured your <literal>Location</literal> "
#~ "block to allow a mixture of anonymous and authenticated access, all users "
#~ "start out accessing Apache anonymously. <command>mod_authz_svn</command> "
#~ "looks for a <literal>*</literal> value defined for the path being "
#~ "accessed; if it can't find one, then Apache demands real authentication "
#~ "from the client."
#~ msgstr ""
#~ "アスタリスク変数 (<literal>*</literal>) も特に注意しておく価値があります: "
#~ "それは匿名ユーザにマッチするような <emphasis>唯一の</emphasis>パターン で"
#~ "す。<literal>Location</literal>ブロックで匿名と認証されたアクセスの 組合せ"
#~ "を許すように設定した場合、すべてのユーザは Apache に対して匿名で アクセス"
#~ "するところから話が始まります。 <command>mod_authz_svn</command> はアクセス"
#~ "するパスのために 定義された <literal>*</literal> の値を探します; みつから"
#~ "なければ Apache はクライアントに対して実際に認証要求を出します。"
#~ msgid ""
#~ "The access file also allows you to define whole groups of users, much "
#~ "like the Unix <filename>/etc/group</filename> file:"
#~ msgstr ""
#~ "アクセスファイルでもユーザのグループ全体を定義することが てきます。これは "
#~ "Unix の<filename>/etc/group</filename>ファイルと 良く似た形式です:"
#~ msgid ""
#~ "[groups]\n"
#~ "calc-developers = harry, sally, joe\n"
#~ "paint-developers = frank, sally, jane\n"
#~ "everyone = harry, sally, joe, frank, sally, jane"
#~ msgstr ""
#~ "[groups]\n"
#~ "calc-developers = harry, sally, joe\n"
#~ "paint-developers = frank, sally, jane\n"
#~ "everyone = harry, sally, joe, frank, sally, jane"
#~ msgid ""
#~ "Groups can be granted access control just like users. Distinguish them "
#~ "with an <quote>at</quote> (<literal>@</literal>) prefix:"
#~ msgstr ""
#~ "グループを使ってユーザと同じようにアクセス制御することができ、この場合 グ"
#~ "ループであることを示す<quote>アットマーク</quote>(<literal>@</literal>)を"
#~ "先頭に付けます:"
#~ msgid ""
#~ "[calc:/projects/calc]\n"
#~ "@calc-developers = rw\n"
#~ "\n"
#~ "[paint:/projects/paint]\n"
#~ "@paint-developers = rw\n"
#~ "jane = r"
#~ msgstr ""
#~ "[calc:/projects/calc]\n"
#~ "@calc-developers = rw\n"
#~ "\n"
#~ "[calc:/projects/paint]\n"
#~ "@paint-developers = rw\n"
#~ "jane = r"
#~ msgid "Groups can also be defined to contain other groups:"
#~ msgstr "グループは他のグループを含むように定義することもできます:"
#~ msgid ""
#~ "[groups]\n"
#~ "calc-developers = harry, sally, joe\n"
#~ "paint-developers = frank, sally, jane\n"
#~ "everyone = @calc-developers, @paint-developers"
#~ msgstr ""
#~ "[groups]\n"
#~ "calc-developers = harry, sally, joe\n"
#~ "paint-developers = frank, sally, jane\n"
#~ "everyone = @calc-developers, @paint-developers"
#~ msgid "...and that's pretty much all there is to it."
#~ msgstr "...これでほとんどすべてです。"
#~ msgid ""
#~ "Deflate compression places a small burden on the client and server to "
#~ "compress and decompress network transmissions as a way to minimize the "
#~ "size of the actual transmission. In cases where network bandwidth is in "
#~ "short supply, this kind of compression can greatly increase the speed at "
#~ "which communications between server and client can be sent. In extreme "
#~ "cases, this minimized network transmission could be the difference "
#~ "between an operation timing out or completing successfully."
#~ msgstr ""
#~ "圧縮の仕組みは、実際のサイズを減らすためのネットワーク転送データの圧縮と "
#~ "解凍処理でクライアントとサーバに少し負荷をかけます。ネットワークの帯域 が"
#~ "細い場合この圧縮はサーバとクライアント間の転送スピードを非常に大きく する"
#~ "ことができます。極端な場合このデータ転送量の現象は、操作がタイムアウト し"
#~ "てしまうか、完了するかの違いになることさえあります。"
#~ msgid ""
#~ "This chapter highlights some of Subversion's features that aren't quite "
#~ "so regularly used. In it, we will discuss Subversion's property (or "
#~ "<quote>metadata</quote>) support, and how to modify Subversion's default "
#~ "behaviors by tweaking its run-time configuration area. We will describe "
#~ "how you can use externals definitions to instruct Subversion to pull data "
#~ "from multiple repositories. We'll cover in detail some of the additional "
#~ "client- and server-side tools that are part of the Subversion "
#~ "distribution."
#~ msgstr ""
#~ "この章ではいくつかのSubversionの機能で、それほど頻繁には利用されない よう"
#~ "なものをとりあげます。その中で、Subversionの属性(あるいは <quote>メタデー"
#~ "タ</quote>)のサポートについて議論し、どのようにして Subversionのデフォルト"
#~ "の振る舞いを実行時設定領域の調整によって変更 することができるかを見ます。"
#~ "また、どのように外部定義を使って、 複数のリポジトリからデータを引っぱって"
#~ "くるようにSubversionに命令 するかを説明します。そして、Subversionのパッ"
#~ "ケージの一部である、 追加のクライアント側、サーバ側のツールのいくつかの詳"
#~ "細にも触れます。"
#~ msgid ""
#~ "Properties can be very useful additions to your working copy. In fact, "
#~ "Subversion itself uses properties to house special information, and as a "
#~ "way to denote that certain special processing might be needed. Likewise, "
#~ "you can use properties for your own purposes. Of course, anything you can "
#~ "do with properties you could also do using regular versioned files, but "
#~ "consider the following example of Subversion property use."
#~ msgstr ""
#~ "属性は作業コピーにとても役に立つ情報を追加することができます。 実際、"
#~ "Subversion自身も特殊な情報を記録するのに属性を使っていて、 それはある特定"
#~ "の処理が必要になっていることを示すようなときに 使っています。同様に、ユー"
#~ "ザは自分自身の目的のためにも属性を使う ことができます。もちろん属性ででき"
#~ "ることはすべて、バージョン化 したファイルでもできるのですが、まずは以下の"
#~ "ようなSubversion属性の 使い方の例を見てください。"
#~ msgid ""
#~ "How (and if) you use Subversion properties is up to you. As we mentioned, "
#~ "Subversion has it own uses for properties, which we'll discuss a little "
#~ "later in this chapter. But first, let's discuss how to manipulate "
#~ "properties using the <command>svn</command> program."
#~ msgstr ""
#~ "Subversionの属性をどう使うかはあなたしだいです。既に指摘した ように、"
#~ "Subversionは自分自身が使う属性を持っていて、この章のあとで 少し説明しま"
#~ "す。しかし、まずは、<command>svn</command> プログラム を使って、どのように"
#~ "属性を操作するかを考えましょう。"
#~ msgid ""
#~ "<sidebar> <title>Modifying Revision Properties</title> <para>Remember "
#~ "those unversioned revision properties? You can modify those, too, with "
#~ "the <command>svn</command> program. Simply add the <option>--revprop</"
#~ "option> command-line parameter, and specify the revision whose property "
#~ "you wish to modify. Since revisions are global, you don't need to specify "
#~ "a path in this case as long as you are positioned in the working copy of "
#~ "the repository whose revision property you wish to modify. For example, "
#~ "you might want to replace the commit log message of an existing revision. "
#~ "<footnote> <para>Fixing spelling errors, grammatical gotchas, and "
#~ "<quote>just-plain-wrongness</quote> in commit log messages is perhaps the "
#~ "most common use case for the <option>--revprop</option> option.</para> </"
#~ "footnote></para> <screen>\n"
#~ "$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --"
#~ "revprop\n"
#~ "property 'svn:log' set on repository revision '11'\n"
#~ "$\n"
#~ "</screen> <para>Note that the ability to modify these unversioned "
#~ "properties must be explicitly added by the repository administrator (see "
#~ "<xref linkend=\"svn.reposadmin.create.hooks\"/>). Since the properties "
#~ "aren't versioned, you run the risk of losing information if you aren't "
#~ "careful with your edits. The repository administrator can setup methods "
#~ "to protect against this loss, and by default, modification of unversioned "
#~ "properties is disabled.</para> </sidebar> <para>And as with file "
#~ "contents, your property changes are local modifications, only made "
#~ "permanent when you commit them to the repository with <command>svn "
#~ "commit</command>. Your property changes can be easily unmade, too&mdash;"
#~ "the <command>svn revert</command> command will restore your files and "
#~ "directories to their un-edited states, contents, properties, and all. "
#~ "Also, you can receive interesting information about the state of your "
#~ "file and directory properties by using the <command>svn status</command> "
#~ "and <command>svn diff</command> commands.</para> <screen>\n"
#~ "$ svn status calc/button.c\n"
#~ " M     calc/button.c\n"
#~ "$ svn diff calc/button.c\n"
#~ "Property changes on: calc/button.c\n"
#~ "___________________________________________________________________\n"
#~ "Name: copyright\n"
#~ "   + (c) 2003 Red-Bean Software\n"
#~ "\n"
#~ "$\n"
#~ "</screen> <para>Notice how the <command>status</command> subcommand "
#~ "displays <literal>M</literal> in the second column instead of the first. "
#~ "That is because we have modified the properties on <filename>calc/button."
#~ "c</filename>, but not modified its textual contents. Had we changed both, "
#~ "we would have seen <literal>M</literal> in the first column, too (see "
#~ "<xref linkend=\"svn.tour.cycle.examine.status\"/>).</para> <sidebar> "
#~ "<title>Property Conflicts</title> <para>As with file contents, local "
#~ "property modifications can conflict with changes committed by someone "
#~ "else. If you update your working copy directory and receive property "
#~ "changes on a versioned resource that clash with your own, Subversion will "
#~ "report that the resource is in a conflicted state.</para> <screen>\n"
#~ "% svn update calc\n"
#~ "M  calc/Makefile.in\n"
#~ " C calc/button.c\n"
#~ "Updated to revision 143.\n"
#~ "$ \n"
#~ "</screen> <para>Subversion will also create, in the same directory as the "
#~ "conflicted resource, a file with a <filename>.prej</filename> extension "
#~ "which contains the details of the conflict. You should examine the "
#~ "contents of this file so you can decide how to resolve the conflict. "
#~ "Until the conflict is resolved, you will see a <literal>C</literal> in "
#~ "the second column of <command>svn status</command> output for that "
#~ "resource, and attempts to commit your local modifications will fail.</"
#~ "para> <screen>\n"
#~ "$ svn status calc\n"
#~ " C     calc/button.c\n"
#~ "?      calc/button.c.prej\n"
#~ "$ cat calc/button.c.prej \n"
#~ "prop 'linecount': user set to '1256', but update set to '1301'.\n"
#~ "$\n"
#~ "</screen> <para>To resolve property conflicts, simply ensure that the "
#~ "conflicting properties contain the values that they should, and then use "
#~ "the <command>svn resolved</command> command to alert Subversion that you "
#~ "have manually resolved the problem.</para> </sidebar>"
#~ msgstr ""
#~ "<sidebar> <title>リビジョン属性のマージ</title> <para> バージョン化されな"
#~ "いリビジョン属性を憶えているでしょうか? <command>svn</command>プログラムで"
#~ "このような属性も修正 できます。単に<option>--revprop</option> 引数を追加"
#~ "し、修正したい 属性のあるリビジョンを指定してください。この場合リビジョン"
#~ "は グローバルなので修正しようとするリビジョン属性のリポジトリから チェック"
#~ "アウトした作業コピーにいる限り、パスを指定する必要はあり ません。 "
#~ "<footnote> <para> コミットログ中の、スペルミス、文法間違い、 <quote>つまら"
#~ "ないミス</quote> は多分<option>--revprop</option> オプション利用で一番よく"
#~ "起こるものです。 </para> </footnote></para> <screen>\n"
#~ "$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --"
#~ "revprop\n"
#~ "property 'svn:log' set on repository revision '11'\n"
#~ "$\n"
#~ "</screen> <para> このようなバージョン化されない属性の修正権限は、リポジト"
#~ "リ管理者によって 明示的に与えなくてはなりません (<xref linkend=\"svn."
#~ "reposadmin.create.hooks\"/>参照)。この属性はバージョン化されない ので注意"
#~ "して編集なければ情報を失う危険があります。リポジトリ管理者は この危険から"
#~ "守るための仕組みを作ることはできますが、デフォルトでは バージョン化されな"
#~ "い属性の変更は不可になっています。 </para> </sidebar> <para> そしてファイ"
#~ "ルの中身の場合と同じように、属性の変更はローカルな 修正にしかすぎず、"
#~ "<command>svn commit</command>でリポジトリに コミットして初めて修正が確定し"
#~ "ます。変更はやはり簡単に取り消す こともできます&mdash;<command>svn "
#~ "revert</command> コマンドは ファイルやディレクトリを編集前の状態に戻し、そ"
#~ "の内容、属性、 などすべてについてもそうです。さらに、 <command>svn "
#~ "status</command> や <command>svn diff</command> コマンドを使って、ファイル"
#~ "やディレクトリ属性の状態について 有用な情報を受け取ることができます。 </"
#~ "para> <screen>\n"
#~ "$ svn status calc/button.c\n"
#~ " M     calc/button.c\n"
#~ "$ svn diff calc/button.c\n"
#~ "Property changes on: calc/button.c\n"
#~ "___________________________________________________________________\n"
#~ "Name: copyright\n"
#~ "   + (c) 2003 Red-Bean Software\n"
#~ "\n"
#~ "$\n"
#~ "</screen> <para> <command>status</command> サブコマンドが<literal>M</"
#~ "literal> を最初のコラムではなく、二番目のコラムに表示するのに注意です。 こ"
#~ "れは、<filename>calc/button.c</filename>の属性を修正したが、 ファイルの内"
#~ "容は変更していないことを示しています。 属性も内容も変更すれば、"
#~ "<literal>M</literal> は、最初のコラム にも二番目のコラムにも表示されま"
#~ "す。 (<xref linkend=\"svn.tour.cycle.examine.status\"/>参照)。</para> "
#~ "<sidebar> <title>属性の衝突</title> <para> ファイルの内容と同様、ローカル"
#~ "の属性変更は別の人のコミットに よる修正と衝突するかも知れません。作業コ"
#~ "ピーを更新して、自分 自身の修正を壊してしまうようなバージョン化されたリ"
#~ "ソースの 属性の変更を受け取った場合、Subversionはそのリソースが衝突の 状態"
#~ "にあることを報告します。 </para> <screen>\n"
#~ "% svn update calc\n"
#~ "M  calc/Makefile.in\n"
#~ " C calc/button.c\n"
#~ "Updated to revision 143.\n"
#~ "$ \n"
#~ "</screen> <para> Subversionはまた、衝突したリソースのある同じディレクトリ"
#~ "に <filename>.prej</filename> の拡張子を持ったファイル を作ります。この中"
#~ "に、衝突の詳細が書かれています。このファイル の内容を確認して、衝突をどの"
#~ "ように解消するかを決めてください。 衝突が解消されるまで、<command>svn "
#~ "status</command> の出力の 二番目のコラムに<literal>C</literal> が表示され"
#~ "て、ローカル修正 をコミットしようとしても失敗することを示します。 </para> "
#~ "<screen>\n"
#~ "$ svn status calc\n"
#~ " C     calc/button.c\n"
#~ "?      calc/button.c.prej\n"
#~ "$ cat calc/button.c.prej \n"
#~ "prop 'linecount': user set to '1256', but update set to '1301'.\n"
#~ "$\n"
#~ "</screen> <para> 属性の衝突を解消するには、衝突した属性が正しい値を含んで"
#~ "いるか どうかを確認してから、<command>svn resolved</command> コマンドを "
#~ "使ってSubversionに手で問題を解消したことを報告してください。 </para> </"
#~ "sidebar>"
#~ msgid ""
#~ "As you can see, the presence of property modifications has no outstanding "
#~ "effect on the typical Subversion workflow. Your general patterns of "
#~ "updating your working copy, checking the status of your files and "
#~ "directories, reporting on the modifications you have made, and committing "
#~ "those modifications to the repository are completely immune to the "
#~ "presence or absence of properties. The <command>svn</command> program has "
#~ "some additional subcommands for actually making property changes, but "
#~ "that is the only noticeable asymmetry."
#~ msgstr ""
#~ "見たように、属性の修正は典型的なSubversionのワークフローにはあまり 大きな"
#~ "影響を与えません。作業コピーを更新し、ファイルとディレクトリの 状態を"
#~ "チェックし、自分のした変更点について報告し、そのような修正点を リポジトリ"
#~ "にコミットするという一般的なパターンは属性の存在や非存在 とは完全に無関係"
#~ "です。 <command>svn</command>プログラムにはいくつかの 追加のサブコマンドが"
#~ "あり、実際に属性変更することができます。 しかし、それは、属性関連コマンド"
#~ "の目に見える唯一の非対象性です。"
#~ msgid "Special Properties"
#~ msgstr "特殊な属性"
#~ msgid ""
#~ "Subversion has no particular policy regarding properties&mdash;you can "
#~ "use them for any purpose. Subversion asks only that you not use property "
#~ "names that begin with the prefix <literal>svn:</literal>. That's the "
#~ "namespace that it sets aside for its own use. In fact, Subversion defines "
#~ "certain properties that have magical effects on the files and directories "
#~ "to which they are attached. In this section, we'll untangle the mystery, "
#~ "and describe how these special properties make your life just a little "
#~ "easier."
#~ msgstr ""
#~ "Subversionは属性について特別のポリシーを持っていません&mdash;どのような 目"
#~ "的にも使うことができます。Subversionは、<literal>svn:</literal>という プレ"
#~ "フィックスの付いた属性名を使うのを禁じているだけです。これが、 Subversion"
#~ "自身が使う属性の名前空間です。実際、Subversionは、ファイルや ディレクトリ"
#~ "に特殊な効果をおよぼすようなある種の属性を定義しています。 この節ではこの"
#~ "神秘をときあかし、どうやってこれら特殊な属性が、あなたの Subversionライフ"
#~ "をちょっとだけ楽にするかについて説明します。"
#~ msgid ""
#~ "The <literal>svn:executable</literal> property is used to control a "
#~ "versioned file's filesystem-level execute permission bit in a semi-"
#~ "automated way. This property has no defined values&mdash;its mere "
#~ "presence indicates a desire that the execute permission bit be kept "
#~ "enabled by Subversion. Removing this property will restore full control "
#~ "of the execute bit back to the operating system."
#~ msgstr ""
#~ "<literal>svn:executable</literal> 属性は半自動的なやり方で バージョン管理"
#~ "されているファイルのファイルシステム上の実行 権限を制御するのに使われま"
#~ "す。この属性は属性値を何も定義 しません&mdash;単に属性名が存在していれば、"
#~ "Subversionによって実行ビット が保存されます。この属性を削除すると、実行"
#~ "ビットの全制御は オペレーティングシステムに戻されます。"
#~ msgid ""
#~ "The <literal>svn:ignore</literal> property contains a list of file "
#~ "patterns which certain Subversion operations will ignore. Perhaps the "
#~ "most commonly used special property, it works in conjunction with the "
#~ "<literal>global-ignores</literal> run-time configuration option (see "
#~ "<xref linkend=\"svn.advanced.confarea.opts.config\"/>) to filter "
#~ "unversioned files and directories out of commands <command>svn status</"
#~ "command>, <command>svn add</command>, and <command>svn import</command>."
#~ msgstr ""
#~ "<literal>svn:ignore</literal> 属性はある種のSubversion操作が無視する ファ"
#~ "イルパターンのリストを含んでいます。多分もっともよく利用される 特殊属性"
#~ "で、<literal>global-ignores</literal> 実行時設定オプションと ともに利用さ"
#~ "れます。 (<xref linkend=\"svn.advanced.confarea.opts.config\"/>参照)。 そ"
#~ "れを使って、バージョン化されていないファイルとディレクトリを <command>svn "
#~ "status</command>、<command>svn add</command>、そして <command>svn import</"
#~ "command>コマンドの対象から除外します。"
#~ msgid ""
#~ "The rationale behind the <literal>svn:ignore</literal> property is easily "
#~ "explained. Subversion does not assume that every file or subdirectory in "
#~ "a working copy directory is intended for version control. Resources must "
#~ "be explicitly placed under Subversion's management using the <command>svn "
#~ "add</command> or <command>svn import</command> commands. As a result, "
#~ "there are often many resources in a working copy that are not versioned."
#~ msgstr ""
#~ "<literal>svn:ignore</literal>属性の背後にある理由は簡単に説明できます。 "
#~ "Subversionは、作業コピーディレクトリにあるすべてのファイルとサブディレクト"
#~ "リ がバージョン管理下にあるとは仮定しません。リソースは<command>svn add</"
#~ "command> や<command>svn import</command>コマンドを使って明示的にSubversion"
#~ "管理下に 置く必要があります。結果としてしばしば作業コピー中の多くのリソー"
#~ "スが バージョン管理下にないことがあります。"
#~ msgid ""
#~ "Now, the <command>svn status</command> command displays as part of its "
#~ "output every unversioned file or subdirectory in a working copy that is "
#~ "not already filtered out by the <literal>global-ignores</literal> option "
#~ "(or its built-in default value). This is done so that users can see if "
#~ "perhaps they've forgotten to add a resource to version control."
#~ msgstr ""
#~ "<command>svn status</command> コマンドは出力の一部として作業コピーに ある"
#~ "バージョン化されていないファイルやサブディレトクリを、 <literal>global-"
#~ "ignores</literal> オプション(あるいはその組み込みの デフォルト値によって)"
#~ "によって、まだフィルタされていないものについてのみ表示します。 このように"
#~ "振る舞うのは、ユーザが、あるリソースをバージョン管理下に 追加するのを忘れ"
#~ "たときに、そのことがわかるようにするためです。"
#~ msgid ""
#~ "But Subversion cannot possibly guess the names of every resource that "
#~ "should be ignored. Also, quite often there are things that should be "
#~ "ignored in <emphasis>every</emphasis> working copy of a particular "
#~ "repository. To force every user of that repository to add patterns for "
#~ "those resources to their run-time configuration areas would be not just a "
#~ "burden, but has the potential to clash with the configuration needs of "
#~ "other working copies that the user has checked out."
#~ msgstr ""
#~ "しかしSubversionは無視すべきすべてのリソースの名前を推測できる わけではあ"
#~ "りません。さらに、非常によく、特定のリポジトリの、 <emphasis>すべての</"
#~ "emphasis> 作業コピー中で無視したいものが あったりします。そのリポジトリの"
#~ "すべてのユーザに、それぞれの実行時設定 領域に特定のリソースパターンを追加"
#~ "するように強いるのは、負担になる だけではなく、ユーザがチェックアウトした"
#~ "別の作業コピーの設定によって 壊れてしまう危険があります。"
#~ msgid ""
#~ "The solution is to store ignore patterns that are unique to the resources "
#~ "likely to appear in a given directory with the directory itself. Common "
#~ "examples of unversioned resources that are basically unique to a "
#~ "directory, yet likely to appear there, include output from program "
#~ "compilations. Or&mdash;to use an example more appropriate to this "
#~ "book&mdash;the HTML, PDF, or PostScript files generated as the result of "
#~ "a conversion of some source DocBook XML files to a more legible output "
#~ "format."
#~ msgstr ""
#~ "これを解決するには、あるディレクトリに現れるかも知れないリソースを 区別し"
#~ "て無視できるようなパターンを、ディレクトリ自体に保存することです。 バー"
#~ "ジョン化されないリソースのよくある例で、基本的にはディレクトリごとに ユ"
#~ "ニークだが、現れることがあるのは、プログラムのコンパイルからの出力 などが"
#~ "あります。あるいは&mdash;この本自身を例にとれば&mdash;HTML, PDF, "
#~ "PostScriptファイルなどで、これらはあるDocBook XML入力ファイルを、もっと 読"
#~ "みやすい出力形式に変換した結果生成されるものです。"
#~ msgid ""
#~ "For this purpose, the <literal>svn:ignore</literal> property is the "
#~ "solution. Its value is a multi-line collection of file patterns, one "
#~ "pattern per line. The property is set on the directory in which you wish "
#~ "the patterns to be applied. <footnote> <para>The patterns are strictly "
#~ "for that directory&mdash;they do not carry recursively into "
#~ "subdirectories.</para> </footnote> For example, say you have the "
#~ "following output from <command>svn status</command>:"
#~ msgstr ""
#~ "このような意味で、<literal>svn:ignore</literal>属性が解決法に なります。そ"
#~ "の値はファイルパターンの複数行のあつまりで、一行に 一つのパターンを書きま"
#~ "す。属性は、パターンを適用したいと 思うディレクトリに設定されます。 "
#~ "<footnote> <para> パターンはそのディレクトリのみに制限されます&mdash;サブ"
#~ "ディレクトリに 再帰的に伝わることはありません。 </para> </footnote> たとえ"
#~ "ば、<command>svn status</command>からの以下の出力が あったとします:"

#, fuzzy
#~ msgid "Revision"
#~ msgstr ""
#~ "#-#-#-#-#  ch07.pot  #-#-#-#-#\n"
#~ "Revision\n"
#~ "#-#-#-#-#  ch09.pot  #-#-#-#-#\n"
#~ "リビジョン"
#~ msgid "Keywords and Spurious Differences"
#~ msgstr "キーワードと、偽の差分"
#~ msgid ""
#~ "The user-visible result of keyword substitution might lead you to think "
#~ "that every version of a file with that feature in use differs from the "
#~ "previous version in at least the area where the keyword anchor was "
#~ "placed. However, this is actually not the case. While checking for local "
#~ "modifications during <command>svn diff</command>, and before transmitting "
#~ "those local modifications during <command>svn commit</command>, "
#~ "Subversion <quote>un-substitutes</quote> any keywords that it previously "
#~ "substituted. The result is that the versions of the file that are stored "
#~ "in the repository contain only the real modifications that users make to "
#~ "the file."
#~ msgstr ""
#~ "キーワード置換による目に見える形の結果として、この機能を使って バージョン"
#~ "管理されているファイルは、少なくとも一箇所、内容が違って いると考えるかも"
#~ "知れません。この箇所とは、キーワードアンカーが 置換された場所です。しか"
#~ "し、実際にはこういうことは起こりません。 ローカルな修正点を<command>svn "
#~ "diff</command>で調べるときと、 <command>svn commit</command>でローカル修正"
#~ "を転送する前では、 Subversion は以前に置換されたどんなキーワードも<quote>"
#~ "もう一度置換 することはありません</quote>。結果として、リポジトリに格納さ"
#~ "れた ファイルのバージョンはユーザがファイルにした実際の修正だけが含まれて "
#~ "います。"
#~ msgid ""
#~ "The <literal>svn:externals</literal> property contains instructions for "
#~ "Subversion to populate a versioned directory with one or more other "
#~ "checked-out Subversion working copies. For more information on this "
#~ "keyword and its use, see <xref linkend=\"svn.advanced.externals\"/>."
#~ msgstr ""
#~ "<literal>svn:externals</literal> 属性は一つ以上のチェックアウト された"
#~ "Subversion作業コピーでバージョン管理されたディレクトリを 作るための命令を"
#~ "含んでいます。このキーワードに関するより詳しい情報 は<xref linkend=\"svn."
#~ "advanced.externals\"/>を見てください。"
#~ msgid ""
#~ "The <literal>svn:special</literal> property is the only <literal>svn:</"
#~ "literal> property that isn't meant to be directly set or modified by "
#~ "users. Subversion automatically sets this property whenever a "
#~ "<quote>special</quote> object is scheduled for addition, such as a "
#~ "symbolic link. The repository stores an <literal>svn:special</literal> "
#~ "object as an ordinary file. However, when a client sees this property "
#~ "during checkouts or updates, it interprets the contents of the file and "
#~ "translates the item back into the special type of object. In versions of "
#~ "Subversion current at the time of writing, only versioned symbolic links "
#~ "have this property attached, but in future versions of Subversion other "
#~ "special types of nodes will probably use this property as well."
#~ msgstr ""
#~ "<literal>svn:special</literal>属性は <literal>svn:</literal>属性 のなかで"
#~ "ユーザが直接設定したり修正することのできない唯一のものです。 Subversion は"
#~ "シンボリックリンクのような<quote>特殊な(special)</quote> オブジェクトが追"
#~ "加の予告をされるときは常にこの属性を自動的に設定 します。リポジトリは"
#~ "<literal>svn:special</literal>オブジェクトを 通常のファイルのようにして保"
#~ "存します。しかしクライアントがこの属性 をチェックアウトあるいは更新中に見"
#~ "ようとすると、ファイルの内容を見て そのアイテムを特殊なオブジェクトと解釈"
#~ "します。いまこれを書いている時点 の Subversion のバージョンでは バージョン"
#~ "化されたシンボリックリンクだけがこの属性を持ちますが今後の Subversion では"
#~ "おそらく他の特殊なノードもこの属性を持つことになるで しょう。"
#~ msgid ""
#~ "Note: Windows clients don't have symbolic links, and thus ignore any "
#~ "<literal>svn:special</literal> files coming from a repository that claim "
#~ "to be symbolic links. On Windows, the user ends up with an ordinary "
#~ "versioned file in the working copy."
#~ msgstr ""
#~ "注意: Windows クライアントはシンボリックリンクを持たないのでリポジトリ か"
#~ "ら取得するファイルが、<literal>svn:special</literal>によってシンボリッ ク"
#~ "リンクであるとされていてもその属性は無視されます。Windows では ユーザは作"
#~ "業コピー中に通常のバージョン化されたファイルとしてこれを 受け取ることにな"
#~ "ります。"
#~ msgid ""
#~ "To learn more about how, when, and why this property should be used, see "
#~ "<xref linkend=\"svn.advanced.locking.lock-communication\"/>."
#~ msgstr ""
#~ "この属性がどのように、いつ、そしてなぜ有用なのかについての詳しい 情報は "
#~ "<xref linkend=\"svn.advanced.locking.lock-communication\"/> を見てくださ"
#~ "い。"
#~ msgid ""
#~ "Subversion's <quote>copy-modify-merge</quote> model is optimal when users "
#~ "are collaborating on projects that consist of line-based text files, such "
#~ "as program source code. However, as discussed in <xref linkend=\"svn."
#~ "basic.vsn-models.copy-merge.sb-1\"/>, sometimes one has to use the "
#~ "<quote>lock-modify-unlock</quote> model instead of Subversion's standard "
#~ "concurrent model. When a file consists of binary data, it's often "
#~ "difficult or impossible to merge two sets of changes made in parallel by "
#~ "different users. For this reason, Subversion 1.2 and later offers a "
#~ "feature known as <firstterm>locking</firstterm>, often known as "
#~ "<quote>reserved checkouts</quote> in other version control systems."
#~ msgstr ""
#~ "Subversion の <quote>コピー・修正・マージ</quote> モデルは プログラムソー"
#~ "スコードのように行を基本としたテキストファイルからなる プロジェクト上で共"
#~ "同作業する場合には最適です。しかし <xref linkend=\"svn.basic.vsn-models."
#~ "copy-merge.sb-1\"/>で議論した ように、時には Subversion の標準的な共同作業"
#~ "モデルのかわりに <quote>ロック・修正・ロック解除</quote>モデルを使わなくて"
#~ "はならないことも あります。ファイルがバイナリデータから構成されている場"
#~ "合、異なるユーザに よる二つの修正をマージするのは困難であったり不可能なこ"
#~ "とがよくあります。 このため Subversion 1.2 とそれ以降では<firstterm>ロック"
#~ "</firstterm>、 あるいは他のバージョン管理システムでは<quote>保護された"
#~ "チェックアウト (reserved checkouts)</quote>として知られている機能を提供し"
#~ "ています。"
#~ msgid ""
#~ "<emphasis>Aiding communication</emphasis>. Prevent users from wasting "
#~ "time on unmergeable changes. If Harry has reserved the right to change "
#~ "<filename>foo.jpg</filename>, then it should be easy for Sally to notice "
#~ "this fact and avoid working on the file."
#~ msgstr ""
#~ "<emphasis>開発者間のコミュニケーション支援</emphasis>. ユーザがマージ不能"
#~ "な変更をしてしまうような時間のロスを防ぎます。Harry が <filename>foo.jpg</"
#~ "filename>の変更権限を取得した場合、Sally はすぐにそれに 気づいて同じファイ"
#~ "ルに対する作業を避けることができるようにすべきです。"
#~ msgid ""
#~ "Subversion's locking feature is currently limited to files only&mdash;"
#~ "it's not yet possible to reserve access to a whole directory tree."
#~ msgstr ""
#~ "Subversion のロック機能は現時点ではファイルだけに制限されています&mdash; "
#~ "ディレクトリツリー全体へのアクセスに対する利用はまだできません。"
#~ msgid ""
#~ "<emphasis role=\"bold\">User authentication</emphasis>. The client "
#~ "performing the commit must be authenticated as the lock owner."
#~ msgstr ""
#~ "<emphasis role=\"bold\">ユーザ認証</emphasis>。 コミットを実行しようとする"
#~ "クライアントはロック所有者として認証されなくては なりません。"
#~ msgid ""
#~ "<emphasis role=\"bold\">Software authorization</emphasis>. The user's "
#~ "working copy must send the lock token with the commit, proving that it "
#~ "knows exactly which lock it's using."
#~ msgstr ""
#~ "<emphasis role=\"bold\">ソフトウェアによる認可 </emphasis>。ユーザの作業コ"
#~ "ピーはコミットと共にロック・トークン を送信しなくてはならず、これによって"
#~ "どのロックを利用中であるかを正しく知る ことができます。"
#~ msgid ""
#~ "A lock token isn't an authentication token, so much as an "
#~ "<emphasis>authorization</emphasis> token. The token isn't a protected "
#~ "secret. In fact, a lock's unique token is discoverable by anyone who runs "
#~ "<command>svn info URL</command>."
#~ msgstr ""
#~ "ロック・トークンは認証トークンではなく、<emphasis>認可</emphasis> トークン"
#~ "です。ロック・トークンはセキュリティ的に保護されていません。 実際、ロッ"
#~ "ク・トークンは <command>svn info URL</command>を実行することに よって誰で"
#~ "も調べることができます。"
#~ msgid ""
#~ "To learn more about repository hooks, see <xref linkend=\"svn.reposadmin."
#~ "create.hooks\"/>."
#~ msgstr ""
#~ "リポジトリフックについてのより詳しい理解には <xref linkend=\"svn."
#~ "reposadmin.create.hooks\"/>を見てください。"
#~ msgid ""
#~ "Subversion's solution to this problem is provide a mechanism to remind "
#~ "users that a file ought to be locked <emphasis>before</emphasis> the "
#~ "editing begins."
#~ msgstr ""
#~ "この問題に対する Subversion での解決策は編集を始める<emphasis>前に</"
#~ "emphasis> ユーザにそのファイルをまずはロックすべきであることを思い起こして"
#~ "もらうための 仕組みを提供することです。"
#~ msgid ""
#~ "The mechanism is a special property, <literal>svn:needs-lock</literal>. "
#~ "If the property is attached to a file (the value is irrelevant), then the "
#~ "file will have read-only permissions. When the user locks the file and "
#~ "receives a lock token, the file becomes read-write. When the lock is "
#~ "released&mdash;either explicitly unlocked, or released via commit&mdash;"
#~ "the file returns to read-only again."
#~ msgstr ""
#~ "この仕組みは特殊な属性を<literal>svn:needs-lock</literal>用意することで 実"
#~ "現しています。この属性がファイルにつくと(この場合の属性値はどのようで あっ"
#~ "てもかまいません)、ファイルは読み込み専用のパーミッションを持つように なり"
#~ "ます。ユーザがファイルをロックし、ロック・トークンを取得するとファイルは "
#~ "読み書き可能となります。ロックが解放されると&mdash;これは明示的にロック解"
#~ "放する かコミットを通じて自動的に解放されるかのどちらかですが&mdash; ファ"
#~ "イルは再び 読み込み専用に戻ります。"
#~ msgid "When the commandline client sees a command of the form:"
#~ msgstr "コマンドラインクライアントで以下の形のコマンドを指定したとき:"
#~ msgid "...it performs the following algorithm:"
#~ msgstr "...以下のようなアルゴリズムが実行されます:"
#~ msgid ""
#~ "Remember that even when you don't explicitly supply a peg-revision, it's "
#~ "still present. It defaults to BASE for working copy items, and to HEAD "
#~ "for URLs."
#~ msgstr ""
#~ "明示的にペグ・リビジョンを指定しなくても、それが考慮されることに注意して "
#~ "ください。このデフォルトは、作業コピー中のアイテムの場合は BASE リビジョ"
#~ "ン、 URL 中のアイテムの場合には HEAD リビジョンになります。"
#~ msgid ""
#~ "And when executed, it has the expected results. Peg revisions generally "
#~ "default to a value of <literal>BASE</literal> (the revision currently "
#~ "present in the working copy) when applied to working copy paths, and of "
#~ "<literal>HEAD</literal> when applied to URLs."
#~ msgstr ""
#~ "実際に実行すると、やはり期待したとおりの結果になります。ペグリビジョン は"
#~ "一般的には作業コピーのパスにつけた場合には<literal>BASE</literal>の 値(作"
#~ "業コピーに現在存在するリビジョン) が、また URL につけた場合には "
#~ "<literal>HEAD</literal> の値が、それぞれデフォルト値になります。"
#~ msgid "Developer Information"
#~ msgstr "開発者の情報"
#~ msgid ""
#~ "Subversion is an open-source software project developed under an Apache-"
#~ "style software license. The project is financially backed by CollabNet, "
#~ "Inc., a California-based software development company. The community that "
#~ "has formed around the development of Subversion always welcomes new "
#~ "members who can donate their time and attention to the project. "
#~ "Volunteers are encouraged to assist in any way they can, whether that "
#~ "means finding and diagnosing bugs, refining existing source code, or "
#~ "fleshing out whole new features."
#~ msgstr ""
#~ "Subversion はオープンソースのソフトウェアプロジェクトで、 Apacheスタイルの"
#~ "ソフトウェアライセンスを持っています。プロジェクトは カリフォルニアに本拠"
#~ "地があるソフトウェア開発会社CollabNet, Inc., の 経済的な支援を受けていま"
#~ "す。このコミュニティはSubversionの開発を めぐって構成されていますが、この"
#~ "プロジェクトに時間を割いてもらったり 注意を向けてもらえるような形で無償援"
#~ "助してくれる人を常に歓迎して います。ボランティアはどんな形の援助もするこ"
#~ "とができます。 それは、バグを見つけたり、テストしたり、既にあるコードを改"
#~ "良したり、 まったく新しい機能を追加したりといったことを含みます。"
#~ msgid "A Brief Inventory of the Subversion Libraries"
#~ msgstr "Subversionライブラリの一覧"
#~ msgid "Library"
#~ msgstr "ライブラリ"
#~ msgid ""
#~ "The client itself also highlights modularity in the Subversion design. "
#~ "While Subversion itself comes with only a command-line client program, "
#~ "there are several third party programs which provide various forms of "
#~ "client GUI. These GUIs use the same APIs that the stock command-line "
#~ "client does. Subversion's libsvn_client library is the one-stop shop for "
#~ "most of the functionality necessary for designing a working Subversion "
#~ "client (see <xref linkend=\"svn.developer.layerlib.client\"/>)."
#~ msgstr ""
#~ "クライアント自身もまたSubversionの設計でのモジュール性をはっきり 示してい"
#~ "ます。Subversionは現在のところコマンドラインクライアント プログラムのみを"
#~ "実装していますが、SubversionのためにGUIとして振る舞う ようなサードパー"
#~ "ティーによって開発されているいくつかのプログラムが あります。このようなGUI"
#~ "も、既に実装されているコマンドクライアント と同じAPIを利用します。"
#~ "Subversionのlibsvn_client ライブラリは Subversionクライアントを設計するの"
#~ "に必要なほとんどの機能のために 利用することができます。 (<xref linkend="
#~ "\"svn.developer.layerlib.client\"/>参照)。"
#~ msgid ""
#~ "The Subversion repository library (libsvn_repos) is basically a wrapper "
#~ "library around the filesystem functionality. This library is responsible "
#~ "for creating the repository layout, making sure that the underlying "
#~ "filesystem is initialized, and so on. Libsvn_repos also implements a set "
#~ "of hooks&mdash;scripts that are executed by the repository code when "
#~ "certain actions take place. These scripts are useful for notification, "
#~ "authorization, or whatever purposes the repository administrator desires. "
#~ "This type of functionality, and other utilities provided by the "
#~ "repository library, are not strictly related to implementing a versioning "
#~ "filesystem, which is why it was placed into its own library."
#~ msgstr ""
#~ "Subversionリポジトリライブラリ(libsvn_repos)は基本的には ファイルシステム"
#~ "機能のまわりにあるラッパーライブラリです。この ライブラリはリポジトリレイ"
#~ "アウトの作成、ファイルシステムの初期化を 正しく実行すること、などに責任を"
#~ "持ちます。Libsvn_repos はまた フックを実装します&mdash;特定の処理が実行さ"
#~ "れるときにリポジトリの コードによって実行されるスクリプトです。このような"
#~ "スクリプトは 通知、認証、あるいはリポジトリ管理者が望むようなさまざまな 目"
#~ "的にとって役に立つものです。このタイプの機能と、リポジトリライブラリ に"
#~ "よって提供されるほかのユーティリティーはバージョン化ファイルシステム の実"
#~ "装に強く関連しているわけではありません。それが独自のライブラリとして 実装"
#~ "された理由です。"
#~ msgid ""
#~ "For example, here is a code segment that illustrates the use of both the "
#~ "repository and filesystem interfaces to create a new revision of the "
#~ "filesystem in which a directory is added. Note that in this example (and "
#~ "all others throughout this book), the <function>SVN_ERR()</function> "
#~ "macro simply checks for a non-successful error return from the function "
#~ "it wraps, and returns that error if it exists."
#~ msgstr ""
#~ "たとえば、ディレクトリが追加されるファイルシステムの新しい リビジョンを作"
#~ "るための、リポジトリとファイルシステムインターフェース について、使い方を"
#~ "説明したコードがあります。 この例で(そして、この本全体を通じてすべてのほか"
#~ "の例でも)、 <function>SVN_ERR()</function> マクロは単にラップした関数から"
#~ "の 失敗した場合のエラーコードのチェックです。そしてそのようなもの があれば"
#~ "そのエラーを返します。"
#~ msgid "RA-DAV (Repository Access Using HTTP/DAV)"
#~ msgstr "RA-DAV (HTTP/DAVを使ったリポジトリアクセス)"
#~ msgid ""
#~ "The libsvn_ra_dav library is designed for use by clients that are being "
#~ "run on different machines than the servers with which they communicating, "
#~ "specifically servers reached using URLs that contain the <literal>http:</"
#~ "literal> or <literal>https:</literal> protocol portions. To understand "
#~ "how this module works, we should first mention a couple of other key "
#~ "components in this particular configuration of the Repository Access "
#~ "Layer&mdash;the powerful Apache HTTP Server, and the Neon HTTP/WebDAV "
#~ "client library."
#~ msgstr ""
#~ "libsvn_ra_dav ライブラリは、サーバとは別のマシン上で 実行されているクライ"
#~ "アントによって利用されるように設計されています。 クライアントはURLを使って"
#~ "特定のサーバを指定することで通信します。 ここでいうURLは、<literal>http:</"
#~ "literal> または <literal>https:</literal> のプロトコル部分を含んでいるよう"
#~ "なものです。 どのようにこのモジュールが動作するかを理解するために、最初に"
#~ "リポジトリ アクセス層の特定の設定中にあるほかのいくつかのキーコンポーネン"
#~ "トに 触れる必要があります&mdash;それは強力な Apache HTTP サーバと、 Neon "
#~ "HTTP/WebDAV クライアントライブラリです。"
#~ msgid ""
#~ "Subversion's primary network server is the Apache HTTP Server. Apache is "
#~ "a time-tested, extensible open-source server process that is ready for "
#~ "serious use. It can sustain a high network load and runs on many "
#~ "platforms. The Apache server supports a number of different standard "
#~ "authentication protocols, and can be extended through the use of modules "
#~ "to support many others. It also supports optimizations like network "
#~ "pipelining and caching. By using Apache as a server, Subversion gets all "
#~ "of these features for free. And since most firewalls already allow HTTP "
#~ "traffic to pass through, system administrators typically don't even have "
#~ "to change their firewall configurations to allow Subversion to work."
#~ msgstr ""
#~ "Subversionの主なネットワークサーバはApache HTTP サーバです。Apache は 十分"
#~ "にテストされ、拡張可能なオープンソースのサーバプロセスで、それは まじめな"
#~ "用途に利用することができます。それはネットワークの高負荷に 持ちこたえるこ"
#~ "とができ、たくさんのプラットフォーム上で動作します。 Apacheサーバはたくさ"
#~ "んの異なる標準認証プロトコルをサポートし、 たくさんの人々によってサポート"
#~ "されたモジュールを利用することで 拡張することができます。それはまたネット"
#~ "ワークパイプラインやキャッシング のような最適化をサポートしています。サー"
#~ "バとしてApache を利用することに よって、Subversionはこれらのすべての機能を"
#~ "自由に手に入れることが できます。そして、ほとんどのファイアウォールはHTTP"
#~ "の通信を通すように 設定されているので、システム管理者は、普通はファイア"
#~ "ウォール設定 を変更する必要すらなくSubversionを動作させることができます。"
#~ msgid ""
#~ "Subversion uses HTTP and WebDAV (with DeltaV) to communicate with an "
#~ "Apache server. You can read more about this in the WebDAV section of this "
#~ "chapter, but in short, WebDAV and DeltaV are extensions to the standard "
#~ "HTTP 1.1 protocol that enable sharing and versioning of files over the "
#~ "web. Apache 2.0 and later versions come with mod_dav, an Apache module "
#~ "that understands the DAV extensions to HTTP. Subversion itself supplies "
#~ "mod_dav_svn, though, which is another Apache module that works in "
#~ "conjunction with (really, as a back-end to) mod_dav to provide "
#~ "Subversion's specific implementations of WebDAV and DeltaV."
#~ msgstr ""
#~ "SubversionはHTTPとWebDAV(DeltaV付きで) を使って、Apacheサーバと 通信しま"
#~ "す。これについては、この章の WebDAVの節を呼んでください。 しかし、簡単に言"
#~ "えば、WebDAVとDeltaV は標準的なHTTP1.1プロトコル の拡張で、それはweb上で"
#~ "ファイルの共有とバージョン化を可能にします。 Apache 2.0 は mod_dav が用意"
#~ "されていて、これは HTTP のDAV拡張を 理解するモジュールです。Subversion自身"
#~ "は mod_dav_svn をサポートして いますが、これは別の Apache モジュールで、"
#~ "mod_dav と協調して動作し、 (実際にはそのバックエンドとして)Subversion上で"
#~ "の具体的な WebDAVと DeltaVの実装となっています。"
#~ msgid ""
#~ "When communicating with a repository over HTTP, the RA loader library "
#~ "chooses libsvn_ra_dav as the proper access module. The Subversion client "
#~ "makes calls into the generic RA interface, and libsvn_ra_dav maps those "
#~ "calls (which embody rather large-scale Subversion actions) to a set of "
#~ "HTTP/WebDAV requests. Using the Neon library, libsvn_ra_dav transmits "
#~ "those requests to the Apache server. Apache receives these requests "
#~ "(exactly as it does generic HTTP requests that your web browser might "
#~ "make), notices that the requests are directed at a URL that is configured "
#~ "as a DAV location (using the <literal>&lt;Location&gt;</literal> "
#~ "directive in <filename>httpd.conf</filename>), and hands the request off "
#~ "to its own mod_dav module. When properly configured, mod_dav knows to use "
#~ "Subversion's mod_dav_svn for any filesystem-related needs, as opposed to "
#~ "the generic mod_dav_fs that comes with Apache. So ultimately, the client "
#~ "is communicating with mod_dav_svn, which binds directly to the Subversion "
#~ "Repository Layer."
#~ msgstr ""
#~ "HTTP越しにリポジトリと通信するとき、 RAローダライブラリは libsvn_ra_dav "
#~ "を サーバプロセスモジュールとして選択します。Subversionクライアントは 一般"
#~ "的な RA インターフェースを呼び出し、 libsvn_ra_dav はこのような 呼び出しを"
#~ "(それはまだ大雑把なSubversionの動作を具体化します)を、 HTTP/WebDAV要求に変"
#~ "換します。Neon ライブラリを使って、libsvn_ra_dav はこのような要求をApache"
#~ "サーバに送信します。Aapche はこのような要求 を受け取り(Webブラウザがやるの"
#~ "とまったく同じ一般的なHTTP要求ですが)、 DAV管理の位置として設定されたURLに"
#~ "振り向け( <filename>httpd.conf</filename>ファイル中の <literal>&lt;"
#~ "Location&gt;</literal> 命令を使います)、その要求を固有の mod_davモジュール"
#~ "に渡します。適切に設定されていれば、mod_dav は Apache 付属の一般的な "
#~ "mod_dav_fs ではなく、Subversionの mod_dav_svn をファイルシステムに関連した"
#~ "要求に対して利用することを 知っています。それで、最後には、このクライアン"
#~ "トは mod_dav_svn と 通信しますが、これは直接Subversionリポジトリ層に結び付"
#~ "いている ものです。"
#~ msgid ""
#~ "That was a simplified description of the actual exchanges taking place, "
#~ "though. For example, the Subversion repository might be protected by "
#~ "Apache's authorization directives. This could result in initial attempts "
#~ "to communicate with the repository being rejected by Apache on "
#~ "authorization grounds. At this point, libsvn_ra_dav gets back the notice "
#~ "from Apache that insufficient identification was supplied, and calls back "
#~ "into the Client Layer to get some updated authentication data. If the "
#~ "data is supplied correctly, and the user has the permissions that Apache "
#~ "seeks, libsvn_ra_dav's next automatic attempt at performing the original "
#~ "operation will be granted, and all will be well. If sufficient "
#~ "authentication information cannot be supplied, the request will "
#~ "ultimately fail, and the client will report the failure to the user."
#~ msgstr ""
#~ "これが実際に起こるやり取りの簡略化した説明です。たとえば、 Subversionリポ"
#~ "ジトリはApacheの認証命令によって保護されているかも知れません。 これによっ"
#~ "て、リポジトリと最初に通信しようとする試みが、認証付きApacheに よって失敗"
#~ "に終わるかも知れません。 この時点で、libsvn_ra_davはApacheから、不十分な "
#~ "認証しか得られなかったのでクライアント層に更新された認証データを 取得する"
#~ "ためにコールバックした、という通知を受けます。 もしこのデータが正しく取得"
#~ "できれば、ユーザは、許可された最初の操作 を実行する、libsvn_ra_davの次のア"
#~ "トミックな要求を探し、すべて がうまくいきます。もし十分な認証情報が与えら"
#~ "れなければ要求は最終的に 失敗し、クライアントはユーザにその旨を報告しま"
#~ "す。"
#~ msgid ""
#~ "By using Neon and Apache, Subversion gets free functionality in several "
#~ "other complex areas, too. For example, if Neon finds the OpenSSL "
#~ "libraries, it allows the Subversion client to attempt to use SSL-"
#~ "encrypted communications with the Apache server (whose own mod_ssl can "
#~ "<quote>speak the language</quote>). Also, both Neon itself and Apache's "
#~ "mod_deflate can understand the <quote>deflate</quote> algorithm (the same "
#~ "one used by the PKZIP and gzip programs), so requests can be sent in "
#~ "smaller, compressed chunks across the wire. Other complex features that "
#~ "Subversion hopes to support in the future include the ability to "
#~ "automatically handle server-specified redirects (for example, when a "
#~ "repository has been moved to a new canonical URL) and taking advantage of "
#~ "HTTP pipelining."
#~ msgstr ""
#~ "NeonとApacheを使って、Subversionはほかのいろいろな複雑な領域への 自由な機"
#~ "能を得ることもできます。たとえば、もしNeonがOpenSSLライブラリ を見つけた場"
#~ "合、それはSubversionクライアントにSSLで暗号化された 通信を、Apacheサーバと"
#~ "することを認めます。 (その固有の mod_ssl は<quote>その言語を話します</"
#~ "quote>)。また、Neon自身と Apacheのmod_deflateは<quote>deflate</quote>アル"
#~ "ゴリズムを理解できるので( PKZIPとgzipプログラムで利用されているのと同じも"
#~ "のですが)、 要求はより小さな圧縮された塊として通信路を流れます。 "
#~ "Subversionが今後サポートしたいと思っているほかの複雑な機能 としては、自動"
#~ "的にサーバ側のリダイレクトを処理すること(たとえば、 リポジトリが別の新しい"
#~ "URLに移動したような場合) や、HTTPパイプライン の恩恵にあずかること、などで"
#~ "す。"
#~ msgid "RA-SVN (Custom Protocol Repository Access)"
#~ msgstr "RA-SVN (固有のプロトコルによるリポジトリアクセス)"
#~ msgid ""
#~ "In addition to the standard HTTP/WebDAV protocol, Subversion also "
#~ "provides an RA implementation that uses a custom protocol. The "
#~ "libsvn_ra_svn module implements its own network socket connectivity, and "
#~ "communicates with a stand-alone server&mdash;the <filename>svnserve</"
#~ "filename> program&mdash;on the machine that hosts the repository. Clients "
#~ "access the repository using the <literal>svn://</literal> schema."
#~ msgstr ""
#~ "標準的なHTTP/WebDAV プロトコルに加えて, Subversionは固有の プロトコルを使"
#~ "う RAの実装も用意しています。libsvn_ra_svn モジュールは 固有のネットワーク"
#~ "ソケット接続を実装し、リポジトリのあるスタンドアロンサーバ と通信します"
#~ "&mdash;<filename>svnserve</filename>です&mdash; クライアントは"
#~ "<literal>svn://</literal> スキーマでリポジトリにアクセスで きます。"
#~ msgid ""
#~ "This RA implementation lacks most of the advantages of Apache mentioned "
#~ "in the previous section; however, it may be appealing to some system "
#~ "administrators nonetheless. It is dramatically easier to configure and "
#~ "run; setting up an <filename>svnserve</filename> process is nearly "
#~ "instantaneous. It is also much smaller (in terms of lines of code) than "
#~ "Apache, making it much easier to audit, for security reasons or "
#~ "otherwise. Furthermore, some system administrators may already have an "
#~ "SSH security infrastructure in place, and want Subversion to use it. "
#~ "Clients using ra_svn can easily tunnel the protocol over SSH."
#~ msgstr ""
#~ "この RA 実装は、前の節で触れたApacheの利点のほとんどを欠いています。 しか"
#~ "し、それはある種のシステム管理者を引きつけるかも知れません。 それは非常に"
#~ "簡単に設定し実行できます。<filename>svnserve</filename> プロセスの設定は、"
#~ "ほとんど瞬間的に終わります。またそれはApacheよりも (コード行数という意味"
#~ "で)ずっと小さく、セキュリティーや他の事情による チェックもずっと容易です。"
#~ "さらにいくつかのシステム管理者は既に SSH のセキュリティーインフラを持って"
#~ "いて、Subversionにもそれを使わせたい と思っているかも知れません。ra_svn を"
#~ "使うクライアントは SSH を介して プロトコルを簡単にトンネルすることができま"
#~ "す。"
#~ msgid "RA-Local (Direct Repository Access)"
#~ msgstr "RA-Local (リポジトリへの直接のアクセス)"
#~ msgid ""
#~ "Not all communications with a Subversion repository require a powerhouse "
#~ "server process and a network layer. For users who simply wish to access "
#~ "the repositories on their local disk, they may do so using <literal>file:"
#~ "</literal> URLs and the functionality provided by libsvn_ra_local. This "
#~ "RA module binds directly with the repository and filesystem libraries, so "
#~ "no network communication is required at all."
#~ msgstr ""
#~ "Subversionリポジトリとのすべての通信が大きなサーバプロセスとネットワーク"
#~ "層 を必要とするわけではありません。ローカルディスク上のリポジトリにアクセ"
#~ "ス したいだけのユーザにとっては、<literal>file:</literal> を使うことがで"
#~ "き、 libsvn_ra_localが提供する機能を使うことができます。 この RA モジュー"
#~ "ルは直接リポジトリとファイルシステムライブラリと 結びつくので、ネットワー"
#~ "ク通信はまったく必要ありません。"
#~ msgid ""
#~ "Subversion requires that the server name included as part of the "
#~ "<literal>file:</literal> URL be either <literal>localhost</literal> or "
#~ "empty, and that there be no port specification. In other words, your URLs "
#~ "should look like either <literal>file://localhost/path/to/repos</literal> "
#~ "or <literal>file:///path/to/repos</literal>."
#~ msgstr ""
#~ "Subversionは<literal>file:</literal> URLの一部として <literal>localhost</"
#~ "literal> か、空である サーバ名称を含むことを要求し、ポート指定はありませ"
#~ "ん。 言い方を変えると、URLは何か、 <literal>file://localhost/path/to/"
#~ "repos</literal> か <literal>file:///path/to/repos</literal> のような形のも"
#~ "のになります。"
#~ msgid "Your RA Library Here"
#~ msgstr "Your RA Library Here"
#~ msgid ""
#~ "There is an obvious benefit to accessing the Subversion APIs via a "
#~ "language binding&mdash;simplicity. Generally speaking, languages such as "
#~ "Python and Perl are much more flexible and easy to use than C or C++. The "
#~ "sort of high-level datatypes and context-driven type checking provided by "
#~ "these languages are often better at handling information that comes from "
#~ "users. As you know, humans are proficient at botching up input to a "
#~ "program, and scripting languages tend to handle that misinformation more "
#~ "gracefully. Of course, often that flexibility comes at the cost of "
#~ "performance. That is why using a tightly-optimized, C-based interface and "
#~ "library suite, combined with a powerful, flexible binding language, is so "
#~ "appealing."
#~ msgstr ""
#~ "言語連携を通じてSubversionAPI にアクセスするのは明らかに利点があります "
#~ "&mdash;単純さ、です。一般的に、Python や Perl といった言語は C や C++ を使"
#~ "うよりもずっと柔軟でやさしいものです。このような言語が用意している 高レベ"
#~ "ルデータ型と文脈依存のデータ型のチェックのようなものは、もっと うまくユー"
#~ "ザからの情報を処理します。ご存知のように、人間はプログラムの入力で ヘマを"
#~ "やらかすことにかけては達人であり、スクリプト言語はそのような間違っ た情報"
#~ "をより適切に扱える傾向になります。もちろんそのような柔軟性は しばしばパ"
#~ "フォーマンスを犠牲にしますが。これが、非常に厳しく最適化された C 言語ベー"
#~ "スのインターフェース+ライブラリ群と、強力で柔軟な連携言語 の組み合わせを利"
#~ "用するというやり方が強い説得力をもつ理由です。"
#~ msgid ""
#~ "While there are several other bits of data stored in the <filename>.svn</"
#~ "filename> directory, we will examine only a couple of the most important "
#~ "items."
#~ msgstr ""
#~ "<filename>.svn</filename> ディレクトリに格納されたデータには ほかにもいろ"
#~ "いろありますが、最も重要なアイテムのいくつかだけに ついて説明します。"
#~ msgid "Comparing the Administrative Areas of Subversion and CVS"
#~ msgstr "SubversionとCVSの管理領域の比較"
#~ msgid "The following is an example of an actual entries file:"
#~ msgstr "以下は、実際のentries ファイルの例です:"
#~ msgid "Contents of a Typical <filename>.svn/entries</filename> File"
#~ msgstr "典型的な<filename>.svn/entries</filename> ファイル"
#~ msgid ""
#~ "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"
#~ "&lt;wc-entries\n"
#~ "   xmlns=\"svn:\"&gt;\n"
#~ "&lt;entry\n"
#~ "   committed-rev=\"1\"\n"
#~ "   name=\"\"\n"
#~ "   committed-date=\"2005-04-04T13:32:28.526873Z\"\n"
#~ "   url=\"http://svn.red-bean.com/repos/greek-tree/A/D\"\n"
#~ "   last-author=\"jrandom\"\n"
#~ "   kind=\"dir\"\n"
#~ "   uuid=\"4e820d15-a807-0410-81d5-aa59edf69161\"\n"
#~ "   revision=\"1\"/&gt;\n"
#~ "&lt;entry\n"
#~ "   name=\"lambda\"\n"
#~ "   copied=\"true\"\n"
#~ "   kind=\"file\"\n"
#~ "   copyfrom-rev=\"1\"\n"
#~ "   schedule=\"add\"\n"
#~ "   copyfrom-url=\"http://svn.red-bean.com/repos/greek-tree/A/B/lambda\"/"
#~ "&gt;\n"
#~ "&lt;entry\n"
#~ "   committed-rev=\"1\"\n"
#~ "   name=\"gamma\"\n"
#~ "   text-time=\"2005-12-11T16:32:46.000000Z\"\n"
#~ "   committed-date=\"2005-04-04T13:32:28.526873Z\"\n"
#~ "   checksum=\"ada10d942b1964d359e048dbacff3460\"\n"
#~ "   last-author=\"jrandom\"\n"
#~ "   kind=\"file\"\n"
#~ "   prop-time=\"2005-12-11T16:32:45.000000Z\"/&gt;\n"
#~ "&lt;entry\n"
#~ "   name=\"zeta\"\n"
#~ "   kind=\"file\"\n"
#~ "   schedule=\"add\"\n"
#~ "   revision=\"0\"/&gt;\n"
#~ "&lt;entry\n"
#~ "   name=\"G\"\n"
#~ "   kind=\"dir\"/&gt;\n"
#~ "&lt;entry\n"
#~ "   name=\"H\"\n"
#~ "   kind=\"dir\"\n"
#~ "   schedule=\"delete\"/&gt;\n"
#~ "&lt;/wc-entries&gt;"
#~ msgstr ""
#~ "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"
#~ "&lt;wc-entries\n"
#~ "   xmlns=\"svn:\"&gt;\n"
#~ "&lt;entry\n"
#~ "   committed-rev=\"1\"\n"
#~ "   name=\"\"\n"
#~ "   committed-date=\"2005-04-04T13:32:28.526873Z\"\n"
#~ "   url=\"http://svn.red-bean.com/repos/greek-tree/A/D\"\n"
#~ "   last-author=\"jrandom\"\n"
#~ "   kind=\"dir\"\n"
#~ "   uuid=\"4e820d15-a807-0410-81d5-aa59edf69161\"\n"
#~ "   revision=\"1\"/&gt;\n"
#~ "&lt;entry\n"
#~ "   name=\"lambda\"\n"
#~ "   copied=\"true\"\n"
#~ "   kind=\"file\"\n"
#~ "   copyfrom-rev=\"1\"\n"
#~ "   schedule=\"add\"\n"
#~ "   copyfrom-url=\"http://svn.red-bean.com/repos/greek-tree/A/B/lambda\"/"
#~ "&gt;\n"
#~ "&lt;entry\n"
#~ "   committed-rev=\"1\"\n"
#~ "   name=\"gamma\"\n"
#~ "   text-time=\"2005-12-11T16:32:46.000000Z\"\n"
#~ "   committed-date=\"2005-04-04T13:32:28.526873Z\"\n"
#~ "   checksum=\"ada10d942b1964d359e048dbacff3460\"\n"
#~ "   last-author=\"jrandom\"\n"
#~ "   kind=\"file\"\n"
#~ "   prop-time=\"2005-12-11T16:32:45.000000Z\"/&gt;\n"
#~ "&lt;entry\n"
#~ "   name=\"zeta\"\n"
#~ "   kind=\"file\"\n"
#~ "   schedule=\"add\"\n"
#~ "   revision=\"0\"/&gt;\n"
#~ "&lt;entry\n"
#~ "   name=\"G\"\n"
#~ "   kind=\"dir\"/&gt;\n"
#~ "&lt;entry\n"
#~ "   name=\"H\"\n"
#~ "   kind=\"dir\"\n"
#~ "   schedule=\"delete\"/&gt;\n"
#~ "&lt;/wc-entries&gt;"
#~ msgid ""
#~ "As you can see, the entries file is essentially a list of entries. Each "
#~ "<sgmltag>entry</sgmltag> tag represents one of three things: the working "
#~ "copy directory itself (called the <quote>this directory</quote> entry, "
#~ "and noted as having an empty value for its <structfield>name</"
#~ "structfield> attribute), a file in that working copy directory (noted by "
#~ "having its <structfield>kind</structfield> attribute set to <literal>"
#~ "\"file\"</literal>), or a subdirectory in that working copy "
#~ "(<structfield>kind</structfield> here is set to <literal>\"dir\"</"
#~ "literal>). The files and subdirectories whose entries are stored in this "
#~ "file are either already under version control, or (as in the case of the "
#~ "file named <filename>zeta</filename> above) are scheduled to be added to "
#~ "version control when the user next commits this working copy directory's "
#~ "changes. Each entry has a unique name, and each entry has a node kind."
#~ msgstr ""
#~ "わかるように、entries ファイルは本質的にはエントリのリストです。 "
#~ "<sgmltag>entry</sgmltag> タグのそれぞれは三つのうちのどれかを 表現していま"
#~ "す: 作業コピーディレクトリ自身 (<quote>this directory</quote>エントリと呼"
#~ "ばれ、<structfield>name</structfield> 属性が空の値であるものとして示されて"
#~ "います)、その作業コピーディレクトリ にあるファイル(<structfield>kind</"
#~ "structfield>属性が<literal>\"file\"</literal> に設定されているものとして示"
#~ "されています)、あるいは 作業コピーのサブディレクトリ(<structfield>kind</"
#~ "structfield> がここでは <literal>\"dir\"</literal>に設定されます)。エント"
#~ "リがこのファイルに格納される ファイルとサブディレクトリは既にバージョン管"
#~ "理下にあるか(上の例の <filename>zeta</filename> ファイルのように)、この作"
#~ "業コピー ディレクトリの変更が次にコミットされるときにバージョン管理下に 追"
#~ "加することが予告されているか、です。エントリのそれぞれは ユニークな名前を"
#~ "持ち、特定のノード種別を持ちます。"
#~ msgid ""
#~ "Developers should be aware of some special rules that Subversion uses "
#~ "when reading and writing its <filename>entries</filename> files. While "
#~ "each entry has a revision and URL associated with it, note that not every "
#~ "<sgmltag>entry</sgmltag> tag in the sample file has explicit "
#~ "<structfield>revision</structfield> or <structfield>url</structfield> "
#~ "attributes attached to it. Subversion allows entries to not explicitly "
#~ "store those two attributes when their values are the same as (in the "
#~ "<structfield>revision</structfield> case) or trivially calculable from "
#~ "<footnote> <para>That is, the URL for the entry is the same as the "
#~ "concatenation of the parent directory's URL and the entry's name.</para> "
#~ "</footnote> (in the <structfield>url</structfield> case) the data stored "
#~ "in the <quote>this directory</quote> entry. Note also that for "
#~ "subdirectory entries, Subversion stores only the crucial attributes&mdash;"
#~ "name, kind, url, revision, and schedule. In an effort to reduce "
#~ "duplicated information, Subversion dictates that the method for "
#~ "determining the full set of information about a subdirectory is to "
#~ "traverse down into that subdirectory, and read the <quote>this directory</"
#~ "quote> entry from its own <filename>.svn/entries</filename> file. "
#~ "However, a reference to the subdirectory is kept in its parent's "
#~ "<filename>entries</filename> file, with enough information to permit "
#~ "basic versioning operations in the event that the subdirectory itself is "
#~ "actually missing from disk."
#~ msgstr ""
#~ "開発者は、Subversion が<filename>entries</filename> ファイルを 読み書きす"
#~ "るときに使う特別の規則に注意すべきです。 すべてのエントリは自分のリビジョ"
#~ "ンと、結びついているURLを 持っていますが、サンプルファイル中のすべての"
#~ "<sgmltag>entry</sgmltag> タグが明示的な<structfield>revision</"
#~ "structfield> や <structfield>url</structfield> 属性を持つわけではありませ"
#~ "ん。 Subversion はエントリが明示的にこの二つの属性を持たないことも 認めて"
#~ "いますが、それは、その値が、<literal>\"svn:this-dir\"</literal> エントリに"
#~ "あるデータと同じか、簡単に計算できる場合です。 <footnote> <para>つまり、エ"
#~ "ントリのURLは親ディレクトリURLと エントリ名称をつなげたものと同じとみなす"
#~ "ということです。 </para> </footnote> また、サブディレクトリのエントリにつ"
#~ "いては、Subversion は 重要な属性&mdash;名前、種別、url、リビジョン、そして"
#~ "予告状況 のみを保存するということに注意してください。重複する情報を 減らす"
#~ "ために、Subversion は、サブディレクトリに関する完全な情報 を決定する方法と"
#~ "して、そのサブディレクトリに下りていき、その ディレクトリ自身の<filename>."
#~ "svn/entries</filename> ファイルの <literal>\"svn:this-dir\"</literal> エン"
#~ "トリを読むように指示します。 しかし、サブディレクトリへの参照は、その親の "
#~ "<filename>entries</filename> ファイルに記録されていて、サブディレクトリ が"
#~ "ディスクから削除されてしまったような場合でも基本的なバージョン管理 操作を"
#~ "するのには十分な情報を持っています。"
#~ msgid "WebDAV"
#~ msgstr "WebDAV"
#~ msgid ""
#~ "WebDAV (shorthand for <quote>Web-based Distributed Authoring and "
#~ "Versioning</quote>) is an extension of the standard HTTP protocol "
#~ "designed to make the web into a read/write medium, instead of the "
#~ "basically read-only medium that exists today. The theory is that "
#~ "directories and files can be shared&mdash;as both readable and writable "
#~ "objects&mdash;over the web. RFCs 2518 and 3253 describe the WebDAV/DeltaV "
#~ "extensions to HTTP, and are available (along with a lot of other useful "
#~ "information) at <ulink url=\"http://www.webdav.org/\"></ulink>."
#~ msgstr ""
#~ "WebDAV (<quote>Webベースの分散編集とバージョン化</quote>の略)は標準的な"
#~ "HTTPプロトコルの 拡張で、基本的には読み出し専用の媒体であるwebを、読み書き"
#~ "可能な 媒体とするために設計されました。考え方としては、ディレクトリとファ"
#~ "イルは &mdash;読み書き可能なオブジェクトとして&mdash;Web上で共有できるとい"
#~ "う ものです。RFC 2518 と RFC 3253 は、HTTP の WebDAV/DeltaV 拡張について記"
#~ "述 されていて、(ほかの有用な情報とともに)<ulink url=\"http://www.webdav."
#~ "org/\"></ulink>で入手可能です。"
#~ msgid ""
#~ "A number of operating system file browsers are already able to mount "
#~ "networked directories using WebDAV. On Win32, the Windows Explorer can "
#~ "browse what it calls Web Folders (which are just WebDAV-ready network "
#~ "locations) as if they were regular shared folders. Mac OS X also has this "
#~ "capability, as do the Nautilus and Konqueror browsers (under GNOME and "
#~ "KDE, respectively)."
#~ msgstr ""
#~ "いくつかのオペレーティングシステムのファイルブラウザは既にWebDAVを 使った"
#~ "ネットワークディレクトリをマウントすることができます。 Win32では、Windows "
#~ "Explorer は Webフォルダ(それはまさに、WebDAV が用意したネットワークの場所"
#~ "ですが)と呼んでいるものを、あたかも それが普通の共有フォルダであるかのよう"
#~ "に参照することができます。 Mac OS X もこの能力があり、Nautilus やKonqueror"
#~ "ブラウザもそうです。 (これらは、GNOME と KDE 上でそれぞれ動きます)。"
#~ msgid ""
#~ "How does all of this apply to Subversion? The mod_dav_svn Apache module "
#~ "uses HTTP, extended by WebDAV and DeltaV, as one of its network "
#~ "protocols. Subversion uses mod_dav_svn to map between Subversion's "
#~ "versioning concepts and those of RFCs 2518 and 3253."
#~ msgstr ""
#~ "これらすべてはどのようにしてSubversion に適用されているのでしょうか? "
#~ "mod_dav_svn Apacheモジュールはそのうちの一つのネットワークプロトコルとし"
#~ "て WebDAVとDeltaVで拡張されたHTTPを使っています。Subversion は "
#~ "mod_dav_svn を Subversion のバージョン化の考え方と RFC 2518, 3253 との間を"
#~ "つなぐものと して利用します。"
#~ msgid ""
#~ "For a more thorough discussion of WebDAV, how it works, and how "
#~ "Subversion uses it, see <xref linkend=\"svn.webdav\"/>. Among other "
#~ "things, that appendix discusses the degree to which Subversion adheres to "
#~ "the generic WebDAV specification, and how that affects interoperability "
#~ "with generic WebDAV clients."
#~ msgstr ""
#~ "WebDAVのもっと徹底的な議論、どのように動作し、Subversionはそれを どのよう"
#~ "に使うか、については、<xref linkend=\"svn.webdav\"/>を 見てください。他の"
#~ "話題とともに、Subversion がどの程度 一般的な WebDAV の仕様を引き継いでお"
#~ "り、一般的な WebDAVクライアント との相互運用性にどんな影響を与えるかについ"
#~ "ての議論があります。"
#~ msgid ""
#~ "A memory pool is an abstract representation of a chunk of memory "
#~ "allocated for use by a program. Rather than requesting memory directly "
#~ "from the OS using the standard <function>malloc()</function> and friends, "
#~ "programs that link against APR can simply request that a pool of memory "
#~ "be created (using the <function>apr_pool_create()</function> function). "
#~ "APR will allocate a moderately sized chunk of memory from the OS, and "
#~ "that memory will be instantly available for use by the program. Any time "
#~ "the program needs some of the pool memory, it uses one of the APR pool "
#~ "API functions, like <function>apr_palloc()</function>, which returns a "
#~ "generic memory location from the pool. The program can keep requesting "
#~ "bits and pieces of memory from the pool, and APR will keep granting the "
#~ "requests. Pools will automatically grow in size to accommodate programs "
#~ "that request more memory than the original pool contained, until of "
#~ "course there is no more memory available on the system."
#~ msgstr ""
#~ "メモリプールはプログラムによって利用するために確保されたメモリ ブロックの"
#~ "抽象的な表現です。標準的な<function>malloc()</function> 関数 とその亜種を"
#~ "使ってOSから直接メモリを取得するかわりに、APRをリンクした プログラムは単に"
#~ "メモリプールを作る要求を出すことで行います。 (これには"
#~ "<function>apr_pool_create()</function> 関数を使います) APRはOSから自然なサ"
#~ "イズのメモリを確保し、そのメモリはすぐにプログラム で使うことができるよう"
#~ "になります。プログラムがプールメモリを必要と するときにはいつでも、"
#~ "<function>apr_palloc()</function>のような APR プール API 関数のどれかを使"
#~ "うことができて、それはプールから 汎用的なメモリを確保して返します。プログ"
#~ "ラムは 要求ビットとプールからのメモリを要求し続けることができて、 APRはそ"
#~ "の要求を承認し続けることができます。プールはプログラムに あわせて自動的に"
#~ "サイズが大きくなり、最初プールに含まれていたよりも 多くのメモリを要求する"
#~ "ことができます。これはシステムにメモリが なくなるまで続けることができま"
#~ "す。"
#~ msgid ""
#~ "Now, if this were the end of the pool story, it would hardly have merited "
#~ "special attention. Fortunately, that's not the case. Pools can not only "
#~ "be created; they can also be cleared and destroyed, using "
#~ "<function>apr_pool_clear()</function> and <function>apr_pool_destroy()</"
#~ "function> respectively. This gives developers the flexibility to allocate "
#~ "several&mdash;or several thousand&mdash;things from the pool, and then "
#~ "clean up all of that memory with a single function call! Further, pools "
#~ "have hierarchy. You can make <quote>subpools</quote> of any previously "
#~ "created pool. When you clear a pool, all of its subpools are destroyed; "
#~ "if you destroy a pool, it and its subpools are destroyed."
#~ msgstr ""
#~ "これでプールの話が終わりなら、特別の注意を払う必要もないのですが。 幸運に"
#~ "も、そうではありません。プールは作られるだけではありません: それは またク"
#~ "リアしたり削除することもできます。これには <function>apr_pool_clear()</"
#~ "function> と <function>apr_pool_destroy()</function> をそれぞれ利用しま"
#~ "す。 これは開発者にいくつもの&mdash;あるいは何千もの&mdash;領域をプールか"
#~ "ら 取得して、その後一度の関数呼び出して、そのすべてクリアする柔軟性を 与え"
#~ "ます。さらに、プールは階層を持っています。既に作られたどのプール にも"
#~ "<quote>サブプール</quote>を作ることができます。プールがクリアされると、そ"
#~ "のプール のすべてのサブプールは削除されます。もしプールを削除すると、その"
#~ "プール 自身と、サブプールの両方が削除されます。"
#~ msgid ""
#~ "Before we go further, developers should be aware that they probably will "
#~ "not find many calls to the APR pool functions we just mentioned in the "
#~ "Subversion source code. APR pools offer some extensibility mechanisms, "
#~ "like the ability to have custom <quote>user data</quote> attached to the "
#~ "pool, and mechanisms for registering cleanup functions that get called "
#~ "when the pool is destroyed. Subversion makes use of these extensions in a "
#~ "somewhat non-trivial way. So, Subversion supplies (and most of its code "
#~ "uses) the wrapper functions <function>svn_pool_create()</function>, "
#~ "<function>svn_pool_clear()</function>, and <function>svn_pool_destroy()</"
#~ "function>."
#~ msgstr ""
#~ "先に進める前に、開発者はSubversionソースコード中に、いま言ったような APR"
#~ "プール関数の呼び出しが、それほど多くないことに気づくでしょう。 APRプール"
#~ "は、いくつかの拡張メカニズムを持っていて、それはプールに 固有の<quote>ユー"
#~ "ザデータ</quote>を接続する能力や、プールが削除されるときに 呼び出されるク"
#~ "リーンアップ関数を登録する仕組みなどがあります。 Subversionはこのような拡"
#~ "張機能を、それほど自明ではない方法で利用します。 それで Subversion は(そし"
#~ "てそのコードを使う人のほとんどは)ラッパ関数 である "
#~ "<function>svn_pool_create()</function>, <function>svn_pool_clear()</"
#~ "function>, そして <function>svn_pool_destroy()</function> を提供していま"
#~ "す。"
#~ msgid ""
#~ "While pools are helpful for basic memory management, the pool construct "
#~ "really shines in looping and recursive scenarios. Since loops are often "
#~ "unbounded in their iterations, and recursions in their depth, memory "
#~ "consumption in these areas of the code can become unpredictable. "
#~ "Fortunately, using nested memory pools can be a great way to easily "
#~ "manage these potentially hairy situations. The following example "
#~ "demonstrates the basic use of nested pools in a situation that is fairly "
#~ "common&mdash;recursively crawling a directory tree, doing some task to "
#~ "each thing in the tree."
#~ msgstr ""
#~ "プールは基本的なメモリ管理にも役に立ちますが、ループや再帰的な状況で の"
#~ "プールの構築は本当にすばらしいものです。 ループはしばしばその繰り返し回数"
#~ "が不定であり、再帰的はその深さが不定 なので、このような領域でのコードのメ"
#~ "モリ消費量は予測することができま せん。幸運にも、ネストしたメモリプールを"
#~ "使うと、このような潜在的な 恐ろしい状況を簡単に管理することができます。以"
#~ "下の例は、よくある非常に 複雑な情報でのネストしたプールの基本的な使い方を"
#~ "示しています。 &mdash;この状況とは、ディレクトリツリーを再帰的にたどりなが"
#~ "ら、ツリーの すべての場所である処理を実行する、といったものです。"
#~ msgid "Effective Pool Usage"
#~ msgstr "効率的なプールの利用"
#~ msgid ""
#~ "/* Recursively crawl over DIRECTORY, adding the paths of all its file\n"
#~ "   children to the FILES array, and doing some task to each path\n"
#~ "   encountered.  Use POOL for the all temporary allocations, and store\n"
#~ "   the hash paths in the same pool as the hash itself is allocated in.  "
#~ "*/\n"
#~ "static apr_status_t \n"
#~ "crawl_dir (apr_array_header_t *files,\n"
#~ "           const char *directory,\n"
#~ "           apr_pool_t *pool)\n"
#~ "{\n"
#~ "  apr_pool_t *hash_pool = files-&gt;pool;  /* array pool */\n"
#~ "  apr_pool_t *subpool = svn_pool_create (pool);  /* iteration pool */\n"
#~ "  apr_dir_t *dir;\n"
#~ "  apr_finfo_t finfo;\n"
#~ "  apr_status_t apr_err;\n"
#~ "  apr_int32_t flags = APR_FINFO_TYPE | APR_FINFO_NAME;\n"
#~ "\n"
#~ "  apr_err = apr_dir_open (&amp;dir, directory, pool);\n"
#~ "  if (apr_err)\n"
#~ "    return apr_err;\n"
#~ "\n"
#~ "  /* Loop over the directory entries, clearing the subpool at the top of\n"
#~ "     each iteration.  */\n"
#~ "  for (apr_err = apr_dir_read (&amp;finfo, flags, dir);\n"
#~ "       apr_err == APR_SUCCESS;\n"
#~ "       apr_err = apr_dir_read (&amp;finfo, flags, dir))\n"
#~ "    {\n"
#~ "      const char *child_path;\n"
#~ "\n"
#~ "      /* Clear the per-iteration SUBPOOL.  */\n"
#~ "      svn_pool_clear (subpool);\n"
#~ "\n"
#~ "      /* Skip entries for \"this dir\" ('.') and its parent ('..').  */\n"
#~ "      if (finfo.filetype == APR_DIR)\n"
#~ "        {\n"
#~ "          if (finfo.name[0] == '.'\n"
#~ "              &amp;&amp; (finfo.name[1] == '\\0'\n"
#~ "                  || (finfo.name[1] == '.' &amp;&amp; finfo.name[2] == "
#~ "'\\0')))\n"
#~ "            continue;\n"
#~ "        }\n"
#~ "\n"
#~ "      /* Build CHILD_PATH from DIRECTORY and FINFO.name.  */\n"
#~ "      child_path = svn_path_join (directory, finfo.name, subpool);\n"
#~ "\n"
#~ "      /* Do some task to this encountered path. */\n"
#~ "      do_some_task (child_path, subpool);\n"
#~ "\n"
#~ "      /* Handle subdirectories by recursing into them, passing SUBPOOL\n"
#~ "         as the pool for temporary allocations.  */\n"
#~ "      if (finfo.filetype == APR_DIR)\n"
#~ "        {\n"
#~ "          apr_err = crawl_dir (files, child_path, subpool);\n"
#~ "          if (apr_err)\n"
#~ "            return apr_err;\n"
#~ "        }\n"
#~ "\n"
#~ "      /* Handle files by adding their paths to the FILES array.  */\n"
#~ "      else if (finfo.filetype == APR_REG)\n"
#~ "        {\n"
#~ "          /* Copy the file's path into the FILES array's pool.  */\n"
#~ "          child_path = apr_pstrdup (hash_pool, child_path);\n"
#~ "\n"
#~ "          /* Add the path to the array.  */\n"
#~ "          (*((const char **) apr_array_push (files))) = child_path;\n"
#~ "        }\n"
#~ "    }\n"
#~ "\n"
#~ "  /* Destroy SUBPOOL.  */\n"
#~ "  svn_pool_destroy (subpool);\n"
#~ "\n"
#~ "  /* Check that the loop exited cleanly. */\n"
#~ "  if (apr_err)\n"
#~ "    return apr_err;\n"
#~ "\n"
#~ "  /* Yes, it exited cleanly, so close the dir. */\n"
#~ "  apr_err = apr_dir_close (dir);\n"
#~ "  if (apr_err)\n"
#~ "    return apr_err;\n"
#~ "\n"
#~ "  return APR_SUCCESS;\n"
#~ "}"
#~ msgstr ""
#~ "/* Recursively crawl over DIRECTORY, adding the paths of all its file\n"
#~ "   children to the FILES array, and doing some task to each path\n"
#~ "   encountered.  Use POOL for the all temporary allocations, and store\n"
#~ "   the hash paths in the same pool as the hash itself is allocated in.  "
#~ "*/\n"
#~ "static apr_status_t \n"
#~ "crawl_dir (apr_array_header_t *files,\n"
#~ "           const char *directory,\n"
#~ "           apr_pool_t *pool)\n"
#~ "{\n"
#~ "  apr_pool_t *hash_pool = files-&gt;pool;  /* array pool */\n"
#~ "  apr_pool_t *subpool = svn_pool_create (pool);  /* iteration pool */\n"
#~ "  apr_dir_t *dir;\n"
#~ "  apr_finfo_t finfo;\n"
#~ "  apr_status_t apr_err;\n"
#~ "  apr_int32_t flags = APR_FINFO_TYPE | APR_FINFO_NAME;\n"
#~ "\n"
#~ "  apr_err = apr_dir_open (&amp;dir, directory, pool);\n"
#~ "  if (apr_err)\n"
#~ "    return apr_err;\n"
#~ "\n"
#~ "  /* Loop over the directory entries, clearing the subpool at the top of\n"
#~ "     each iteration.  */\n"
#~ "  for (apr_err = apr_dir_read (&amp;finfo, flags, dir);\n"
#~ "       apr_err == APR_SUCCESS;\n"
#~ "       apr_err = apr_dir_read (&amp;finfo, flags, dir))\n"
#~ "    {\n"
#~ "      const char *child_path;\n"
#~ "\n"
#~ "      /* Clear the per-iteration SUBPOOL.  */\n"
#~ "      svn_pool_clear (subpool);\n"
#~ "\n"
#~ "      /* Skip entries for \"this dir\" ('.') and its parent ('..').  */\n"
#~ "      if (finfo.filetype == APR_DIR)\n"
#~ "        {\n"
#~ "          if (finfo.name[0] == '.'\n"
#~ "              &amp;&amp; (finfo.name[1] == '¥0'\n"
#~ "                  || (finfo.name[1] == '.' &amp;&amp; finfo.name[2] == "
#~ "'¥0')))\n"
#~ "            continue;\n"
#~ "        }\n"
#~ "\n"
#~ "      /* Build CHILD_PATH from DIRECTORY and FINFO.name.  */\n"
#~ "      child_path = svn_path_join (directory, finfo.name, subpool);\n"
#~ "\n"
#~ "      /* Do some task to this encountered path. */\n"
#~ "      do_some_task (child_path, subpool);\n"
#~ "\n"
#~ "      /* Handle subdirectories by recursing into them, passing SUBPOOL\n"
#~ "         as the pool for temporary allocations.  */\n"
#~ "      if (finfo.filetype == APR_DIR)\n"
#~ "        {\n"
#~ "          apr_err = crawl_dir (files, child_path, subpool);\n"
#~ "          if (apr_err)\n"
#~ "            return apr_err;\n"
#~ "        }\n"
#~ "\n"
#~ "      /* Handle files by adding their paths to the FILES array.  */\n"
#~ "      else if (finfo.filetype == APR_REG)\n"
#~ "        {\n"
#~ "          /* Copy the file's path into the FILES array's pool.  */\n"
#~ "          child_path = apr_pstrdup (hash_pool, child_path);\n"
#~ "\n"
#~ "          /* Add the path to the array.  */\n"
#~ "          (*((const char **) apr_array_push (files))) = child_path;\n"
#~ "        }\n"
#~ "    }\n"
#~ "\n"
#~ "  /* Destroy SUBPOOL.  */\n"
#~ "  svn_pool_destroy (subpool);\n"
#~ "\n"
#~ "  /* Check that the loop exited cleanly. */\n"
#~ "  if (apr_err)\n"
#~ "    return apr_err;\n"
#~ "\n"
#~ "  /* Yes, it exited cleanly, so close the dir. */\n"
#~ "  apr_err = apr_dir_close (dir);\n"
#~ "  if (apr_err)\n"
#~ "    return apr_err;\n"
#~ "\n"
#~ "  return APR_SUCCESS;\n"
#~ "}"
#~ msgid ""
#~ "The previous example demonstrates effective pool usage in <emphasis>both</"
#~ "emphasis> looping and recursive situations. Each recursion begins by "
#~ "making a subpool of the pool passed to the function. This subpool is used "
#~ "for the looping region, and cleared with each iteration. The result is "
#~ "memory usage is roughly proportional to the depth of the recursion, not "
#~ "to total number of file and directories present as children of the top-"
#~ "level directory. When the first call to this recursive function finally "
#~ "finishes, there is actually very little data stored in the pool that was "
#~ "passed to it. Now imagine the extra complexity that would be present if "
#~ "this function had to <function>alloc()</function> and <function>free()</"
#~ "function> every single piece of data used!"
#~ msgstr ""
#~ "この例はループと再帰的な状況の<emphasis>両方での</emphasis> 効率的な プー"
#~ "ルの利用法を説明するものです。それぞれの再帰は関数に渡すプール のサブプー"
#~ "ルを作ることで始まります。このプールはループの領域で利用 され、それぞれの"
#~ "繰り返しでクリアされます。この結果、メモリの利用は、 大雑把にいって再帰の"
#~ "深さにだけ比例し、最上位ディレクトリの子供としての ファイルとディレクトリ"
#~ "の合計数には比例しません。この再帰関数の最初の 呼び出しが終了した時点で、"
#~ "渡したプールに保存されたデータは実際には 非常に小さなものになります。この"
#~ "関数が、<function>alloc()</function> と <function>free()</function>関数を"
#~ "一つ一つのデータに対して 呼び出さなくてはならないとしたときの複雑さを考え"
#~ "てみてください!"
#~ msgid ""
#~ "Pools might not be ideal for every application, but they are extremely "
#~ "useful in Subversion. As a Subversion developer, you'll need to grow "
#~ "comfortable with pools and how to wield them correctly. Memory usage bugs "
#~ "and bloating can be difficult to diagnose and fix regardless of the API, "
#~ "but the pool construct provided by APR has proven a tremendously "
#~ "convenient, time-saving bit of functionality."
#~ msgstr ""
#~ "プールはすべてのアプリケーションに理想的なものではないかも知れませんが "
#~ "Subversionでは非常に役に立ちます。Subversion開発者として、プールの利用 に"
#~ "親しくなり、どうやってそれを正しく使うかに精通しなくてはなりません。 メモ"
#~ "リ利用に関係したバグとメモリリークはAPIの種類によらず、 診断し、修正するの"
#~ "は難しいものですが、APR によって用意されたプール の作成は、非常に便利で、"
#~ "時間の節約につながる機能を持っています。"
#~ msgid "Contributing to Subversion"
#~ msgstr "Subversionへの貢献"
#~ msgid ""
#~ "The official source of information about the Subversion project is, of "
#~ "course, the project's website at <ulink url=\"http://subversion.tigris."
#~ "org/\"></ulink>. There you can find information about getting access to "
#~ "the source code and participating on the discussion lists. The Subversion "
#~ "community always welcomes new members. If you are interested in "
#~ "participating in this community by contributing changes to the source "
#~ "code, here are some hints on how to get started."
#~ msgstr ""
#~ "Subversion プロジェクトについての情報の醐ｷｺ�なドキュメントはもちろん、 プ"
#~ "ロジェクトウェブサイトの<ulink url=\"http://subversion.tigris.org/\"></"
#~ "ulink>です。 そこにソースコードにアクセスする方法や、メーリングリストに参"
#~ "加する 方法についての情報があります。Subversion コミュニティはいつでも 新"
#~ "しい参加者を歓迎しています。もしソースコードを変更するという形の 貢献に"
#~ "よってこのコミュニティに参加することに興味があるなら、 どんな感じに始めた"
#~ "ら良いかのヒントを挙げます。"
#~ msgid "Join the Community"
#~ msgstr "コミュニティへの参加"
#~ msgid ""
#~ "The first step in community participation is to find a way to stay on top "
#~ "of the latest happenings. To do this most effectively, you will want to "
#~ "subscribe to the main developer discussion list (<email>dev@subversion."
#~ "tigris.org</email>) and commit mail list (<email>svn@subversion.tigris."
#~ "org</email>). By following these lists even loosely, you will have access "
#~ "to important design discussions, be able to see actual changes to "
#~ "Subversion source code as they occur, and be able to witness peer reviews "
#~ "of those changes and proposed changes. These email based discussion lists "
#~ "are the primary communication media for Subversion development. See the "
#~ "Mailing Lists section of the website for other Subversion-related lists "
#~ "you might be interested in."
#~ msgstr ""
#~ "コミュニティに参加する最初のステップは最新の情報をいつでも入手できる 方法"
#~ "を見つけることです。これを一番効率的にやるには、開発者の議論のための メー"
#~ "リングリストに参加し(<email>dev@subversion.tigris.org</email>)、 コミット"
#~ "メーリングリストに参加することです (<email>svn@subversion.tigris.org</"
#~ "email>)。 このようなメーリングリストにある程度大雑把についていくだけで"
#~ "も、 重要なデザイン上の議論にアクセスできますし、Subversionソースコードへ"
#~ "の 実際の修正を見ることができますし、これらの変更の詳細なレビューに 立会"
#~ "い、変更を提案することができます。 これらの メールベースの議論の場は"
#~ "Subversion開発での最重要な コミュニケーション手段です。 他の興味のある"
#~ "Subversion関連リストについては、 Webサイトのメーリングリストのセクションを"
#~ "見てください。"
#~ msgid ""
#~ "But how do you know what needs to be done? It is quite common for a "
#~ "programmer to have the greatest intentions of helping out with the "
#~ "development, yet be unable to find a good starting point. After all, not "
#~ "many folks come to the community having already decided on a particular "
#~ "itch they would like to scratch. But by watching the developer discussion "
#~ "lists, you might see mentions of existing bugs or feature requests fly by "
#~ "that particularly interest you. Also, a great place to look for "
#~ "outstanding, unclaimed tasks is the Issue Tracking database on the "
#~ "Subversion website. There you will find the current list of known bugs "
#~ "and feature requests. If you want to start with something small, look for "
#~ "issues marked as <quote>bite-sized</quote>."
#~ msgstr ""
#~ "しかし、何が必要かということをどうやって知れば良いのでしょう? プログラマに"
#~ "とって、開発を手助けしようという大きな意図を持っては いるが、良いとっかか"
#~ "りをつかめないのはよくあることです。結局、 掻きたいと思うかゆい場所がどこ"
#~ "かを既に知っていてコミュニティに 参加する人はそれほど多くはありません。し"
#~ "かし、開発者の議論を 追いかけることによって、既に存在しているバグや、飛び"
#~ "交う機能要求 に注意を向けることができて、そのどれかがあなたの興味を引くか"
#~ "も知れま せん。また、未解決の、割り当てが決まっていない作業を探す良い場所"
#~ "と して、Subversionウェブサイト上のIssue Tracking データベースがありま"
#~ "す。 そこで現時点で既に知られているバグと、機能要求の一覧を見ることが でき"
#~ "ます。もし何か小さなことから始めたいのなら、<quote>bite-sized</quote> とい"
#~ "う印の付いた問題を見てください。"
#~ msgid "Get the Source Code"
#~ msgstr "ソースコードの取得"
#~ msgid ""
#~ "To edit the code, you need to have the code. This means you need to check "
#~ "out a working copy from the public Subversion source repository. As "
#~ "straightforward as that might sound, the task can be slightly tricky. "
#~ "Because Subversion's source code is versioned using Subversion itself, "
#~ "you actually need to <quote>bootstrap</quote> by getting a working "
#~ "Subversion client via some other method. The most common methods include "
#~ "downloading the latest binary distribution (if such is available for your "
#~ "platform), or downloading the latest source tarball and building your own "
#~ "Subversion client. If you build from source, make sure to read the "
#~ "<filename>INSTALL</filename> file in the top level of the source tree for "
#~ "instructions."
#~ msgstr ""
#~ "コードを編集するには、まずはコードを手に入れる必要があります。これは 公開"
#~ "のSubversionソースリポジトリから作業コピーをチェックアウトしなくては なら"
#~ "ないことを意味します。簡単に聞こえますが、少しだけ技巧的な作業に なりま"
#~ "す。Subversionのソースコードは、Subversion自身によってバージョン管理 され"
#~ "ているので、何か別の方法で既に動作するSubversionを取得することによって "
#~ "<quote>最初の手がかりを得る</quote>必要があります。 一番普通の方法は、最新"
#~ "のバイナリパッケージをダウンロードする(あなたの マシンで利用できるものがあ"
#~ "る場合ですが)、か、最新のソースコードのtarball をダウロードして、自分の"
#~ "Subversionクライアントを作るかです。もしソースから 生成するのであれは、手"
#~ "順についてはソースツリーの最上位にある <filename>INSTALL</filename>ファイ"
#~ "ルに必ず目を通してください。"
#~ msgid "Become Familiar with Community Policies"
#~ msgstr "コミュニティのやり方に精通すること"
#~ msgid ""
#~ "Now that you have a working copy containing the latest Subversion source "
#~ "code, you will most certainly want to take a cruise through the "
#~ "<quote>Hacker's Guide to Subversion</quote>, which is available either as "
#~ "the <filename>www/hacking.html</filename> file in the working copy, or on "
#~ "the Subversion website at <ulink url=\"http://subversion.tigris.org/"
#~ "hacking.html\"></ulink>. This guide contains general instructions for "
#~ "contributing to Subversion, including how to properly format your source "
#~ "code for consistency with the rest of the codebase, how to describe your "
#~ "proposed changes with an effective change log message, how to test your "
#~ "changes, and so on. Commit privileges on the Subversion source repository "
#~ "are earned&mdash;a government by meritocracy. <footnote> <para>While this "
#~ "may superficially appear as some sort of elitism, this <quote>earn your "
#~ "commit privileges</quote> notion is about efficiency&mdash;whether it "
#~ "costs more in time and effort to review and apply someone else's changes "
#~ "that are likely to be safe and useful, versus the potential costs of "
#~ "undoing changes that are dangerous.</para> </footnote> The "
#~ "<quote>Hacker's Guide</quote> is an invaluable resource when it comes to "
#~ "making sure that your proposed changes earn the praises they deserve "
#~ "without being rejected on technicalities."
#~ msgstr ""
#~ "これでSubversionソースコードの最新版がある作業コピーを手に入れた ので、お"
#~ "そらく作業コピーの最上位ディレクトリにある<quote>Hacker's Guide to "
#~ "Subversion</quote> を見ながらディレクトリの中をあれこれ調べたいと思うで"
#~ "しょう。これは 作業コピーの <filename>www/hacking.html</filename> ファイル"
#~ "にも、また <ulink url=\"http://subversion.tigris.org/hacking.html\"></"
#~ "ulink> にある Subversion のウェブサイトからも取得できます。このページには "
#~ "Subversionに貢献するための一般的な手続きが含まれていて、それにはどのよう"
#~ "に して、残りのコードと矛盾しない形であなたのソースコードを正しく書くかと"
#~ "か、 提案したい変更点にどのような効率的な変更ログメッセージを付けるか、ど"
#~ "のように 変更点をテストすれば良いか、などが含まれます。Subversionのソース"
#~ "リポジトリ に対するコミット権限は獲得しなくてはなりません&mdash;実力本位の"
#~ "政府によって。 <footnote> <para> これは何かのエリート主義のように見えるか"
#~ "も知れませんが、<quote>コミット 権限を獲得する</quote>という概念は効率を考"
#~ "慮してのことです&mdash; 安全で役に立つ誰かの変更を検討し適用するため努力に"
#~ "かかる時間と、 危険な変更を元に戻すという潜在的な時間との間の兼ね合いで"
#~ "す。 </para> </footnote> <quote>Hacker's Guide</quote>には自分の提案しよう"
#~ "としている変更が 技術的に拒否されることなく受け入れられるかどうかを確認す"
#~ "るためには 非常に貴重な資料です。"
#~ msgid "Make and Test Your Changes"
#~ msgstr "コードの変更とテスト"
#~ msgid ""
#~ "With the code and community policy understanding in hand, you are ready "
#~ "to make your changes. It is best to try to make smaller but related sets "
#~ "of changes, even tackling larger tasks in stages, instead of making huge, "
#~ "sweeping modifications. Your proposed changes will be easier to "
#~ "understand (and therefore easier to review) if you disturb the fewest "
#~ "lines of code possible to accomplish your task properly. After making "
#~ "each set of proposed changes, your Subversion tree should be in a state "
#~ "in which the software compiles with no warnings."
#~ msgstr ""
#~ "コードとコミュニティのポリシーを理解すれば、変更にとりかかることが できま"
#~ "す。大きな問題に取り組んでいる場合でも、巨大な、根こそぎ 既存のものと取り"
#~ "替えてしまうような修正をするかわりに、小さな、しかし関連の ある変更の集ま"
#~ "りを作ろうとするのが最良の方法です。 やろうとしていることに必要なコードの"
#~ "修正ができる限り少なければ、提案しよう としている変更はそれだけ簡単に理解"
#~ "されるでしょう(そして、検討するのも楽で しょう)。修正のセットのそれぞれを"
#~ "施したあとでは、あなたのSubversionツリーは コンパイラが警告を一つも出さな"
#~ "い状態になっているべきです。"
#~ msgid ""
#~ "Subversion has a fairly thorough <footnote> <para>You might want to grab "
#~ "some popcorn. <quote>Thorough</quote>, in this instance, translates to "
#~ "somewhere in the neighborhood of thirty minutes of non-interactive "
#~ "machine churn.</para> </footnote> regression test suite, and your "
#~ "proposed changes are expected to not cause any of those tests to fail. By "
#~ "running <command>make check</command> (in Unix) from the top of the "
#~ "source tree, you can sanity-check your changes. The fastest way to get "
#~ "your code contributions rejected (other than failing to supply a good log "
#~ "message) is to submit changes that cause failure in the test suite."
#~ msgstr ""
#~ "Subversion にはかなり徹底した <footnote> <para> 多分、ポップコーンでも食べ"
#~ "たくなるかも。ここでの<quote>徹底的な</quote>は、 非対話的なマシンで、約30"
#~ "分かかるという程度の意味に翻訳してください。 </para> </footnote> デグレー"
#~ "トをチェックするためのテストスイートがあり、 提案しようとしている変更は、"
#~ "どのようなテストでも失敗しないようになって いることが望まれます。ソースツ"
#~ "リーの最上位で<command>make check</command> を実行する(Unixの場合)ことで、"
#~ "自分の変更のチェックをすることができます。 あなたの貢献が拒絶される一番早"
#~ "い方法は(適切なログメッセージを付けなかった 場合以外は)、テストが通らない"
#~ "変更を送ることです。"
#~ msgid ""
#~ "In the best-case scenario, you will have actually added appropriate tests "
#~ "to that test suite which verify that your proposed changes work as "
#~ "expected. In fact, sometimes the best contribution a person can make is "
#~ "solely the addition of new tests. You can write regression tests for "
#~ "functionality that currently works in Subversion as a way to protect "
#~ "against future changes that might trigger failure in those areas. Also, "
#~ "you can write new tests that demonstrate known failures. For this "
#~ "purpose, the Subversion test suite allows you to specify that a given "
#~ "test is expected to fail (called an <literal>XFAIL</literal>), and so "
#~ "long as Subversion fails in the way that was expected, a test result of "
#~ "<literal>XFAIL</literal> itself is considered a success. Ultimately, the "
#~ "better the test suite, the less time wasted on diagnosing potentially "
#~ "obscure regression bugs."
#~ msgstr ""
#~ "一番良いシナリオは、実際に適切なテストを、テストスイートに追加し、 それで"
#~ "あなたの変更点が期待したように動作することです。 実際、ときどき人が貢献し"
#~ "うる最良のことは新しいテストを単に追加 することです。エラーのきっかけにな"
#~ "るような今後の修正から 守るような意味を込めて、現在のSubversionで動作して"
#~ "いる機能のために デグレードのテストを書くことができます。 また、既に知られ"
#~ "ている失敗を見せるための新しいテストを書くこともで きます。この目的のため"
#~ "にはSubversionテストスイートは、あるテストは失敗 することが期待されている"
#~ "ものだと指定することを認めます。 (<literal>XFAIL</literal>といわれます)、"
#~ "そしてSubversionが期待する形で失敗する限り、その テストの結果である"
#~ "<literal>XFAIL</literal>自体は、成醐ｻ駈ｵたとみなされます。最後に、 良いテ"
#~ "ストスイートを用意すればするだけ、わかりにくいデグレートのバグ を診断する"
#~ "ために浪費される時間を減らすことができます。"
#~ msgid "Donate Your Changes"
#~ msgstr "変更点の提供"
#~ msgid ""
#~ "After making your modifications to the source code, compose a clear and "
#~ "concise log message to describe those changes and the reasons for them. "
#~ "Then, send an email to the developers list containing your log message "
#~ "and the output of <command>svn diff</command> (from the top of your "
#~ "Subversion working copy). If the community members consider your changes "
#~ "acceptable, someone who has commit privileges (permission to make new "
#~ "revisions in the Subversion source repository) will add your changes to "
#~ "the public source code tree. Recall that permission to directly commit "
#~ "changes to the repository is granted on merit&mdash;if you demonstrate "
#~ "comprehension of Subversion, programming competency, and a <quote>team "
#~ "spirit</quote>, you will likely be awarded that permission."
#~ msgstr ""
#~ "ソースコードに対する修正をした後、明瞭でまとまったログメッセージを 作っ"
#~ "て、そのような変更を説明し、その理由を書いてください。それから メールを開"
#~ "発者用メーリングリストに送り、そこにはログメッセージと <command>svn diff</"
#~ "command>の出力(これはSubversionの最上位作業コピー で実行してください)を含"
#~ "めてください。コミュニティのメンバーが あなたの変更が受け入れられると判断"
#~ "した場合、コミット権限を持った 誰か(Subversionのソースリポジトリに新しいリ"
#~ "ビジョンを作る許可を 持っている人)が、あなたの変更を公開されたソースコード"
#~ "ツリーに 追加します。リポジトリに対して変更を直接コミットする権限は、 利点"
#~ "がある場合にだけ認められます&mdash;もしSubversionの理解や、 プログラミング"
#~ "の能力や、<quote>チームスピリット</quote>を示せば、あなたは きっとその権限"
#~ "を得ることができるでしょう。"
#~ msgid ""
#~ "Uses the contents of the file passed as an argument to this switch for "
#~ "the specified subcommand."
#~ msgstr ""
#~ "指定したサブコマンドに対し、このスイッチの引数として 渡したファイルの内容"
#~ "が使われます。"
#~ msgid "Switches"
#~ msgstr "スイッチ"
#~ msgid ""
#~ "--revision (-r) REV\n"
#~ "--username USER\n"
#~ "--password PASS\n"
#~ "--no-auth-cache\n"
#~ "--non-interactive\n"
#~ "--config-dir DIR\n"
#~ "--verbose"
#~ msgstr ""
#~ "--revision (-r) REV\n"
#~ "--username USER\n"
#~ "--password PASS\n"
#~ "--no-auth-cache\n"
#~ "--non-interactive\n"
#~ "--config-dir DIR\n"
#~ "--verbose"
#~ msgid ""
#~ "<command>svn diff [-r N[:M]] [--old OLD-TGT] [--new NEW-TGT] [PATH...]</"
#~ "command> displays the differences between <replaceable>OLD-TGT</"
#~ "replaceable> and <replaceable>NEW-TGT</replaceable>. If "
#~ "<replaceable>PATH</replaceable>s are given, they are treated as relative "
#~ "to <replaceable>OLD-TGT</replaceable> and <replaceable>NEW-TGT</"
#~ "replaceable> and the output is restricted to differences in only those "
#~ "paths. <replaceable>OLD-TGT</replaceable> and <replaceable>NEW-TGT</"
#~ "replaceable> may be working copy paths or <replaceable>URL</"
#~ "replaceable><literal>[@</literal><replaceable>REV</replaceable><literal>]"
#~ "</literal>. <replaceable>OLD-TGT</replaceable> defaults to the current "
#~ "working directory and <replaceable>NEW-TGT</replaceable> defaults to "
#~ "<replaceable>OLD-TGT</replaceable>. <replaceable>N</replaceable> defaults "
#~ "to <literal>BASE</literal> or, if <replaceable>OLD-TGT</replaceable> is a "
#~ "URL, to <literal>HEAD</literal>. <replaceable>M</replaceable> defaults to "
#~ "the current working version or, if <replaceable>NEW-TGT</replaceable> is "
#~ "a URL, to <literal>HEAD</literal>. <command>svn diff -r N</command> sets "
#~ "the revision of <replaceable>OLD-TGT</replaceable> to <replaceable>N</"
#~ "replaceable>, <command>svn diff -r N:M</command> also sets the revision "
#~ "of <replaceable>NEW-TGT</replaceable> to <replaceable>M</replaceable>."
#~ msgstr ""
#~ "<command>svn diff [-r N[:M]] [--old OLD-TGT] [--new NEW-TGT] [PATH...]</"
#~ "command> は <replaceable>OLD-TGT</replaceable> と <replaceable>NEW-TGT</"
#~ "replaceable>の間の違いを表示します。 もし<replaceable>PATH</replaceable>が"
#~ "あれば<replaceable>OLD-TGT</replaceable>や <replaceable>NEW-TGT</"
#~ "replaceable>に相対的なものとして扱われ、出力される 相違点はそのようなパス"
#~ "のみに限定されます。 <replaceable>OLD-TGT</replaceable> と "
#~ "<replaceable>NEW-TGT</replaceable> は作業コピーパスであるか "
#~ "<replaceable>URL</replaceable><literal>[@</literal><replaceable>REV</"
#~ "replaceable><literal>]</literal> であるかです。 <replaceable>OLD-TGT</"
#~ "replaceable> のデフォルトは 現在の作業コピーで、 <replaceable>NEW-TGT</"
#~ "replaceable>のデフォルトは <replaceable>OLD-TGT</replaceable>になります。 "
#~ "<replaceable>N</replaceable> のデフォルトは <literal>BASE</literal> です"
#~ "が、もし <replaceable>OLD-TGT</replaceable>が URL であれば <literal>HEAD</"
#~ "literal>になります。 <replaceable>M</replaceable>のデフォルトは現在の作業"
#~ "バージョン ですが、もし <replaceable>NEW-TGT</replaceable>が URL であれば "
#~ "<literal>HEAD</literal>になります。 <command>svn diff -r N</command>は "
#~ "<replaceable>OLD-TGT</replaceable>のリビジョンを <replaceable>N</"
#~ "replaceable>に設定します。 <command>svn diff -r N:M</command> も "
#~ "<replaceable>NEW-TGT</replaceable>のリビジョンを <replaceable>M</"
#~ "replaceable>に設定します。"
#~ msgid ""
#~ "--version\n"
#~ "--quiet (-q)"
#~ msgstr ""
#~ "--version\n"
#~ "--quiet (-q)"
#~ msgid ""
#~ "This imports the local directory <filename>myproj</filename> into the "
#~ "root of your repository:"
#~ msgstr ""
#~ "これは、ローカルディレクトリ<filename>myproj</filename>をリポジトリの根元"
#~ "に インポートします:"
#~ msgid "svn info [TARGET...]"
#~ msgstr "svn info [TARGET...]"
#~ msgid ""
#~ "--targets FILENAME\n"
#~ "--recursive (-R)\n"
#~ "--revision (-r)\n"
#~ "--config-dir DIR"
#~ msgstr ""
#~ "--targets FILENAME\n"
#~ "--recursive (-R)\n"
#~ "--revision (-r)\n"
#~ "--config-dir DIR"
#~ msgid ""
#~ "(Berkeley DB specific) Disable automatic log removal of database log "
#~ "files."
#~ msgstr ""
#~ "(Berkeley DB 固有) データベースログファイルの 自動ログ削除機能を無効にしま"
#~ "す。"
#~ msgid ""
#~ "(Berkeley DB specific) Disables fsync when committing database "
#~ "transactions."
#~ msgstr ""
#~ "(Berkeley DB 固有) データベーストランザクション コミット時に fsync をしま"
#~ "せん。"
#~ msgid ""
#~ "Run this command if you wish to verify the integrity of your repository. "
#~ "This basically iterates through all revisions in the repository by "
#~ "internally dumping all revisions and discarding the output."
#~ msgstr ""
#~ "リポジトリの完全性を検証したい場合にこのコマンドを実行してください。 これ"
#~ "は基本的には内部的にすべてのリビジョンをダンプしては出力を捨てる ことに"
#~ "よって繰り返し実行されます。"
#~ msgid "'<literal>_U</literal>'"
#~ msgstr "'<literal>_U</literal>'"
#~ msgid ""
#~ "This shows a list of all the changed files in revision 39 of a test "
#~ "repository:"
#~ msgstr ""
#~ "テストリポジトリのリビジョン99で修正したすべてのファイルの 一覧を表示しま"
#~ "す:"
#~ msgid ""
#~ "<command>svnserve</command> allows access to Subversion repositories "
#~ "using the <literal>svn</literal> network protocol. You can run svnserve "
#~ "either as a standalone server process, or you can have another process, "
#~ "such as <command>inetd</command>, <command>xinetd</command> or "
#~ "<command>sshd</command>, launch it for you."
#~ msgstr ""
#~ "<command>svnserve</command> は<literal>svn</literal>ネットワー クプロトコ"
#~ "ルによって Subversion リポジトリにアクセスすることを可 能にするものです。"
#~ "独立したサーバプロセスとしても起動できますし、 <command>inetd</command>、"
#~ "<command>xinetd</command> あるいは <command>sshd</command>のような別のプロ"
#~ "セスを使って起動すること もできます。"
#~ msgid ""
#~ "You can add TRAIL_URL to show that the working copy is not switched from "
#~ "what you expect:"
#~ msgstr ""
#~ "TRAIL_URL をつけて自分が思っている場所から作業コピーが スイッチされていな"
#~ "いことを示すこともできます:"
#~ msgid "Subversion-defined properties"
#~ msgstr "Subversion-defined properties"
#~ msgid "properties defined by Subversion to control behavior."
#~ msgstr "properties defined by Subversion to control behavior."
#~ msgid "Foreword"
#~ msgstr "まえがき"
#~ msgid ""
#~ "A bad Frequently Asked Questions (FAQ) sheet is one that is composed not "
#~ "of the questions people actually asked, but of the questions the FAQ's "
#~ "author <emphasis>wished</emphasis> people had asked. Perhaps you've seen "
#~ "the type before:"
#~ msgstr ""
#~ "だめな「よくある質問集(FAQ)」には実際にユーザが聞きたいことでは なく、著者"
#~ "がユーザに聞いて<emphasis>欲しい</emphasis>ことが書いて あります。おそらく"
#~ "経験があるでしょう:"
#~ msgid ""
#~ "&mdash; <author> <firstname>Karl</firstname> <surname>Fogel</surname> </"
#~ "author>, Chicago, 14 March, 2004"
#~ msgstr ""
#~ "&mdash; <author> <firstname>Karl</firstname> <surname>Fogel</surname> </"
#~ "author>, Chicago, 14 March, 2004"

